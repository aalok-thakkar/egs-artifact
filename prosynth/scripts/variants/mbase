#!/usr/bin/env python3

########################################################################################################################
# Provenance-aware Datalog Synthesis Tool
# Base library intended for use by all synthesis algorithms

# This file is only meant to be imported, and not executed directly from the command line
assert(__name__ != '__main__')

import collections
import json
import logging
import os
import re
import subprocess
import time
import z3

########################################################################################################################
# 1. Set up logging and timers

# 1a. Logging

logging.basicConfig(level=logging.INFO, \
                    format="[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s", \
                    datefmt="%H:%M:%S")

# 1b. Timers

timers = {}

def logTime(name, t):
    if name not in timers: timers[name] = 0
    timers[name] = timers[name] + t

def printTimers(): logging.info(timers)

import atexit
atexit.register(printTimers)

########################################################################################################################
# 2. Load rule names, relations, and output specifications

Rule = collections.namedtuple('Rule', ['name', 'z3Var'])

def loadRules(problemDirName):
    ans = { name.strip() for name in open(problemDirName + '/ruleNames.txt') if name.strip() }
    ans = { name: z3.Bool(name) for name in ans }
    return ans

def loadRelation(filename):
    ans = { line.strip() for line in open(filename) if line.strip() }
    ans = { tuple(line.split('\t')) for line in ans }
    return ans

def loadExpectedOut(problemDirName):
    ans = { name for name in os.listdir(problemDirName) if name.endswith('.expected') }
    ans = { name[:-len('.expected')] for name in ans }
    ans = { name: loadRelation(problemDirName + '/' + name + '.expected') for name in ans }
    return ans

########################################################################################################################
# 3. Query solver

def satisfyingRuleSet(solver, z3RuleVar, default):
    # Determines the set of rules that should be switched on to satisfy the current set of constraints
    # Includes presently unconstrained rules iff default is true
    startTime = time.time()
    if solver.check() == z3.unsat: return None
    model = solver.model()
    ans1 = { ruleName for ruleName, ruleVar in z3RuleVar.items() if model[ruleVar] == True }
    ans2 = { ruleName for ruleName, ruleVar in z3RuleVar.items() if model[ruleVar] == None } if default else set()
    ans = ans1 | ans2
    endTime = time.time()
    logTime('z3', endTime - startTime)
    return ans

########################################################################################################################
# 4. Analyze theta subsumptions

#    Consider two rules rs, rl as follows:
#    rs: hs :- b1, b2, ..., bm.
#    rl: hl :- c1, c2, ..., cn.
#    such that hs = hl, and such that { b1, b_2, ..., bm } is a subset of { c1, c2, ..., cn }.
#    Then, we add the constraint not(rl) => not(rs).

def analyzeThetaSubsumptions(problemDirName, z3RuleVar, solver):
    ruleTexts = [ line for line in open(problemDirName + '/rules.dl') if ':-' in line ]
    literalRegex = re.compile(r'\w+\([^\)]*\)')
    ruleTexts = [ literalRegex.findall(rule) for rule in ruleTexts ]
    ruleTexts = [ (rule[0], set(rule[1:-1]), rule[-1]) for rule in ruleTexts ]

    idRegex = re.compile(r'\w+')
    ans = set()
    for heads, bodys, ns in ruleTexts:
        assert(ns.startswith('Rule('))
        ns = idRegex.findall(ns)[1]
        for headl, bodyl, nl in ruleTexts:
            assert(nl.startswith('Rule('))
            nl = idRegex.findall(nl)[1]
            if heads == headl and bodys.issubset(bodyl) and ns != nl:
                logging.info('Rule {} subsumes rule {}'.format(ns, nl))
                vs = z3RuleVar[ns]
                vl = z3RuleVar[nl]
                ans.add((ns, nl))
                solver.add(z3.Implies(z3.Not(vl), z3.Not(vs)))

    return ans

########################################################################################################################
# 5. Helper methods to create Rule.facts files and to communicate with Souffle

def execSouffleCmd(souffle, cmd):
    startTime = time.time()
    print(cmd, file=souffle.stdin)
    souffle.stdin.flush()
    response = [ souffle.stdout.readline().strip() ]
    while response[-1] != '###': response.append(souffle.stdout.readline().strip())
    response = response[:-1]
    ans = '\n'.join(response)
    endTime = time.time()
    logTime('souffle', endTime - startTime)
    return ans

def runNoProvSouffle(problemDirName, expectedOut, ruleSet):
    with open(problemDirName + '/Rule.facts', 'w') as outFile:
        for name in ruleSet: print(name, file=outFile)

    startTime = time.time()
    subprocess.run([ problemDirName + '/a.out', '-F', problemDirName, '-D', problemDirName ])
    endTime = time.time()
    logTime('souffle', endTime - startTime)
    tuplesProduced = { relName: loadRelation(problemDirName + '/' + relName + '.csv') for relName in expectedOut }
    return tuplesProduced

def initProvSouffle(problemDirName, expectedOut, ruleSet):
    with open(problemDirName + '/Rule.facts', 'w') as outFile:
        for name in ruleSet: print(name, file=outFile)

    startTime = time.time()
    souffle = subprocess.Popen([ problemDirName + '/a.out', '-F', problemDirName, '-D', problemDirName ], \
                               stdin=subprocess.PIPE, \
                               stdout=subprocess.PIPE, \
                               universal_newlines=True)
    while souffle.stdout.readline().strip() != '###': pass
    while souffle.stdout.readline().strip() != '###': pass
    execSouffleCmd(souffle, 'format json')
    endTime = time.time()
    logTime('souffle', endTime - startTime)
    tuplesProduced = { relName: loadRelation(problemDirName + '/' + relName + '.csv') for relName in expectedOut }
    return (souffle, tuplesProduced)

########################################################################################################################
# 6. Methods to query and manipulate provenance information
#    Formally, the provenance object returned by Souffle is a list of hypothesis provenance objects H*, each of which is
#    of the form:
#    1. { 'axiom': T }, for a tuple T, or
#    2. { 'premises': T, 'children': H* }, for a tuple T, and a list of hypothesis provenance objects, H*

def printSouffleString(relName, t):
    t = tuple( '"{}"'.format(x) for x in t )
    t = ', '.join(t)
    return '{}({})'.format(relName, t)

def parseSouffleString(string):
    startTime = time.time()
    xs = string.split('(')
    relName, xs = [ x.strip() for x in xs ]
    xs = xs.split(')')[0].strip()
    xs = [ x.strip() for x in xs.split(',') ]
    xs = tuple([ x[1:-1].strip() if x.startswith('"') and x.endswith('"') else x for x in xs ])
    ans = (relName, xs)
    endTime = time.time()
    return ans

def collectAxioms(provenance):
    if type(provenance) is dict:
        if 'axiom' in provenance:
            return { parseSouffleString(provenance['axiom']) }
        else:
            assert('children' in provenance)
            return collectAxioms(provenance['children'])
    elif type(provenance) is list: return { axiom for elem in provenance for axiom in collectAxioms(elem) }
    else: return set()

def collectIntermediateConclusions(provenance):
    if type(provenance) is dict:
        if 'axiom' in provenance: return set()
        else:
            assert('premises' in provenance)
            assert('children' in provenance)
            return collectIntermediateConclusions(provenance['children']) | \
                   { parseSouffleString(provenance['premises']) }
    elif type(provenance) is list: return { rt for elem in provenance for rt in collectIntermediateConclusions(elem) }
    else: return set()

def squashDesirableConclusions(provenance, expectedOut):
    if type(provenance) is dict:
        if 'premises' in provenance:
            relName, t = parseSouffleString(provenance['premises'])
            if relName in expectedOut and t in expectedOut[relName]:
                return { 'axiom': provenance['premises'] }
        return { k: squashDesirableConclusions(v, expectedOut) for k, v in provenance.items() }
    elif type(provenance) is list:
        return [ squashDesirableConclusions(elem, expectedOut) for elem in provenance ]
    else: return provenance

def queryProvenance(souffle, relName, t, expectedOut=None):
    startTime = time.time()

    ans = execSouffleCmd(souffle, 'explain ' + printSouffleString(relName, t))
    ans = json.loads(ans)
    ans = ans['proof']['children']

    if expectedOut:
        ans = squashDesirableConclusions(ans, expectedOut)
        for ir, it in collectIntermediateConclusions(ans):
            if ir in expectedOut and it not in expectedOut[ir]:
                # If the production of relName(t) depends on the production of some other undesirable tuple ir(it), then
                # do not emit provenance information
                return None

    ans = collectAxioms(ans)
    ans = { t[0] for relName, t in ans if relName == 'Rule' }
    ans = frozenset(ans)

    endTime = time.time()
    logTime('queryProvenance', endTime - startTime)
    return ans

########################################################################################################################
# 7. Methods to query for exists and not-exists provenance

def getExistsProvenance(problemDirName, expectedOut, ruleSet):
    with open(problemDirName + '/Rule.facts', 'w') as outFile:
        for name in ruleSet: print(name, file=outFile)

    startTime = time.time()
    souffle = subprocess.Popen([ problemDirName + '/a.exists.out', '-F', problemDirName, '-D', problemDirName ], \
                               stdin=subprocess.PIPE, \
                               stdout=subprocess.PIPE, \
                               universal_newlines=True)
    endTime = time.time()
    logTime('souffle exists provenance', endTime - startTime)
    tuplesProduced = { relName: loadRelation(problemDirName + '/' + relName + '_exists.csv') for relName in expectedOut }

    existsProvenance = {relName: {} for relName in expectedOut}
    for (relName, tuples) in tuplesProduced.items():
        for t in tuples:
            if t[:-1] not in existsProvenance[relName]:
                existsProvenance[relName][t[:-1]] = set()
            existsProvenance[relName][t[:-1]].add(t[-1])

    return existsProvenance

def getNotExistsProvenance(problemDirName, expectedOut, ruleSet):
    with open(problemDirName + '/Rule.facts', 'w') as outFile:
        for name in ruleSet: print(name, file=outFile)

    startTime = time.time()
    souffle = subprocess.Popen([ problemDirName + '/a.notexists.out', '-F', problemDirName, '-D', problemDirName ], \
                               stdin=subprocess.PIPE, \
                               stdout=subprocess.PIPE, \
                               universal_newlines=True)
    endTime = time.time()
    logTime('souffle notexists provenance', endTime - startTime)
    tuplesProduced = { relName: loadRelation(problemDirName + '/' + relName + '_notexists.csv') for relName in expectedOut }

    negationNotExistsProvenance = {relName: {} for relName in expectedOut}
    for (relName, tuples) in tuplesProduced.items():
        for t in tuples:
            if t[:-1] not in negationNotExistsProvenance[relName]:
                negationNotExistsProvenance[relName][t[:-1]] = set()
            negationNotExistsProvenance[relName][t[:-1]].add(t[-1])

    ruleSet = set(map(str, ruleSet))
    notExistsProvenance = {relName: {} for relName in expectedOut}
    for (relName, tuples) in negationNotExistsProvenance.items():
        for (t, rules) in tuples.items():
            notExistsProvenance[relName][t] = ruleSet - rules

    return notExistsProvenance
