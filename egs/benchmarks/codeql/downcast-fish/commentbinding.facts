/* _STL_PAIR_H */	#endif
// namespace std	#endif
// NB: DR 706.	definition of make_pair
// NB: DR 706.	definition of make_pair
// 181.  make_pair() unintended behavior	#if __cplusplus >= 201103L
// __cplusplus >= 201103L	#endif
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
// Constrained free swap overload, see p0185r1	#else
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
//        implications, see, eg, libstdc++/38466.	definition of swap
//        implications, see, eg, libstdc++/38466.	definition of swap
/// Uses @c operator< to find the result.	definition of operator>=
/// Uses @c operator< to find the result.	definition of operator<=
/// Uses @c operator< to find the result.	definition of operator>
/// Uses @c operator== to find the result.	definition of operator!=
/// <http://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>	definition of operator<
/// <http://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>	definition of operator<
/// Two pairs of the same type are equal iff their members are equal.	definition of operator==
// DR 811.	#endif
/** There is also a templated copy ctor for the @c pair class itself.  */	#if __cplusplus < 201103L
// Shortcut for constraining the templates that don't take pairs.	#endif
/** Two objects may be passed to a @c pair constructor to be copied.  */	#if __cplusplus < 201103L
"/** The default constructor creates @c first and @c second using their
       *  respective default constructors.  */"	#if __cplusplus >= 201103L
"/**
   *  @brief Struct holding two objects of arbitrary type.
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */"	definition of pair<_T1, _T2>
// C++11	#endif
// operator from a pair of empty braces.	definition of __nonesuch_no_braces
// avoid querying those properties for incomplete types.	definition of _PCC<<unnamed>, _T1, _T2>
/// piecewise_construct	definition of piecewise_construct
/// piecewise_construct_t	definition of piecewise_construct_t
"/**
   *  @addtogroup utilities
   *  @{
   */"	#if __cplusplus >= 201103L
// for std::__decay_and_strip too	#endif
// for std::move / std::forward, and std::swap	#if __cplusplus >= 201103L
"/** @file bits/stl_pair.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{utility}
 */"	#ifndef _STL_PAIR_H
// namespace	#ifdef _GLIBCXX_DEBUG
// of associative containers.	#endif
// C++11	#endif
// @} group iterators	definition of __niter_base
// returning a constant iterator when we don't want to move.	definition of __make_move_if_noexcept_iterator
// returning a constant iterator when we don't want to move.	definition of __make_move_if_noexcept_iterator
// DR 685.	definition of operator-
// DR 685.	definition of operator-
// operators.	definition of operator==
// 2106. move_iterator wrapping iterators returning prvalues	declaration of reference
// NB: DR 680.	declaration of pointer
"/**
   *  Class template move_iterator is an iterator adapter with the same
   *  behavior as the underlying iterator except that its dereference
   *  operator implicitly converts the value returned by the underlying
   *  iterator's dereference operator to an rvalue reference.  Some
   *  generic algorithms can be called with move iterators to replace
   *  copying with moving.
   */"	definition of move_iterator<_Iterator>
// namespace	std
// DR 685.	#else
// parameters.	definition of operator-
// parameters.	definition of operator-
// Random access iterator requirements	definition of operator<
// Forward iterator requirements	definition of operator==
// Forward iterator requirements	definition of operator==
// Random access iterator requirements	declaration of operator[]
// Random access iterator requirements	definition of operator[]
// Random access iterator requirements	declaration of operator[]
// Bidirectional iterator requirements	declaration of operator--
// Bidirectional iterator requirements	definition of operator--
// Bidirectional iterator requirements	declaration of operator--
// Forward iterator requirements	definition of operator*
// Forward iterator requirements	declaration of operator*
// Forward iterator requirements	declaration of operator*
// Allow iterator to const_iterator conversion	definition of __normal_iterator
// Allow iterator to const_iterator conversion	definition of __normal_iterator
// namespace	__gnu_cxx
"/**
   *  @param __x  A container of arbitrary type.
   *  @param __i  An iterator into the container.
   *  @return  An instance of insert_iterator working on @p __x.
   *
   *  This wrapper function helps in creating insert_iterator instances.
   *  Typing the name of the %iterator requires knowing the precise full
   *  type of the container, which can be tedious and impedes generic
   *  programming.  Using this function lets you take advantage of automatic
   *  template parameter deduction, making the compiler match the correct
   *  types for you.
  */"	definition of inserter
/// Simply returns *this.  (This %iterator does not @a move.)	declaration of operator++
/// Simply returns *this.  (This %iterator does not @a move.)	declaration of operator++
/// Simply returns *this.	declaration of operator*
"/**
       *  @param  __value  An instance of whatever type
       *                 container_type::const_reference is; presumably a
       *                 reference-to-const T for container<T>.
       *  @return  This %iterator, for chained operations.
       *
       *  This kind of %iterator maintains its own position in the
       *  container.  Assigning a value to the %iterator will insert the
       *  value into the container at the place before the %iterator.
       *
       *  The position is maintained such that subsequent assignments will
       *  insert values immediately after one another.  For example,
       *  @code
       *     // vector v contains A and Z
       *
       *     insert_iterator i (v, ++v.begin());
       *     i = 1;
       *     i = 2;
       *     i = 3;
       *
       *     // vector v contains A, 1, 2, 3, and Z
       *  @endcode
      */"	#if __cplusplus < 201103L
"/**
   *  @brief  Turns assignment into insertion.
   *
   *  These are output iterators, constructed from a container-of-T.
   *  Assigning a T to the iterator inserts it in the container at the
   *  %iterator's position, rather than overwriting the value at that
   *  position.
   *
   *  (Sequences will actually insert a @e copy of the value before the
   *  %iterator's position.)
   *
   *  Tip:  Using the inserter function to create these iterators can
   *  save typing.
  */"	definition of insert_iterator<_Container>
"/**
   *  @param  __x  A container of arbitrary type.
   *  @return  An instance of front_insert_iterator working on @p x.
   *
   *  This wrapper function helps in creating front_insert_iterator instances.
   *  Typing the name of the %iterator requires knowing the precise full
   *  type of the container, which can be tedious and impedes generic
   *  programming.  Using this function lets you take advantage of automatic
   *  template parameter deduction, making the compiler match the correct
   *  types for you.
  */"	definition of front_inserter
/// Simply returns *this.  (This %iterator does not @a move.)	declaration of operator++
/// Simply returns *this.  (This %iterator does not @a move.)	declaration of operator++
/// Simply returns *this.	declaration of operator*
"/**
       *  @param  __value  An instance of whatever type
       *                 container_type::const_reference is; presumably a
       *                 reference-to-const T for container<T>.
       *  @return  This %iterator, for chained operations.
       *
       *  This kind of %iterator doesn't really have a @a position in the
       *  container (you can think of the position as being permanently at
       *  the front, if you like).  Assigning a value to the %iterator will
       *  always prepend the value to the front of the container.
      */"	#if __cplusplus < 201103L
"/**
   *  @brief  Turns assignment into insertion.
   *
   *  These are output iterators, constructed from a container-of-T.
   *  Assigning a T to the iterator prepends it to the container using
   *  push_front.
   *
   *  Tip:  Using the front_inserter function to create these iterators can
   *  save typing.
  */"	definition of front_insert_iterator<_Container>
"/**
   *  @param  __x  A container of arbitrary type.
   *  @return  An instance of back_insert_iterator working on @p __x.
   *
   *  This wrapper function helps in creating back_insert_iterator instances.
   *  Typing the name of the %iterator requires knowing the precise full
   *  type of the container, which can be tedious and impedes generic
   *  programming.  Using this function lets you take advantage of automatic
   *  template parameter deduction, making the compiler match the correct
   *  types for you.
  */"	definition of back_inserter
"/**
   *  @param  __x  A container of arbitrary type.
   *  @return  An instance of back_insert_iterator working on @p __x.
   *
   *  This wrapper function helps in creating back_insert_iterator instances.
   *  Typing the name of the %iterator requires knowing the precise full
   *  type of the container, which can be tedious and impedes generic
   *  programming.  Using this function lets you take advantage of automatic
   *  template parameter deduction, making the compiler match the correct
   *  types for you.
  */"	definition of back_inserter
/// Simply returns *this.  (This %iterator does not @a move.)	declaration of operator++
/// Simply returns *this.  (This %iterator does not @a move.)	declaration of operator++
/// Simply returns *this.  (This %iterator does not @a move.)	definition of operator++
/// Simply returns *this.  (This %iterator does not @a move.)	declaration of operator++
/// Simply returns *this.	declaration of operator*
/// Simply returns *this.	definition of operator*
/// Simply returns *this.	declaration of operator*
"/**
       *  @param  __value  An instance of whatever type
       *                 container_type::const_reference is; presumably a
       *                 reference-to-const T for container<T>.
       *  @return  This %iterator, for chained operations.
       *
       *  This kind of %iterator doesn't really have a @a position in the
       *  container (you can think of the position as being permanently at
       *  the end, if you like).  Assigning a value to the %iterator will
       *  always append the value to the end of the container.
      */"	#if __cplusplus < 201103L
"/**
   *  @brief  Turns assignment into insertion.
   *
   *  These are output iterators, constructed from a container-of-T.
   *  Assigning a T to the iterator appends it to the container using
   *  push_back.
   *
   *  Tip:  Using the back_inserter function to create these iterators can
   *  save typing.
  */"	definition of back_insert_iterator<_Container>
/// Generator function for reverse_iterator.	#endif
// Same as C++14 make_reverse_iterator but used in C++11 mode too.	definition of __make_reverse_iterator
// DR 685. reverse_iterator/move_iterator difference has invalid signatures	definition of operator-
// DR 685. reverse_iterator/move_iterator difference has invalid signatures	definition of operator-
//@}	#if __cplusplus < 201103L
// DR 280. Comparison of reverse_iterator to const reverse_iterator.	definition of operator==
"/**
   *  @param  __x  A %reverse_iterator.
   *  @param  __y  A %reverse_iterator.
   *  @return  A simple bool.
   *
   *  Reverse iterators forward many operations to their underlying base()
   *  iterators.  Others are implemented in terms of one another.
   *
  */"	definition of operator==
"/**
   *  @param  __x  A %reverse_iterator.
   *  @param  __y  A %reverse_iterator.
   *  @return  A simple bool.
   *
   *  Reverse iterators forward many operations to their underlying base()
   *  iterators.  Others are implemented in terms of one another.
   *
  */"	definition of operator==
"/**
       *  @return  The value at @c current - @a __n - 1
       *
       *  The underlying iterator must be a Random Access Iterator.
      */"	declaration of operator[]
"/**
       *  @return  *this
       *
       *  Moves the underlying iterator forwards @a __n steps.
       *  The underlying iterator must be a Random Access Iterator.
      */"	declaration of operator-=
"/**
       *  @return  A reverse_iterator that refers to @c current - @a __n
       *
       *  The underlying iterator must be a Random Access Iterator.
      */"	declaration of operator-
"/**
       *  @return  *this
       *
       *  Moves the underlying iterator backwards @a __n steps.
       *  The underlying iterator must be a Random Access Iterator.
      */"	declaration of operator+=
"/**
       *  @return  A reverse_iterator that refers to @c current - @a __n
       *
       *  The underlying iterator must be a Random Access Iterator.
      */"	declaration of operator+
"/**
       *  @return  A reverse_iterator that refers to @c current - @a __n
       *
       *  The underlying iterator must be a Random Access Iterator.
      */"	definition of operator+
"/**
       *  @return  A reverse_iterator that refers to @c current - @a __n
       *
       *  The underlying iterator must be a Random Access Iterator.
      */"	declaration of operator+
"/**
       *  @return  A reverse_iterator with the previous value of @c *this
       *
       *  Increments the underlying iterator.
      */"	declaration of operator--
"/**
       *  @return  @c *this
       *
       *  Increments the underlying iterator.
      */"	declaration of operator--
"/**
       *  @return  The original value of @c *this
       *
       *  Decrements the underlying iterator.
      */"	declaration of operator++
"/**
       *  @return  @c *this
       *
       *  Decrements the underlying iterator.
      */"	declaration of operator++
"/**
       *  @return  @c *this
       *
       *  Decrements the underlying iterator.
      */"	definition of operator++
"/**
       *  @return  @c *this
       *
       *  Decrements the underlying iterator.
      */"	declaration of operator++
// 1052. operator-> should also support smart pointers	declaration
"/**
       *  @return  A pointer to the value at @c --current
       *
       *  This requires that @c --current is dereferenceable.
      */"	declaration of operator->
"/**
       *  @return  A pointer to the value at @c --current
       *
       *  This requires that @c --current is dereferenceable.
      */"	declaration of operator->
"/**
       *  @return  A pointer to the value at @c --current
       *
       *  This requires that @c --current is dereferenceable.
      */"	definition of operator->
"/**
       *  @return  A reference to the value at @c --current
       *
       *  This requires that @c --current is dereferenceable.
       *
       *  @warning This implementation requires that for an iterator of the
       *           underlying iterator type, @c x, a reference obtained by
       *           @c *x remains valid after @c x has been modified or
       *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
      */"	declaration of operator*
"/**
       *  @return  A reference to the value at @c --current
       *
       *  This requires that @c --current is dereferenceable.
       *
       *  @warning This implementation requires that for an iterator of the
       *           underlying iterator type, @c x, a reference obtained by
       *           @c *x remains valid after @c x has been modified or
       *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
      */"	definition of operator*
"/**
       *  @return  A reference to the value at @c --current
       *
       *  This requires that @c --current is dereferenceable.
       *
       *  @warning This implementation requires that for an iterator of the
       *           underlying iterator type, @c x, a reference obtained by
       *           @c *x remains valid after @c x has been modified or
       *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
      */"	declaration of operator*
"/**
       *  @return  @c current, the %iterator used for underlying work.
      */"	declaration of base
"/**
       *  @return  @c current, the %iterator used for underlying work.
      */"	definition of base
"/**
       *  @return  @c current, the %iterator used for underlying work.
      */"	declaration of base
"/**
       *  A %reverse_iterator across other types can be copied if the
       *  underlying %iterator can be converted to the type of @c current.
      */"	definition of reverse_iterator
"/**
       *  The copy constructor is normal.
      */"	#if __cplusplus >= 201103L
"/**
   *  Bidirectional and random access iterators have corresponding reverse
   *  %iterator adaptors that iterate through the data structure in the
   *  opposite direction.  They have the same signatures as the corresponding
   *  iterators.  The fundamental relation between a reverse %iterator and its
   *  corresponding %iterator @c i is established by the identity:
   *  @code
   *      &*(reverse_iterator(i)) == &*(i - 1)
   *  @endcode
   *
   *  <em>This mapping is dictated by the fact that while there is always a
   *  pointer past the end of an array, there might not be a valid pointer
   *  before the beginning of an array.</em> [24.4.1]/1,2
   *
   *  Reverse iterators can be tricky and surprising at first.  Their
   *  semantics make sense, however, and the trickiness is a side effect of
   *  the requirement that the iterators must be safe.
  */"	definition of reverse_iterator<_Iterator>
"/** @file bits/stl_iterator.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iterator}
 *
 *  This file implements reverse_iterator, back_insert_iterator,
 *  front_insert_iterator, insert_iterator, __normal_iterator, and their
 *  supporting functions and overloaded operators.
 */"	#ifndef _STL_ITERATOR_H
// come in too if requested.	#ifdef _GLIBCXX_PARALLEL
// concept requirements	#endif
// concept requirements	#if __cplusplus > 201103L
"/**
   *  @brief Finds the places in ranges which don't match.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  An input iterator.
   *  @param  __last1   An input iterator.
   *  @param  __first2  An input iterator.
   *  @param __binary_pred A binary predicate @link functors
   *         functor@endlink.
   *  @return   A pair of iterators pointing to the first mismatch.
   *
   *  This compares the elements of two ranges using the binary_pred
   *  parameter, and returns a pair
   *  of iterators.  The first iterator points into the first range, the
   *  second iterator points into the second range, and the elements pointed
   *  to by the iterators are not equal.
  */"	definition of mismatch
"/**
   *  @brief Finds the places in ranges which don't match.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  An input iterator.
   *  @param  __last1   An input iterator.
   *  @param  __first2  An input iterator.
   *  @return   A pair of iterators pointing to the first mismatch.
   *
   *  This compares the elements of two ranges using @c == and returns a pair
   *  of iterators.  The first iterator points into the first range, the
   *  second iterator points into the second range, and the elements pointed
   *  to by the iterators are not equal.
  */"	definition of mismatch
// concept requirements	definition of __mismatch
"/**
   *  @brief Performs @b dictionary comparison on ranges.
   *  @ingroup sorting_algorithms
   *  @param  __first1  An input iterator.
   *  @param  __last1   An input iterator.
   *  @param  __first2  An input iterator.
   *  @param  __last2   An input iterator.
   *  @param  __comp  A @link comparison_functors comparison functor@endlink.
   *  @return   A boolean true or false.
   *
   *  The same as the four-parameter @c lexicographical_compare, but uses the
   *  comp parameter instead of @c <.
  */"	definition of lexicographical_compare
// concept requirements	#endif
"/**
   *  @brief Performs @b dictionary comparison on ranges.
   *  @ingroup sorting_algorithms
   *  @param  __first1  An input iterator.
   *  @param  __last1   An input iterator.
   *  @param  __first2  An input iterator.
   *  @param  __last2   An input iterator.
   *  @return   A boolean true or false.
   *
   *  <em>Returns true if the sequence of elements defined by the range
   *  [first1,last1) is lexicographically less than the sequence of elements
   *  defined by the range [first2,last2).  Returns false otherwise.</em>
   *  (Quoted from [25.3.8]/1.)  If the iterators are all character pointers,
   *  then this is an inline call to @c memcmp.
  */"	definition of lexicographical_compare
// C++14	#endif
// concept requirements	#endif
// C++11	#endif
// 4-iterator version of std::equal<It1, It2, BinaryPred> for use in C++11.	definition of __equal4
// 4-iterator version of std::equal<It1, It2> for use in C++11.	definition of __equal4
// concept requirements	#if __cplusplus >= 201103L
"/**
   *  @brief Tests a range for element-wise equality.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  An input iterator.
   *  @param  __last1   An input iterator.
   *  @param  __first2  An input iterator.
   *  @param __binary_pred A binary predicate @link functors
   *                  functor@endlink.
   *  @return         A boolean true or false.
   *
   *  This compares the elements of two ranges using the binary_pred
   *  parameter, and returns true or
   *  false depending on whether all of the corresponding elements of the
   *  ranges are equal.
  */"	definition of equal
"/**
   *  @brief Tests a range for element-wise equality.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  An input iterator.
   *  @param  __last1   An input iterator.
   *  @param  __first2  An input iterator.
   *  @return   A boolean true or false.
   *
   *  This compares the elements of two ranges using @c == and returns true or
   *  false depending on whether all of the corresponding elements of the
   *  ranges are equal.
  */"	definition of equal
"/**
   *  @brief Tests a range for element-wise equality.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  An input iterator.
   *  @param  __last1   An input iterator.
   *  @param  __first2  An input iterator.
   *  @return   A boolean true or false.
   *
   *  This compares the elements of two ranges using @c == and returns true or
   *  false depending on whether all of the corresponding elements of the
   *  ranges are equal.
  */"	definition of equal
//  Precondition: __n > 0.	definition of __lg
"/**
   *  @brief Finds the first position in which @a val could be inserted
   *         without changing the ordering.
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @return         An iterator pointing to the first element <em>not less
   *                  than</em> @a val, or end() if every element is less than
   *                  @a val.
   *  @ingroup binary_search_algorithms
  */"	definition of lower_bound
"/**
   *  @brief Finds the first position in which @a val could be inserted
   *         without changing the ordering.
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @return         An iterator pointing to the first element <em>not less
   *                  than</em> @a val, or end() if every element is less than
   *                  @a val.
   *  @ingroup binary_search_algorithms
  */"	definition of lower_bound
// concept requirements	definition of __equal<_BoolType>
"/**
   *  @brief Fills the range [first,first+n) with copies of value.
   *  @ingroup mutating_algorithms
   *  @param  __first  An output iterator.
   *  @param  __n      The count of copies to perform.
   *  @param  __value  A reference-to-const of arbitrary type.
   *  @return   The iterator at first+n.
   *
   *  This function fills a range with copies of the same value.  For char
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @ wmemset.
   *
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */"	definition of fill_n
"/**
   *  @brief Fills the range [first,first+n) with copies of value.
   *  @ingroup mutating_algorithms
   *  @param  __first  An output iterator.
   *  @param  __n      The count of copies to perform.
   *  @param  __value  A reference-to-const of arbitrary type.
   *  @return   The iterator at first+n.
   *
   *  This function fills a range with copies of the same value.  For char
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @ wmemset.
   *
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */"	definition of fill_n
// concept requirements	definition of __fill_n_a
// concept requirements	definition of __fill_n_a
"/**
   *  @brief Fills the range [first,last) with copies of value.
   *  @ingroup mutating_algorithms
   *  @param  __first  A forward iterator.
   *  @param  __last   A forward iterator.
   *  @param  __value  A reference-to-const of arbitrary type.
   *  @return   Nothing.
   *
   *  This function fills a range with copies of the same value.  For char
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */"	definition of fill
"/**
   *  @brief Fills the range [first,last) with copies of value.
   *  @ingroup mutating_algorithms
   *  @param  __first  A forward iterator.
   *  @param  __last   A forward iterator.
   *  @param  __value  A reference-to-const of arbitrary type.
   *  @return   Nothing.
   *
   *  This function fills a range with copies of the same value.  For char
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */"	definition of fill
// Specialization: for char types we can use memset.	definition of __fill_a
// concept requirements	#define _GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp) std::move_backward(_Tp, _Up, _Vp)
"/**
   *  @brief Moves the range [first,last) into result.
   *  @ingroup mutating_algorithms
   *  @param  __first  A bidirectional iterator.
   *  @param  __last   A bidirectional iterator.
   *  @param  __result A bidirectional iterator.
   *  @return   result - (first - last)
   *
   *  The function has the same effect as move, but starts at the end of the
   *  range and works its way to the start, returning the start of the result.
   *  This inline function will boil down to a call to @c memmove whenever
   *  possible.  Failing that, if random access iterators are passed, then the
   *  loop count will be known (and therefore a candidate for compiler
   *  optimizations such as unrolling).
   *
   *  Result may not be in the range (first,last].  Use move instead.  Note
   *  that the start of the output range may overlap [first,last).
  */"	definition of move_backward
// concept requirements	#if __cplusplus >= 201103L
"/**
   *  @brief Copies the range [first,last) into result.
   *  @ingroup mutating_algorithms
   *  @param  __first  A bidirectional iterator.
   *  @param  __last   A bidirectional iterator.
   *  @param  __result A bidirectional iterator.
   *  @return   result - (first - last)
   *
   *  The function has the same effect as copy, but starts at the end of the
   *  range and works its way to the start, returning the start of the result.
   *  This inline function will boil down to a call to @c memmove whenever
   *  possible.  Failing that, if random access iterators are passed, then the
   *  loop count will be known (and therefore a candidate for compiler
   *  optimizations such as unrolling).
   *
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */"	definition of copy_backward
"/**
   *  @brief Copies the range [first,last) into result.
   *  @ingroup mutating_algorithms
   *  @param  __first  A bidirectional iterator.
   *  @param  __last   A bidirectional iterator.
   *  @param  __result A bidirectional iterator.
   *  @return   result - (first - last)
   *
   *  The function has the same effect as copy, but starts at the end of the
   *  range and works its way to the start, returning the start of the result.
   *  This inline function will boil down to a call to @c memmove whenever
   *  possible.  Failing that, if random access iterators are passed, then the
   *  loop count will be known (and therefore a candidate for compiler
   *  optimizations such as unrolling).
   *
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */"	definition of copy_backward
// trivial types can have deleted assignment	#endif
// concept requirements	#define _GLIBCXX_MOVE3(_Tp,_Up,_Vp) std::move(_Tp, _Up, _Vp)
"/**
   *  @brief Moves the range [first,last) into result.
   *  @ingroup mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __result An output iterator.
   *  @return   result + (first - last)
   *
   *  This inline function will boil down to a call to @c memmove whenever
   *  possible.  Failing that, if random access iterators are passed, then the
   *  loop count will be known (and therefore a candidate for compiler
   *  optimizations such as unrolling).  Result may not be contained within
   *  [first,last); the move_backward function should be used instead.
   *
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */"	definition of move
"/**
   *  @brief Moves the range [first,last) into result.
   *  @ingroup mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __result An output iterator.
   *  @return   result + (first - last)
   *
   *  This inline function will boil down to a call to @c memmove whenever
   *  possible.  Failing that, if random access iterators are passed, then the
   *  loop count will be known (and therefore a candidate for compiler
   *  optimizations such as unrolling).  Result may not be contained within
   *  [first,last); the move_backward function should be used instead.
   *
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */"	definition of move
// concept requirements	#if __cplusplus >= 201103L
"/**
   *  @brief Copies the range [first,last) into result.
   *  @ingroup mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __result An output iterator.
   *  @return   result + (first - last)
   *
   *  This inline function will boil down to a call to @c memmove whenever
   *  possible.  Failing that, if random access iterators are passed, then the
   *  loop count will be known (and therefore a candidate for compiler
   *  optimizations such as unrolling).  Result may not be contained within
   *  [first,last); the copy_backward function should be used instead.
   *
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */"	definition of copy
"/**
   *  @brief Copies the range [first,last) into result.
   *  @ingroup mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __result An output iterator.
   *  @return   result + (first - last)
   *
   *  This inline function will boil down to a call to @c memmove whenever
   *  possible.  Failing that, if random access iterators are passed, then the
   *  loop count will be known (and therefore a candidate for compiler
   *  optimizations such as unrolling).  Result may not be contained within
   *  [first,last); the copy_backward function should be used instead.
   *
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */"	definition of copy
// trivial types can have deleted assignment	#endif
// a for loop with an explicit count.	definition of __copy_move<<unnamed>, <unnamed>, <unnamed>>
// No need to wrap, iterator already has the right type.	definition of __niter_wrap
// is only used to wrap random access iterators, like pointers).	definition of __niter_wrap
// is only used to wrap random access iterators, like pointers).	definition of __niter_wrap
// remove the __normal_iterator wrapper. See copy, fill, ...	definition of __niter_base
"/**
   *  @brief This does what you think it does.
   *  @ingroup sorting_algorithms
   *  @param  __a  A thing of arbitrary type.
   *  @param  __b  Another thing of arbitrary type.
   *  @param  __comp  A @link comparison_functors comparison functor@endlink.
   *  @return   The greater of the parameters.
   *
   *  This will work on temporary expressions, since they are only evaluated
   *  once, unlike a preprocessor macro.
  */"	definition of max
"/**
   *  @brief This does what you think it does.
   *  @ingroup sorting_algorithms
   *  @param  __a  A thing of arbitrary type.
   *  @param  __b  Another thing of arbitrary type.
   *  @param  __comp  A @link comparison_functors comparison functor@endlink.
   *  @return   The lesser of the parameters.
   *
   *  This will work on temporary expressions, since they are only evaluated
   *  once, unlike a preprocessor macro.
  */"	definition of min
"/**
   *  @brief This does what you think it does.
   *  @ingroup sorting_algorithms
   *  @param  __a  A thing of arbitrary type.
   *  @param  __b  Another thing of arbitrary type.
   *  @return   The greater of the parameters.
   *
   *  This is the simple classic generic implementation.  It will work on
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */"	definition of max
"/**
   *  @brief This does what you think it does.
   *  @ingroup sorting_algorithms
   *  @param  __a  A thing of arbitrary type.
   *  @param  __b  Another thing of arbitrary type.
   *  @return   The greater of the parameters.
   *
   *  This is the simple classic generic implementation.  It will work on
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */"	definition of max
"/**
   *  @brief This does what you think it does.
   *  @ingroup sorting_algorithms
   *  @param  __a  A thing of arbitrary type.
   *  @param  __b  Another thing of arbitrary type.
   *  @return   The lesser of the parameters.
   *
   *  This is the simple classic generic implementation.  It will work on
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */"	definition of min
"/**
   *  @brief This does what you think it does.
   *  @ingroup sorting_algorithms
   *  @param  __a  A thing of arbitrary type.
   *  @param  __b  Another thing of arbitrary type.
   *  @return   The lesser of the parameters.
   *
   *  This is the simple classic generic implementation.  It will work on
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */"	definition of min
"/**
   *  @brief Swap the elements of two sequences.
   *  @ingroup mutating_algorithms
   *  @param  __first1  A forward iterator.
   *  @param  __last1   A forward iterator.
   *  @param  __first2  A forward iterator.
   *  @return   An iterator equal to @p first2+(last1-first1).
   *
   *  Swaps each element in the range @p [first1,last1) with the
   *  corresponding element in the range @p [first2,(last1-first1)).
   *  The ranges must not overlap.
  */"	definition of swap_ranges
"/**
   *  @brief Swap the elements of two sequences.
   *  @ingroup mutating_algorithms
   *  @param  __first1  A forward iterator.
   *  @param  __last1   A forward iterator.
   *  @param  __first2  A forward iterator.
   *  @return   An iterator equal to @p first2+(last1-first1).
   *
   *  Swaps each element in the range @p [first1,last1) with the
   *  corresponding element in the range @p [first2,(last1-first1)).
   *  The ranges must not overlap.
  */"	definition of swap_ranges
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief Swaps the contents of two iterators.
   *  @ingroup mutating_algorithms
   *  @param  __a  An iterator.
   *  @param  __b  Another iterator.
   *  @return   Nothing.
   *
   *  This function swaps the values pointed to by two iterators, not the
   *  iterators themselves.
  */"	definition of iter_swap
// when it's safe, i.e., the value_types are equal.	#endif
"/** @file bits/stl_algobase.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{algorithm}
 */"	#ifndef _STL_ALGOBASE_H
/* _BASIC_STRING_H */	#endif
// C++11	#endif
// namespace std	#endif
// C++14	#endif
// C++17	#endif
// namespace __detail::__variant	#endif
// inline namespace literals	#if __cplusplus >= 201703L
/// std::hash specialization for u32string.	definition of hash<basic_string<char32_t, char_traits<char32_t>, allocator<char32_t>>>
/// std::hash specialization for u32string.	definition of hash<basic_string<char32_t, char_traits<char32_t>, allocator<char32_t>>>
/// std::hash specialization for u16string.	definition of hash<basic_string<char16_t, char_traits<char16_t>, allocator<char16_t>>>
/// std::hash specialization for u16string.	definition of hash<basic_string<char16_t, char_traits<char16_t>, allocator<char16_t>>>
/// std::hash specialization for u8string.	#endif
/* _GLIBCXX_COMPATIBILITY_CXX0X */	#endif
/// std::hash specialization for wstring.	definition of hash<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>
/// std::hash specialization for wstring.	definition of hash<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>
/// std::hash specialization for string.	definition of hash<basic_string<char, char_traits<char>, allocator<char>>>
/// std::hash specialization for string.	definition of hash<basic_string<char, char_traits<char>, allocator<char>>>
// DR 1182.	#ifndef _GLIBCXX_COMPATIBILITY_CXX0X
/* C++11 */	#endif
// namespace	#endif
// _GLIBCXX_USE_WCHAR_T && _GLIBCXX_USE_C99_WCHAR	#endif
// _GLIBCXX_HAVE_BROKEN_VSWPRINTF	#endif
// DR 1261.	definition of to_wstring
// DR 1261.	definition of to_wstring
// NB: wcstof vs wcstod.	definition of stof
// NB: wcstof vs wcstod.	definition of stof
// _GLIBCXX_USE_C99_STDIO	#endif
// DR 1261.	definition of to_string
// DR 1261.	definition of to_string
// _GLIBCXX_USE_C99_STDLIB	#endif
// NB: strtof vs strtod.	definition of stof
// NB: strtof vs strtod.	definition of stof
// 21.4 Numeric Conversions [string.conversions].	definition of stoi
// 21.4 Numeric Conversions [string.conversions].	definition of stoi
// namespace	#if __cplusplus >= 201103L
/// Read a line from an rvalue stream into a string.	definition of getline
/// Read a line from an rvalue stream into a string.	definition of getline
"/**
   *  @brief  Read a line from stream into a string.
   *  @param __is  Input stream.
   *  @param __str  Buffer to store into.
   *  @return  Reference to the input stream.
   *
   *  Stores characters from is into @a __str until &apos;\n&apos; is
   *  found, the end of the stream is encountered, or str.max_size()
   *  is reached.  Any previous contents of @a __str are erased.  If
   *  end of line is encountered, it is extracted but not stored into
   *  @a __str.
   */"	definition of getline
"/**
   *  @brief  Write string to a stream.
   *  @param __os  Output stream.
   *  @param __str  String to write out.
   *  @return  Reference to the output stream.
   *
   *  Output characters of @a __str into os following the same rules as for
   *  writing a C string.
   */"	definition of operator<<
"/**
   *  @brief  Swap contents of two strings.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *
   *  Exchanges the contents of @a __lhs and @a __rhs in constant time.
   */"	definition of swap
"/**
   *  @brief  Swap contents of two strings.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *
   *  Exchanges the contents of @a __lhs and @a __rhs in constant time.
   */"	definition of swap
"/**
   *  @brief  Test if C string doesn't precede string.
   *  @param __lhs  C string.
   *  @param __rhs  String.
   *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
   */"	definition of operator>=
"/**
   *  @brief  Test if string doesn't precede C string.
   *  @param __lhs  String.
   *  @param __rhs  C string.
   *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
   */"	definition of operator>=
"/**
   *  @brief  Test if string doesn't precede string.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
   */"	definition of operator>=
"/**
   *  @brief  Test if C string doesn't follow string.
   *  @param __lhs  C string.
   *  @param __rhs  String.
   *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
   */"	definition of operator<=
"/**
   *  @brief  Test if string doesn't follow C string.
   *  @param __lhs  String.
   *  @param __rhs  C string.
   *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
   */"	definition of operator<=
"/**
   *  @brief  Test if string doesn't follow string.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
   */"	definition of operator<=
"/**
   *  @brief  Test if C string follows string.
   *  @param __lhs  C string.
   *  @param __rhs  String.
   *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
   */"	definition of operator>
"/**
   *  @brief  Test if string follows C string.
   *  @param __lhs  String.
   *  @param __rhs  C string.
   *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
   */"	definition of operator>
"/**
   *  @brief  Test if string follows string.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
   */"	definition of operator>
"/**
   *  @brief  Test if string follows string.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
   */"	definition of operator>
"/**
   *  @brief  Test if C string precedes string.
   *  @param __lhs  C string.
   *  @param __rhs  String.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */"	definition of operator<
"/**
   *  @brief  Test if C string precedes string.
   *  @param __lhs  C string.
   *  @param __rhs  String.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */"	definition of operator<
"/**
   *  @brief  Test if string precedes C string.
   *  @param __lhs  String.
   *  @param __rhs  C string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */"	definition of operator<
"/**
   *  @brief  Test if string precedes string.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */"	definition of operator<
"/**
   *  @brief  Test if string precedes string.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */"	definition of operator<
"/**
   *  @brief  Test difference of string and C string.
   *  @param __lhs  String.
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
   */"	definition of operator!=
"/**
   *  @brief  Test difference of string and C string.
   *  @param __lhs  String.
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
   */"	definition of operator!=
"/**
   *  @brief  Test difference of C string and string.
   *  @param __lhs  C string.
   *  @param __rhs  String.
   *  @return  True if @a __rhs.compare(@a __lhs) != 0.  False otherwise.
   */"	definition of operator!=
"/**
   *  @brief  Test difference of C string and string.
   *  @param __lhs  C string.
   *  @param __rhs  String.
   *  @return  True if @a __rhs.compare(@a __lhs) != 0.  False otherwise.
   */"	definition of operator!=
"/**
   *  @brief  Test difference of two strings.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
   */"	definition of operator!=
"/**
   *  @brief  Test difference of two strings.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
   */"	definition of operator!=
"/**
   *  @brief  Test equivalence of string and C string.
   *  @param __lhs  String.
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */"	definition of operator==
"/**
   *  @brief  Test equivalence of string and C string.
   *  @param __lhs  String.
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */"	definition of operator==
"/**
   *  @brief  Test equivalence of C string and string.
   *  @param __lhs  C string.
   *  @param __rhs  String.
   *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
   */"	definition of operator==
"/**
   *  @brief  Test equivalence of C string and string.
   *  @param __lhs  C string.
   *  @param __rhs  String.
   *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
   */"	definition of operator==
"/**
   *  @brief  Test equivalence of two strings.
   *  @param __lhs  First string.
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */"	definition of operator==
"/**
   *  @brief  Concatenate string and character.
   *  @param __lhs  First string.
   *  @param __rhs  Last string.
   *  @return  New string with @a __lhs followed by @a __rhs.
   */"	definition of operator+
"/**
   *  @brief  Concatenate string and character.
   *  @param __lhs  First string.
   *  @param __rhs  Last string.
   *  @return  New string with @a __lhs followed by @a __rhs.
   */"	definition of operator+
"/**
   *  @brief  Concatenate string and C string.
   *  @param __lhs  First string.
   *  @param __rhs  Last string.
   *  @return  New string with @a __lhs followed by @a __rhs.
   */"	definition of operator+
"/**
   *  @brief  Concatenate two strings.
   *  @param __lhs  First string.
   *  @param __rhs  Last string.
   *  @return  New string with value of @a __lhs followed by @a __rhs.
   */"	definition of operator+
"/**
   *  @brief  Concatenate two strings.
   *  @param __lhs  First string.
   *  @param __rhs  Last string.
   *  @return  New string with value of @a __lhs followed by @a __rhs.
   */"	definition of operator+
// 3075. basic_string needs deduction guides from basic_string_view	#endif
// !_GLIBCXX_USE_CXX11_ABI	#endif
// C++20	#endif
"/**
       *  @brief  Compare substring against a character %array.
       *  @param __pos  Index of first character of substring.
       *  @param __n1  Number of characters in substring.
       *  @param __s  character %array to compare against.
       *  @param __n2  Number of characters of s.
       *  @return  Integer < 0, 0, or > 0.
       *
       *  Form the substring of this string from the @a __n1
       *  characters starting at @a __pos.  Form a string from the
       *  first @a __n2 characters of @a __s.  Returns an integer < 0
       *  if this substring is ordered before the string from @a __s,
       *  0 if their values are equivalent, or > 0 if this substring
       *  is ordered after the string from @a __s.  Determines the
       *  effective length rlen of the strings to compare as the
       *  smallest of the length of the substring and @a __n2.  The
       *  function then compares the two strings by calling
       *  traits::compare(substring.data(),s,rlen).  If the result of
       *  the comparison is nonzero returns it, otherwise the shorter
       *  one is ordered first.
       *
       *  NB: s must have at least n2 characters, &apos;\\0&apos; has
       *  no special meaning.
      */"	#if __cplusplus > 201703L
// C++17	#endif
"/**
       *  @brief  Compare to a string_view.
       *  @param __pos1  A position in the string to start comparing from.
       *  @param __n1  The number of characters to compare.
       *  @param __svt   An object convertible to string_view to compare
       *                 against.
       *  @param __pos2  A position in the string_view to start comparing from.
       *  @param __n2  The number of characters to compare.
       *  @return  Integer < 0, 0, or > 0.
       */"	#endif
"/**
       *  @brief  Compare to a string.
       *  @param __str  String to compare against.
       *  @return  Integer < 0, 0, or > 0.
       *
       *  Returns an integer < 0 if this string is ordered before @a
       *  __str, 0 if their values are equivalent, or > 0 if this
       *  string is ordered after @a __str.  Determines the effective
       *  length rlen of the strings to compare as the smallest of
       *  size() and str.size().  The function then compares the two
       *  strings by calling traits::compare(data(), str.data(),rlen).
       *  If the result of the comparison is nonzero returns it,
       *  otherwise the shorter one is ordered first.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find last position of a character not in a string_view.
       *  @param __svt  An object convertible to string_view containing
       *                characters to avoid.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of last occurrence.
       */"	#endif
"/**
       *  @brief  Find last position of a different character.
       *  @param __c  Character to avoid.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of last occurrence.
       *
       *  Starting from @a __pos, searches backward for a character other than
       *  @a __c within this string.  If found, returns the index where it was
       *  found.  If not found, returns npos.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find position of a character not in a string_view.
       *  @param __svt  An object convertible to string_view containing
       *                characters to avoid.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of first occurrence.
       */"	#endif
"/**
       *  @brief  Find position of a different character.
       *  @param __c  Character to avoid.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of first occurrence.
       *
       *  Starting from @a __pos, searches forward for a character
       *  other than @a __c within this string.  If found, returns the
       *  index where it was found.  If not found, returns npos.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find last position of a character of string.
       *  @param __svt  An object convertible to string_view containing
       *                characters to locate.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of last occurrence.
      */"	#endif
"/**
       *  @brief  Find last position of a character.
       *  @param __c  Character to locate.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of last occurrence.
       *
       *  Starting from @a __pos, searches backward for @a __c within
       *  this string.  If found, returns the index where it was
       *  found.  If not found, returns npos.
       *
       *  Note: equivalent to rfind(__c, __pos).
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find position of a character of a string_view.
       *  @param __svt  An object convertible to string_view containing
       *                characters to locate.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of first occurrence.
      */"	#endif
"/**
       *  @brief  Find position of a character.
       *  @param __c  Character to locate.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of first occurrence.
       *
       *  Starting from @a __pos, searches forward for the character
       *  @a __c within this string.  If found, returns the index
       *  where it was found.  If not found, returns npos.
       *
       *  Note: equivalent to find(__c, __pos).
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find last position of a string_view.
       *  @param __svt  The object convertible to string_view to locate.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of start of last occurrence.
      */"	#endif
"/**
       *  @brief  Find last position of a character.
       *  @param __c  Character to locate.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of last occurrence.
       *
       *  Starting from @a __pos, searches backward for @a __c within
       *  this string.  If found, returns the index where it was
       *  found.  If not found, returns npos.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find position of a string_view.
       *  @param __svt  The object convertible to string_view to locate.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of start of first occurrence.
      */"	#endif
"/**
       *  @brief  Find position of a character.
       *  @param __c  Character to locate.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of first occurrence.
       *
       *  Starting from @a __pos, searches forward for @a __c within
       *  this string.  If found, returns the index where it was
       *  found.  If not found, returns npos.
      */"	#if __cplusplus >= 201703L
"/**
       *  @brief  Return non-const pointer to contents.
       *
       *  This is a pointer to the character sequence held by the string.
       *  Modifying the characters in the sequence is allowed.
      */"	#endif
"/**
       *  @brief  Return const pointer to contents.
       *
       *  This is a pointer to internal data.  It is undefined to modify
       *  the contents through the returned pointer. To get a pointer that
       *  allows modifying the contents use @c &str[0] instead,
       *  (or in C++17 the non-const @c str.data() overload).
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Replace range of characters with string_view.
       *  @param __i1    An iterator referencing the start position
          to replace at.
       *  @param __i2    An iterator referencing the end position
          for the replace.
       *  @param __svt   The object convertible to string_view to insert from.
       *  @return  Reference to this string.
      */"	#endif
// C++11	#endif
"/**
       *  @brief  Replace range of characters with initializer_list.
       *  @param __i1  Iterator referencing start of range to replace.
       *  @param __i2  Iterator referencing end of range to replace.
       *  @param __l  The initializer_list of characters to insert.
       *  @return  Reference to this string.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Removes the characters in the range [__i1,__i2).  In place,
       *  characters in the range [__k1,__k2) are inserted.  If the
       *  length of result exceeds max_size(), length_error is thrown.
       *  The value of the string doesn't change if an error is
       *  thrown.
      */"	#endif
// useful to avoid the overhead of temporary buffering in _M_replace.	#if __cplusplus >= 201103L
// C++11	#endif
// FIXME C++11: should be noexcept.	#endif
"/**
       *  @brief  Remove a range of characters.
       *  @param __first  Iterator referencing the first character to remove.
       *  @param __last  Iterator referencing the end of the range.
       *  @return  Iterator referencing location of first after removal.
       *
       *  Removes the characters in the range [first,last) from this string.
       *  The value of the string doesn't change if an error is thrown.
      */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Insert a string_view.
       *  @param __pos  Iterator referencing position in string to insert at.
       *  @param __svt  The object convertible to string_view to insert from.
       *  @param __pos  Iterator referencing position in string_view to insert
       *  from.
       *  @param __n    The number of characters to insert.
       *  @return  Reference to this string.
      */"	#endif
"/**
       *  @brief  Insert one character.
       *  @param __p  Iterator referencing position in string to insert at.
       *  @param __c  The character to insert.
       *  @return  Iterator referencing newly inserted char.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Inserts character @a __c at position referenced by @a __p.
       *  If adding character causes the length to exceed max_size(),
       *  length_error is thrown.  If @a __p is beyond end of string,
       *  out_of_range is thrown.  The value of the string doesn't
       *  change if an error is thrown.
      */"	#if __cplusplus >= 201703L
// C++11	#endif
"/**
       *  @brief  Insert an initializer_list of characters.
       *  @param __p  Iterator referencing location in string to insert at.
       *  @param __l  The initializer_list of characters to insert.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       */"	#endif
"/**
       *  @brief  Insert a range of characters.
       *  @param __p  Iterator referencing location in string to insert at.
       *  @param __beg  Start of range.
       *  @param __end  End of range.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Inserts characters in range [__beg,__end).  If adding
       *  characters causes the length to exceed max_size(),
       *  length_error is thrown.  The value of the string doesn't
       *  change if an error is thrown.
      */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Set value from a range of characters in a string_view.
       *  @param __svt  The source object convertible to string_view.
       *  @param __pos  The position in the string_view to assign from.
       *  @param __n  The number of characters to assign.
       *  @return  Reference to this string.
       */"	#endif
// C++11	#endif
"/**
       *  @brief  Set value to an initializer_list of characters.
       *  @param __l  The initializer_list of characters to assign.
       *  @return  Reference to this string.
       */"	#endif
"/**
       *  @brief  Set value to a range of characters.
       *  @param __first  Iterator referencing the first character to append.
       *  @param __last  Iterator marking the end of the range.
       *  @return  Reference to this string.
       *
       *  Sets value of string to characters in the range [__first,__last).
      */"	#if __cplusplus >= 201103L
// C++11	#endif
"/**
       *  @brief  Set value to contents of another string.
       *  @param  __str  Source string to use.
       *  @return  Reference to this string.
       *
       *  This function sets this string to the exact contents of @a __str.
       *  @a __str is a valid, but unspecified string.
       */"	#endif
"/**
       *  @brief  Set value to contents of another string.
       *  @param  __str  Source string to use.
       *  @return  Reference to this string.
       */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Append a range of characters from a string_view.
       *  @param __svt The object convertible to string_view to be appended
       *               from.
       *  @param __pos The position in the string_view to append from.
       *  @param __n   The number of characters to append from the string_view.
       *  @return  Reference to this string.
       */"	#endif
"/**
       *  @brief  Append a range of characters.
       *  @param __first  Iterator referencing the first character to append.
       *  @param __last  Iterator marking the end of the range.
       *  @return  Reference to this string.
       *
       *  Appends characters in the range [__first,__last) to this string.
       */"	#if __cplusplus >= 201703L
// C++11	#endif
"/**
       *  @brief  Append an initializer_list of characters.
       *  @param __l  The initializer_list of characters to append.
       *  @return  Reference to this string.
       */"	#endif
"/**
       *  @brief  Append multiple characters.
       *  @param __n  The number of characters to append.
       *  @param __c  The character to use.
       *  @return  Reference to this string.
       *
       *  Appends __n copies of __c to this string.
       */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Append a string_view.
       *  @param __svt The object convertible to string_view to be appended.
       *  @return  Reference to this string.
       */"	#endif
// C++11	#endif
"/**
       *  @brief  Append an initializer_list of characters.
       *  @param __l  The initializer_list of characters to be appended.
       *  @return  Reference to this string.
       */"	#endif
"/**
       *  @brief  Append a character.
       *  @param __c  The character to append.
       *  @return  Reference to this string.
       */"	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reference to the data at the
       *  last element of the %string.
       */"	#endif
"/**
       *  @brief  Provides access to the data contained in the %string.
       *  @param __n The index of the character to access.
       *  @return  Read/write reference to the character.
       *  @throw  std::out_of_range  If @a n is an invalid index.
       *
       *  This function provides for safer data access.  The parameter is
       *  first checked that it is in the range of the string.  The function
       *  throws out_of_range if the check fails.  Success results in
       *  unsharing the string.
       */"	#if __cplusplus >= 201103L
// PR 56166: this should not throw.	#endif
"/**
       *  Erases the string, making it empty.
       */"	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
///  A non-binding request to reduce capacity() to size().	#if __cpp_exceptions
"/**
       *  @brief  Resizes the %string to the specified number of characters.
       *  @param  __n  Number of characters the %string should contain.
       *
       *  This function will resize the %string to the specified length.  If
       *  the new size is smaller than the %string's current size the %string
       *  is truncated, otherwise the %string is extended and new characters
       *  are default-constructed.  For basic types such as char, this means
       *  setting them to 0.
       */"	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reverse iterator that points
       *  to one before the first character in the %string.  Iteration
       *  is done in reverse element order.
       */"	#endif
"/**
       *  Returns a read-only (constant) reverse iterator that points
       *  to one before the first character in the %string.  Iteration
       *  is done in reverse element order.
       */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Convert to a string_view.
       *  @return A string_view.
       */"	#endif
// C++11	#endif
"/**
       *  @brief  Set value to string constructed from initializer %list.
       *  @param  __l  std::initializer_list.
       */"	#endif
"/**
       *  @brief  Set value to string of length 1.
       *  @param  __c  Source character.
       *
       *  Assigning to a character makes this string length 1 and
       *  (*this)[0] == @a c.
       */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Construct string from a string_view.
       *  @param  __t  Source object convertible to string view.
       *  @param  __a  Allocator to use (default is default allocator).
       */"	#endif
"/**
       *  @brief  Construct string as copy of a range.
       *  @param  __beg  Start of range.
       *  @param  __end  End of range.
       *  @param  __a  Allocator to use (default is default allocator).
       */"	#if __cplusplus >= 201703L
// C++11	#endif
"/**
       *  @brief  Construct string from an initializer %list.
       *  @param  __l  std::initializer_list of characters.
       *  @param  __a  Allocator to use (default is default allocator).
       */"	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
// FIXME C++11: should always be noexcept.	#endif
"/**
       *  @brief  Move construct string.
       *  @param  __str  Source string.
       *
       *  The newly-created string contains the exact contents of @a __str.
       *  @a __str is a valid, but unspecified string.
       **/"	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
"/**
       *  @brief  Construct string as multiple characters.
       *  @param  __n  Number of characters.
       *  @param  __c  Character to use.
       *  @param  __a  Allocator to use (default is default allocator).
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Default constructor creates an empty string.
       */"	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
"/**
       *  @brief  Only internally used: Construct string from a string view
       *          wrapper.
       *  @param  __svw  string view wrapper.
       *  @param  __a  Allocator to use.
       */"	#endif
// These types are off.	#if __cplusplus >= 201703L
// XXX MT	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
// Create & Destroy	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
// _M_dispose.	#else
// leaked or not), so a relaxed load is enough.	#else
// be reasonably safe in this case.	#if defined(__GTHREADS)
// Types:	#if __cplusplus < 201103L
// !_GLIBCXX_USE_CXX11_ABI	#else
"/**
       *  @brief  Compare substring against a character %array.
       *  @param __pos  Index of first character of substring.
       *  @param __n1  Number of characters in substring.
       *  @param __s  character %array to compare against.
       *  @param __n2  Number of characters of s.
       *  @return  Integer < 0, 0, or > 0.
       *
       *  Form the substring of this string from the @a __n1
       *  characters starting at @a __pos.  Form a string from the
       *  first @a __n2 characters of @a __s.  Returns an integer < 0
       *  if this substring is ordered before the string from @a __s,
       *  0 if their values are equivalent, or > 0 if this substring
       *  is ordered after the string from @a __s.  Determines the
       *  effective length rlen of the strings to compare as the
       *  smallest of the length of the substring and @a __n2.  The
       *  function then compares the two strings by calling
       *  traits::compare(substring.data(),s,rlen).  If the result of
       *  the comparison is nonzero returns it, otherwise the shorter
       *  one is ordered first.
       *
       *  NB: s must have at least n2 characters, &apos;\\0&apos; has
       *  no special meaning.
      */"	#if __cplusplus > 201703L
// C++17	#endif
"/**
       *  @brief  Compare to a string_view.
       *  @param __pos1  A position in the string to start comparing from.
       *  @param __n1  The number of characters to compare.
       *  @param __svt  An object convertible to string_view to compare
       *                against.
       *  @param __pos2  A position in the string_view to start comparing from.
       *  @param __n2  The number of characters to compare.
       *  @return  Integer < 0, 0, or > 0.
       */"	#endif
"/**
       *  @brief  Compare to a string.
       *  @param __str  String to compare against.
       *  @return  Integer < 0, 0, or > 0.
       *
       *  Returns an integer < 0 if this string is ordered before @a
       *  __str, 0 if their values are equivalent, or > 0 if this
       *  string is ordered after @a __str.  Determines the effective
       *  length rlen of the strings to compare as the smallest of
       *  size() and str.size().  The function then compares the two
       *  strings by calling traits::compare(data(), str.data(),rlen).
       *  If the result of the comparison is nonzero returns it,
       *  otherwise the shorter one is ordered first.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find last position of a character not in a string_view.
       *  @param __svt  An object convertible to string_view containing
       *                characters to avoid.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of last occurrence.
       */"	#endif
"/**
       *  @brief  Find last position of a character not in string.
       *  @param __str  String containing characters to avoid.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of last occurrence.
       *
       *  Starting from @a __pos, searches backward for a character
       *  not contained in @a __str within this string.  If found,
       *  returns the index where it was found.  If not found, returns
       *  npos.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find position of a character not in a string_view.
       *  @param __svt  A object convertible to string_view containing
       *                characters to avoid.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of first occurrence.
       */"	#endif
"/**
       *  @brief  Find position of a character not in string.
       *  @param __str  String containing characters to avoid.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of first occurrence.
       *
       *  Starting from @a __pos, searches forward for a character not contained
       *  in @a __str within this string.  If found, returns the index where it
       *  was found.  If not found, returns npos.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find last position of a character of string.
       *  @param __svt  An object convertible to string_view containing
       *                characters to locate.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of last occurrence.
      */"	#endif
"/**
       *  @brief  Find last position of a character of string.
       *  @param __str  String containing characters to locate.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of last occurrence.
       *
       *  Starting from @a __pos, searches backward for one of the
       *  characters of @a __str within this string.  If found,
       *  returns the index where it was found.  If not found, returns
       *  npos.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find position of a character of a string_view.
       *  @param __svt  An object convertible to string_view containing
       *                characters to locate.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of first occurrence.
      */"	#endif
"/**
       *  @brief  Find position of a character of string.
       *  @param __str  String containing characters to locate.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of first occurrence.
       *
       *  Starting from @a __pos, searches forward for one of the
       *  characters of @a __str within this string.  If found,
       *  returns the index where it was found.  If not found, returns
       *  npos.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find last position of a string_view.
       *  @param __svt  The object convertible to string_view to locate.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of start of last occurrence.
      */"	#endif
"/**
       *  @brief  Find last position of a string.
       *  @param __str  String to locate.
       *  @param __pos  Index of character to search back from (default end).
       *  @return  Index of start of last occurrence.
       *
       *  Starting from @a __pos, searches backward for value of @a
       *  __str within this string.  If found, returns the index where
       *  it begins.  If not found, returns npos.
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Find position of a string_view.
       *  @param __svt  The object convertible to string_view to locate.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of start of first occurrence.
      */"	#endif
"/**
       *  @brief  Find position of a string.
       *  @param __str  String to locate.
       *  @param __pos  Index of character to search from (default 0).
       *  @return  Index of start of first occurrence.
       *
       *  Starting from @a __pos, searches forward for value of @a __str within
       *  this string.  If found, returns the index where it begins.  If not
       *  found, returns npos.
      */"	#if __cplusplus >= 201703L
"/**
       *  @brief  Return non-const pointer to contents.
       *
       *  This is a pointer to the character sequence held by the string.
       *  Modifying the characters in the sequence is allowed.
      */"	#endif
"/**
       *  @brief  Return const pointer to contents.
       *
       *  This is a pointer to internal data.  It is undefined to modify
       *  the contents through the returned pointer. To get a pointer that
       *  allows modifying the contents use @c &str[0] instead,
       *  (or in C++17 the non-const @c str.data() overload).
      */"	#if __cplusplus >= 201703L
// C++17	#endif
"/**
       *  @brief  Replace range of characters with string_view.
       *  @param __i1    An iterator referencing the start position
          to replace at.
       *  @param __i2    An iterator referencing the end position
          for the replace.
       *  @param __svt   The object convertible to string_view to insert from.
       *  @return  Reference to this string.
      */"	#endif
// C++11	#endif
"/**
       *  @brief  Replace range of characters with initializer_list.
       *  @param __i1  Iterator referencing start of range to replace.
       *  @param __i2  Iterator referencing end of range to replace.
       *  @param __l  The initializer_list of characters to insert.
       *  @return  Reference to this string.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Removes the characters in the range [__i1,__i2).  In place,
       *  characters in the range [__k1,__k2) are inserted.  If the
       *  length of result exceeds max_size(), length_error is thrown.
       *  The value of the string doesn't change if an error is
       *  thrown.
      */"	#endif
// useful to avoid the overhead of temporary buffering in _M_replace.	#if __cplusplus >= 201103L
"/**
       *  @brief  Replace range of characters with range.
       *  @param __i1  Iterator referencing start of range to replace.
       *  @param __i2  Iterator referencing end of range to replace.
       *  @param __k1  Iterator referencing start of range to insert.
       *  @param __k2  Iterator referencing end of range to insert.
       *  @return  Reference to this string.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Removes the characters in the range [__i1,__i2).  In place,
       *  characters in the range [__k1,__k2) are inserted.  If the
       *  length of result exceeds max_size(), length_error is thrown.
       *  The value of the string doesn't change if an error is
       *  thrown.
      */"	#if __cplusplus >= 201103L
// C++11	#endif
"/**
       *  @brief  Remove the last character.
       *
       *  The string must be non-empty.
       */"	#endif
"/**
       *  @brief  Remove a range of characters.
       *  @param __first  Iterator referencing the first character to remove.
       *  @param __last  Iterator referencing the end of the range.
       *  @return  Iterator referencing location of first after removal.
       *
       *  Removes the characters in the range [first,last) from this string.
       *  The value of the string doesn't change if an error is thrown.
      */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Insert a string_view.
       *  @param __pos  Iterator referencing position in string to insert at.
       *  @param __svt  The object convertible to string_view to insert from.
       *  @param __pos  Iterator referencing position in string_view to insert
       *  from.
       *  @param __n    The number of characters to insert.
       *  @return  Reference to this string.
      */"	#endif
"/**
       *  @brief  Insert one character.
       *  @param __p  Iterator referencing position in string to insert at.
       *  @param __c  The character to insert.
       *  @return  Iterator referencing newly inserted char.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Inserts character @a __c at position referenced by @a __p.
       *  If adding character causes the length to exceed max_size(),
       *  length_error is thrown.  If @a __p is beyond end of string,
       *  out_of_range is thrown.  The value of the string doesn't
       *  change if an error is thrown.
      */"	#if __cplusplus >= 201703L
// C++11	#endif
// See PR libstdc++/83328	#endif
"/**
       *  @brief  Insert an initializer_list of characters.
       *  @param __p  Iterator referencing location in string to insert at.
       *  @param __l  The initializer_list of characters to insert.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       */"	#ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
"/**
       *  @brief  Insert a range of characters.
       *  @param __p  Iterator referencing location in string to insert at.
       *  @param __beg  Start of range.
       *  @param __end  End of range.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Inserts characters in range [__beg,__end).  If adding
       *  characters causes the length to exceed max_size(),
       *  length_error is thrown.  The value of the string doesn't
       *  change if an error is thrown.
      */"	#endif
"/**
       *  @brief  Insert a range of characters.
       *  @param __p  Const_iterator referencing location in string to
       *              insert at.
       *  @param __beg  Start of range.
       *  @param __end  End of range.
       *  @return  Iterator referencing the first inserted char.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Inserts characters in range [beg,end).  If adding characters
       *  causes the length to exceed max_size(), length_error is
       *  thrown.  The value of the string doesn't change if an error
       *  is thrown.
      */"	#else
"/**
       *  @brief  Insert multiple characters.
       *  @param __p  Iterator referencing location in string to insert at.
       *  @param __n  Number of characters to insert
       *  @param __c  The character to insert.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Inserts @a __n copies of character @a __c starting at the
       *  position referenced by iterator @a __p.  If adding
       *  characters causes the length to exceed max_size(),
       *  length_error is thrown.  The value of the string doesn't
       *  change if an error is thrown.
      */"	#endif
"/**
       *  @brief  Insert multiple characters.
       *  @param __p  Const_iterator referencing location in string to
       *              insert at.
       *  @param __n  Number of characters to insert
       *  @param __c  The character to insert.
       *  @return  Iterator referencing the first inserted char.
       *  @throw  std::length_error  If new length exceeds @c max_size().
       *
       *  Inserts @a __n copies of character @a __c starting at the
       *  position referenced by iterator @a __p.  If adding
       *  characters causes the length to exceed max_size(),
       *  length_error is thrown.  The value of the string doesn't
       *  change if an error is thrown.
      */"	#else
// C++17	#endif
"/**
       *  @brief  Set value from a range of characters in a string_view.
       *  @param __svt  The source object convertible to string_view.
       *  @param __pos  The position in the string_view to assign from.
       *  @param __n  The number of characters to assign.
       *  @return  Reference to this string.
       */"	#endif
// C++11	#endif
"/**
       *  @brief  Set value to an initializer_list of characters.
       *  @param __l  The initializer_list of characters to assign.
       *  @return  Reference to this string.
       */"	#endif
"/**
       *  @brief  Set value to a range of characters.
       *  @param __first  Iterator referencing the first character to append.
       *  @param __last  Iterator marking the end of the range.
       *  @return  Reference to this string.
       *
       *  Sets value of string to characters in the range [__first,__last).
      */"	#if __cplusplus >= 201103L
// C++11	#endif
// 2063. Contradictory requirements for string move assignment	#endif
"/**
       *  @brief  Set value to contents of another string.
       *  @param  __str  Source string to use.
       *  @return  Reference to this string.
       */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Append a range of characters from a string_view.
       *  @param __svt  An object convertible to string_view to be appended from.
       *  @param __pos The position in the string_view to append from.
       *  @param __n   The number of characters to append from the string_view.
       *  @return  Reference to this string.
       */"	#endif
"/**
       *  @brief  Append a range of characters.
       *  @param __first  Iterator referencing the first character to append.
       *  @param __last  Iterator marking the end of the range.
       *  @return  Reference to this string.
       *
       *  Appends characters in the range [__first,__last) to this string.
       */"	#if __cplusplus >= 201103L
// C++11	#endif
"/**
       *  @brief  Append an initializer_list of characters.
       *  @param __l  The initializer_list of characters to append.
       *  @return  Reference to this string.
       */"	#endif
"/**
       *  @brief  Append multiple characters.
       *  @param __n  The number of characters to append.
       *  @param __c  The character to use.
       *  @return  Reference to this string.
       *
       *  Appends __n copies of __c to this string.
       */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Append a string_view.
       *  @param __svt  An object convertible to string_view to be appended.
       *  @return  Reference to this string.
       */"	#endif
// C++11	#endif
"/**
       *  @brief  Append an initializer_list of characters.
       *  @param __l  The initializer_list of characters to be appended.
       *  @return  Reference to this string.
       */"	#endif
"/**
       *  @brief  Append a character.
       *  @param __c  The character to append.
       *  @return  Reference to this string.
       */"	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reference to the data at the
       *  last element of the %string.
       */"	#endif
"/**
       *  @brief  Provides access to the data contained in the %string.
       *  @param __n The index of the character to access.
       *  @return  Read/write reference to the character.
       *  @throw  std::out_of_range  If @a n is an invalid index.
       *
       *  This function provides for safer data access.  The parameter is
       *  first checked that it is in the range of the string.  The function
       *  throws out_of_range if the check fails.
       */"	#if __cplusplus >= 201103L
///  A non-binding request to reduce capacity() to size().	#if __cpp_exceptions
"/**
       *  @brief  Resizes the %string to the specified number of characters.
       *  @param  __n  Number of characters the %string should contain.
       *
       *  This function will resize the %string to the specified length.  If
       *  the new size is smaller than the %string's current size the %string
       *  is truncated, otherwise the %string is extended and new characters
       *  are default-constructed.  For basic types such as char, this means
       *  setting them to 0.
       */"	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reverse iterator that points
       *  to one before the first character in the %string.  Iteration
       *  is done in reverse element order.
       */"	#endif
"/**
       *  Returns a read-only (constant) reverse iterator that points
       *  to one before the first character in the %string.  Iteration
       *  is done in reverse element order.
       */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Convert to a string_view.
       *  @return A string_view.
       */"	#endif
// C++11	#endif
"/**
       *  @brief  Set value to string constructed from initializer %list.
       *  @param  __l  std::initializer_list.
       */"	#endif
"/**
       *  @brief  Set value to string of length 1.
       *  @param  __c  Source character.
       *
       *  Assigning to a character makes this string length 1 and
       *  (*this)[0] == @a c.
       */"	#if __cplusplus >= 201103L
// If this allocation throws there are no effects:	#endif
"/**
       *  @brief  Assign the value of @a str to this string.
       *  @param  __str  Source string.
       */"	#if __cplusplus >= 201103L
// C++17	#endif
"/**
       *  @brief  Construct string from a string_view.
       *  @param  __t  Source object convertible to string view.
       *  @param  __a  Allocator to use (default is default allocator).
       */"	#endif
"/**
       *  @brief  Construct string as copy of a range.
       *  @param  __beg  Start of range.
       *  @param  __end  End of range.
       *  @param  __a  Allocator to use (default is default allocator).
       */"	#if __cplusplus >= 201103L
// C++11	#endif
"/**
       *  @brief  Construct string from an initializer %list.
       *  @param  __l  std::initializer_list of characters.
       *  @param  __a  Allocator to use (default is default allocator).
       */"	#endif
// 3076. basic_string CTAD ambiguity	#endif
"/**
       *  @brief  Construct string as multiple characters.
       *  @param  __n  Number of characters.
       *  @param  __c  Character to use.
       *  @param  __a  Allocator to use (default is default allocator).
       */"	#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
// 3076. basic_string CTAD ambiguity	#endif
"/**
       *  @brief  Construct string as copy of a C string.
       *  @param  __s  Source C string.
       *  @param  __a  Allocator to use (default is default allocator).
       */"	#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063	#endif
// string::iterator, _CharT*, etc.	#ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
// The actual data.	#if __cplusplus >= 201103L
// TODO check __is_final	#if __cplusplus < 201103L
"/**
       *  @brief  Only internally used: Construct string from a string view
       *          wrapper.
       *  @param  __svw  string view wrapper.
       *  @param  __a  Allocator to use.
       */"	#endif
// type used for positions in insert, erase etc.	#if __cplusplus < 201103L
"/**
   *  @class basic_string basic_string.h <string>
   *  @brief  Managing sequences of characters and character-like objects.
   *
   *  @ingroup strings
   *  @ingroup sequences
   *
   *  @tparam _CharT  Type of character
   *  @tparam _Traits  Traits for character type, defaults to
   *                   char_traits<_CharT>.
   *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, a
   *  <a href=""tables.html#66"">reversible container</a>, and a
   *  <a href=""tables.html#67"">sequence</a>.  Of the
   *  <a href=""tables.html#68"">optional sequence requirements</a>, only
   *  @c push_back, @c at, and @c %array access are supported.
   */"	definition of basic_string<_CharT, _Traits, _Alloc>
//	#ifndef _BASIC_STRING_H
// _GLIBCXX_ARRAY	#endif
// C++11	#endif
// namespace std	#ifdef _GLIBCXX_DEBUG
/// Partial specialization for std::array	definition of tuple_element<_Int, array<_Tp, _Nm>>
/// Partial specialization for std::array	definition of tuple_size<array<_Tp, _Nm>>
// namespace std	std
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
// Constrained free swap overload, see p0185r1	#else
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
// Specialized algorithms.	definition of swap
// Array comparisons.	definition of operator==
// boolean ? lvalue : (throw-expr, lvalue)	declaration of front
// Element access.	definition of operator[]
// Element access.	declaration of operator[]
// Capacity.	definition of size
// Capacity.	declaration of size
// Iterators.	declaration of begin
// Iterators.	definition of begin
// DR 776.	declaration of fill
// DR 776.	definition of fill
// Support for zero-sized arrays mandatory.	declaration of _AT_Type
"/**
   *  @brief A standard container for storing a fixed size sequence of elements.
   *
   *  @ingroup sequences
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, a
   *  <a href=""tables.html#66"">reversible container</a>, and a
   *  <a href=""tables.html#67"">sequence</a>.
   *
   *  Sets support random access iterators.
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */"	definition of array<_Tp, _Nm>
"/** @file include/array
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_ARRAY
/* _UNIQUE_PTR_H */	#endif
// namespace	#endif
// C++17	#endif
// namespace __detail::__variant	#endif
// @} group pointer_abstractions	#if __cplusplus >= 201703L
/// Disable std::make_unique for arrays of known bound	#endif
/// std::hash specialization for unique_ptr.	definition of hash<unique_ptr<_Tp, _Dp>>
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
// Constrained free swap overload, see p0185r1	#else
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
// Disable copy from lvalue.	definition of unique_ptr
/// Exchange the pointer and deleter with another object.	declaration of swap
"/** @brief Replace the stored pointer.
       *
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */"	definition of reset
/// Release ownership of any stored pointer.	declaration of release
/// Return @c true if the stored pointer is not null.	declaration of operator bool
/// Return a reference to the stored deleter.	declaration of get_deleter
/// Return a reference to the stored deleter.	declaration of get_deleter
/// Return a reference to the stored deleter.	definition of get_deleter
/// Return the stored pointer.	declaration of get
/// Return the stored pointer.	definition of get
/// Access an element of owned array.	declaration of operator[]
/// Reset the %unique_ptr to empty, invoking the deleter if necessary.	declaration of operator=
"/** @brief Assignment from another type.
       *
       * @param __u  The object to transfer ownership from, which owns a
       *             convertible pointer to an array object.
       *
       * Invokes the deleter first if this object owns a pointer.
       */"	definition of operator=
"/** @brief Move assignment operator.
       *
       * @param __u  The object to transfer ownership from.
       *
       * Invokes the deleter first if this object owns a pointer.
       */"	declaration of operator=
/// Destructor, invokes the deleter if the stored pointer is not null.	declaration of ~unique_ptr
/// Destructor, invokes the deleter if the stored pointer is not null.	definition of ~unique_ptr
/// Creates a unique_ptr that owns nothing.	definition of unique_ptr
/// Move constructor.	declaration of unique_ptr
"/** Takes ownership of a pointer.
       *
       * @param __p  A pointer to an array of a type safely convertible
       * to an array of @c element_type
       * @param __d  A reference to a deleter.
       *
       * The deleter will be initialized with @p std::move(__d)
       */"	definition of unique_ptr
"/** Takes ownership of a pointer.
       *
       * @param __p  A pointer to an array of a type safely convertible
       * to an array of @c element_type
       * @param __d  A reference to a deleter.
       *
       * The deleter will be initialized with @p __d
       */"	definition of unique_ptr
"/** Takes ownership of a pointer.
       *
       * @param __p  A pointer to an array of a type safely convertible
       * to an array of @c element_type
       *
       * The deleter will be value-initialized.
       */"	definition of unique_ptr
/// Default constructor, creates a unique_ptr that owns nothing.	definition of unique_ptr
// helper template for detecting a safe conversion from a raw pointer	definition of __safe_conversion_raw
// unique_ptr	definition of __safe_conversion_up
// like is_base_of<_Tp, _Up> but false if unqualified types are the same	definition of __is_derived_Tp
// DR 740 - omit specialization for array objects with a compile time length	definition of unique_ptr<_Tp[], _Dp>
// Disable copy from lvalue.	definition of unique_ptr
/// Exchange the pointer and deleter with another object.	declaration of swap
/// Exchange the pointer and deleter with another object.	definition of swap
"/** @brief Replace the stored pointer.
       *
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */"	definition of reset
"/** @brief Replace the stored pointer.
       *
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */"	declaration of reset
/// Release ownership of any stored pointer.	definition of release
/// Release ownership of any stored pointer.	declaration of release
/// Return @c true if the stored pointer is not null.	definition of operator bool
/// Return @c true if the stored pointer is not null.	declaration of operator bool
/// Return a reference to the stored deleter.	declaration of get_deleter
/// Return a reference to the stored deleter.	definition of get_deleter
/// Return a reference to the stored deleter.	declaration of get_deleter
/// Return the stored pointer.	definition of get
/// Return the stored pointer.	declaration of get
/// Return the stored pointer.	definition of operator->
/// Return the stored pointer.	declaration of operator->
/// Dereference the stored pointer.	definition of operator*
/// Dereference the stored pointer.	declaration of operator*
/// Reset the %unique_ptr to empty, invoking the deleter if necessary.	declaration of operator=
"/** @brief Assignment from another type.
       *
       * @param __u  The object to transfer ownership from, which owns a
       *             convertible pointer to a non-array object.
       *
       * Invokes the deleter first if this object owns a pointer.
       */"	definition of operator=
"/** @brief Move assignment operator.
       *
       * @param __u  The object to transfer ownership from.
       *
       * Invokes the deleter first if this object owns a pointer.
       */"	definition of operator=
"/** @brief Move assignment operator.
       *
       * @param __u  The object to transfer ownership from.
       *
       * Invokes the deleter first if this object owns a pointer.
       */"	declaration of operator=
/// Destructor, invokes the deleter if the stored pointer is not null.	definition of ~unique_ptr
/// Destructor, invokes the deleter if the stored pointer is not null.	declaration of ~unique_ptr
/// Converting constructor from @c auto_ptr	#pragma GCC diagnostic pop
"/** @brief Converting constructor from another type
       *
       * Requires that the pointer owned by @p __u is convertible to the
       * type of pointer owned by this object, @p __u does not own an array,
       * and @p __u has a compatible deleter type.
       */"	#if _GLIBCXX_USE_DEPRECATED
/// 20.7.1.2 unique_ptr for single objects.	definition of unique_ptr<_Tp, _Dp>
/// Calls @c delete[] @p __ptr	definition of operator()
"/** @brief Converting constructor.
       *
       * Allows conversion from a deleter for arrays of another type, such as
       * a const-qualified version of @p _Tp.
       *
       * Conversions from types derived from @c _Tp are not allowed because
       * it is unsafe to @c delete[] an array of derived types through a
       * pointer to the base type.
       */"	definition of default_delete
/// Default constructor	declaration of default_delete
/// Specialization for arrays, default_delete.	definition of default_delete<_Tp[]>
/// Calls @c delete @p __ptr	definition of operator()
/// Calls @c delete @p __ptr	declaration of operator()
"/** @brief Converting constructor.
       *
       * Allows conversion from a deleter for arrays of another type, @p _Up,
       * only if @p _Up* is convertible to @p _Tp*.
       */"	definition of default_delete
/// Default constructor	declaration of default_delete
/// Primary template of default_delete, used by unique_ptr	definition of default_delete<_Tp>
"/**
   * @addtogroup pointer_abstractions
   * @{
   */"	#if _GLIBCXX_USE_DEPRECATED
"/** @file bits/unique_ptr.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _UNIQUE_PTR_H
/* _STL_VECTOR_H */	#endif
// namespace std	#endif
// C++17	#endif
// namespace __detail::__variant	#endif
/// See std::vector::swap().	definition of swap
/// Based on operator<	definition of operator>=
/// Based on operator<	definition of operator<=
/// Based on operator<	definition of operator>
/// Based on operator==	definition of operator!=
"/**
   *  @brief  Vector ordering relation.
   *  @param  __x  A %vector.
   *  @param  __y  A %vector of the same type as @a __x.
   *  @return  True iff @a __x is lexicographically less than @a __y.
   *
   *  This is a total ordering relation.  It is linear in the size of the
   *  vectors.  The elements must be comparable with @c <.
   *
   *  See std::lexicographical_compare() for how the determination is made.
  */"	definition of operator<
"/**
   *  @brief  Vector equality comparison.
   *  @param  __x  A %vector.
   *  @param  __y  A %vector of the same type as @a __x.
   *  @return  True iff the size and elements of the vectors are equal.
   *
   *  This is an equivalence relation.  It is linear in the size of the
   *  vectors.  Vectors are considered equivalent if their sizes are equal,
   *  and if corresponding elements compare equal.
  */"	definition of operator==
// so we need to individually move each element.	#endif
// _M_assign_aux.	#if __cplusplus >= 201103L
// Emplacing an rvalue of the correct type can use _M_insert_rval.	#endif
// Called by insert(p,x)	#else
// Called by resize(n).	#endif
// the same thing.	#if __cplusplus >= 201103L
// Called by the vector(n) constructor.	#endif
// vector(n,value,a) constructor.	#if __cplusplus >= 201103L
// Called by the second initialize_dispatch above	#if __cplusplus >= 201103L
// Called by the range constructor to implement [23.1.1]/9	#endif
// Called by the range constructor to implement [23.1.1]/9	#if __cplusplus < 201103L
"/**
       *  @brief  Swaps data with another %vector.
       *  @param  __x  A %vector of the same element and allocator types.
       *
       *  This exchanges the elements between two vectors in constant time.
       *  (Three pointers, so it should be quite fast.)
       *  Note that the global std::swap() function is specialized such that
       *  std::swap(v1,v2) will feed to this function.
       *
       *  Whether the allocators are swapped depends on the allocator traits.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Remove a range of elements.
       *  @param  __first  Iterator pointing to the first element to be erased.
       *  @param  __last  Iterator pointing to one past the last element to be
       *                  erased.
       *  @return  An iterator pointing to the element pointed to by @a __last
       *           prior to erasing (or end()).
       *
       *  This function will erase the elements in the range
       *  [__first,__last) and shorten the %vector accordingly.
       *
       *  Note This operation could be expensive and if it is
       *  frequently used the user should consider using std::list.
       *  The user is also cautioned that this function only erases
       *  the elements, and that if the elements themselves are
       *  pointers, the pointed-to memory is not touched in any way.
       *  Managing the pointer is the user's responsibility.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Remove element at given position.
       *  @param  __position  Iterator pointing to element to be erased.
       *  @return  An iterator pointing to the next element (or end()).
       *
       *  This function will erase the element at the given position and thus
       *  shorten the %vector by one.
       *
       *  Note This operation could be expensive and if it is
       *  frequently used the user should consider using std::list.
       *  The user is also cautioned that this function only erases
       *  the element, and that if the element is itself a pointer,
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */"	#if __cplusplus >= 201103L
// Check whether it's an integral type.  If so, it's not an iterator.	#endif
"/**
       *  @brief  Inserts a range into the %vector.
       *  @param  __position  A const_iterator into the %vector.
       *  @param  __first  An input iterator.
       *  @param  __last   An input iterator.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert copies of the data in the range
       *  [__first,__last) into the %vector before the location specified
       *  by @a pos.
       *
       *  Note that this kind of operation could be expensive for a
       *  %vector and if it is frequently used the user should
       *  consider using std::list.
       */"	#else
"/**
       *  @brief  Inserts a number of copies of given data into the %vector.
       *  @param  __position  An iterator into the %vector.
       *  @param  __n  Number of elements to be inserted.
       *  @param  __x  Data to be inserted.
       *
       *  This function will insert a specified number of copies of
       *  the given data before the location specified by @a position.
       *
       *  Note that this kind of operation could be expensive for a
       *  %vector and if it is frequently used the user should
       *  consider using std::list.
       */"	#endif
"/**
       *  @brief  Inserts a number of copies of given data into the %vector.
       *  @param  __position  A const_iterator into the %vector.
       *  @param  __n  Number of elements to be inserted.
       *  @param  __x  Data to be inserted.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert a specified number of copies of
       *  the given data before the location specified by @a position.
       *
       *  Note that this kind of operation could be expensive for a
       *  %vector and if it is frequently used the user should
       *  consider using std::list.
       */"	#else
"/**
       *  @brief  Inserts an initializer_list into the %vector.
       *  @param  __position  An iterator into the %vector.
       *  @param  __l  An initializer_list.
       *
       *  This function will insert copies of the data in the
       *  initializer_list @a l into the %vector before the location
       *  specified by @a position.
       *
       *  Note that this kind of operation could be expensive for a
       *  %vector and if it is frequently used the user should
       *  consider using std::list.
       */"	#endif
"/**
       *  @brief  Inserts given value into %vector before specified iterator.
       *  @param  __position  An iterator into the %vector.
       *  @param  __x  Data to be inserted.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert a copy of the given value before
       *  the specified location.  Note that this kind of operation
       *  could be expensive for a %vector and if it is frequently
       *  used the user should consider using std::list.
       */"	#endif
"/**
       *  @brief  Inserts given value into %vector before specified iterator.
       *  @param  __position  A const_iterator into the %vector.
       *  @param  __x  Data to be inserted.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert a copy of the given value before
       *  the specified location.  Note that this kind of operation
       *  could be expensive for a %vector and if it is frequently
       *  used the user should consider using std::list.
       */"	#else
"/**
       *  @brief  Removes last element.
       *
       *  This is a typical stack operation. It shrinks the %vector by one.
       *
       *  Note that no data is returned, and if the last element's
       *  data is needed, it should be retrieved before pop_back() is
       *  called.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Add data to the end of the %vector.
       *  @param  __x  Data to be added.
       *
       *  This is a typical stack operation.  The function creates an
       *  element at the end of the %vector and assigns the given data
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */"	#if __cplusplus >= 201103L
/**  A non-binding request to reduce capacity() to size().  */	#endif
"/**
       *  @brief  Resizes the %vector to the specified number of elements.
       *  @param  __new_size  Number of elements the %vector should contain.
       *  @param  __x  Data with which new elements should be populated.
       *
       *  This function will %resize the %vector to the specified
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  the %vector is extended and new elements are populated with
       *  given data.
       */"	#endif
"/**
       *  @brief  Resizes the %vector to the specified number of elements.
       *  @param  __new_size  Number of elements the %vector should contain.
       *  @param  __x  Data with which new elements should be populated.
       *
       *  This function will %resize the %vector to the specified
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  the %vector is extended and new elements are populated with
       *  given data.
       */"	#else
/**  Returns the size() of the largest possible %vector.  */	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reverse iterator that points
       *  to one before the first element in the %vector.  Iteration
       *  is done in reverse element order.
       */"	#endif
"/**
       *  Returns a read-only (constant) reverse iterator that points
       *  to one before the first element in the %vector.  Iteration
       *  is done in reverse element order.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Assigns an initializer list to a %vector.
       *  @param  __l  An initializer_list.
       *
       *  This function fills a %vector with copies of the elements in the
       *  initializer list @a __l.
       *
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */"	#endif
// Check whether it's an integral type.  If so, it's not an iterator.	#endif
"/**
       *  @brief  Assigns a range to a %vector.
       *  @param  __first  An input iterator.
       *  @param  __last   An input iterator.
       *
       *  This function fills a %vector with copies of the elements in the
       *  range [__first,__last).
       *
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  %Vector list assignment operator.
       *  @param  __l  An initializer_list.
       *
       *  This function fills a %vector with copies of the elements in the
       *  initializer list @a __l.
       *
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */"	#endif
"/**
       *  @brief  %Vector assignment operator.
       *  @param  __x  A %vector of identical element and allocator types.
       *
       *  All the elements of @a __x are copied, but any unused capacity in
       *  @a __x will not be copied.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus >= 201103L
// Check whether it's an integral type.  If so, it's not an iterator.	#endif
"/**
       *  @brief  Builds a %vector from a range.
       *  @param  __first  An input iterator.
       *  @param  __last  An input iterator.
       *  @param  __a  An allocator.
       *
       *  Create a %vector consisting of copies of the elements from
       *  [first,last).
       *
       *  If the iterators are forward, bidirectional, or
       *  random-access, then this will call the elements' copy
       *  constructor N times (where N is distance(first,last)) and do
       *  no memory reallocation.  But if only input iterators are
       *  used, then this will do at most 2N calls to the copy
       *  constructor, and logN memory reallocations.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Builds a %vector from an initializer list.
       *  @param  __l  An initializer_list.
       *  @param  __a  An allocator.
       *
       *  Create a %vector consisting of copies of the elements in the
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */"	#endif
"/**
       *  @brief  %Vector copy constructor.
       *  @param  __x  A %vector of identical element and allocator types.
       *
       *  All the elements of @a __x are copied, but any unused capacity in
       *  @a __x  will not be copied
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Creates a %vector with copies of an exemplar element.
       *  @param  __n  The number of elements to initially create.
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator.
       *
       *  This constructor fills the %vector with @a __n copies of @a __value.
       */"	#endif
"/**
       *  @brief  Creates a %vector with copies of an exemplar element.
       *  @param  __n  The number of elements to initially create.
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator.
       *
       *  This constructor fills the %vector with @a __n copies of @a __value.
       */"	#else
"/**
       *  @brief  Creates a %vector with no elements.
       *  @param  __a  An allocator object.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Creates a %vector with no elements.
       */"	#if __cplusplus >= 201103L
// C++11	#endif
// so only do it if we know the type can be move-inserted into *this.	#endif
// Concept requirements.	#if __cplusplus < 201103L
"/**
   *  @brief A standard container which offers fixed time access to
   *  individual elements in any order.
   *
   *  @ingroup sequences
   *
   *  @tparam _Tp  Type of element.
   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, a
   *  <a href=""tables.html#66"">reversible container</a>, and a
   *  <a href=""tables.html#67"">sequence</a>, including the
   *  <a href=""tables.html#68"">optional sequence requirements</a> with the
   *  %exception of @c push_front and @c pop_front.
   *
   *  In some terminology a %vector can be described as a dynamic
   *  C-style array, it offers fast and efficient access to individual
   *  elements in any order and saves the user from worrying about
   *  memory and size allocation.  Subscripting ( @c [] ) access is
   *  also provided as with C-style arrays.
  */"	definition of vector<_Tp, _Alloc>
// Kept for ABI compatibility.	#if !_GLIBCXX_INLINE_VERSION
// Kept for ABI compatibility.	#if !_GLIBCXX_INLINE_VERSION
// _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR	#endif
// ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)	#else
// Tell ASan when unused capacity is initialized to be valid.	#if __cplusplus >= 201103L
// Mark unused capacity as invalid after reallocation.	#if __cplusplus >= 201103L
// !is_nothrow_move_constructible<_Tp_alloc_type>.	#endif
// information used by TBAA.	#if __cplusplus >= 201103L
/// See bits/stl_deque.h's _Deque_base for an explanation.	definition of _Vector_base<_Tp, _Alloc>
"/** @file bits/stl_vector.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{vector}
 */"	#ifndef _STL_VECTOR_H
// Compare values for equality.	declaration of operator==
// Compare values for equality.	definition of operator==
// Uses SFINAE to only introduce this function if T has an empty() type.	definition of missing_or_empty
// Dereference support.	declaration of operator->
// Dereference support.	definition of operator->
// conditionally_copyable_t().	declaration of operator=
// Assign a new value.	declaration of operator=
// Assign a new value.	definition of operator=
// Clear the value.	definition of reset
// Clear the value.	declaration of reset
// Transfer the value to the caller.	definition of acquire
// Transfer the value to the caller.	declaration of acquire
// Access the value.	definition of value
// Access the value.	declaration of value
// Construct a value in-place.	definition of emplace
/* implicit */	declaration of maybe_t
// Copy constructor.	declaration of maybe_t
/* implicit */	definition of maybe_t
/* implicit */	declaration of maybe_t
/* implicit */	definition of maybe_t
/* implicit */	declaration of maybe_t
/* implicit */	definition of maybe_t
/* implicit */	declaration of maybe_t
// The default constructor constructs a maybe with no value.	declaration of maybe_t
// bool conversion indicates whether the receiver contains a value.	definition of operator bool
// bool conversion indicates whether the receiver contains a value.	declaration of operator bool
// return whether the receiver contains a value.	definition of has_value
// return whether the receiver contains a value.	declaration of has_value
// This is a value-type class that stores a value of T in aligned storage.	definition of maybe_t<T>
//   }	definition of none_t
// This enables conditionally copyable wrapper types by inheriting from it.	definition of conditionally_copyable_t
// Copy construction/assignment from a maybe_impl.	declaration of maybe_impl_t
// Copy construction/assignment from a maybe_impl.	definition of maybe_impl_t
// Move construction/assignment from a maybe_impl.	definition of maybe_impl_t
// Move construction/assignment from a maybe_impl.	declaration of maybe_impl_t
// Copy construction/assignment from a T.	definition of maybe_impl_t
// Copy construction/assignment from a T.	declaration of maybe_impl_t
// Move construction/assignment from a T.	definition of maybe_impl_t
// Move construction/assignment from a T.	declaration of maybe_impl_t
"// maybe_impl_t is the ""too aggressive"" implementation: it is always copyable."	definition of maybe_impl_t<T>
// FISH_COMMON_H	#endif
"/// wrapper for each function. Avoids needing to call ""return cleanup()"" or similar / everywhere."	definition of cleanup_t
/// Get the absolute path to the fish executable itself	declaration of get_executable_path
// namespace std	#endif
// Custom hash function used by unordered_map/unordered_set when key is const	#ifndef CONST_WCSTRING_HASH
"/* Normally casting an expression to void discards its value, but GCC
   versions 3.4 and newer have __attribute__ ((__warn_unused_result__))
   which may cause unwanted diagnostics in that case.  Use __typeof__
   and __extension__ to work around the problem, if the workaround is
   known to be needed.  */"	#if 3 < __GNUC__ + (4 <= __GNUC_MINOR__)
"/// The status code when an expansion fails, for example, ""$foo["""	STATUS_EXPAND_ERROR
/// The status code used when `read` is asked to consume too much data.	STATUS_READ_TOO_MUCH
/// The status code used when illegal command name is encountered.	STATUS_ILLEGAL_CMD
/// The status code used when a wildcard had no matches.	STATUS_UNMATCHED_WILDCARD
/// The status code used when an external command can not be run.	STATUS_EXEC_FAIL
/// The status code used when an external command can not be run.	STATUS_NOT_EXECUTABLE
/// The status code used when a command was not found.	STATUS_CMD_UNKNOWN
/// like an unrecognized flag, missing or too many arguments, an invalid integer, etc. But	STATUS_INVALID_ARGS
/// The status code used for failure exit in a command (but not if the args were invalid).	STATUS_CMD_ERROR
/// The status code used for normal exit in a command.	STATUS_CMD_OK
// Return values (`$status` values for fish scripts) for various situations.	definition of (unnamed enum)
/// Given an enum return the matching string.	definition of enum_to_str
/// elements in the map.	definition of str_to_enum
/// isn't found.	definition of enum_map<T>
// Return true if the character is in a range reserved for fish's private use.	declaration of fish_reserved_codepoint
/// function in the same situation.	#define UNUSED(expr) do { (void)(expr); } while (0)
/// specified base, return -1.	declaration of convert_digit
/// Detect if we are running under Cygwin or Cgywin64	definition of is_cygwin
/// See https://github.com/Microsoft/WSL/issues/423 and Microsoft/WSL#2997	declaration of is_windows_subsystem_for_linux
/// Return whether we are the child of a fork.	declaration of assert_is_not_forked_child
/// Return whether we are the child of a fork.	declaration of is_forked_child
/// Save the value of tcgetpgrp so we can restore it on exit.	declaration of restore_term_foreground_process_group_for_exit
/// Save the value of tcgetpgrp so we can restore it on exit.	declaration of save_term_foreground_process_group
/// Set up a guard to complain if we try to do certain things (like take a lock) after calling fork.	declaration of setup_fork_guards
/// Configures thread assertions for testing.	declaration of configure_thread_assertions_for_testing
/// pthread_main_np().	declaration of is_main_thread
/// pthread_main_np().	declaration of set_main_thread
/// the gettimeofday function and will have the same precision as that function.	declaration of timef
/// Print a short message about how to file a bug report to stderr.	declaration of bugreport
/// Write the given paragraph of output, redoing linebreaks to fit \p termsize.	declaration of reformat_for_screen
/// failure, the output is set to an empty string.	declaration of unescape_string
/// indicates the string was unmodified.	declaration of unescape_string_in_place
/// appending to result. Return the number of characters consumed, or none() on error.	declaration of read_unquoted_escape
/// are made (i.e. this is a lossy escape).	declaration of debug_escape
/// \return The escaped string	declaration of escape_string
/// error.	declaration of read_loop
/// error.	declaration of write_loop
/// \return the number of bytes read, or 0 on EOF. On EAGAIN, returns -1 if nothing was read.	declaration of read_blocked
/// initialization.	declaration of fish_setlocale
/// \param in the position of the opening quote.	declaration of quote_end
/// make_unique implementation	definition of make_unique
/// Close a file descriptor \p fd, retrying on EINTR.	declaration of exec_close
// \return if this has a valid fd.	definition of valid
// Resets to a new fd, taking ownership.	definition of reset
// Returns the fd, transferring ownership to the caller.	definition of acquire
// Returns the fd.	definition of fd
// Closes the fd if not already closed.	declaration of close
/// A helper class for managing and automatically closing a file descriptor.	definition of autoclose_fd_t
/// This can be handy when there are multiple code paths to exit a block.	definition of scoped_push<T>
// No copying	definition of operator=
// Access to the data is only provided by taking the lock	definition of owning_lock<Data>
/// \return a reference to the lock, for use with a condition variable.	declaration of get_lock
/// \return a reference to the lock, for use with a condition variable.	definition of get_lock
/// This is used in weird cases where a global lock protects more than one piece of data.	declaration of from_global
/// This is used in weird cases where a global lock protects more than one piece of data.	definition of from_global
// We're about to give up our lock, don't hold onto the data.	declaration
/// Implicit conversion to const version.	declaration of operator acquired_lock<const Data>
/// Implicit conversion to const version.	definition of operator acquired_lock<const Data>
// No copying, move construction only	definition of operator=
//	definition of acquired_lock<Data>
"/// ""Narrows"" a wide character string. This just grabs any ASCII characters and trunactes."	declaration of narrow_string_safe
/// Writes out a long safely.	declaration of format_ullong_safe
/// Writes out a long safely.	declaration of format_long_safe
/// Writes out a long safely.	declaration of format_long_safe
/// other than call write(). This is useful after a call to fork() with threads.	declaration of debug_safe
/// Version of format_size that does not allocate memory.	declaration of format_size_safe
/// Format the specified size (in bytes, kilobytes, etc.) into the specified stringbuffer.	declaration of format_size
/// it, which it would be nice if it did, but here it is anyways.	declaration of assert_is_locked
// Check if we are running in the test mode, where we should suppress error output	"#define TESTS_PROGRAM_NAME L""(ignore)"""
/// matches at or below that type.	declaration of string_fuzzy_match_string
// Return -1, 0, 1 if this match is (respectively) better than, equal to, or worse than rhs.	declaration of compare
// Constructor.	declaration of string_fuzzy_match_t
// Strength of the match. The value depends on the type. Lower is stronger.	definition of match_distance_first
/// Test if string is a fuzzy match to another.	definition of string_fuzzy_match_t
/// Indicates where a match shares a prefix with the string it matches.	definition of match_type_shares_prefix
/// Indicates where a match type requires replacing the entire token.	definition of match_type_requires_full_replacement
// We don't match the string.	fuzzy_match_none
// A subsequence match with insertions only: FBR matches FOOBAR.	fuzzy_match_subsequence_insertions_only
// We match a substring of the string: ooBA matches FOOBAR.	fuzzy_match_substring_case_insensitive
// We match a substring of the string: OOBA matches FOOBAR.	fuzzy_match_substring
// We match a prefix of the string, in a case insensitive way: foo matches FOOBAR.	fuzzy_match_prefix_case_insensitive
// We match the string exactly, but in a case insensitive way: foobar matches FOOBAR.	fuzzy_match_case_insensitive
// We match a prefix of the string: FO matches FOOBAR.	fuzzy_match_prefix
// We match the string exactly: FOOBAR matches FOOBAR.	fuzzy_match_exact
/// area.	declaration of wcs2string
/// area.	declaration of wcs2str
/// area.	declaration of wcs2str
/// area.	declaration of str2wcstring
/// area.	declaration of str2wcstring
/// area.	declaration of str2wcstring
/// area.	declaration of str2wcstring
/// Print a stack trace to stderr.	declaration of show_stackframe
/// \return true if execution should cancel.	declaration of cancel_checker_t
/// \return true if execution should cancel.	declaration of cancel_checker_t
/// Move an object into a shared_ptr.	definition of move_to_sharedptr
/// Append a vector \p donator to the vector \p receiver.	definition of vec_append
/// Test if a collection contains a value.	definition of contains
/// See https://developer.gnome.org/glib/stable/glib-I18N.html#N-:CAPS	#define N_(wstr) wstr
/// std::fwprintf()).	#define _(wstr) wgettext(wstr).c_str()
/// errno value. Most notably the pthread family of functions which we never expect to fail.	#define DIE_ON_FAILURE(e) do { int status = e; if (status != 0) { __fish_assert(#e, __FILE__, __LINE__, status); } } while (0)
/// possible it is useful to provide additional context such as a stack backtrace.	#undef assert
// TODO: we use C++11 [[noreturn]] now, does that change things?	#define FATAL_EXIT() do { char exit_read_buff; show_stackframe(L'E'); ignore_result(read(0, &exit_read_buff, 1)); exit_without_destructors(1); } while (0)
/// Set to false if it's been determined we can't trust the last modified timestamp on the tty.	declaration of has_working_tty_timestamps
/// Name of the current program. Should be set at startup. Used by the debug function.	declaration of program_name
/// Profiling flag. True if commands should be profiled.	declaration of g_profiling_active
/// How many stack frames to show when a debug() call is made.	declaration of set_debug_stack_frames
/// How many stack frames to show when a debug() call is made.	declaration of get_debug_stack_frames
/// Character used for the silent mode of the read command	declaration of get_obfuscation_read_char
/// Character representing an omitted newline at the end of text.	declaration of get_omitted_newline_width
/// Character representing an omitted newline at the end of text.	declaration of get_omitted_newline_str
/// ...)	declaration of get_ellipsis_str
/// on other systems.	declaration of get_ellipsis_char
/// Save the shell mode on startup so we can restore them on exit.	declaration of termios
/// Save the shell mode on startup so we can restore them on exit.	declaration of shell_modes
/// Save the shell mode on startup so we can restore them on exit.	declaration of termios
/// Exits without invoking destructors (via _exit), useful for code after fork.	declaration of exit_without_destructors
/// it will not be printed.	declaration of debug_level
/// program_name is 'fish'.	declaration of debug_impl
/// program_name is 'fish'.	declaration of debug_impl
/// Do not escape tildes.	ESCAPE_NO_TILDE
/// string.	ESCAPE_NO_QUOTED
/// Escape all characters, including magic characters like the semicolon.	ESCAPE_ALL
"// escape style is ""script"" (i.e., STRING_STYLE_SCRIPT)."	definition of (unnamed enum)
// don't handle backslash escapes	UNESCAPE_NO_BACKSLASHES
// allow incomplete escape sequences	UNESCAPE_INCOMPLETE
// escape special fish syntax characters like the semicolon	UNESCAPE_SPECIAL
// default behavior	UNESCAPE_DEFAULT
// Flags for unescape_string functions.	definition of (unnamed enum)
/// Fallback length of MAXPATHLEN. Hopefully a sane value.	#endif
// PATH_MAX may not exist.	#ifndef PATH_MAX
// MAXNAMELEN is defined on Linux, BSD, and Solaris among others	#else
// NAME_MAX is not defined on Solaris	#if !defined(NAME_MAX)
// on Mac OS X. See http://www.unicode.org/faq/private_use.html.	#define ENCODE_DIRECT_BASE static_cast<wchar_t>(0xF600)
// no conflicts among the places we use these special characters.	#define EXPAND_RESERVED_BASE RESERVED_CHAR_BASE
// appear in our input stream. See http://www.unicode.org/faq/private_use.html.	#define RESERVED_CHAR_BASE static_cast<wchar_t>(0xFDD0)
// Unicode replacement character.	#define REPLACEMENT_WCHAR 0xFFFDu
// Unicode BOM value.	#define UTF8_BOM_WCHAR 0xFEFFu
// Highest legal byte value.	#define BYTE_MAX 0xFFu
// Highest legal 16-bit Unicode value.	#define UCS2_MAX 0xFFFFu
// Highest legal ASCII value.	#define ASCII_MAX 127u
// Maximum number of bytes used by a single utf-8 character.	#define MAX_UTF8_BYTES 6
// Common string type.	declaration of wcstring
// under Cygwin.	#if defined(_WIN32) || defined(_WIN64) || defined(WIN32) || defined(__CYGWIN__) || \
// PATH_MAX may not exist.	#ifndef PATH_MAX
// IWYU pragma: keep	#endif
// IWYU pragma: keep	#ifdef HAVE_SYS_IOCTL_H
// Prototypes for various functions, mostly string utilities, that are used by most parts of fish.	#ifndef FISH_COMMON_H
// preincrement	declaration of operator++
// preincrement	definition of operator++
// postincrement	declaration of operator++
// postincrement	definition of operator++
/// An atomic type that always use relaxed reads.	definition of relaxed_atomic_t<T>
// Note: deliberate leak.	declaration of operator=
// Note: deliberate leak.	ExprStmt
/// The value is a immortal.	definition of latch_t<T>
/// A mainthread_t variable may only be accessed on the main thread.	definition of mainthread_t<T>
// Include this as an instance variable to prevent globals from being copied or moved.	definition of fixed_t
// access patterns.	detail
// Support for enforcing correct access to globals.	#ifndef FISH_GLOBAL_SAFETY_H
// FISH_AST_H	#endif
// namespace ast	#endif
/// Extra fields.	definition of extras_
/// Whether any errors were encountered during parsing.	definition of any_error_
// Its type depends on what was requested to parse.	definition of top_
// Shared parsing code that takes the top type.	declaration of parse_from_top
/// Iterator support.	definition of iterator
/// Access the set of extraneous source ranges.	definition of extras
/// Set of error ranges, sorted by offset.	definition of errors
/// Set of semicolons, sorted by offset.	definition of semis
/// Set of comments, sorted by offset.	definition of comments
/// These are only generated if the corresponding flags are set.	definition of extras_t
/// Pass the original source as \p orig.	declaration of dump
/// \return whether any errors were encountered during parsing.	definition of errored
/// \return the top node. This has the type requested in the 'parse' method.	definition of top
/// \return a traversal, allowing iteration over the nodes.	definition of walk
/// Like parse(), but constructs a freestanding_argument_list.	declaration of parse_argument_list
/// \p type may only be job_list or freestanding_argument_list.	declaration of parse
/// The ast type itself.	definition of ast_t
// Stack of nodes.	definition of stack_
// Append a node.	definition of push
// \return whether we are finished visiting.	definition of finished
// Construct an empty visitor, used for iterator support.	definition of traversal_t
// Callback for node_visitation_t.	definition of visit
/* reverse */	ExprStmt
// We want to visit in reverse order so the first child ends up on top of the stack.	ExprStmt
// \return the next node, or nullptr if exhausted.	definition of next
// Construct starting with a node	definition of traversal_t
//    while (const node_t *node = tv.next()) {...}	definition of traversal_t
// Type-deducing helper.	definition of node_visitor
// Whether to iterate in reverse order.	definition of reverse_
// Our adapted visitor.	definition of v_
// We cannot be copied.	definition of node_visitation_t
// Union pointers just dispatch to the generic one.	definition of visit_union_field
// Optional pointers get visited if not null.	definition of visit_optional_field
// List embeddings.	definition of visit_list_field
// Pointer embeddings.	definition of visit_pointer_field
// Direct embeddings.	definition of visit_node_field
"/**
 * A node visitor is like a field visitor, but adapted to only visit actual nodes, as const
 * references. It calls the visit() function of its visitor with a const reference to each node
 * found under a given node.
 *
 * Example:
 * struct MyNodeVisitor {
 *    template <typename Node>
 *    void visit(const Node &n) {...}
 * };
 */"	definition of node_visitation_t<NodeVisitor>
// namespace template_goo	definition of operator=
/// \return true if type Type is in the Candidates list.	definition of type_in_list
// static	definition of allows_keyword
// static	definition of allows_token
// In practice the tok_ends are ignored by fish code so we do not bother to store them.	definition of freestanding_argument_list_t
// instances of this.	definition of andor_job_t
// The job itself.	definition of job
// The && or || token.	definition of conjunction
// Keyword, either not or exclam.	definition of kw
// A not statement like `not true` or `! true`	definition of not_statement_t
// Helper to return the decoration.	declaration of decoration
// Args and redirs	definition of args_or_redirs
// Command to run.	definition of command
// An optional decoration (command, builtin, exec, etc).	declaration of pk
"// ""builtin"" or ""command"" or ""exec"""	definition of decorated_statement_t
// switch <argument> ; body ; end args_redirs	definition of kw_switch
// case <arguments> ; body	definition of kw_case
// block args / redirs	definition of args_or_redirs
// literal end	definition of end
// else part	definition of else_clause
// else if list	definition of elseif_clauses
// if part	definition of if_clause
// else ; body	definition of kw_else
// The 'if' clause following it.	definition of if_clause
// The 'else' keyword.	definition of kw_else
// The body to execute if the condition is true.	definition of body
// 'and/or' tail.	definition of andor_tail
// The 'if' condition.	definition of condition
// The 'if' keyword.	definition of kw_if
// Represents an 'if', either as the first part of an if statement or after an 'else'.	definition of if_clause_t
// Arguments and redirections associated with the block.	definition of args_or_redirs
// The 'end' node.	definition of end
// List of jobs in this block.	definition of jobs
// A header like for, while, etc.	declaration of header_ptr_t
// This is valid: begin echo hi; end	definition of semi_nl
// functions require at least one argument.	definition of kw_function
// 'while'	definition of kw_while
// newline or semicolon	definition of semi_nl
// list of arguments	definition of args
// 'in'	definition of kw_in
// var_name	definition of var_name
// 'for'	definition of kw_for
// not have a terminating newline. It will only fail to be present if we ran out of tokens.	definition of semi_nl
// The rest of the job conjunction, with && or ||s.	definition of continuations
// The job itself.	definition of job
// The job conjunction decorator.	declaration of decorator_t
// A job_conjunction is a job followed by a && or || continuations.	definition of job_conjunction_t
// Maybe backgrounded.	definition of bg
// Piped remainder.	definition of continuation
// The statement.	definition of statement
// A (possibly empty) list of variable assignments.	definition of variables
// Maybe the time keyword.	definition of time
// like if statements, where we require a command).	definition of job_t
// A statement is a normal command, or an if / while / etc	definition of statement_t
/// \return this as an argument, assuming it wraps one.	definition of redirection
/// \return this as an argument, assuming it wraps one.	definition of argument
/// \return whether this represents a redirection	definition of is_redirection
/// \return whether this represents an argument.	definition of is_argument
// An argument or redirection holds either an argument or redirection.	definition of argument_or_redirection_t
// A variable_assignment_t contains a source range like FOO=bar.	definition of variable_assignment_t
// Note that pipes are not redirections.	definition of redirection_t
// This is a separate type because it is sometimes useful to find all arguments.	definition of argument_t
// Convenience typedef for string nodes.	declaration of string_t
// Note this is not a separate type, it is just a convenience typedef.	declaration of semi_nl_t
// Zero or more newlines.	definition of maybe_newlines_t
/// \return whether a token type is allowed in this token_t, i.e. is a member of our Toks list.	declaration of allows_token
// A token node is a node which contains a token, which must be one of the provided values.	definition of token_t<Toks...>
// The token type which was parsed.	definition of type
// A keyword node is a node which contains a keyword, which must be one of the provided values.	definition of keyword_t<KWs...>
// The keyword which was parsed.	definition of kw
// This is where types like job_list_t come from.	#define ELEM(T)
// Disallow moving as we own a raw pointer.	definition of list_t
// It is used by node_visitation_t.	definition of accept
/// Iteration support.	declaration of iterator
/// \return whether we are empty.	definition of empty
/// \return whether we are empty.	declaration of empty
/// \return our count.	definition of count
/// \return a node at a given index, or nullptr if out of range.	definition of at
// This would be a nice use case for std::dynarray.	definition of length
/* implicit */	declaration of operator const ContentsNode &
/* implicit */	definition of operator const ContentsNode &
//    for (const argument_t &arg : argument_list) ...	definition of contents_ptr_t
// A simple fixed-size array, possibly empty.	definition of list_t<ListType, ContentsNode>
/* reverse */	definition of leaf_t
/* reverse */	declaration of leaf_t
// Convenience helper to return whether we are not unsourced.	declaration of has_source
// Convenience helper to return whether we are not unsourced.	definition of has_source
// The source range.	definition of range
// incomplete and the token stream was exhausted.	definition of unsourced
// It declares an empty visit method to avoid requiring the CHILDREN macro.	definition of leaf_t<Type>
"// Base class for all ""branch"" nodes: nodes with at least one ast child."	definition of branch_t<Type>
// Use node_deleter_t to delete an untyped node.	declaration of ~node_t
/// This uses \p storage to reduce allocations.	definition of source
/// \return the source code for this node, or an empty string if unsourced.	definition of source
/// \return the source code for this node, or none if unsourced.	definition of try_source
/// \return the source range for this node, or an empty range {0, 0} if unsourced.	definition of source_range
/// This may return none if the parse was incomplete or had an error.	declaration of try_source_range
/// \return a helpful string description of this node.	declaration of describe
///     if (const auto *job_list = node->try_as<job_list_t>()) job_list->...	definition of try_as
///   if (node->type == type_t::job_list) node->as<job_list_t>()->...	definition of as
/// Disallow copying, etc.	definition of node_t
/// The category of this node.	definition of category
/// The type of this node.	definition of type
/// The parent node, or null if this is root.	definition of parent
/// It is not a template: it is possible to work concretely with this type.	definition of node_t
// namespace template_goo	#define FIELDS(__VA_ARGS__...) template <typename FieldVisitor> void accept(FieldVisitor &visitor, bool reversed = false) { visitor.will_visit_fields_of(*this); template_goo::accept_field_visitor(visitor, reversed, __VA_ARGS__); visitor.did_visit_fields_of(*this); }
// Call visit_field on visitor \p v, for the field \p field and also \p rest.	definition of accept_field_visitor
// Call the field visit methods on visitor \p v passing field \p field.	definition of accept_field_visitor
// void if B is true, SFINAE'd away otherwise.	definition of only_if_t
// A pointer to something, or nullptr if not present.	definition of optional_t<AstNode>
/// \return whether we have non-null contents.	definition of operator bool
/// \return a pointer to the node contents.	definition of get
// It is never null after construction.	definition of union_ptr_t<Nodes...>
// If you want to delete a node and don't know its concrete type, use this deleter type.	definition of node_deleter_t
// Forward declare all AST structs.	#define ELEM(T) struct T ## _t;
// Helper to return a string description of a type.	declaration of ast_type_to_string
// For example this creates `type_t::job_list`.	definition of type_t
// variable in each node.	definition of category_t
"/**
 * This defines the fish abstract syntax tree.
 * The fish ast is a tree data structure. The nodes of the tree
 * are divided into three types:
 *
 * - leaf nodes refer to a range of source, and have no child nodes.
 * - branch nodes have ONLY child nodes, and no other fields.
 * - list nodes contain a list of some other node type (branch or leaf).
 *
 * Most clients will be interested in visiting the nodes of an ast.
 * See node_visitation_t below.
 */"	declaration of node_t
// Programmatic representation of fish grammar.	#ifndef FISH_AST_H
// redirection.	ExprStmt
// dot-| padding	ExprStmt
"// Return a string that repeats ""| "" \p amt times."	declaration
// \return the depth of a node, i.e. number of parent links.	definition of get_depth
// static	definition of parse_argument_list
// static	definition of parse
// It turns out to be more convenient to do this after the parse phase.	ExprStmt
// Populate our ast.	declaration
// static	definition of parse_from_top
// Set the parent fields of all nodes in the tree rooted at \p node.	definition of set_parents
// If non-null, populate with errors.	definition of out_errors_
// A stack containing the nodes whose fields we are visiting.	definition of visit_stack_
// If set, we are unwinding due to error recovery.	definition of unwinding_
// freestanding_argument_list.	definition of top_type_
// Stream of tokens which we consume.	definition of tokens_
// Flags controlling parsing.	definition of flags_
// The ast which we are populating.	definition of ast_
// Handle them directly.	definition of visit_union_field
// This field is an optional node.	definition of visit_list_field
// stream, even if there are no newlines.	ExprStmt
// Overload for maybe_newlines	definition of visit_node_field
// Overload for keyword fields.	definition of visit_node_field
// Overload for token fields.	definition of visit_node_field
// This field is a direct embedding of an AST value.	definition of visit_pointer_field
// Visit branch nodes by just calling accept() to visit their fields.	definition of visit_node_field
// Special error handling to catch 'and' and 'or' in pipelines, like `true | and false`.	declaration
/// This must never return null.	definition of allocate_populate_block_header
// we can't leave our pointer as null.	ExprStmt
// looks like an option (starts with a dash), then parse it as a decorated statement.	if (...) ... 
// Ensure we consume the token, so we don't get back here again at the same place.	ExprStmt
// For example in `true | and`.	ExprStmt
// Construct a decorated statement, which will be unsourced.	return ...
// statement; all of its leaf nodes will end up unsourced.	declaration
/// This must never return null.	definition of allocate_populate_statement_contents
// If exhaust_stream is set, then keep going until we get parse_token_type_t::terminate.	definition of populate_list
// --help' or a naked 'and', and not part of this list.	declaration
// Time keyword is only the time builtin if the next argument doesn't have a dash.	return ...
// Is it like `command --stuff` or `command` by itself?	declaration
// `command` by itself is a command.	if (...) ... 
// But if it's `and --help` then we treat it as an ordinary command.	return ...
// Note we have specific overloads for our keyword nodes, as they need custom logic.	definition of can_parse
// token will be seen by allocate_populate_statement_contents.	return ...
// We have `a=` which is OK if we are allowing incomplete, an error otherwise.	return ...
// We have `a= cmd` and should treat it as a variable assignment.	return ...
// Do we have a variable assignment at all?	if (...) ... 
// These end a job list.	return ...
// overloading purposes.	definition of can_parse
// There are three keywords which end a job list.	switch (...) ... 
"//   complete -c foo -a ""'abc"""	if (...) ... 
// Consume it and add an error.	definition of consume_excess_token_generating_error
// Consume the next token which is expected to be of the given type.	definition of consume_token_type
// \return the token.	definition of consume_any_token
// \return the type of a non-comment token.	definition of peek_type
// \return a reference to a non-comment token at index \p idx.	definition of peek_token
/// Report an error based on \p fmt for the source range \p range.	definition of parse_error
/// Report an error based on \p fmt for the source range \p range.	definition of parse_error
// TODO: can store this conditionally dependent on flags.	if (...) ... 
// These may come about e.g. from `true | and`.	if (...) ... 
/// Report an error based on \p fmt for the source range \p range.	definition of parse_error_impl
/// That is, whether we should stop unwinding when we encounter this type.	definition of list_type_stops_unwind
// Perhaps save this extra semi.	if (...) ... 
// Just skip this newline, no need to save it.	ExprStmt
// Chomp extra comments, semicolons, etc. for a given list type.	definition of chomp_extras
// We could conceivably support this but do not now.	return ...
// Like echo a ; ; && echo b. Not supported.	return ...
// Like if true ; ; ;  else if false; end	return ...
// Like while true ; ; ;  and true ; end	return ...
// This is historically allowed.	return ...
// Like echo a ; ;  echo b	return ...
// But this is not: foo x ; y ; z	return ...
/// \return whether a list type \p type allows arbitrary semicolons in it.	definition of list_type_chomps_semis
// We could conceivably support this but do not now.	return ...
// We could conceivably support this but do not now.	return ...
// Like if true ; \n \n else if false; end	return ...
// Like while true ; \n \n and true ; end	return ...
// Like switch foo \n \n \n case a \n end	return ...
// Like echo a \n \n echo b	return ...
// No newlines inside variable assignment lists.	return ...
// No newlines inside arguments.	return ...
// semicolons, for hysterical raisins.	return ...
/// \return whether a list type \p type allows arbitrary newlines in it.	definition of list_type_chomps_newlines
/// This indicates a bug in fish code.	definition of internal_error
/// \return whether we permit an incomplete parse tree.	definition of allow_incomplete
/// \return whether any leaf nodes we visit should be marked as unsourced.	definition of unsource_leaves
/// This is more efficient than checking the status directly.	definition of is_unwinding
/// \return the parser's status.	definition of status
// Do not consume any tokens until we get back to a list type which stops unwinding.	unwinding
// All further leaf nodes should have the unsourced flag set.	unsourcing
// Parsing is going just fine, thanks for asking.	ok
/// The status of our parser.	definition of status_t
/// Helper for FLOGF. This returns a number of spaces appropriate for a '%*c' format.	definition of spaces
// \return the resulting Node pointer. It is never null.	definition of allocate_visit
// \return the resulting Node pointer. It is never null.	definition of allocate
// Acquire any comments.	ExprStmt
// Chomp trailing extras, etc.	ExprStmt
/* exhaust_stream */	ExprStmt
/* exhaust_stream */	ExprStmt
// Populate \p ast from \p src and \p flags, returning errors (if not null).	definition of populator_t
// TODO: these need to be localized properly.	definition of token_types_user_presentable_description
// TODO: these need to be localized properly.	definition of keywords_user_presentable_description
// Whether any node was found to be unsourced.	definition of any_unsourced
// Total range we have encountered.	definition of total
// Other node types recurse.	definition of visit
/// From C++14.	definition of enable_if_t
// For historical reasons, a job list is a list of job *conjunctions*. This should be fixed.	case ...:
// For historical reasons, a job list is a list of job *conjunctions*. This should be fixed.	case ...:
// For historical reasons, a job list is a list of job *conjunctions*. This should be fixed.	#undef ELEM
// For historical reasons, a job list is a list of job *conjunctions*. This should be fixed.	declaration of job_conjunction_continuation_list_t
// For historical reasons, a job list is a list of job *conjunctions*. This should be fixed.	declaration of job_conjunction_continuation_t
// For historical reasons, a job list is a list of job *conjunctions*. This should be fixed.	declaration of job_list_t
// For historical reasons, a job list is a list of job *conjunctions*. This should be fixed.	definition of job_list_t
// ELEMLIST(x, y) marks list nodes and the type they contain.	#ifndef ELEMLIST
/// Delete an untyped node.	definition of operator()
/// \return a string literal name for an ast type.	definition of ast_type_to_string
/// \return the decoration for this statement.	definition of decoration
/// point the parse tree is incomplete; in particular parent nodes are not set.	definition of find_block_open_keyword
// namespace	ast
// Temporary storage.	definition of storage_
// The tokenizer to generate new tokens.	definition of tok_
// A reference to the original source.	definition of src_
// Number of items in our lookahead.	definition of count_
"// The ""first"" token is at this index."	definition of start_
// Deque would work but is too heavyweight for just 2 items.	definition of lookahead_
// The maximum number of lookahead supported.	definition of kMaxLookahead
// just crash.	ExprStmt
// Squint at it really hard and it even starts to look like a feature.	declaration
/// This returns comments.	definition of advance_1
/// This consumes and stores comments.	definition of next_from_tok
// Helper to mask our circular buffer.	definition of mask
/// These are only collected if parse_flag_include_comments is set.	definition of comment_ranges
/// Provide the orignal source code.	definition of source
/// Pop the next token.	definition of pop
/// We must have that idx < kMaxLookahead.	definition of peek
/// A token stream generates a sequence of parser tokens, permitting arbitrary lookahead.	definition of token_stream_t
/// Convert from tokenizer_t's token type to a parse_token_t type.	definition of parse_token_type_from_tokenizer_token
// Expand if necessary.	if (...) ... 
// If we encounter a quote, we need expansion.	ExprStmt
// that this lowercase set could be shrunk to be just the characters that are in keywords.	declaration
/* Only strings can be keywords */	if (...) ... 
/// Given a token, returns the keyword it matches, or parse_keyword_t::none.	definition of keyword_for_token
// Given an expanded string, returns any keyword it matches.	definition of keyword_with_name
// them.	if (...) ... 
/// \return tokenizer flags corresponding to parse tree flags.	definition of tokenizer_flags_from_parse_flags
/* Enable large inode numbers on Mac OS X 10.5.  */	#ifndef _DARWIN_USE_64_BIT_INODE
/* The size of wchar_t in bits. */	#define WCHAR_T_BITS 32
/* Enable GNU extensions on systems that have them.  */	#ifndef _GNU_SOURCE
/* Use a variadic tparm on NetBSD curses. */	#define TPARM_VARARGS 1
/* Define to the full name of this package. */	"#define PACKAGE_NAME ""fish"""
/* Define to the address where bug reports for this package should be sent. */	"#define PACKAGE_BUGREPORT ""https://github.com/fish-shell/fish-shell/issues"""
/* Define to 1 to disable curses macros that conflict with the STL */	#define NOMACROS 1
/* Define to 1 to disable ncurses macros that conflict with the STL */	#define NCURSES_NOMACROS 1
/* Define to 1 if the _nl_msg_cat_cntr symbol is exported. */	#define HAVE__NL_MSG_CAT_CNTR 1
/* Define to 1 if the winsize struct and TIOCGWINSZ macro exist */	#define HAVE_WINSIZE 1
/* Define to 1 if you have the `wcstod_l' function. */	#define HAVE_WCSTOD_L 1
/* Define to 1 if you have the `wcsncasecmp' function. */	#define HAVE_WCSNCASECMP 1
/* Define to 1 if you have the `wcsdup' function. */	#define HAVE_WCSDUP 1
/* Define to 1 if you have the `wcscasecmp' function. */	#define HAVE_WCSCASECMP 1
/* Define to 1 if you have the <term.h> header file. */	#define HAVE_TERM_H 1
/* Define to 1 if you have the <termios.h> header file. */	#define HAVE_TERMIOS_H 1
/* Define to 1 if you have the <sys/sysctl.h> header file. */	#define HAVE_SYS_SYSCTL_H 1
/* Define to 1 if you have the <sys/select.h> header file. */	#define HAVE_SYS_SELECT_H 1
/* Define to 1 if you have the <sys/ioctl.h> header file. */	#define HAVE_SYS_IOCTL_H 1
/* Define to 1 if the sys_errlist array is available. */	#define HAVE_SYS_ERRLIST 1
/* Define to 1 if `st_mtim.tv_nsec' is a member of `struct stat'. */	#define HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC 1
/* Define to 1 if `d_type' is a member of `struct dirent'. */	#define HAVE_STRUCT_DIRENT_D_TYPE 1
/* Define to 1 if you have the <spawn.h> header file. */	#define HAVE_SPAWN_H 1
/* Define to 1 if you have the <ncurses.h> header file. */	#define HAVE_NCURSES_H 1
/* Define to 1 if you have the <curses.h> header file. */	#define HAVE_CURSES_H 1
/* Define to 1 if you have the `mkostemp' function. */	#define HAVE_MKOSTEMP 1
/* Define to 1 if you have the `killpg' function. */	#define HAVE_KILLPG 1
/* Define to 1 if you have the `gettext' function. */	#define HAVE_GETTEXT 1
/* Define to 1 if you have the 'getrusage' function. */	#define HAVE_GETRUSAGE 1
/* Define to 1 if you have the `getpwent' function. */	#define HAVE_GETPWENT 1
/* Define to 1 if you have the `getifaddrs' function. */	#define HAVE_GETIFADDRS 1
/* Define to 1 if you have the `futimes' function. */	#define HAVE_FUTIMES 1
/* Define to 1 if you have the `futimens' function. */	#define HAVE_FUTIMENS 1
/* Define to 1 if you have the `flock' function. */	#define HAVE_FLOCK 1
/* Define to 1 if you have the <execinfo.h> header file. */	#define HAVE_EXECINFO_H 1
/* Define to 1 if you have the `dirfd' function. */	#define HAVE_DIRFD 1
/* Define to 1 if C++11 thread_local is supported. */	#define HAVE_CX11_THREAD_LOCAL 1
/* Define to 1 if you have the `clock_gettime' function. */	#define HAVE_CLOCK_GETTIME 1
/* Define to 1 if you have the `backtrace_symbols' function. */	#define HAVE_BACKTRACE_SYMBOLS 1
"/* wchar_t uses Unicode 10.0.0.  Version 10.0 of the Unicode Standard is
   synchronized with ISO/IEC 10646:2017, fifth edition, plus
   the following additions from Amendment 1 to the fifth edition:
   - 56 emoji characters
   - 285 hentaigana
   - 3 additional Zanabazar Square characters */"	#endif
"/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */"	#ifdef __GCC_IEC_559
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _STDC_PREDEF_H
/* Both x86-64 and x32 use the 64-bit system call interface.  */	#define __SYSCALL_WORDSIZE 64
/* Determine the wordsize from the preprocessor defines.  */	#if defined __x86_64__ && !defined __ILP32__
/* sys/cdefs.h */	#endif
"/* Generic selection (ISO C11) is a C-only feature, available in GCC
   since version 4.9.  Previous versions do not provide generic
   selection, even though they might set __STDC_VERSION__ to 201112L,
   when in -std=c11 mode.  Thus, we must check for !defined __GNUC__
   when testing __STDC_VERSION__ for generic selection support.
   On the other hand, Clang also defines __GNUC__, so a clang-specific
   check is required to enable the use of generic selection.  */"	#if !defined __cplusplus \
"/* __glibc_macro_warning (MESSAGE) issues warning MESSAGE.  This is
   intended for use in preprocessor macros.

   Note: MESSAGE must be a _single_ string; concatenation of string
   literals is not supported.  */"	#if __GNUC_PREREQ (4,8) || __glibc_clang_prereq (3,5)
"/* Copies attributes from the declaration or type referenced by
   the argument.  */"	#define __attribute_copy__(arg) __attribute__ ((__copy__ (arg)))
/* Undefine (also defined in libc-symbols.h).  */	#undef __attribute_copy__
"/* Describes a char array whose address can safely be passed as the first
   argument to strncpy and strncat, as the char array is not necessarily
   a NUL-terminated string.  */"	#define __attribute_nonstring__ __attribute__ ((__nonstring__))
"/* Do not use a function-like macro, so that __has_include can inhibit
   macro expansion.  */"	#define __glibc_has_include __has_include
/* Not supported.  */	#endif
/* Not supported in old GCC.  */	#define __restrict_arr
"/* ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
     array_name[restrict]
   GCC 3.1 supports this.  */"	#if __GNUC_PREREQ (3,1) && !defined __GNUG__
/* Ignore */	#endif
/* __restrict is known in EGCS 1.2 and above. */	#if !__GNUC_PREREQ (2,92)
/* Ignore */	#endif
"/* It is possible to compile containing GCC extensions even if GCC is
   run in pedantic mode if the uses are carefully marked using the
   `__extension__' keyword.  But this is not generally available before
   version 2.8.  */"	#if !__GNUC_PREREQ (2,8)
"/* GCC 4.3 and above allow passing all anonymous arguments of an
   __extern_always_inline function to some other vararg function.  */"	#if __GNUC_PREREQ (4,3)
"/* GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
   inline semantics, unless -fgnu89-inline is used.  Using __GNUC_STDC_INLINE__
   or __GNUC_GNU_INLINE is not a good enough check for gcc because gcc versions
   older than 4.3 may define these macros and still not guarantee GNU inlining
   semantics.

   clang++ identifies itself as gcc-4.2, but has support for GNU inlining
   semantics, that can be checked for by using the __GNUC_STDC_INLINE_ and
   __GNUC_GNU_INLINE__ macro definitions.  */"	#if (!defined __cplusplus || __GNUC_PREREQ (4,3) \
/* Ignore */	#endif
"/* Associate error messages with the source location of the call site rather
   than with the source location inside the function.  */"	#if __GNUC_PREREQ (4,3)
"/* The Linux kernel defines __always_inline in stddef.h (283d7573), and
   it conflicts with this definition.  Therefore undefine it first to
   allow either header to be included first.  */"	#undef __always_inline
/* Forces a function to be always inlined.  */	#if __GNUC_PREREQ (3,2)
/* Ignore */	#endif
/* empty */	#endif
"/* If fortification mode, we warn about unused results of certain
   function calls which can lead to problems.  */"	#if __GNUC_PREREQ (3,4)
"/* The nonull function attribute allows to mark pointer parameters which
   must not be NULL.  */"	#if __GNUC_PREREQ (3,3)
/* Ignore */	#endif
"/* At some point during the gcc 2.97 development the `strfmon' format
   attribute for functions was introduced.  We don't want to use it
   unconditionally (although this would be possible) since it
   generates warnings.  */"	#if __GNUC_PREREQ (2,97)
/* Ignore */	#endif
"/* At some point during the gcc 2.8 development the `format_arg' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.
   If several `format_arg' attributes are given for the same function, in
   gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
   all designated arguments are considered.  */"	#if __GNUC_PREREQ (2,8)
"/* Since version 4.5, gcc also allows one to specify the message printed
   when a deprecated function is used.  clang claims to be gcc 4.2, but
   may also support this feature.  */"	#if __GNUC_PREREQ (4,5) \
/* Ignore */	#endif
/* Since version 3.2, gcc allows marking deprecated functions.  */	#if __GNUC_PREREQ (3,2)
/* Ignore */	#endif
"/* At some point during the gcc 3.1 development the `used' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */"	#if __GNUC_PREREQ (3,1)
/* Ignore */	#endif
/* This declaration tells the compiler that the value is constant.  */	#if __GNUC_PREREQ (2,5)
/* Ignore */	#endif
"/* At some point during the gcc 2.96 development the `pure' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */"	#if __GNUC_PREREQ (2,96)
/* Ignore.  */	#endif
"/* Tell the compiler which arguments to an allocation function
   indicate the size of the allocation.  */"	#if __GNUC_PREREQ (4, 3)
/* Ignore */	#endif
"/* At some point during the gcc 2.96 development the `malloc' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */"	#if __GNUC_PREREQ (2,96)
/* Ignore */	#endif
"/* GCC has various useful declarations that can be made with the
   `__attribute__' syntax.  All of the ways we use this do fine if
   they are omitted for compilers that don't understand it. */"	#if !defined __GNUC__ || __GNUC__ < 2
"/*
#elif __SOME_OTHER_COMPILER__

# define __REDIRECT(name, proto, alias) name proto; \
	_Pragma(""let "" #name "" = "" #alias)
*/"	#endif
"/* __asm__ (""xyz"") is used throughout the headers to rename functions
   at the assembly language level.  This is wrapped by the __REDIRECT
   macro, in order to support compilers that can do this some other
   way.  When compilers don't support asm-names at all, we have to do
   preprocessor tricks instead (which don't have exactly the right
   semantics, but it's the best we can do).

   Example:
   int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */"	#if defined __GNUC__ && __GNUC__ >= 2
/* Some other non-C99 compiler.  Approximate with [1].  */	#endif
"/* Pre-2.97 GCC did not support C99 flexible arrays but did have
   an equivalent extension with slightly different notation.  */"	#else
"/* GCC 2.97 supports C99 flexible array members as an extension,
   even when in C89 mode or compiling C++ (any version).  */"	#define __flexarr []
"/* Support for flexible arrays.
   Headers that should use flexible arrays only if they're ""real""
   (e.g. only if they won't affect sizeof()) should test
   #if __glibc_c99_flexarr_available.  */"	#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
/* Fortify support.  */	#define __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1)
/* C++ needs to know that types and declarations are C, not C++.  */	#ifdef __cplusplus
/* This is not a typedef so `const __ptr_t' does the right thing.  */	#define __ptr_t void *
"/* For these things, GCC behaves the ANSI way normally,
   and the non-ANSI way under -traditional.  */"	#define __CONCAT(x,y) x ## y
"/* These two macros are not used in glibc anymore.  They are kept here
   only because some other projects expect the macros to be defined.  */"	#define __P(args) args
"/* Compilers that are not clang may object to
       #if defined __clang__ && __has_extension(...)
   even though they do not need to evaluate the right-hand side of the &&.  */"	#if defined __clang__ && defined __has_extension
/* GCC.  */	#endif
/* No inline functions.  */	#endif
/* Not GCC.  */	#else
"/* GCC can always grok prototypes.  For C++ programs we add throw()
   to help it optimize the function calls.  But this works only with
   gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
   as non-throwing using a function attribute since programs can use
   the -fexceptions options for C code as well.  */"	#if !defined __cplusplus && __GNUC_PREREQ (3, 3)
"/* All functions, except those with callbacks or those that
   synchronize memory, are leaf functions.  */"	#if __GNUC_PREREQ (4, 6) && !defined _LIBC
/* Some user header file might have defined this before.  */	#undef __P
"/* The GNU libc does not support any K&R compilers or the traditional mode
   of ISO C compilers anymore.  Check for some of the combinations not
   anymore supported.  */"	#if defined __GNUC__ && !defined __STDC__
/* We are almost always included from features.h. */	#ifndef _FEATURES_H
"/* Copyright (C) 1992-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_CDEFS_H
"/* This file is automatically generated.
   It defines a symbol `__stub_FUNCTION' for each function
   in the C library which is a stub, meaning it will fail
   every time called, usually setting errno to ENOSYS.  */"	#ifdef _LIBC
"/* This file is automatically generated.
   This file selects the right generated file of `__stub_FUNCTION' macros
   based on the architecture being compiled for.  */"	#if !defined __x86_64__
/* features.h  */	#endif
/* Decide whether we can define 'extern inline' functions in headers.  */	#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
/* !ASSEMBLER */	#endif
"/* If we don't have __REDIRECT, prototypes will be missing if
   __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */"	#if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
/* This is here only because every header file already includes this one.  */	#ifndef __ASSEMBLER__
"/* Major and minor version number of the GNU C library package.  Use
   these macros to test for features in specific releases.  */"	#define __GLIBC__ 2
"/* This macro indicates that the installed library is the GNU C Library.
   For historic reasons the value now is 6 and this will stay from now
   on.  The use of this variable is deprecated.  Use __GLIBC__ and
   __GLIBC_MINOR__ now (see below) when you want to test for a specific
   GNU C library version and use the values in <gnu/lib-names.h> to get
   the sonames of the shared libraries.  */"	#undef __GNU_LIBRARY__
"/* GNU formerly extended the scanf functions with modified format
   specifiers %as, %aS, and %a[...] that allocate a buffer for the
   input using malloc.  This extension conflicts with ISO C99, which
   defines %a as a standalone format specifier that reads a floating-
   point number; moreover, POSIX.1-2008 provides the same feature
   using the modifier letter 'm' instead (%ms, %mS, %m[...]).

   We now follow C99 unless GNU extensions are active and the compiler
   is specifically in C89 or C++98 mode (strict or not).  For
   instance, with GCC, -std=gnu11 will have C99-compliant scanf with
   or without -D_GNU_SOURCE, but -std=c89 -D_GNU_SOURCE will have the
   old extension.  */"	"#if (defined __USE_GNU							\"
"/* The function 'gets' existed in C89, but is impossible to use
   safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   compatibility with various implementations of <cstdio>, this test
   must consider only the value of __cplusplus when compiling C++.  */"	#if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
"/* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   defined in all multithreaded code.  GNU libc has not required this
   for many years.  We now treat them as compatibility synonyms for
   _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   comprehensive support for multithreaded code.  Using them never
   lowers the selected level of POSIX conformance, only raises it.  */"	#if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
"/* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   is defined, use POSIX.1-2008 (or another version depending on
   _XOPEN_SOURCE).  */"	#ifdef _DEFAULT_SOURCE
"/* This is to enable compatibility for ISO C++11.
   Check the temporary macro for now, too.  */"	#if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
/* This is to enable compatibility for ISO C++17.  */	#if __cplusplus >= 201703L
/* This is to enable the ISO C90 Amendment 1:1995 extension.  */	#if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
/* This is to enable the ISO C99 extension.  */	#if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
/* This is to enable the ISO C11 extension.  */	#if (defined _ISOC11_SOURCE \
"/* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   define _DEFAULT_SOURCE.  */"	"#if (defined _DEFAULT_SOURCE					\"
/* If _GNU_SOURCE was defined by the user, turn on all the other features.  */	#ifdef _GNU_SOURCE
"/* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   issue a warning; the expectation is that the source is being
   transitioned to use the new macro.  */"	#if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
/* Whether to use feature set F.  */	#define __GLIBC_USE(F) __GLIBC_USE_ ## F
"/* Similarly for clang.  Features added to GCC after version 4.2 may
   or may not also be available in clang, and clang's definitions of
   __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   features can be queried via __has_extension/__has_feature.  */"	#if defined __clang_major__ && defined __clang_minor__
"/* Convenience macro to test the version of gcc.
   Use like this:
   #if __GNUC_PREREQ (2,8)
   ... code requiring gcc 2.8 or later ...
   #endif
   Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   added in 2.0.  */"	#if defined __GNUC__ && defined __GNUC_MINOR__
"/* Suppress kernel-name space pollution unless user expressedly asks
   for it.  */"	#ifndef _LOOSE_KERNEL_NAMES
/* Undefine everything, so we get a clean slate.  */	#undef __USE_ISOC11
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _FEATURES_H
// version dynamically in case it has changed since libstdc++ was configured.	#define _GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC __GLIBC_PREREQ(2,23)
// __GNU_SOURCE is defined.	#if __GLIBC_PREREQ(2,15) && defined(_GNU_SOURCE)
// This keeps isanum, et al from being propagated as macros.	#define __NO_CTYPE 1
"/** @file bits/os_defines.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iosfwd}
 */"	#ifndef _GLIBCXX_OS_DEFINES
"/** @file bits/cpu_defines.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iosfwd}
 */"	#ifndef _GLIBCXX_CPU_DEFINES
// _GLIBCXX_CXX_CONFIG_H	#endif
/* #undef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT */	#endif
/* Define if all C++11 integral type overloads are available in <math.h>.  */	#if __cplusplus >= 201103L
/* #undef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP */	#endif
/* Define if all C++11 floating point overloads are available in <math.h>.  */	#if __cplusplus >= 201103L
/* Define to 1 if mutex_timedlock is available. */	#define _GTHREAD_USE_MUTEX_TIMEDLOCK 1
/* Defined if as can handle rdrand. */	#define _GLIBCXX_X86_RDRAND 1
/* Define to 1 if a verbose library is built, or 0 otherwise. */	#define _GLIBCXX_VERBOSE 1
/* Define if code specialized for wchar_t should be used. */	#define _GLIBCXX_USE_WCHAR_T 1
"/* Define if utimensat and UTIME_OMIT are available in <sys/stat.h> and
   AT_FDCWD in <fcntl.h>. */"	#define _GLIBCXX_USE_UTIMENSAT 1
/* Define if utime is available in <utime.h>. */	#define _GLIBCXX_USE_UTIME 1
/* Define if obsolescent tmpnam is available in <stdio.h>. */	#define _GLIBCXX_USE_TMPNAM 1
/* Define if struct stat has timespec members. */	#define _GLIBCXX_USE_ST_MTIM 1
/* Define if sendfile is available in <sys/sendfile.h>. */	#define _GLIBCXX_USE_SENDFILE 1
/* Define if _SC_NPROCESSORS_ONLN is available in <unistd.h>. */	#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1
/* Defined if sched_yield is available. */	#define _GLIBCXX_USE_SCHED_YIELD 1
/* Define if usable realpath is available in <stdlib.h>. */	#define _GLIBCXX_USE_REALPATH 1
"/* Define if /dev/random and /dev/urandom are available for the random_device
   of TR1 (Chapter 5.1). */"	#define _GLIBCXX_USE_RANDOM_TR1 1
/* Define if POSIX read/write locks are available in <gthr.h>. */	#define _GLIBCXX_USE_PTHREAD_RWLOCK_T 1
/* Define if NLS translations are to be used. */	#define _GLIBCXX_USE_NLS 1
/* Defined if nanosleep is available. */	#define _GLIBCXX_USE_NANOSLEEP 1
/* Define if lstat is available in <sys/stat.h>. */	#define _GLIBCXX_USE_LSTAT 1
/* Define if code specialized for long long should be used. */	#define _GLIBCXX_USE_LONG_LONG 1
/* Define if LFS support is available. */	#define _GLIBCXX_USE_LFS 1
/* Define if __int128 is supported on this host. */	#define _GLIBCXX_USE_INT128 1
/* Define if get_nprocs is available in <sys/sysinfo.h>. */	#define _GLIBCXX_USE_GET_NPROCS 1
/* Defined if gettimeofday is available. */	#define _GLIBCXX_USE_GETTIMEOFDAY 1
/* Define if fchmodat is available in <sys/stat.h>. */	#define _GLIBCXX_USE_FCHMODAT 1
/* Define if fchmod is available in <sys/stat.h>. */	#define _GLIBCXX_USE_FCHMOD 1
"/* Define if /dev/random and /dev/urandom are available for
   std::random_device. */"	#define _GLIBCXX_USE_DEV_RANDOM 1
"/* Define if ISO/IEC TR 24733 decimal floating point types are supported on
   this host. */"	#define _GLIBCXX_USE_DECIMAL_FLOAT 1
/* Defined if clock_gettime has realtime clock support. */	#define _GLIBCXX_USE_CLOCK_REALTIME 1
/* Defined if clock_gettime has monotonic clock support. */	#define _GLIBCXX_USE_CLOCK_MONOTONIC 1
"/* Define if C99 types in <stdint.h> should be imported in <tr1/cstdint> in
   namespace std::tr1. */"	#define _GLIBCXX_USE_C99_STDINT_TR1 1
"/* Define if C99 functions or macros in <math.h> should be imported in
   <tr1/cmath> in namespace std::tr1. */"	#define _GLIBCXX_USE_C99_MATH_TR1 1
"/* Define if wchar_t C99 functions in <inttypes.h> should be imported in
   <tr1/cinttypes> in namespace std::tr1. */"	#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1
"/* Define if C99 functions in <inttypes.h> should be imported in
   <tr1/cinttypes> in namespace std::tr1. */"	#define _GLIBCXX_USE_C99_INTTYPES_TR1 1
"/* Define if C99 functions in <fenv.h> should be imported in <tr1/cfenv> in
   namespace std::tr1. */"	#define _GLIBCXX_USE_C99_FENV_TR1 1
"/* Define if C99 functions in <ctype.h> should be imported in <tr1/cctype> in
   namespace std::tr1. */"	#define _GLIBCXX_USE_C99_CTYPE_TR1 1
"/* Define if C99 functions in <complex.h> should be used in <tr1/complex>.
   Using compiler builtins for these functions requires corresponding C99
   library functions to be present. */"	#define _GLIBCXX_USE_C99_COMPLEX_TR1 1
"/* Define if C99 functions or macros from <wchar.h>, <math.h>, <complex.h>,
   <stdio.h>, and <stdlib.h> can be used or exposed. */"	#define _GLIBCXX_USE_C99 1
"/* Define if C11 functions in <uchar.h> should be imported into namespace std
   in <cuchar>. */"	#define _GLIBCXX_USE_C11_UCHAR_CXX11 1
/* Define to use GNU versioning in the shared library. */	#define _GLIBCXX_SYMVER_GNU 1
/* Define to use symbol versioning in the shared library. */	#define _GLIBCXX_SYMVER 1
/* Define to the value of the SEEK_END integer constant. */	#define _GLIBCXX_STDIO_SEEK_END 2
/* Define to the value of the SEEK_CUR integer constant. */	#define _GLIBCXX_STDIO_SEEK_CUR 1
/* Define to the value of the EOF integer constant. */	#define _GLIBCXX_STDIO_EOF -1
"/* Define if using setrlimit to set resource limits during ""make check"" */"	#define _GLIBCXX_RES_LIMITS 1
/* Define to the letter to which size_t is mangled. */	#define _GLIBCXX_MANGLE_SIZE_T m
/* Define to 1 if a full hosted library is built, or 0 if freestanding. */	#define _GLIBCXX_HOSTED 1
/* Define if gthreads library is available. */	#define _GLIBCXX_HAS_GTHREADS 1
"/* Define to 1 if a fully dynamic basic_string is wanted, 0 to disable,
   undefined for platform defaults */"	#define _GLIBCXX_FULLY_DYNAMIC_STRING 0
/* Define if the compiler supports C++11 atomics. */	#define _GLIBCXX_ATOMIC_BUILTINS 1
"/* Define if C99 functions or macros in <wchar.h> should be imported in
   <cwchar> in namespace std for C++98. */"	#define _GLIBCXX98_USE_C99_WCHAR 1
"/* Define if C99 functions or macros in <stdlib.h> should be imported in
   <cstdlib> in namespace std for C++98. */"	#define _GLIBCXX98_USE_C99_STDLIB 1
"/* Define if C99 functions or macros in <stdio.h> should be imported in
   <cstdio> in namespace std for C++98. */"	#define _GLIBCXX98_USE_C99_STDIO 1
"/* Define if C99 functions or macros in <math.h> should be imported in <cmath>
   in namespace std for C++98. */"	#define _GLIBCXX98_USE_C99_MATH 1
"/* Define if C99 functions in <complex.h> should be used in <complex> for
   C++98. Using compiler builtins for these functions requires corresponding
   C99 library functions to be present. */"	#define _GLIBCXX98_USE_C99_COMPLEX 1
"/* Define if C99 functions or macros in <wchar.h> should be imported in
   <cwchar> in namespace std for C++11. */"	#define _GLIBCXX11_USE_C99_WCHAR 1
"/* Define if C99 functions or macros in <stdlib.h> should be imported in
   <cstdlib> in namespace std for C++11. */"	#define _GLIBCXX11_USE_C99_STDLIB 1
"/* Define if C99 functions or macros in <stdio.h> should be imported in
   <cstdio> in namespace std for C++11. */"	#define _GLIBCXX11_USE_C99_STDIO 1
"/* Define if C99 functions or macros in <math.h> should be imported in <cmath>
   in namespace std for C++11. */"	#define _GLIBCXX11_USE_C99_MATH 1
"/* Define if C99 functions in <complex.h> should be used in <complex> for
   C++11. Using compiler builtins for these functions requires corresponding
   C99 library functions to be present. */"	#define _GLIBCXX11_USE_C99_COMPLEX 1
/* Define to 1 if you have the ANSI C header files. */	#define STDC_HEADERS 1
/* Define to the version of this package. */	"#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION ""version-unused"""
/* Define to the home page for this package. */	"#define _GLIBCXX_PACKAGE_URL """""
/* Define to the one symbol short name of this package. */	"#define _GLIBCXX_PACKAGE_TARNAME ""libstdc++"""
/* Define to the full name and version of this package. */	"#define _GLIBCXX_PACKAGE_STRING ""package-unused version-unused"""
/* Define to the full name of this package. */	"#define _GLIBCXX_PACKAGE_NAME ""package-unused"""
/* Define to the address where bug reports for this package should be sent. */	"#define _GLIBCXX_PACKAGE_BUGREPORT """""
"/* Define to the sub-directory in which libtool stores uninstalled libraries.
   */"	"#define LT_OBJDIR "".libs/"""
/* Define as const if the declaration of iconv() needs const. */	#define _GLIBCXX_ICONV_CONST
/* Define to 1 if you have the `__cxa_thread_atexit_impl' function. */	#define _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL 1
/* Define if writev is available in <sys/uio.h>. */	#define _GLIBCXX_HAVE_WRITEV 1
/* Define to 1 if you have the <wctype.h> header file. */	#define _GLIBCXX_HAVE_WCTYPE_H 1
/* Defined if wcstof exists. */	#define _GLIBCXX_HAVE_WCSTOF 1
/* Define to 1 if you have the <wchar.h> header file. */	#define _GLIBCXX_HAVE_WCHAR_H 1
/* Defined if vwscanf exists. */	#define _GLIBCXX_HAVE_VWSCANF 1
/* Defined if vswscanf exists. */	#define _GLIBCXX_HAVE_VSWSCANF 1
/* Defined if vfwscanf exists. */	#define _GLIBCXX_HAVE_VFWSCANF 1
/* Define to 1 if you have the <utime.h> header file. */	#define _GLIBCXX_HAVE_UTIME_H 1
/* Define to 1 if you have the <unistd.h> header file. */	#define _GLIBCXX_HAVE_UNISTD_H 1
/* Define to 1 if you have the <uchar.h> header file. */	#define _GLIBCXX_HAVE_UCHAR_H 1
/* Define if truncate is available in <unistd.h>. */	#define _GLIBCXX_HAVE_TRUNCATE 1
/* Define to 1 if the target supports thread-local storage. */	#define _GLIBCXX_HAVE_TLS 1
/* Define to 1 if you have the `timespec_get' function. */	#define _GLIBCXX_HAVE_TIMESPEC_GET 1
/* Define to 1 if you have the <tgmath.h> header file. */	#define _GLIBCXX_HAVE_TGMATH_H 1
/* Define to 1 if you have the `tanl' function. */	#define _GLIBCXX_HAVE_TANL 1
/* Define to 1 if you have the `tanhl' function. */	#define _GLIBCXX_HAVE_TANHL 1
/* Define to 1 if you have the `tanhf' function. */	#define _GLIBCXX_HAVE_TANHF 1
/* Define to 1 if you have the `tanf' function. */	#define _GLIBCXX_HAVE_TANF 1
/* Define if S_ISREG is available in <sys/stat.h>. */	#define _GLIBCXX_HAVE_S_ISREG 1
/* Define to 1 if you have the <sys/uio.h> header file. */	#define _GLIBCXX_HAVE_SYS_UIO_H 1
/* Define to 1 if you have the <sys/types.h> header file. */	#define _GLIBCXX_HAVE_SYS_TYPES_H 1
/* Define to 1 if you have the <sys/time.h> header file. */	#define _GLIBCXX_HAVE_SYS_TIME_H 1
/* Define to 1 if you have the <sys/sysinfo.h> header file. */	#define _GLIBCXX_HAVE_SYS_SYSINFO_H 1
/* Define to 1 if you have the <sys/stat.h> header file. */	#define _GLIBCXX_HAVE_SYS_STAT_H 1
/* Define to 1 if you have the <sys/statvfs.h> header file. */	#define _GLIBCXX_HAVE_SYS_STATVFS_H 1
/* Define to 1 if you have the <sys/socket.h> header file. */	#define _GLIBCXX_HAVE_SYS_SOCKET_H 1
/* Define to 1 if you have the <sys/sem.h> header file. */	#define _GLIBCXX_HAVE_SYS_SEM_H 1
/* Define to 1 if you have a suitable <sys/sdt.h> header file */	#define _GLIBCXX_HAVE_SYS_SDT_H 1
/* Define to 1 if you have the <sys/resource.h> header file. */	#define _GLIBCXX_HAVE_SYS_RESOURCE_H 1
/* Define to 1 if you have the <sys/param.h> header file. */	#define _GLIBCXX_HAVE_SYS_PARAM_H 1
/* Define to 1 if you have the <sys/ipc.h> header file. */	#define _GLIBCXX_HAVE_SYS_IPC_H 1
/* Define to 1 if you have the <sys/ioctl.h> header file. */	#define _GLIBCXX_HAVE_SYS_IOCTL_H 1
"/* Define to 1 if the target runtime linker supports binding the same symbol
   to different versions. */"	#define _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT 1
/* Define if symlink is available in <unistd.h>. */	#define _GLIBCXX_HAVE_SYMLINK 1
/* Define if strxfrm_l is available in <string.h>. */	#define _GLIBCXX_HAVE_STRXFRM_L 1
/* Define to 1 if `d_type' is a member of `struct dirent'. */	#define _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE 1
/* Define to 1 if you have the `strtold' function. */	#define _GLIBCXX_HAVE_STRTOLD 1
/* Define to 1 if you have the `strtof' function. */	#define _GLIBCXX_HAVE_STRTOF 1
/* Define to 1 if you have the <string.h> header file. */	#define _GLIBCXX_HAVE_STRING_H 1
/* Define to 1 if you have the <strings.h> header file. */	#define _GLIBCXX_HAVE_STRINGS_H 1
/* Define if strerror_r is available in <string.h>. */	#define _GLIBCXX_HAVE_STRERROR_R 1
/* Define if strerror_l is available in <string.h>. */	#define _GLIBCXX_HAVE_STRERROR_L 1
/* Define to 1 if you have the <stdlib.h> header file. */	#define _GLIBCXX_HAVE_STDLIB_H 1
/* Define to 1 if you have the <stdint.h> header file. */	#define _GLIBCXX_HAVE_STDINT_H 1
/* Define to 1 if you have the <stdbool.h> header file. */	#define _GLIBCXX_HAVE_STDBOOL_H 1
/* Define to 1 if you have the <stdalign.h> header file. */	#define _GLIBCXX_HAVE_STDALIGN_H 1
/* Define to 1 if you have the `sqrtl' function. */	#define _GLIBCXX_HAVE_SQRTL 1
/* Define to 1 if you have the `sqrtf' function. */	#define _GLIBCXX_HAVE_SQRTF 1
/* Define to 1 if you have the `sockatmark' function. */	#define _GLIBCXX_HAVE_SOCKATMARK 1
/* Define to 1 if you have the `sinl' function. */	#define _GLIBCXX_HAVE_SINL 1
/* Define to 1 if you have the `sinhl' function. */	#define _GLIBCXX_HAVE_SINHL 1
/* Define to 1 if you have the `sinhf' function. */	#define _GLIBCXX_HAVE_SINHF 1
/* Define to 1 if you have the `sinf' function. */	#define _GLIBCXX_HAVE_SINF 1
/* Define to 1 if you have the `sincosl' function. */	#define _GLIBCXX_HAVE_SINCOSL 1
/* Define to 1 if you have the `sincosf' function. */	#define _GLIBCXX_HAVE_SINCOSF 1
/* Define to 1 if you have the `sincos' function. */	#define _GLIBCXX_HAVE_SINCOS 1
/* Define to 1 if you have the `setenv' function. */	#define _GLIBCXX_HAVE_SETENV 1
/* Define if readlink is available in <unistd.h>. */	#define _GLIBCXX_HAVE_READLINK 1
/* Define to 1 if you have the `quick_exit' function. */	#define _GLIBCXX_HAVE_QUICK_EXIT 1
/* Define to 1 if you have the `powl' function. */	#define _GLIBCXX_HAVE_POWL 1
/* Define to 1 if you have the `powf' function. */	#define _GLIBCXX_HAVE_POWF 1
/* Define to 1 if you have the `posix_memalign' function. */	#define _GLIBCXX_HAVE_POSIX_MEMALIGN 1
/* Define to 1 if you have the <poll.h> header file. */	#define _GLIBCXX_HAVE_POLL_H 1
/* Define if poll is available in <poll.h>. */	#define _GLIBCXX_HAVE_POLL 1
/* Define to 1 if you have the <netinet/tcp.h> header file. */	#define _GLIBCXX_HAVE_NETINET_TCP_H 1
/* Define to 1 if you have the <netinet/in.h> header file. */	#define _GLIBCXX_HAVE_NETINET_IN_H 1
/* Define to 1 if you have the <netdb.h> header file. */	#define _GLIBCXX_HAVE_NETDB_H 1
/* Define to 1 if you have the `modfl' function. */	#define _GLIBCXX_HAVE_MODFL 1
/* Define to 1 if you have the `modff' function. */	#define _GLIBCXX_HAVE_MODFF 1
/* Define to 1 if you have the `modf' function. */	#define _GLIBCXX_HAVE_MODF 1
/* Define to 1 if you have the <memory.h> header file. */	#define _GLIBCXX_HAVE_MEMORY_H 1
/* Define to 1 if you have the `memalign' function. */	#define _GLIBCXX_HAVE_MEMALIGN 1
/* Define if mbstate_t exists in wchar.h. */	#define _GLIBCXX_HAVE_MBSTATE_T 1
/* Define to 1 if you have the `logl' function. */	#define _GLIBCXX_HAVE_LOGL 1
/* Define to 1 if you have the `logf' function. */	#define _GLIBCXX_HAVE_LOGF 1
/* Define to 1 if you have the `log10l' function. */	#define _GLIBCXX_HAVE_LOG10L 1
/* Define to 1 if you have the `log10f' function. */	#define _GLIBCXX_HAVE_LOG10F 1
/* Define to 1 if you have the <locale.h> header file. */	#define _GLIBCXX_HAVE_LOCALE_H 1
/* Define to 1 if you have the <linux/types.h> header file. */	#define _GLIBCXX_HAVE_LINUX_TYPES_H 1
/* Define to 1 if you have the <linux/random.h> header file. */	#define _GLIBCXX_HAVE_LINUX_RANDOM_H 1
/* Define if futex syscall is available. */	#define _GLIBCXX_HAVE_LINUX_FUTEX 1
/* Define if link is available in <unistd.h>. */	#define _GLIBCXX_HAVE_LINK 1
/* Only used in build directory testsuite_hooks.h. */	#define _GLIBCXX_HAVE_LIMIT_VMEM 0
/* Only used in build directory testsuite_hooks.h. */	#define _GLIBCXX_HAVE_LIMIT_RSS 1
/* Only used in build directory testsuite_hooks.h. */	#define _GLIBCXX_HAVE_LIMIT_FSIZE 1
/* Only used in build directory testsuite_hooks.h. */	#define _GLIBCXX_HAVE_LIMIT_DATA 1
/* Only used in build directory testsuite_hooks.h. */	#define _GLIBCXX_HAVE_LIMIT_AS 1
/* Define to 1 if you have the <libintl.h> header file. */	#define _GLIBCXX_HAVE_LIBINTL_H 1
/* Define to 1 if you have the `ldexpl' function. */	#define _GLIBCXX_HAVE_LDEXPL 1
/* Define to 1 if you have the `ldexpf' function. */	#define _GLIBCXX_HAVE_LDEXPF 1
/* Define if LC_MESSAGES is available in <locale.h>. */	#define _GLIBCXX_HAVE_LC_MESSAGES 1
/* Defined if iswblank exists. */	#define _GLIBCXX_HAVE_ISWBLANK 1
/* Define to 1 if you have the `isnanl' function. */	#define _GLIBCXX_HAVE_ISNANL 1
/* Define to 1 if you have the `isnanf' function. */	#define _GLIBCXX_HAVE_ISNANF 1
/* Define to 1 if you have the `isinfl' function. */	#define _GLIBCXX_HAVE_ISINFL 1
/* Define to 1 if you have the `isinff' function. */	#define _GLIBCXX_HAVE_ISINFF 1
/* Define to 1 if you have the <inttypes.h> header file. */	#define _GLIBCXX_HAVE_INTTYPES_H 1
/* Define if int64_t is a long. */	#define _GLIBCXX_HAVE_INT64_T_LONG 1
/* Define if int64_t is available in <stdint.h>. */	#define _GLIBCXX_HAVE_INT64_T 1
/* Define if you have the iconv() function. */	#define _GLIBCXX_HAVE_ICONV 1
/* Define to 1 if you have the `hypotl' function. */	#define _GLIBCXX_HAVE_HYPOTL 1
/* Define to 1 if you have the `hypotf' function. */	#define _GLIBCXX_HAVE_HYPOTF 1
/* Define to 1 if you have the `hypot' function. */	#define _GLIBCXX_HAVE_HYPOT 1
/* Define if gets is available in <stdio.h> before C++14. */	#define _GLIBCXX_HAVE_GETS 1
/* Define if _Unwind_GetIPInfo is available. */	#define _GLIBCXX_HAVE_GETIPINFO 1
/* Define to 1 if you have the `frexpl' function. */	#define _GLIBCXX_HAVE_FREXPL 1
/* Define to 1 if you have the `frexpf' function. */	#define _GLIBCXX_HAVE_FREXPF 1
/* Define to 1 if you have the `fmodl' function. */	#define _GLIBCXX_HAVE_FMODL 1
/* Define to 1 if you have the `fmodf' function. */	#define _GLIBCXX_HAVE_FMODF 1
/* Define to 1 if you have the `floorl' function. */	#define _GLIBCXX_HAVE_FLOORL 1
/* Define to 1 if you have the `floorf' function. */	#define _GLIBCXX_HAVE_FLOORF 1
/* Define to 1 if you have the <float.h> header file. */	#define _GLIBCXX_HAVE_FLOAT_H 1
/* Define to 1 if you have the `finitel' function. */	#define _GLIBCXX_HAVE_FINITEL 1
/* Define to 1 if you have the `finitef' function. */	#define _GLIBCXX_HAVE_FINITEF 1
/* Define to 1 if you have the `finite' function. */	#define _GLIBCXX_HAVE_FINITE 1
/* Define to 1 if you have the <fenv.h> header file. */	#define _GLIBCXX_HAVE_FENV_H 1
/* Define to 1 if you have the <fcntl.h> header file. */	#define _GLIBCXX_HAVE_FCNTL_H 1
/* Define to 1 if you have the `fabsl' function. */	#define _GLIBCXX_HAVE_FABSL 1
/* Define to 1 if you have the `fabsf' function. */	#define _GLIBCXX_HAVE_FABSF 1
/* Define to 1 if you have the `expl' function. */	#define _GLIBCXX_HAVE_EXPL 1
/* Define to 1 if you have the `expf' function. */	#define _GLIBCXX_HAVE_EXPF 1
/* Define to 1 if you have the <execinfo.h> header file. */	#define _GLIBCXX_HAVE_EXECINFO_H 1
/* Define to 1 if GCC 4.6 supported std::exception_ptr for the target */	#define _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46 1
/* Define if EWOULDBLOCK exists. */	#define _GLIBCXX_HAVE_EWOULDBLOCK 1
/* Define if ETXTBSY exists. */	#define _GLIBCXX_HAVE_ETXTBSY 1
/* Define if ETIMEDOUT exists. */	#define _GLIBCXX_HAVE_ETIMEDOUT 1
/* Define if ETIME exists. */	#define _GLIBCXX_HAVE_ETIME 1
/* Define if EPROTO exists. */	#define _GLIBCXX_HAVE_EPROTO 1
/* Define if EPERM exists. */	#define _GLIBCXX_HAVE_EPERM 1
/* Define if EOWNERDEAD exists. */	#define _GLIBCXX_HAVE_EOWNERDEAD 1
/* Define if EOVERFLOW exists. */	#define _GLIBCXX_HAVE_EOVERFLOW 1
/* Define if ENOTSUP exists. */	#define _GLIBCXX_HAVE_ENOTSUP 1
/* Define if ENOTRECOVERABLE exists. */	#define _GLIBCXX_HAVE_ENOTRECOVERABLE 1
/* Define if ENOSTR exists. */	#define _GLIBCXX_HAVE_ENOSTR 1
/* Define if ENOSR exists. */	#define _GLIBCXX_HAVE_ENOSR 1
/* Define if ENOSPC exists. */	#define _GLIBCXX_HAVE_ENOSPC 1
/* Define if ENOLINK exists. */	#define _GLIBCXX_HAVE_ENOLINK 1
/* Define if ENODATA exists. */	#define _GLIBCXX_HAVE_ENODATA 1
/* Define to 1 if you have the <endian.h> header file. */	#define _GLIBCXX_HAVE_ENDIAN_H 1
/* Define if EIDRM exists. */	#define _GLIBCXX_HAVE_EIDRM 1
/* Define if ECHILD exists. */	#define _GLIBCXX_HAVE_ECHILD 1
/* Define if ECANCELED exists. */	#define _GLIBCXX_HAVE_ECANCELED 1
/* Define if EBADMSG exists. */	#define _GLIBCXX_HAVE_EBADMSG 1
/* Define to 1 if you have the <dlfcn.h> header file. */	#define _GLIBCXX_HAVE_DLFCN_H 1
/* Define to 1 if you have the <dirent.h> header file. */	#define _GLIBCXX_HAVE_DIRENT_H 1
/* Define to 1 if you have the `cosl' function. */	#define _GLIBCXX_HAVE_COSL 1
/* Define to 1 if you have the `coshl' function. */	#define _GLIBCXX_HAVE_COSHL 1
/* Define to 1 if you have the `coshf' function. */	#define _GLIBCXX_HAVE_COSHF 1
/* Define to 1 if you have the `cosf' function. */	#define _GLIBCXX_HAVE_COSF 1
/* Define to 1 if you have the <complex.h> header file. */	#define _GLIBCXX_HAVE_COMPLEX_H 1
/* Define to 1 if you have the `ceill' function. */	#define _GLIBCXX_HAVE_CEILL 1
/* Define to 1 if you have the `ceilf' function. */	#define _GLIBCXX_HAVE_CEILF 1
/* Define to 1 if you have the `at_quick_exit' function. */	#define _GLIBCXX_HAVE_AT_QUICK_EXIT 1
/* Defined if shared_ptr reference counting should use atomic operations. */	#define _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY 1
/* Define to 1 if you have the `atanl' function. */	#define _GLIBCXX_HAVE_ATANL 1
/* Define to 1 if you have the `atanf' function. */	#define _GLIBCXX_HAVE_ATANF 1
/* Define to 1 if you have the `atan2l' function. */	#define _GLIBCXX_HAVE_ATAN2L 1
/* Define to 1 if you have the `atan2f' function. */	#define _GLIBCXX_HAVE_ATAN2F 1
/* Define to 1 if the target assembler supports .symver directive. */	#define _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE 1
/* Define to 1 if you have the `asinl' function. */	#define _GLIBCXX_HAVE_ASINL 1
/* Define to 1 if you have the `asinf' function. */	#define _GLIBCXX_HAVE_ASINF 1
/* Define to 1 if you have the <arpa/inet.h> header file. */	#define _GLIBCXX_HAVE_ARPA_INET_H 1
/* Define to 1 if you have the `aligned_alloc' function. */	#define _GLIBCXX_HAVE_ALIGNED_ALLOC 1
/* Define to 1 if you have the `acosl' function. */	#define _GLIBCXX_HAVE_ACOSL 1
/* Define to 1 if you have the `acosf' function. */	#define _GLIBCXX_HAVE_ACOSF 1
// This section will need some rework when a new (default) backend type is added	#if _GLIBCXX_USE_TBB_PAR_BACKEND
// For now this defaults to being based on the presence of Thread Building Blocks	#ifndef _GLIBCXX_USE_TBB_PAR_BACKEND
// PSTL configuration	#if __cplusplus >= 201703L
// GCC	#endif
// For non-GNU compilers:	#if ! __is_identifier(__has_unique_object_representations)
// Assume these are available if the compiler claims to be a recent GCC:	#define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP 1
/* Define if __float128 is supported on this host. */	#if defined(__FLOAT128__) || defined(__SIZEOF_FLOAT128__)
// language char8_t feature macro is defined.	#ifndef _GLIBCXX_USE_CHAR8_T
// so they should be tested with #if not with #ifdef.	#if __cplusplus >= 201103L
// For example, <windows.h> is known to #define min and max as macros...	#undef min
// for something else under certain OSes (see BADNAMES).	#define __N(msgid) (msgid)
// Create a boolean flag to be used to determine if --fast-math is set.	#ifdef __FAST_MATH__
// For C++11 and C++14 they are in namespace std when requested.	#endif
// In C++17 mathematical special functions are in namespace std.	#elif __cplusplus >= 201103L && __STDCPP_WANT_MATH_SPEC_FUNCS__ != 0
// implementation.	"#if __cplusplus >= 201103L && _GLIBCXX_USE_CXX11_ABI			\"
// libitm) without depending on them if the respective features are not used.	#ifndef _GLIBCXX_USE_WEAK_REF
// macro causes these definitions to be weak.	#ifndef _GLIBCXX_WEAK_DEFINITION
// specify empty default for namespace annotation macros.	#ifndef _GLIBCXX_PSEUDO_VISIBILITY
// !__cplusplus	#else
"// Macros for C linkage: define extern ""C"" linkage only when using C++."	"#define _GLIBCXX_BEGIN_EXTERN_C extern ""C"" {"
// memory accesses which occurred after the refcount became zero.	#ifndef _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE
// include out of the mix.	#endif
// Assert.	#if defined(_GLIBCXX_ASSERTIONS) \
// Disable std::string explicit instantiation declarations in order to assert.	#ifdef _GLIBCXX_ASSERTIONS
// Debug Mode implies checking assertions.	#if defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_ASSERTIONS)
// Inline namespace for long double 128 mode.	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__
// Define if compatibility should be provided for -mlong-double-64.	#undef _GLIBCXX_LONG_DOUBLE_COMPAT
// _GLIBCXX_END_NAMESPACE_CONTAINER	#if defined(_GLIBCXX_DEBUG) || defined(_GLIBCXX_PROFILE)
// Check for invalid use due to lack for weak symbols.	#if __NO_INLINE__ && !__GXX_WEAK__
// Check for invalid usage and unsupported mixed-mode use.	#if defined(_GLIBCXX_DEBUG) && defined(_GLIBCXX_PARALLEL)
// Inline namespaces for profile mode	#ifdef _GLIBCXX_PROFILE
// Inline namespaces for parallel mode.	#ifdef _GLIBCXX_PARALLEL
// Inline namespace for debug mode.	#ifdef _GLIBCXX_DEBUG
// Non-inline namespace for components replaced by alternates in active mode.	#if _GLIBCXX_USE_CXX11_ABI
// Inline namespaces for special modes: debug, parallel, profile.	#if defined(_GLIBCXX_DEBUG) || defined(_GLIBCXX_PARALLEL) \
// C++14	#endif
// C++17	#endif
// Inline namespace for symbol versioning.	#if _GLIBCXX_INLINE_VERSION
// Defined if inline namespaces are used for versioning.	#define _GLIBCXX_INLINE_VERSION 0
// Ignore any pre-defined value of _GLIBCXX_USE_CXX11_ABI	#endif
"/*
  Outline of libstdc++ namespaces.

  namespace std
  {
    namespace __debug { }
    namespace __parallel { }
    namespace __profile { }
    namespace __cxx1998 { }

    namespace __detail {
      namespace __variant { }				// C++17
    }

    namespace rel_ops { }

    namespace tr1
    {
      namespace placeholders { }
      namespace regex_constants { }
      namespace __detail { }
    }

    namespace tr2 { }
    
    namespace decimal { }

    namespace chrono { }				// C++11
    namespace placeholders { }				// C++11
    namespace regex_constants { }			// C++11
    namespace this_thread { }				// C++11
    inline namespace literals {				// C++14
      inline namespace chrono_literals { }		// C++14
      inline namespace complex_literals { }		// C++14
      inline namespace string_literals { }		// C++14
      inline namespace string_view_literals { }		// C++17
    }
  }

  namespace abi { }

  namespace __gnu_cxx
  {
    namespace __detail { }
  }

  For full details see:
  http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/namespaces.html
*/"	std
// checks even at -O0.	#define _GLIBCXX_EXTERN_TEMPLATE 1
// Macro for noexcept, to support in mixed 03/0x mode.	#ifndef _GLIBCXX_NOEXCEPT
// Macro for constexpr, to support in mixed 03/0x mode.	#ifndef _GLIBCXX_CONSTEXPR
// Macro to warn about unused results.	#if __cplusplus >= 201703L
// Macros for ABI tag attributes.	#ifndef _GLIBCXX_ABI_TAG_CXX11
//   _GLIBCXX17_DEPRECATED	#ifndef _GLIBCXX_USE_DEPRECATED
// headers included below, it will be defined to an empty default.	#endif
//   _GLIBCXX_VISIBILITY	#define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1
// See below for C++	#ifndef _GLIBCXX_NOTHROW
//   _GLIBCXX_VISIBILITY	#ifndef _GLIBCXX_PURE
// The datestamp of the C++ library in compressed ISO date format.	#define __GLIBCXX__ 20191008
// The major release number for the GCC release the C++ library belongs to.	#define _GLIBCXX_RELEASE 9
"/** @file bits/c++config.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{version}
 */"	#ifndef _GLIBCXX_CXX_CONFIG_H
/* NDEBUG.  */	#endif
"/* Version 2.4 and later of GCC define a magical variable `__PRETTY_FUNCTION__'
   which contains the name of the function currently being defined.
   This is broken in G++ before version 2.6.
   C9x has a similar variable called __func__, but prefer the GCC one since
   it demangles C++ function names.  */"	#if defined __cplusplus ? __GNUC_PREREQ (2, 6) : __GNUC_PREREQ (2, 4)
/* empty */	#endif
"/* When possible, define assert so that it does not add extra
   parentheses around EXPR.  Otherwise, those added parentheses would
   suppress warnings we'd expect to be detected by gcc's -Wparentheses.  */"	#if defined __cplusplus
/* Not _ASSERT_H_DECLS */	#endif
"/* The following is not at all used here but needed for standard
   compliance.  */"	#endif
"/* The following is not at all used here but needed for standard
   compliance.  */"	declaration of __assert
/* Likewise, but prints the error text for ERRNUM.  */	declaration of __assert_perror_fail
"/* This prints an ""Assertion failed"" message and aborts.  */"	declaration of __assert_fail
/* Not NDEBUG.  */	#else
"/* void assert_perror (int errnum);

   If NDEBUG is defined, do nothing.  If not, and ERRNUM is not zero, print an
   error message with the error text for ERRNUM and abort.
   (This is a GNU extension.) */"	#ifdef __USE_GNU
"/* void assert (int expression);

   If NDEBUG is defined, do nothing.
   If not, and EXPRESSION is zero, print an error message and abort.  */"	#ifdef NDEBUG
"/* assert.h	*/"	#endif
"/*
 *	ISO C99 Standard: 7.2 Diagnostics	<assert.h>
 */"	#ifdef _ASSERT_H
// No include guards on this header...	#pragma GCC system_header
// Else proceed normally.	#endif
// Iff -fno-exceptions, transform error handling code to work without it.	#define __try if (true)
"/** @file bits/exception_defines.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{exception}
 */"	#ifndef _EXCEPTION_DEFINES_H
// namespace	#endif
// Helpers for exception objects in <functional>	declaration of __throw_bad_function_call
// Helpers for exception objects in <future>	declaration of __throw_future_error
// Helpers for exception objects in <system_error>	declaration of __throw_system_error
// Helpers for exception objects in <ios>	declaration of __throw_ios_failure
// Helpers for exception objects in <stdexcept>	declaration of __throw_logic_error
// Helper for exception objects in <typeinfo>	declaration of __throw_bad_cast
// Helper for exception objects in <new>	declaration of __throw_bad_alloc
// Helper for exception objects in <except>	declaration of __throw_bad_exception
//	#ifndef _FUNCTEXCEPT_H
//_CPP_TYPE_TRAITS_H	#endif
"// extern ""C++"""	#endif
// remove the move_iterator wrapper.	definition of __miter_base
//	definition of __is_move_iterator<_Tp>
// C++17	#endif
//	definition of __is_char<_Tp>
// 	definition of __is_scalar<_Tp>
//	definition of __is_arithmetic<_Tp>
//	definition of __is_pointer<_Tp>
// three specializations (float, double and 'long double')	definition of __is_floating<float>
//	definition of __is_floating<_Tp>
// types are supported as well.	definition of __is_integer<bool>
//	definition of __is_integer<_Tp>
// Holds if the template-argument is a void type.	definition of __is_void<_Tp>
// Compare for equality of types.	definition of __are_same<<unnamed>, <unnamed>>
// explained in c++/19404.	definition of __traitor<_Sp, _Tp>
//	std
// Written by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>	#ifndef _CPP_TYPE_TRAITS_H
"// extern ""C++"""	#endif
// <cmath> and <complex> to only the intended types.	definition of __promote<_Tp, false>
// For complex and cmath	definition of __promote<_Tp, <unnamed>>
// For use in string and vstring.	definition of __is_null_pointer
// Declare but don't define.	declaration of __remove_unsigned<bool>
// Given an integral builtin type, return the corresponding signed type.	definition of __remove_unsigned<_Tp>
// Declare but don't define.	declaration of __add_unsigned<bool>
// Given an integral builtin type, return the corresponding unsigned type.	definition of __add_unsigned<_Tp>
// Conditional expression for types. If true, first, if false, second.	definition of __conditional_type<_Cond, _Iftrue, _Iffalse>
// Define a nested type if some predicate holds.	definition of __enable_if<<unnamed>, <unnamed>>
"/** @file ext/type_traits.h
 *  This file is a GNU extension to the Standard C++ Library.
 */"	#ifndef _EXT_TYPE_TRAITS
// namespace	#undef __glibcxx_floating
// See above comment...	definition of __is_signed
// Only floating point types. See N1822. 	definition of __max_digits10
// time constants, but <limits> is big and we avoid including it.	definition of __is_signed
// Only integers for initialization of member constant.	definition of __min
// Sadly std::numeric_limits member functions cannot be used for this.	#define __glibcxx_signed(_Tp) ((_Tp)(-1) < 0)
"/** @file ext/numeric_traits.h
 *  This file is a GNU extension to the Standard C++ Library.
 */"	#ifndef _EXT_NUMERIC_TRAITS
// _GLIBCXX_CONCEPT_CHECK	#endif
// enable/disable	#endif
// a valid instantiation pattern.  Thus, we steal a feature from C99.	#endif
// the checks are on	#else
// It is not supported for freestanding implementations.	#if !defined(_GLIBCXX_CONCEPT_CHECKS) || !_GLIBCXX_HOSTED
"/** @file bits/concept_check.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iterator}
 */"	#ifndef _CONCEPT_CHECK_H
// _GLIBCXX_TYPE_TRAITS	#endif
// C++11	#endif
// namespace std	#endif
// C++2a	#endif
/// True for a type that is an array of unknown bound.	#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
// C++17	#endif
/// is_aggregate_v	#endif
/// has_unique_object_representations	#endif
// C++17	#endif
/// std::is_nothrow_invocable_r_v	#endif
// __is_nothrow_invocable (std::is_nothrow_invocable for C++11)	definition of __is_nothrow_invocable<_Fn, _Args...>
// __is_invocable (std::is_invocable for C++11)	definition of __is_invocable_impl<_Result, _Ret, <unnamed>>
// c++1z or gnu++11	#endif
// __cplusplus >= 201402L	#endif
/// is_nothrow_swappable_with_v	#endif
/// is_nothrow_swappable_with	definition of is_nothrow_swappable_with<_Tp, _Up>
/// is_swappable_with	definition of is_swappable_with<_Tp, _Up>
// Optimization for the homogenous lvalue case, not required:	definition of __is_nothrow_swappable_with_impl<_Tp &, _Tp &>
// Optimization for the homogenous lvalue case, not required:	definition of __is_swappable_with_impl<_Tp &, _Tp &>
// namespace __swappable_with_details	definition of __is_swappable_with_impl<_Tp, _Up>
// __cplusplus >= 201402L	#endif
/// is_nothrow_swappable_v	#endif
/// is_nothrow_swappable	definition of is_nothrow_swappable<_Tp>
/// is_swappable	definition of is_swappable<_Tp>
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
// namespace __swappable_details	definition of __is_swappable_impl<_Tp>
// Internal type trait that allows us to sfinae-protect tuple_cat.	definition of __is_tuple_like<_Tp>
"/**
   *  Use SFINAE to determine if the type _Tp has a publicly-accessible
   *  member type _NTYPE.
   */"	#define _GLIBCXX_HAS_NESTED_TYPE(_NTYPE) template<typename _Tp, typename = __void_t<>> struct __has_ ## _NTYPE : false_type { }; template<typename _Tp> struct __has_ ## _NTYPE<_Tp, __void_t<typename _Tp::_NTYPE>> : true_type { };
// _Op<_Args...> if that is a valid type, otherwise _Default.	definition of __detected_or_t
// Detect whether _Op<_Args...> is a valid type, use _Default if not.	definition of __detected_or
/// Implementation of the detection idiom (positive case).	definition of __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
/// Implementation of the detection idiom (negative case).	definition of __detector<_Default, _AlwaysVoid, _Op, _Args...>
/// A metafunction that always yields void, used for detecting valid types.	definition of void_t
// c++17 or gnu++11	#if __cplusplus >= 201703L || !defined(__STRICT_ANSI__)
// __void_t (std::void_t for C++11)	definition of __void_t
// __enable_if_t (std::enable_if_t for C++11)	definition of __enable_if_t
// C++14	#endif
/// Alias template for result_of	#endif
// __invoke_result (std::invoke_result for C++11)	definition of __invoke_result<_Functor, _ArgTypes...>
// [func.require] paragraph 1 bullet 5:	definition of __result_of_other_impl
// Used by result_of, invoke etc. to unwrap a reference_wrapper.	definition of __inv_unwrap<_Tp, _Up>
// [func.require] paragraph 1 bullet 4:	definition of __result_of_memobj_deref_impl
// [func.require] paragraph 1 bullet 3:	definition of __result_of_memobj_ref_impl
// [func.require] paragraph 1 bullet 2:	definition of __result_of_memfun_deref_impl
// [func.require] paragraph 1 bullet 1:	definition of __result_of_memfun_ref_impl
// Associate a tag type with a specialization of __success_type.	definition of __result_of_success<_Tp, _Tag>
// Sfinae-friendly result_of implementation:	#define __cpp_lib_result_of_sfinae 201210
// __remove_cvref_t (std::remove_cvref_t for C++11).	definition of __remove_cvref_t
/// The underlying type of an enum.	definition of underlying_type<_Tp>
// Sfinae-friendly common_type implementation:	definition of __do_common_type_impl
// Partial specialization for false.	definition of conditional<false, _Iftrue, _Iffalse>
/// Define a member typedef @c type to one of two argument types.	definition of conditional<_Cond, _Iftrue, _Iffalse>
// Partial specialization for true.	definition of enable_if<true, _Tp>
/// Define a member typedef @c type only if a boolean constant is true.	definition of enable_if<<unnamed>, _Tp>
// Helper which adds a reference to a type when given a reference_wrapper	definition of __strip_reference_wrapper<_Tp>
/// decay	definition of decay<_Tp>
// NB: DR 705.	definition of __decay_selector<_Up, false, false>
/// The storage.	declaration of type
/// The value of the strictest alignment of _Types.	definition of alignment_value
"/**
   *  @brief Provide aligned storage for types.
   *
   *  [meta.trans.other]
   *
   *  Provides aligned storage for any of the provided types of at
   *  least size _Len.
   *
   *  @see aligned_storage
   */"	definition of aligned_union<_Len, _Types...>
"/**
   *  @brief Alignment type.
   *
   *  The value of _Align is a default-alignment which shall be the
   *  most stringent alignment requirement for any C++ object type
   *  whose size is no greater than _Len (3.9). The member typedef
   *  type shall be a POD type suitable for use as uninitialized
   *  storage for any object whose size is at most _Len and whose
   *  alignment is a divisor of _Align.
  */"	definition of aligned_storage<_Len, _Align>
/// Alias template for add_pointer	#endif
/// add_pointer	definition of __add_pointer_helper<_Tp, <unnamed>>
/// remove_pointer	definition of remove_pointer<_Tp>
// Pointer modifications.	definition of __remove_pointer_helper<_Tp, <unnamed>>
/// Alias template for remove_all_extents	#endif
/// remove_all_extents	definition of remove_all_extents<_Tp>
/// remove_extent	definition of remove_extent<_Tp>
/// Alias template for make_unsigned	#endif
// Integral, but don't define.	declaration of make_signed<_Tp>
/// make_signed	definition of make_signed<_Tp>
// Use the partial specialization for enumeration types to do that.	#if defined(_GLIBCXX_USE_WCHAR_T)
// Choose signed integer type with the smallest rank and same size as _Tp	definition of __make_signed_selector<_Tp, false, true>
// Utility for finding the signed versions of unsigned integral types.	definition of __make_signed<_Tp>
// Integral, but don't define.	declaration of make_unsigned<bool>
/// make_unsigned	definition of make_unsigned<_Tp>
// Use the partial specialization for enumeration types to do that.	#if defined(_GLIBCXX_USE_WCHAR_T)
// With -fshort-enums, an enum may be as small as a char.	declaration of _UInts
// Choose unsigned integer type with the smallest rank and same size as _Tp	definition of __make_unsigned_selector<_Tp, false, true>
// Utility for finding the unsigned versions of signed integral types.	definition of __make_unsigned<_Tp>
/// Alias template for add_rvalue_reference	#endif
/// add_rvalue_reference	definition of add_rvalue_reference<_Tp>
/// add_lvalue_reference	definition of add_lvalue_reference<_Tp>
/// remove_reference	definition of remove_reference<_Tp>
/// Alias template for add_cv	#endif
/// add_cv	definition of add_cv<_Tp>
/// add_volatile	definition of add_volatile<_Tp>
/// add_const	definition of add_const<_Tp>
/// remove_cv	definition of remove_cv<_Tp>
/// remove_volatile	definition of remove_volatile<_Tp>
/// remove_const	definition of remove_const<_Tp>
// C++2a	#endif
/// is_nothrow_convertible_v	#endif
/// is_convertible	definition of is_convertible<_From, _To>
/// is_base_of	definition of is_base_of<_Base, _Derived>
/// is_same	definition of is_same<<unnamed>, <unnamed>>
/// extent	definition of extent<<unnamed>, _Uint>
/// rank	definition of rank<<unnamed>>
/// alignment_of	definition of alignment_of<_Tp>
/// has_virtual_destructor	definition of has_virtual_destructor<_Tp>
/// is_trivially_destructible	definition of is_trivially_destructible<_Tp>
/// is_trivially_assignable	definition of is_trivially_assignable<_Tp, _Up>
/// is_trivially_default_constructible	definition of is_trivially_default_constructible<_Tp>
/// is_trivially_constructible	definition of is_trivially_constructible<_Tp, _Args...>
/// is_nothrow_move_assignable	definition of is_nothrow_move_assignable<_Tp>
/// is_nothrow_copy_assignable	definition of is_nothrow_copy_assignable<_Tp>
/// is_nothrow_assignable	definition of is_nothrow_assignable<_Tp, _Up>
/// is_move_assignable	definition of is_move_assignable<_Tp>
/// is_copy_assignable	definition of is_copy_assignable<_Tp>
/// is_assignable	definition of is_assignable<_Tp, _Up>
/// is_nothrow_move_constructible	definition of is_nothrow_move_constructible<_Tp>
/// is_nothrow_copy_constructible	definition of is_nothrow_copy_constructible<_Tp>
/// is_nothrow_constructible	definition of is_nothrow_constructible<_Tp, _Args...>
/// is_nothrow_default_constructible	definition of is_nothrow_default_constructible<_Tp>
/// is_move_constructible	definition of is_move_constructible<_Tp>
/// is_copy_constructible	definition of is_copy_constructible<_Tp>
/// is_default_constructible	definition of is_default_constructible<_Tp>
/// is_constructible	definition of is_constructible<_Tp, _Args...>
/// is_nothrow_destructible	definition of is_nothrow_destructible<_Tp>
// instead of decltype(expr).	definition of __do_is_nt_destructible_impl
/// is_destructible	definition of is_destructible<_Tp>
// call expression is wellformed.	definition of __do_is_destructible_impl
/// is_unsigned	definition of is_unsigned<_Tp>
/// is_signed	definition of is_signed<_Tp>
/// is_abstract	definition of is_abstract<_Tp>
/// is_final	#endif
/// is_polymorphic	definition of is_polymorphic<_Tp>
/// is_empty	definition of is_empty<_Tp>
/// is_literal_type	definition of is_literal_type<_Tp>
// Could use is_standard_layout && is_trivial instead of the builtin.	definition of is_pod<_Tp>
/// is_standard_layout	definition of is_standard_layout<_Tp>
// is_trivially_copyable	definition of is_trivially_copyable<_Tp>
/// is_trivial	definition of is_trivial<_Tp>
/// is_volatile	definition of is_volatile<<unnamed>>
/// is_const	definition of is_const<<unnamed>>
// Utility to detect referenceable types ([defns.referenceable]).	definition of __is_referenceable<_Tp>
/// is_member_pointer	definition of is_member_pointer<_Tp>
/// is_compound	definition of is_compound<_Tp>
/// is_scalar	definition of is_scalar<_Tp>
/// is_object	definition of is_object<_Tp>
/// is_fundamental	definition of is_fundamental<_Tp>
/// is_arithmetic	definition of is_arithmetic<_Tp>
/// is_reference	definition of is_reference<_Tp>
/// __is_nullptr_t (extension).	definition of __is_nullptr_t<_Tp>
/// is_null_pointer (LWG 2247).	definition of is_null_pointer<_Tp>
/// is_function	definition of is_function<<unnamed>>
/// is_class	definition of is_class<_Tp>
/// is_union	definition of is_union<_Tp>
/// is_enum	definition of is_enum<_Tp>
/// is_member_function_pointer	definition of is_member_function_pointer<_Tp>
/// is_member_object_pointer	definition of is_member_object_pointer<_Tp>
/// is_rvalue_reference	definition of is_rvalue_reference<<unnamed>>
/// is_lvalue_reference	definition of is_lvalue_reference<<unnamed>>
/// is_pointer	definition of is_pointer<_Tp>
/// is_array	definition of is_array<<unnamed>>
/// is_floating_point	definition of is_floating_point<_Tp>
/// is_integral	definition of is_integral<_Tp>
// uses one of these types for size_t.	#if defined(__GLIBCXX_TYPE_INT_N_0)
/// is_void	definition of is_void<_Tp>
// them, because we need to derive from them as an implementation detail.	definition of __success_type<_Tp>
// C++17	#endif
/// The type used as a compile-time boolean with false value.	declaration of false_type
/// The type used as a compile-time boolean with true value.	declaration of true_type
/// integral_constant	definition of integral_constant<_Tp, __v>
"/** @file include/type_traits
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_TYPE_TRAITS
/* _MOVE_H */	#endif
// namespace	#endif
/// Swap the contents of two arrays.	definition of swap
"/**
   *  @brief Swaps two values.
   *  @param  __a  A thing of arbitrary type.
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */"	definition of swap
/// @} group utilities	#define _GLIBCXX_MOVE(__val) std::move(__val)
// C++11 version of std::exchange for internal use.	definition of __exchange
// 2598. addressof works on temporaries	definition of addressof
"/**
   *  @brief Returns the actual address of the object or function
   *         referenced by r, even in the presence of an overloaded
   *         operator&.
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */"	definition of addressof
// 2296. std::addressof should be constexpr	#endif
// declval, from type_traits.	#if __cplusplus > 201402L
"/**
   *  @brief  Conditionally convert a value to an rvalue.
   *  @param  __x  A thing of arbitrary type.
   *  @return The parameter, possibly cast to an rvalue-reference.
   *
   *  Same as std::move unless the type's move constructor could throw and the
   *  type is copyable, in which case an lvalue-reference is returned instead.
   */"	definition of move_if_noexcept
"/**
   *  @brief  Convert a value to an rvalue.
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */"	definition of move
"/**
   *  @brief  Forward an rvalue.
   *  @return The parameter cast to the specified type.
   *
   *  This function is used to implement ""perfect forwarding"".
   */"	definition of forward
"/**
   *  @brief  Forward an lvalue.
   *  @return The parameter cast to the specified type.
   *
   *  This function is used to implement ""perfect forwarding"".
   */"	definition of forward
"/**
   *  @brief  Forward an lvalue.
   *  @return The parameter cast to the specified type.
   *
   *  This function is used to implement ""perfect forwarding"".
   */"	definition of forward
"/**
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */"	definition of __addressof
"/** @file bits/move.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{utility}
 */"	#ifndef _MOVE_H
/* _STL_ITERATOR_BASE_TYPES_H */	#endif
// namespace	#endif
// untouched	#endif
//@}	#if __cplusplus < 201103L
"/**
   *  This function is not a part of the C++ standard but is syntactic
   *  sugar for internal library use only.
  */"	definition of __iterator_category
/// Partial specialization for const pointer types.	definition of iterator_traits<const _Tp *>
/// Partial specialization for pointer types.	definition of iterator_traits<_Tp *>
// 2408. SFINAE-friendly common_type/iterator_traits is missing in C++14	definition of __iterator_traits<_Iterator, <unnamed>>
"/**
   *  @brief  Traits class for iterators.
   *
   *  This class does nothing but define nested typedefs.  The general
   *  version simply @a forwards the nested typedefs from the Iterator
   *  argument.  Specialized versions for pointers and pointers-to-const
   *  provide tighter, more correct semantics.
  */"	#if __cplusplus >= 201103L
/// This type represents a reference-to-value_type.	declaration of reference
/// This type represents a pointer-to-value_type.	declaration of pointer
/// Distance between iterators is represented as this type.	declaration of difference_type
"/// The type ""pointed to"" by the iterator."	declaration of value_type
/// One of the @link iterator_tags tag types@endlink.	declaration of iterator_category
"/**
   *  @brief  Common %iterator class.
   *
   *  This class does nothing but define nested typedefs.  %Iterator classes
   *  can inherit from this class to save some work.  The typedefs are then
   *  used in specializations and overloading.
   *
   *  In particular, there are no default implementations of requirements
   *  such as @c operator++ and the like.  (How could there be?)
  */"	definition of iterator<_Category, _Tp, _Distance, _Pointer, _Reference>
/// iterator operations.	definition of random_access_iterator_tag
/// operations.	definition of bidirectional_iterator_tag
/// Forward iterators support a superset of input iterator operations.	definition of forward_iterator_tag
///  Marking output iterators.	definition of output_iterator_tag
///  Marking input iterators.	definition of input_iterator_tag
// For __void_t, is_convertible	#endif
"/** @file bits/stl_iterator_base_types.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iterator}
 *
 *  This file contains all of the general iterator-related utility types,
 *  such as iterator_traits and struct iterator.
 */"	#ifndef _STL_ITERATOR_BASE_TYPES_H
// _GLIBCXX_DEBUG_ASSERTIONS	#endif
// Verify that the container is nonempty	#endif
"/** @file debug/assertions.h
 *  This file is a GNU debug extension to the Standard C++ Library.
 */"	#ifndef _GLIBCXX_DEBUG_ASSERTIONS_H
/* _STL_ITERATOR_BASE_FUNCS_H */	#endif
// namespace	#endif
// C++11	#endif
// concept requirements	#endif
// concept requirements	definition of prev
// concept requirements -- taken care of in __advance	#if __cplusplus >= 201103L
"/**
   *  @brief A generalization of pointer arithmetic.
   *  @param  __i  An input iterator.
   *  @param  __n  The @a delta by which to change @p __i.
   *  @return  Nothing.
   *
   *  This increments @p i by @p n.  For bidirectional and random access
   *  iterators, @p __n may be negative, in which case @p __i is decremented.
   *
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */"	definition of advance
"/**
   *  @brief A generalization of pointer arithmetic.
   *  @param  __i  An input iterator.
   *  @param  __n  The @a delta by which to change @p __i.
   *  @return  Nothing.
   *
   *  This increments @p i by @p n.  For bidirectional and random access
   *  iterators, @p __n may be negative, in which case @p __i is decremented.
   *
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */"	definition of advance
// concept requirements	definition of __advance
// concept requirements	definition of __advance
// concept requirements	definition of __advance
// concept requirements -- taken care of in __distance	definition of __advance
// concept requirements -- taken care of in __distance	definition of __advance
"/**
   *  @brief A generalization of pointer arithmetic.
   *  @param  __first  An input iterator.
   *  @param  __last  An input iterator.
   *  @return  The distance between them.
   *
   *  Returns @c n such that __first + n == __last.  This requires
   *  that @p __last must be reachable from @p __first.  Note that @c
   *  n may be negative.
   *
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */"	definition of distance
// concept requirements	#if _GLIBCXX_USE_CXX11_ABI
// concept requirements	definition of __distance
"/** @file bits/stl_iterator_base_funcs.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iterator}
 *
 *  This file contains all of the general iterator-related utility
 *  functions, such as distance() and advance().
 */"	#ifndef _STL_ITERATOR_BASE_FUNCS_H
// namespace std	#endif
// C++2a	#endif
"/**
   * @brief Obtain address referenced by a pointer to an object
   * @param __ptr A pointer to an object
   * @return @c pointer_traits<_Ptr>::to_address(__ptr) if that expression is
             well-formed, otherwise @c to_address(__ptr.operator->())
   * @ingroup pointer_abstractions
  */"	#endif
/// Convenience alias for rebinding pointers.	definition of __ptr_rebind
"/**
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */"	definition of pointer_to
/// Type used to represent the difference between two pointers	declaration of difference_type
/// The type pointed to	declaration of element_type
/// The pointer type	declaration of pointer
"/**
   * @brief  Partial specialization for built-in pointers.
   * @ingroup pointer_abstractions
  */"	definition of pointer_traits<_Tp *>
/// A pointer to a different type.	definition of rebind
/// The type used to represent the difference between two pointers.	declaration of difference_type
/// The type pointed to.	declaration of element_type
/// The pointer type.	declaration of pointer
"/**
   * @brief  Uniform interface to all pointer-like types
   * @ingroup pointer_abstractions
  */"	definition of pointer_traits<_Ptr>
// Given Template<T, ...> and U return Template<U, ...>, otherwise invalid.	definition of __replace_first_arg<_Tp, _Up>
// Given Template<T, ...> return T, otherwise invalid.	definition of __get_first_arg<_Tp>
"/** @file bits/ptr_traits.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _PTR_TRAITS_H
// _GLIBCXX_DEBUG_MACRO_SWITCH_H	#endif
"/** @namespace __gnu_debug
 *  @brief GNU debug classes for public use.
*/"	__gnu_debug
"/**
 * @namespace std::__debug
 * @brief GNU debug code, replaces standard behavior with debug behavior.
 */"	std
"/** @file debug/debug.h
 *  This file is a GNU debug extension to the Standard C++ Library.
 */"	#ifndef _GLIBCXX_DEBUG_MACRO_SWITCH_H
// namespace __gnu_cxx	#endif
"/** @file predefined_ops.h
 *  This is an internal header file, included by other library headers.
 *  You should not attempt to use it directly. @headername{algorithm}
 */"	#ifndef _GLIBCXX_PREDEFINED_OPS_H
// namespace std	#pragma GCC visibility pop
"/** Returns a C-style character string describing the general cause
     *  of the current error.  */"	declaration of what
"/**
   *  @brief Base class for all library exceptions.
   *
   *  This is the base class for all exceptions thrown by the standard
   *  library, and by certain language expressions.  You are free to derive
   *  your own %exception classes, or use a different hierarchy, or to
   *  throw non-class data (e.g., fundamental types).
   */"	definition of exception
"/** @file bits/exception.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly.
 */"	#ifndef __EXCEPTION_H
"/* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
	  || __need_XXX was not defined before */"	#endif
/* _STDDEF_H was defined this time */	#endif
/* C++11.  */	#endif
/* C11 or C++11.  */	#endif
"/* _Float128 is defined as a basic type, so max_align_t must be
     sufficiently aligned for it.  This code must work in C++, so we
     use __float128 here; that is only available on some
     architectures, but only on i386 is extra alignment needed for
     __float128.  */"	#ifdef __i386__
"/* Type whose alignment is supported in every context and is at least
   as great as that of any standard type not using alignment
   specifiers.  */"	definition of max_align_t
/* Offset of member MEMBER in a struct of type TYPE. */	#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
/* Offset of member MEMBER in a struct of type TYPE. */	#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
/* NULL not defined and <stddef.h> or need NULL.  */	#endif
/* G++ */	#endif
/* C++ */	#endif
/* C++ */	#else
/* G++ */	#else
/* in case <stdio.h> has defined it. */	#undef NULL
/* in case <stdio.h> has defined it. */	#ifdef __GNUG__
/* A null pointer constant.  */	#if defined (_STDDEF_H) || defined (__need_NULL)
/* __sys_stdtypes_h */	#endif
/* __NetBSD__ */	#endif
/*  The following ones are the real ones.  */	#ifdef _GCC_PTRDIFF_T
"/*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
    are probably typos and should be removed before 2.8 is released.  */"	#ifdef _GCC_PTRDIFF_T_
/* _STDDEF_H or __need_wchar_t.  */	#endif
/* __wchar_t__ */	#endif
/* __WCHAR_T__ */	#endif
/* _BSD_RUNE_T_DEFINED_ */	#endif
/* _WCHAR_T_DECLARED */	#endif
"/* FreeBSD 5 can't be handled well using ""traditional"" logic above
   since it no longer defines _BSD_RUNE_T_ yet still desires to export
   rune_t in some cases... */"	#if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
"/* Why is this file so hard to maintain properly?  In contrast to
   the comment above regarding BSD/386 1.1, on FreeBSD for as long
   as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   redundant typedefs will occur when stdlib.h is included after this file. */"	#endif
/* Darwin */	#if defined (__FreeBSD__) && (__FreeBSD__ < 5)
"/* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   symbols in the _FOO_T_ family, stays defined even after its
   corresponding type is defined).  If we define wchar_t, then we
   must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   we undef _WCHAR_T_, then we must also define rune_t, since 
   headers like runetype.h assume that if machine/ansi.h is included,
   and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   machine/ansi.h says, ""Note that _WCHAR_T_ and _RUNE_T_ must be of
   the same type."" */"	#ifdef _BSD_WCHAR_T_
/* FreeBSD 5 */	#ifndef _WCHAR_T_DECLARED
/* Darwin */	#ifndef _BSD_RUNE_T_DEFINED_
/* Darwin */	#ifndef _BSD_WCHAR_T_DEFINED_
/* Cray Unicos/Mk */	#ifndef __WCHAR_T__
/* BeOS */	#ifndef __wchar_t__
"/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */"	#if defined (_STDDEF_H) || defined (__need_wchar_t)
/* _STDDEF_H or __need_size_t.  */	#endif
/* __size_t__ */	#endif
/* __SIZE_T__ */	#endif
/* _SIZE_T */	#endif
/* _SYS_SIZE_T_H */	#endif
/* _T_SIZE_ */	#endif
/* _T_SIZE */	#endif
/* __SIZE_T */	#endif
/* _SIZE_T_ */	#endif
/* _BSD_SIZE_T_ */	#endif
/* _SIZE_T_DEFINED_ */	#endif
/* _SIZE_T_DEFINED */	#endif
/* _BSD_SIZE_T_DEFINED_ */	#endif
/* _SIZE_T_DECLARED */	#endif
/* ___int_size_t_h */	#endif
/* _GCC_SIZE_T */	#endif
/* _SIZET_ */	#endif
/* __size_t */	#endif
/* !(defined (__GNUG__) && defined (size_t)) */	#endif
/* __BEOS__ */	#endif
/* __size_t is a typedef, must not trash it.  */	#else
/* FreeBSD 5 */	#define _SIZE_T_DECLARED
/* FreeBSD 5 */	#if defined (__FreeBSD__) \
/* Darwin */	#define _BSD_SIZE_T_DEFINED_
/* Cray Unicos/Mk */	#define __SIZE_T__
/* BeOS */	#define __size_t__
/* FreeBSD 5 */	#ifndef _SIZE_T_DECLARED
/* Darwin */	#ifndef _BSD_SIZE_T_DEFINED_
/* in case <sys/types.h> has defined it. */	#ifndef _SIZE_T
/* Cray Unicos/Mk */	#ifndef __SIZE_T__
/* BeOS */	#ifndef __size_t__
"/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */"	#if defined (_STDDEF_H) || defined (__need_size_t)
/* _STDDEF_H or __need_ptrdiff_t.  */	#endif
/* If this symbol has done its job, get rid of it.  */	#undef __need_ptrdiff_t
/* If this symbol has done its job, get rid of it.  */	#endif
/* _PTRDIFF_T */	#endif
/* _T_PTRDIFF_ */	#endif
/* _T_PTRDIFF */	#endif
/* __PTRDIFF_T */	#endif
/* _PTRDIFF_T_ */	#endif
/* _BSD_PTRDIFF_T_ */	#endif
/* ___int_ptrdiff_t_h */	#endif
/* _GCC_PTRDIFF_T */	#endif
/* _PTRDIFF_T_DECLARED */	#endif
/* DragonFly */	#ifndef _PTRDIFF_T_DECLARED
/* in case <sys/types.h> has defined it. */	#ifndef _PTRDIFF_T
"/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */"	#if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
"/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */"	#if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined (_STDDEF_H_))
"/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */"	#if defined (__sequent__) && defined (_PTRDIFF_T_)
/* defined(__NetBSD__) */	#endif
/* Undef _FOO_T_ if we are supposed to define foo_t.  */	#if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
"/* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   instead of _WCHAR_T_. */"	#if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
"/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */"	#if defined(__NetBSD__)
/* snaroff@next.com says the NeXT needs this.  */	#define _ANSI_STDDEF_H
/* snaroff@next.com says the NeXT needs this.  */	#endif
"/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */"	"#if (!defined(__need_wchar_t) && !defined(__need_size_t)	\"
"/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */"	#if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDDEF_H) \
// _CXXABI_INIT_EXCEPTION_H	#endif
// namespace __cxxabiv1	#endif
// Initialize exception (this is a GNU extension)	declaration of __cxa_init_primary_exception
// Allocate memory for the primary exception plus the thrown object.	declaration of __cxa_allocate_exception
"/** @file bits/cxxabi_init_exception.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly.
 */"	#ifndef _CXXABI_INIT_EXCEPTION_H
// namespace	#endif
// machines.)	declaration of _Fnv_hash_bytes
// improve hash quality or speed.	declaration of _Hash_bytes
"/** @file bits/hash_bytes.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{functional}
 */"	#ifndef _HASH_BYTES_H
"// extern ""C++"""	#pragma GCC visibility pop
// See comment in eh_exception.cc.	declaration of what
// http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118	declaration of ~bad_typeid
"/**
   *  @brief Thrown when a NULL pointer in a @c typeid expression is used.
   *  @ingroup exceptions
   */"	definition of bad_typeid
// See comment in eh_exception.cc.	declaration of what
// http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118	declaration of ~bad_cast
"/**
   *  @brief  Thrown during incorrect typecasting.
   *  @ingroup exceptions
   *
   *  If you attempt an invalid @c dynamic_cast expression, an instance of
   *  this class (or something derived from this class) is thrown.  */"	definition of bad_cast
/// Assigning type_info is not supported.	declaration of type_info
/// Assigning type_info is not supported.	declaration of operator=
// Internally used during catch matching	declaration of __do_upcast
// Internally used during catch matching	declaration of __do_upcast
// qualified.	declaration of __do_catch
// Return true if this is a function type	declaration of __is_function_p
// Return true if this is a pointer type of some kind	declaration of __is_pointer_p
// C++11	#endif
// and therefore address comparisons are sufficient.	#endif
// so we still need to do string comparison.	definition of before
// type. Uniqueness must use the _name value, not object address.	#else
"/** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */"	definition of name
"/** Destructor first. Being the first non-inline virtual function, this
     *  controls in which translation unit the vtable is emitted. The
     *  compiler makes use of that information to know where to emit
     *  the runtime-mandated type_info structures in the new-abi.  */"	declaration of ~type_info
"/**
   *  @brief  Part of RTTI.
   *
   *  The @c type_info class describes type information generated by
   *  an implementation.
  */"	definition of type_info
// By default follow the old inline rules to avoid ABI changes.	#ifndef __GXX_TYPEINFO_EQUALITY_INLINE
// By default, typeinfo names are not merged.	#define __GXX_MERGED_TYPEINFO_NAMES 0
// comparison can be used.	#ifndef __GXX_MERGED_TYPEINFO_NAMES
"/** @file typeinfo
 *  This is a Standard C++ Library header.
 */"	#ifndef _TYPEINFO
// C++20	#endif
// Only define the feature test macro if the compiler supports the feature:	#if __cpp_impl_destroying_delete
// C++17	#endif
// _GLIBCXX_HAVE_BUILTIN_LAUNDER	#endif
// (possibly cv-qualified) void.	#endif
"// extern ""C++"""	#if __cplusplus >= 201703L
// Default placement versions of operator delete.	definition of operator delete
// Default placement versions of operator new.	definition of operator new
// __cpp_aligned_new	#endif
// __cpp_sized_deallocation	#endif
"/** These are replaceable signatures:
 *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 *  - normal array new and delete (same)
 *  - @c nothrow single new and delete (take a @c nothrow argument, return
 *    @c NULL on error)
 *  - @c nothrow array new and delete (same)
 *
 *  Placement new and delete signatures (take a memory address argument,
 *  does nothing) may not be replaced by a user's program.
*/"	#if __cpp_sized_deallocation
"/** These are replaceable signatures:
 *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 *  - normal array new and delete (same)
 *  - @c nothrow single new and delete (take a @c nothrow argument, return
 *    @c NULL on error)
 *  - @c nothrow array new and delete (same)
 *
 *  Placement new and delete signatures (take a memory address argument,
 *  does nothing) may not be replaced by a user's program.
*/"	declaration of operator new
/// Return the current new handler.	#endif
/// Return the current new handler.	declaration of get_new_handler
/// previous handler.	#if __cplusplus >= 201103L
/// previous handler.	declaration of set_new_handler
"/** If you write your own error handler to be called by @c new, it must
   *  be of this type.  */"	declaration of new_handler
// See comment in eh_exception.cc.	#endif
// See comment in eh_exception.cc.	declaration of what
// http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118	declaration of ~bad_array_new_length
// See comment in eh_exception.cc.	#if __cplusplus >= 201103L
// See comment in eh_exception.cc.	declaration of what
// http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118	declaration of ~bad_alloc
"/**
   *  @brief  Exception possibly thrown by @c new.
   *  @ingroup exceptions
   *
   *  @c bad_alloc (or classes derived from it) is used to report allocation
   *  errors from the throwing forms of @c new.  */"	#if __cplusplus >= 201103L
"/**
   *  @brief  Exception possibly thrown by @c new.
   *  @ingroup exceptions
   *
   *  @c bad_alloc (or classes derived from it) is used to report allocation
   *  errors from the throwing forms of @c new.  */"	definition of bad_alloc
"/** @file new
 *  This is a Standard C++ Library header.
 *
 *  The header @c new defines several functions to manage dynamic memory and
 *  handling memory allocation errors; see
 *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
 */"	#ifndef _NEW
"// extern ""C++"""	#pragma GCC visibility pop
// no RTTI and no exceptions	#else
/// Obtain an exception_ptr pointing to a copy of the supplied object.	definition of make_exception_ptr
/// Obtain an exception_ptr pointing to a copy of the supplied object.	definition of make_exception_ptr
// Retained for compatibility with CXXABI_1.3.	#endif
// For construction from nullptr or 0.	#endif
"/**
     *  @brief An opaque pointer to an arbitrary exception.
     *  @ingroup exceptions
     */"	definition of exception_ptr
/// Throw the object pointed to by the exception_ptr.	declaration of rethrow_exception
"/** Obtain an exception_ptr to the currently handled exception. If there
   *  is none, or the currently handled exception is foreign, return the null
   *  value.
   */"	declaration of current_exception
"/**
   * @addtogroup exceptions
   * @{
   */"	std::__exception_ptr
"/** @file bits/exception_ptr.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{exception}
 */"	#ifndef _EXCEPTION_PTR_H
// _GLIBCXX_NESTED_EXCEPTION_H	#endif
// C++11	#endif
"// extern ""C++"""	#endif
/// If @p __ex is derived from nested_exception, @p __ex.rethrow_nested().	definition of rethrow_if_nested
// Otherwise, no effects.	definition of __rethrow_if_nested_impl
// Attempt dynamic_cast to nested_exception and call rethrow_nested().	definition of __rethrow_if_nested_impl
// Determine if dynamic_cast<const nested_exception&> would be well-formed.	definition of __rethrow_if_nested_cond
/// Else, throws an implementation-defined object derived from both.	definition of throw_with_nested
// both remove_reference_t<_Tp> and nested_exception.	definition of __throw_with_nested_impl
/// Exception class with exception_ptr data member.	definition of nested_exception
"/** @file bits/nested_exception.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{exception}
 */"	#ifndef _GLIBCXX_NESTED_EXCEPTION_H
"// extern ""C++"""	#pragma GCC visibility pop
"// extern ""C++"""	#if (__cplusplus >= 201103L)
"/**
   *  @brief A replacement for the standard terminate_handler which
   *  prints more information about the terminating exception (if any)
   *  on stderr.
   *
   *  @ingroup exceptions
   *
   *  Call
   *   @code
   *     std::set_terminate(__gnu_cxx::__verbose_terminate_handler)
   *   @endcode
   *  to use.  For more info, see
   *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt02ch06s02.html
   *
   *  In 3.4 and later, this is on by default.
   */"	declaration of __verbose_terminate_handler
// namespace std	__gnu_cxx
/// The number of uncaught exceptions.	#endif
/// The number of uncaught exceptions.	declaration of uncaught_exceptions
// c++17 or gnu++98	#if __cplusplus >= 201703L || !defined(__STRICT_ANSI__)
"/** [18.6.4]/1:  'Returns true after completing evaluation of a
   *  throw-expression until either completing initialization of the
   *  exception-declaration in the matching handler or entering @c unexpected()
   *  due to the throw; or after entering @c terminate() for any reason
   *  other than an explicit call to @c terminate().  [Note: This includes
   *  stack unwinding [15.2].  end note]'
   *
   *  2: 'When @c uncaught_exception() is true, throwing an
   *  %exception can result in a call of @c terminate()
   *  (15.5.1).'
   */"	#if __cplusplus >= 201703L || !defined(__STRICT_ANSI__)
"/** [18.6.4]/1:  'Returns true after completing evaluation of a
   *  throw-expression until either completing initialization of the
   *  exception-declaration in the matching handler or entering @c unexpected()
   *  due to the throw; or after entering @c terminate() for any reason
   *  other than an explicit call to @c terminate().  [Note: This includes
   *  stack unwinding [15.2].  end note]'
   *
   *  2: 'When @c uncaught_exception() is true, throwing an
   *  %exception can result in a call of @c terminate()
   *  (15.5.1).'
   */"	declaration of uncaught_exception
"/** The runtime will call this function if an %exception is thrown which
   *  violates the function's %exception specification.  */"	declaration of unexpected
/// Return the current unexpected handler.	#endif
/// Return the current unexpected handler.	declaration of get_unexpected
/// Takes a new handler function as an argument, returns the old function.	#if __cplusplus >= 201103L
/// Takes a new handler function as an argument, returns the old function.	declaration of set_unexpected
"/** The runtime will call this function if %exception handling must be
   *  abandoned for any reason.  It can also be called by the user.  */"	declaration of terminate
/// Return the current terminate handler.	#endif
/// Return the current terminate handler.	declaration of get_terminate
/// Takes a new handler function as an argument, returns the old function.	#if __cplusplus >= 201103L
/// Takes a new handler function as an argument, returns the old function.	declaration of set_terminate
/// If you write a replacement %unexpected handler, it must be of this type.	declaration of unexpected_handler
/// If you write a replacement %terminate handler, it must be of this type.	declaration of terminate_handler
// See comment in eh_exception.cc.	declaration of what
// http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118	declaration of ~bad_exception
"/** If an %exception is thrown which is not listed in a function's
   *  %exception specification, one of these may be thrown.  */"	definition of bad_exception
"/** @file exception
 *  This is a Standard C++ Library header.
 */"	#ifndef __EXCEPTION__
// namespace	#endif
// 402. wrong new expression in [some_] allocator::construct	#endif
// __p is not permitted to be a null pointer.	#if __cpp_aligned_new
// about what the return value is when __n == 0.	#if __cpp_aligned_new
// 2103. propagate_on_container_move_assignment	#endif
"/**
   *  @brief  An allocator that uses global new, as per [20.4].
   *  @ingroup allocators
   *
   *  This is precisely the allocator defined in the C++ Standard.
   *    - all allocation calls operator new
   *    - all deallocation calls operator delete
   *
   *  @tparam  _Tp  Type of allocated object.
   */"	definition of new_allocator<_Tp>
"/** @file ext/new_allocator.h
 *  This file is a GNU extension to the Standard C++ Library.
 */"	#ifndef _NEW_ALLOCATOR_H
// Define new_allocator as the base class to std::allocator.	#endif
"/**
   *  @brief  An alias to the base class for std::allocator.
   *  @ingroup allocators
   *
   *  Used to set the std::allocator base class to
   *  __gnu_cxx::new_allocator.
   *
   *  @tparam  _Tp  Type of allocated object.
    */"	definition of __allocator_base
"/** @file bits/c++allocator.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _GLIBCXX_CXX_ALLOCATOR_H
// namespace std	#endif
"/** @file bits/memoryfwd.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _MEMORYFWD_H
// namespace std	#endif
// Optimize for stateless allocators.	definition of __alloc_neq<_Alloc, <unnamed>>
// To implement Option 3 of DR 431.	definition of __alloc_swap<_Alloc, <unnamed>>
// Undefine.	#undef __allocator_base
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// allocator_traits::rebind_alloc can be used to form a valid allocator type.	definition of allocator<const _Tp>
// Avoid implicit deprecation.	#endif
// 3035. std::allocator's constructors should be constexpr	#if __cplusplus >= 201103L
// 2103. std::allocator propagate_on_container_move_assignment	#endif
"/**
   * @brief  The @a standard allocator, as per [20.4].
   *
   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
   *  for further details.
   *
   *  @tparam  _Tp  Type of allocated object.
   */"	definition of allocator<_Tp>
// 2103. std::allocator propagate_on_container_move_assignment	declaration of propagate_on_container_move_assignment
/// allocator<void> specialization.	definition of allocator<void>
"/** @file bits/allocator.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _ALLOCATOR_H
// _ALLOC_TRAITS_H	#endif
// C++11	#endif
// namespace std	#endif
// Trait to detect Allocator-like types.	definition of __is_allocator<_Alloc, <unnamed>>
// std::allocator<_Tp> just requires MoveConstructible	definition of __is_move_insertable<allocator<_Tp>>
// i.e. actually trying to use it would still be invalid. Use with caution.)	definition of __is_move_insertable<_Alloc>
// std::allocator<_Tp> just requires CopyConstructible	definition of __is_copy_insertable<allocator<_Tp>>
// i.e. actually trying to use it would still be invalid. Use with caution.)	definition of __is_copy_insertable<_Alloc>
"/**
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */"	definition of select_on_container_copy_construction
"/**
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */"	definition of max_size
"/**
       *  @brief  Destroy an object of type @a _Up
       *  @param  __a  An allocator.
       *  @param  __p  Pointer to the object to destroy
       *
       *  Calls @c __a.destroy(__p).
      */"	definition of destroy
"/**
       *  @brief  Destroy an object of type @a _Up
       *  @param  __a  An allocator.
       *  @param  __p  Pointer to the object to destroy
       *
       *  Calls @c __a.destroy(__p).
      */"	definition of destroy
"/**
       *  @brief  Construct an object of type @a _Up
       *  @param  __a  An allocator.
       *  @param  __p  Pointer to memory of suitable size and alignment for Tp
       *  @param  __args Constructor arguments.
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */"	definition of construct
"/**
       *  @brief  Construct an object of type @a _Up
       *  @param  __a  An allocator.
       *  @param  __p  Pointer to memory of suitable size and alignment for Tp
       *  @param  __args Constructor arguments.
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */"	definition of construct
"/**
       *  @brief  Deallocate memory.
       *  @param  __a  An allocator.
       *  @param  __p  Pointer to the memory to deallocate.
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */"	definition of deallocate
"/**
       *  @brief  Allocate memory.
       *  @param  __a  An allocator.
       *  @param  __n  The number of objects to allocate space for.
       *  @param  __hint Aid to locality.
       *  @return Memory of suitable size and alignment for @a n objects
       *          of type @c value_type
       *
       *  Returns <tt> a.allocate(n, hint) </tt>
      */"	declaration of allocate
"/**
       *  @brief  Allocate memory.
       *  @param  __a  An allocator.
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */"	definition of allocate
"/**
       *  @brief  Allocate memory.
       *  @param  __a  An allocator.
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */"	declaration of allocate
"/**
       *  @brief  Allocate memory.
       *  @param  __a  An allocator.
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */"	declaration of allocate
/// Whether all instances of the allocator type compare equal.	declaration of is_always_equal
/// How the allocator is propagated on swap	declaration of propagate_on_container_swap
/// How the allocator is propagated on move assignment	declaration of propagate_on_container_move_assignment
/// How the allocator is propagated on copy assignment	declaration of propagate_on_container_copy_assignment
/// The allocator's size type	declaration of size_type
/// The allocator's difference type	declaration of difference_type
/// The allocator's const void pointer type.	declaration of const_void_pointer
/// The allocator's void pointer type.	declaration of void_pointer
/// The allocator's const pointer type.	declaration of const_pointer
/// The allocator's pointer type.	declaration of pointer
/// The allocated type	declaration of value_type
/// The allocator type	declaration of allocator_type
/// Partial specialization for std::allocator.	definition of allocator_traits<allocator<_Tp>>
"/**
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
       *
       *  Returns @c __rhs.select_on_container_copy_construction() if that
       *  expression is well-formed, otherwise returns @a __rhs
      */"	declaration of select_on_container_copy_construction
"/**
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */"	declaration of max_size
"/**
       *  @brief  Destroy an object of type @a _Tp
       *  @param  __a  An allocator.
       *  @param  __p  Pointer to the object to destroy
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */"	definition of destroy
"/**
       *  @brief  Construct an object of type @a _Tp
       *  @param  __a  An allocator.
       *  @param  __p  Pointer to memory of suitable size and alignment for Tp
       *  @param  __args Constructor arguments.
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */"	definition of construct
"/**
       *  @brief  Deallocate memory.
       *  @param  __a  An allocator.
       *  @param  __p  Pointer to the memory to deallocate.
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */"	declaration of deallocate
"/**
       *  @brief  Allocate memory.
       *  @param  __a  An allocator.
       *  @param  __n  The number of objects to allocate space for.
       *  @param  __hint Aid to locality.
       *  @return Memory of suitable size and alignment for @a n objects
       *          of type @c value_type
       *
       *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
       *  well-formed, otherwise returns @c a.allocate(n)
      */"	declaration of allocate
"/**
       *  @brief  Allocate memory.
       *  @param  __a  An allocator.
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */"	declaration of allocate
// 2466. allocator_traits::max_size() default behavior is incorrect	definition of _S_select
"/**
       * @brief   Whether all instances of the allocator type compare equal.
       *
       * @c Alloc::is_always_equal if that type exists,
       * otherwise @c is_empty<Alloc>::type
      */"	declaration of is_always_equal
"/**
       * @brief   How the allocator is propagated on swap
       *
       * @c Alloc::propagate_on_container_swap if that type exists,
       * otherwise @c false_type
      */"	declaration of propagate_on_container_swap
"/**
       * @brief   How the allocator is propagated on move assignment
       *
       * @c Alloc::propagate_on_container_move_assignment if that type exists,
       * otherwise @c false_type
      */"	declaration of propagate_on_container_move_assignment
"/**
       * @brief   How the allocator is propagated on copy assignment
       *
       * @c Alloc::propagate_on_container_copy_assignment if that type exists,
       * otherwise @c false_type
      */"	declaration of propagate_on_container_copy_assignment
"/**
       * @brief   The allocator's size type
       *
       * @c Alloc::size_type if that type exists, otherwise
       * <tt> make_unsigned<difference_type>::type </tt>
      */"	declaration of size_type
"/**
       * @brief   The allocator's difference type
       *
       * @c Alloc::difference_type if that type exists, otherwise
       * <tt> pointer_traits<pointer>::difference_type </tt>
      */"	declaration of difference_type
"/**
       * @brief   The allocator's const void pointer type.
       *
       * @c Alloc::const_void_pointer if that type exists, otherwise
       * <tt> pointer_traits<pointer>::rebind<const void> </tt>
      */"	declaration of const_void_pointer
"/**
       * @brief   The allocator's void pointer type.
       *
       * @c Alloc::void_pointer if that type exists, otherwise
       * <tt> pointer_traits<pointer>::rebind<void> </tt>
      */"	declaration of void_pointer
"/**
       * @brief   The allocator's const pointer type.
       *
       * @c Alloc::const_pointer if that type exists, otherwise
       * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
      */"	declaration of const_pointer
// Select _A2::size_type or make_unsigned<_DiffT>::type	definition of _Size<_A2, _DiffT, <unnamed>>
// Select _A2::difference_type or pointer_traits<_Ptr>::difference_type	definition of _Diff<_A2, _PtrT, <unnamed>>
// Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>	definition of _Ptr<_Func, _Tp, <unnamed>>
"/**
       * @brief   The allocator's pointer type.
       *
       * @c Alloc::pointer if that type exists, otherwise @c value_type*
      */"	declaration of pointer
/// The allocated type	declaration of value_type
/// The allocator type	declaration of allocator_type
"/**
   * @brief  Uniform interface to all allocator types.
   * @ingroup allocators
  */"	definition of allocator_traits<_Alloc>
"/** @file bits/alloc_traits.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _ALLOC_TRAITS_H
// namespace __gnu_cxx	#endif
// 431. Swapping containers with unequal allocators.	#endif
// overload destroy for non-standard pointer types	#else
"/**
 * @brief  Uniform interface to C++98 and C++11 allocators.
 * @ingroup allocators
*/"	definition of __alloc_traits<_Alloc, <unnamed>>
// for __alloc_swap	#endif
"/** @file ext/alloc_traits.h
 *  This file is a GNU extension to the Standard C++ Library.
 */"	#ifndef _EXT_ALLOC_TRAITS_H
/* _STL_CONSTRUCT_H */	#endif
// namespace std	#endif
"/**
   * Destroy a range of objects using the supplied allocator.  For
   * nondefault allocators we do not optimize away invocation of 
   * destroy() even if _Tp has a trivial destructor.
   */"	definition of _Destroy
// A deleted destructor is trivial, this ensures we reject such types:	#endif
"/**
   * Destroy a range of objects.  If the value_type of the object has
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */"	definition of _Destroy_n
// A deleted destructor is trivial, this ensures we reject such types:	#endif
"/**
   * Destroy a range of objects.  If the value_type of the object has
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */"	definition of _Destroy
"/**
   * Destroy a range of objects.  If the value_type of the object has
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */"	definition of _Destroy
"/**
   * Destroy the object pointed to by a pointer type.
   */"	definition of _Destroy
"/**
   * Destroy the object pointed to by a pointer type.
   */"	definition of _Destroy
// 402. wrong new expression in [some_]allocator::construct	#endif
"/**
   * Constructs an object in existing memory by invoking an allocated
   * object's constructor with an initializer.
   */"	#if __cplusplus >= 201103L
"/** @file bits/stl_construct.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _STL_CONSTRUCT_H
/* _STL_UNINITIALIZED_H */	#endif
// namespace	#endif
// Also known as is_trivially_relocatable.	definition of __is_bitwise_relocatable<_Tp, <unnamed>>
// C++17	#endif
"/**
   *  @brief Copies the range [first,first+n) into result.
   *  @param  __first  An input iterator.
   *  @param  __n      The number of elements to copy.
   *  @param  __result An output iterator.
   *  @return  __result + __n
   *
   *  Like copy_n(), but does not require an initialized output range.
  */"	definition of uninitialized_copy_n
// Fills [first, first + n) with n default-initialized value_type(s).	definition of __uninitialized_default_novalue_n
// value_types(s).	definition of __uninitialized_default_novalue
// constructed with the allocator alloc.	definition of __uninitialized_default_n_a
// constructed value_types(s), constructed with the allocator alloc.	definition of __uninitialized_default_a
// Fills [first, first + n) with n default constructed value_type(s).	definition of __uninitialized_default_n
// constructed value_types(s).	definition of __uninitialized_default
// __uninitialized_default_a, __uninitialized_default_n_a.	definition of __uninitialized_default_1<_TrivialValueType>
//  fills [first2 + (last1 - first1), last2) with x.	definition of __uninitialized_move_fill
//  [mid, mid + (last - first)).	definition of __uninitialized_fill_move
//  [result, result + (last1 - first1) + (last2 - first2)).	definition of __uninitialized_move_copy
//  [result, result + (last1 - first1) + (last2 - first2)).	definition of __uninitialized_copy_move
//  any of the POD optimizations.	definition of __uninitialized_copy_a
// trivial types can have deleted assignment	#endif
"/**
   *  @brief Copies the value x into the range [first,first+n).
   *  @param  __first  An input iterator.
   *  @param  __n      The number of copies to make.
   *  @param  __x      The source value.
   *  @return   Nothing.
   *
   *  Like fill_n(), but does not require an initialized output range.
  */"	definition of uninitialized_fill_n
// trivial types can have deleted assignment	#endif
"/**
   *  @brief Copies the value x into the range [first,last).
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __x      The source value.
   *  @return   Nothing.
   *
   *  Like fill(), but does not require an initialized output range.
  */"	definition of uninitialized_fill
// trivial types can have deleted assignment	#endif
"/**
   *  @brief Copies the range [first,last) into result.
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __result An output iterator.
   *  @return   __result + (__first - __last)
   *
   *  Like copy(), but does not require an initialized output range.
  */"	definition of uninitialized_copy
"/** @file bits/stl_uninitialized.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _STL_UNINITIALIZED_H
/* _STL_TEMPBUF_H */	#endif
// namespace	#endif
// Requirements: _Pointer::value_type(_Tp&&) is valid.	definition of __uninitialized_construct_buf
// Requirements: _Pointer::value_type(_Tp&&) is valid.	definition of __uninitialized_construct_buf
// Disable copy constructor and assignment operator.	declaration of _Temporary_buffer
"/**
       * Constructs a temporary buffer of a size somewhere between
       * zero and the given length.
       */"	declaration of _Temporary_buffer
"/**
       * Constructs a temporary buffer of a size somewhere between
       * zero and the given length.
       */"	declaration of _Temporary_buffer
/// As per Table mumble.	declaration of end
/// As per Table mumble.	declaration of begin
/// As per Table mumble.	declaration of begin
/// As per Table mumble.	definition of begin
/// Returns the size requested by the constructor; may be >size().	declaration of requested_size
/// As per Table mumble.	declaration of size
/// As per Table mumble.	declaration of size
/// As per Table mumble.	definition of size
// concept requirements	declaration of value_type
"/**
   *  This class is used in two places: stl_algo.h and ext/memory,
   *  where it is wrapped as the temporary_buffer class.  See
   *  temporary_buffer docs for more notes.
   */"	definition of _Temporary_buffer<_ForwardIterator, _Tp>
"/**
   *  @brief The companion to get_temporary_buffer().
   *  @param  __p  A buffer previously allocated by get_temporary_buffer.
   *  @return   None.
   *
   *  Frees the memory pointed to by __p.
   */"	definition of return_temporary_buffer
"/**
   *  @brief The companion to get_temporary_buffer().
   *  @param  __p  A buffer previously allocated by get_temporary_buffer.
   *  @return   None.
   *
   *  Frees the memory pointed to by __p.
   */"	definition of return_temporary_buffer
"/**
   *  @brief Allocates a temporary buffer.
   *  @param  __len  The number of objects of type Tp.
   *  @return See full description.
   *
   *  Reinventing the wheel, but this time with prettier spokes!
   *
   *  This function tries to obtain storage for @c __len adjacent Tp
   *  objects.  The objects themselves are not constructed, of course.
   *  A pair<> is returned containing <em>the buffer s address and
   *  capacity (in the units of sizeof(_Tp)), or a pair of 0 values if
   *  no storage can be obtained.</em>  Note that the capacity obtained
   *  may be less than that requested if the memory is unavailable;
   *  you should compare len with the .second return value.
   *
   * Provides the nothrow exception guarantee.
   */"	definition of get_temporary_buffer
"/**
   *  @brief Allocates a temporary buffer.
   *  @param  __len  The number of objects of type Tp.
   *  @return See full description.
   *
   *  Reinventing the wheel, but this time with prettier spokes!
   *
   *  This function tries to obtain storage for @c __len adjacent Tp
   *  objects.  The objects themselves are not constructed, of course.
   *  A pair<> is returned containing <em>the buffer s address and
   *  capacity (in the units of sizeof(_Tp)), or a pair of 0 values if
   *  no storage can be obtained.</em>  Note that the capacity obtained
   *  may be less than that requested if the memory is unavailable;
   *  you should compare len with the .second return value.
   *
   * Provides the nothrow exception guarantee.
   */"	definition of get_temporary_buffer
"/** @file bits/stl_tempbuf.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _STL_TEMPBUF_H
// namespace	#endif
// 2454. Add raw_storage_iterator::base() member	declaration of base
// 2127. Move-construction with raw_storage_iterator	#endif
"/**
   *  This iterator class lets algorithms store their results into
   *  uninitialized memory.
  */"	definition of raw_storage_iterator<_OutputIterator, _Tp>
"/** @file bits/stl_raw_storage_iter.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _STL_RAW_STORAGE_ITERATOR_H
// _STRINGFWD_H	#endif
// namespace std	#endif
/// A string of @c char32_t	declaration of u32string
/// A string of @c char32_t	declaration of u32string
/// A string of @c char16_t	declaration of u16string
/// A string of @c char16_t	declaration of u16string
/// A string of @c char8_t	#endif
/// A string of @c wchar_t	declaration of wstring
/// A string of @c wchar_t	declaration of wstring
/// A string of @c char	declaration of string
/// A string of @c char	declaration of string
//	#ifndef _STRINGFWD_H
"/* ISO/IEC TS 18661-3:2015 defines the
   __STDC_WANT_IEC_60559_TYPES_EXT__ macro.  */"	#undef __GLIBC_USE_IEC_60559_TYPES_EXT
"/* ISO/IEC TS 18661-4:2015 defines the
   __STDC_WANT_IEC_60559_FUNCS_EXT__ macro.  */"	#undef __GLIBC_USE_IEC_60559_FUNCS_EXT
"/* ISO/IEC TS 18661-1:2014 defines the __STDC_WANT_IEC_60559_BFP_EXT__
   macro.  */"	#undef __GLIBC_USE_IEC_60559_BFP_EXT
"/* ISO/IEC TR 24731-2:2010 defines the __STDC_WANT_LIB_EXT2__
   macro.  */"	#undef __GLIBC_USE_LIB_EXT2
"/* This header is internal to glibc and should not be included outside
   of glibc headers.  Headers including it must define
   __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION first.  This header
   cannot have multiple include guards because ISO C feature test
   macros depend on the definition of the macro when an affected
   header is included, not when the first system header is
   included.  */"	#ifndef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION
/* _BITS_FLOATN_COMMON_H */	#endif
/* !__ASSEMBLER__.  */	#endif
"/* If double, long double and _Float64 all have the same set of
   values, TS 18661-3 requires the usual arithmetic conversions on
   long double and _Float64 to produce _Float64.  For this to be the
   case when building with a compiler without a distinct _Float64
   type, _Float64 must be a typedef for long double, not for
   double.  */"	#ifdef __NO_LONG_DOUBLE_MATH
/* The remaining of this file provides support for older compilers.  */	#if __HAVE_FLOAT16
/* Defined to a complex type if __HAVE_<type> is 1.  */	#if __HAVE_FLOAT16
/* No corresponding suffix available for this type.  */	#else
"/* Defined to concatenate the literal suffix to be used with _FloatN
   or _FloatNx types, if __HAVE_<type> is 1.  The corresponding
   literal suffixes exist since GCC 7, for C only.  */"	#if __HAVE_FLOAT16
"/* Defined to 1 if any _FloatN or _FloatNx types that are not
   ABI-distinct are however distinct types at the C language level (so
   for the purposes of __builtin_types_compatible_p and _Generic).  */"	#if __GNUC_PREREQ (7, 0) && !defined __cplusplus
"/* Defined to 1 if the corresponding _FloatN type is not binary compatible
   with the corresponding ISO C type in the current compilation unit as
   opposed to __HAVE_DISTINCT_FLOATN, which indicates the default types built
   in glibc.  */"	#define __HAVE_FLOAT128_UNLIKE_LDBL (__HAVE_DISTINCT_FLOAT128 && __LDBL_MANT_DIG__ != 113)
"/* Defined to 1 if the corresponding __HAVE_<type> macro is 1 and the
   type is the first with its format in the sequence of (the default
   choices for) float, double, long double, _Float16, _Float32,
   _Float64, _Float128, _Float32x, _Float64x, _Float128x for this
   glibc; that is, if functions present once per floating-point format
   rather than once per type are present for this type.

   All configurations supported by glibc have _Float32 the same format
   as float, _Float64 and _Float32x the same format as double, the
   _Float64x the same format as either long double or _Float128.  No
   configurations support _Float128x or, as of GCC 7, have compiler
   support for a type meeting the requirements for _Float128x.  */"	#define __HAVE_DISTINCT_FLOAT16 __HAVE_FLOAT16
"/* Defined to 1 if the current compiler invocation provides a
   floating-point type with the right format for this type, and this
   glibc includes corresponding *fN or *fNx interfaces for it.  */"	#define __HAVE_FLOAT16 0
"/* Macros to control TS 18661-3 glibc features where the same
   definitions are appropriate for all platforms.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_FLOATN_COMMON_H
/* _BITS_FLOATN_H */	#endif
/* !__ASSEMBLER__.  */	#endif
"/* In math/math.h, __MATH_TG will expand signbit to __builtin_signbit*,
   e.g.: __builtin_signbitf128, before GCC 6.  However, there has never
   been a __builtin_signbitf128 in GCC and the type-generic builtin is
   only available since GCC 6.  */"	#if !__GNUC_PREREQ (6, 0)
"/* Older GCC has only a subset of built-in functions for _Float128 on
   x86, and __builtin_infq is not usable in static initializers.
   Converting a narrower sNaN to _Float128 produces a quiet NaN, so
   attempts to use _Float128 sNaNs will not work properly with older
   compilers.  */"	#if !__GNUC_PREREQ (7, 0)
/* __builtin_huge_valf128 doesn't exist before GCC 7.0.  */	#if !__GNUC_PREREQ (7, 0)
/* The type _Float128 exists only since GCC 7.0.  */	#if !__GNUC_PREREQ (7, 0) || defined __cplusplus
/* The remaining of this file provides support for older compilers.  */	#if __HAVE_FLOAT128
"/* Add a typedef for older GCC compilers which don't natively support
   _Complex _Float128.  */"	declaration of __cfloat128
/* Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.  */	#if __HAVE_FLOAT128
/* The literal suffix f128 exists only since GCC 7.0.  */	#define __f128(x) x ## q
"/* Defined to concatenate the literal suffix to be used with _Float128
   types, if __HAVE_FLOAT128 is 1. */"	#if __HAVE_FLOAT128
"/* Defined to 1 if __HAVE_FLOAT64X is 1 and _Float64x has the format
   of long double.  Otherwise, if __HAVE_FLOAT64X is 1, _Float64x has
   the format of _Float128, which must be different from that of long
   double.  */"	#define __HAVE_FLOAT64X_LONG_DOUBLE 1
"/* Defined to 1 if the current compiler invocation provides a
   floating-point type with the right format for _Float64x, and this
   glibc includes corresponding *f64x interfaces for it.  */"	#define __HAVE_FLOAT64X 1
"/* Defined to 1 if __HAVE_FLOAT128 is 1 and the type is ABI-distinct
   from the default float, double and long double types in this glibc.  */"	#if __HAVE_FLOAT128
"/* Defined to 1 if the current compiler invocation provides a
   floating-point type with the IEEE 754 binary128 format, and this
   glibc includes corresponding *f128 interfaces for it.  The required
   libgcc support was added some time after the basic compiler
   support, for x86_64 and x86.  */"	"#if (defined __x86_64__							\"
"/* Macros to control TS 18661-3 glibc features on x86.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_FLOATN_H
/* not _STDARG_H */	#endif
/* not _ANSI_STDARG_H_ */	#endif
/* _STDARG_H */	#endif
/* not __svr4__ */	#endif
/* not _VA_LIST_, except on certain systems */	#endif
/* not _VA_LIST_DEFINED */	#endif
/* not _VA_LIST */	#endif
/* not _VA_LIST_T_H */	#endif
/* not __va_list__ */	#endif
/* The macro __va_list__ is used by BeOS.  */	#ifndef __va_list__
/* The macro _VA_LIST_T_H is used in the Bull dpx2  */	#ifndef _VA_LIST_T_H
/* The macro _VA_LIST is used in SCO Unix 3.2.  */	#ifndef _VA_LIST
/* The macro _VA_LIST_DEFINED is used in Windows NT 3.5  */	#ifndef _VA_LIST_DEFINED
"/* The macro _VA_LIST_ is the same thing used by this file in Ultrix.
   But on BSD NET2 we must not test or define or undef it.
   (Note that the comments in NET 2's ansi.h
   are incorrect for _VA_LIST_--see stdio.h!)  */"	#if !defined (_VA_LIST_) || defined (__BSD_NET2__) || defined (____386BSD____) || defined (__bsdi__) || defined (__sequent__) || defined (__FreeBSD__) || defined(WINNT)
/* not __svr4__ || _SCO_DS */	#else
/* _VA_LIST_ */	#endif
/* __i860__ */	#endif
"/* SVR4.2 uses _VA_LIST for an internal alias for va_list,
   so we must avoid testing it and setting it here.
   SVR4 uses _VA_LIST as a flag in stdarg.h, but we should
   have no conflict with that.  */"	#ifndef _VA_LIST_
"/* We deliberately do not define va_list when called from
   stdio.h, because ANSI C says that stdio.h is not supposed to define
   va_list.  stdio.h needs to have access to that data type, 
   but must not use that name.  It should use the name __gnuc_va_list,
   which is safe because it is reserved for the implementation.  */"	#ifdef _BSD_VA_LIST
"/* Define the standard macros for the user,
   if this invocation was from the user program.  */"	#ifdef _STDARG_H
/* Define __gnuc_va_list.  */	#ifndef __GNUC_VA_LIST
/* not __need___va_list */	#endif
"/*
 * ISO C Standard:  7.15  Variable arguments  <stdarg.h>
 */"	#ifndef _STDARG_H
/* bits/wchar.h */	#endif
"/* The fallback definitions, for when __WCHAR_MAX__ or __WCHAR_MIN__
   are not defined, give the right value and type as long as both int
   and wchar_t are 32-bit types.  Adding L'\0' to a constant value
   ensures that the type is correct; it is necessary to use (L'\0' +
   0) rather than just L'\0' so that the type in C++ is the promoted
   version of wchar_t rather than the distinct wchar_t type itself.
   Because wchar_t in preprocessor #if expressions is treated as
   intmax_t or uintmax_t, the expression (L'\0' - 1) would have the
   wrong value for WCHAR_MAX in such expressions and so cannot be used
   to define __WCHAR_MAX in the unsigned case.  */"	#ifdef __WCHAR_MAX__
"/* wchar_t type related definitions.
   Copyright (C) 2000-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_WCHAR_H
/* bits/types/wint_t.h */	#endif
/* _WINT_T */	#endif
"/* Integral type unchanged by default argument promotions that can
   hold any value corresponding to members of the extended character
   set, as well as at least one value that does not correspond to any
   member of the extended character set.  */"	#ifndef __WINT_TYPE__
"/* Some versions of stddef.h provide wint_t, even though neither the
   C nor C++ standards, nor POSIX, specifies this.  We assume that
   stddef.h will define the macro _WINT_T if and only if it provides
   wint_t, and conversely, that it will avoid providing wint_t if
   _WINT_T is already defined.  */"	#ifndef _WINT_T
/* Value so far.  */	definition of __value
/* Conversion state information.  */	definition of __mbstate_t
"/* Integral type unchanged by default argument promotions that can
   hold any value corresponding to members of the extended character
   set, as well as at least one value that does not correspond to any
   member of the extended character set.  */"	#ifndef __WINT_TYPE__
/* The opaque type of streams.  This is the definition used elsewhere.  */	declaration of FILE
/* bits/types/__locale_t.h */	#endif
/* Note: LC_ALL is not a valid index into this array.  */	definition of __names
/* To increase the speed of this solution we add some special members.  */	definition of __ctype_b
/* 13 = __LC_LAST. */	definition of __locales
/* Note: LC_ALL is not a valid index into this array.  */	declaration of __locale_data
"/* POSIX.1-2008: the locale_t type, representing a locale context
   (implementation-namespace version).  This type should be treated
   as opaque by applications; some details are exposed for the sake of
   efficiency in e.g. ctype functions.  */"	definition of __locale_struct
"/* Definition of struct __locale_struct and __locale_t.
   Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.
   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_TYPES___LOCALE_T_H
/* bits/types/locale_t.h */	#endif
"/* Definition of locale_t.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_TYPES_LOCALE_T_H
"/* We would have to include <limits.h> to get a definition of MB_LEN_MAX.
     But this would only disturb the namespace.  So we define our own
     version here.  */"	#define __WCHAR_MB_LEN_MAX 16
/* __attribute__ ((__format__ (__wprintf__, 5, 0))) */	declaration of __vswprintf_alias
/* XXX We might want to have support in gcc for swprintf.  */	#endif
/* __attribute__ ((__format__ (__wprintf__, 5, 6))) */	declaration of __swprintf_alias
"/* Checking macros for wchar functions.
   Copyright (C) 2005-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _WCHAR_H
/* wchar.h  */	#endif
/* Define some macros helping to catch buffer overflows.  */	#if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
"/* Similar to `wcsftime' but takes the information from
   the provided locale and not the global locale.  */"	declaration of wcsftime_l
"/* Format TP into S according to FORMAT.
   Write no more than MAXSIZE wide characters and return the number
   of wide characters written, or 0 if it would exceed MAXSIZE.  */"	declaration of wcsftime
"/* This function does the same as `fputws' but does not lock the stream.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fputws_unlocked
"/* This function does the same as `fgetws' but does not lock the stream.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fgetws_unlocked
"/* These are defined to be equivalent to the `char' functions defined
   in POSIX.1:1996.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */"	declaration of putwchar_unlocked
"/* These are defined to be equivalent to the `char' functions defined
   in POSIX.1:1996.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */"	declaration of putwc_unlocked
"/* Faster version when locking is not necessary.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fputwc_unlocked
"/* This is the wide character version of a GNU extension.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fgetwc_unlocked
"/* These are defined to be equivalent to the `char' functions defined
   in POSIX.1:1996.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */"	declaration of getwchar_unlocked
"/* These are defined to be equivalent to the `char' functions defined
   in POSIX.1:1996.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */"	declaration of getwc_unlocked
"/* Push a character back onto the input buffer of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of ungetwc
"/* Write a string to STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fputws
"/* Get a newline-terminated wide character string of finite length
   from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fgetws
"/* Write a character to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of putwchar
"/* Write a character to STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of putwc
"/* Write a character to STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of fputwc
"/* Read a character from stdin.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of getwchar
"/* Read a character from STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of getwc
"/* Read a character from STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of fgetwc
/* Use ISO C99. */	#endif
/* __attribute__ ((__format__ (__wscanf__, 2, 0))) */	#else
/* __attribute__ ((__format__ (__wscanf__, 2, 0))) */	#if !defined __USE_GNU \
/* Read formatted input from S into argument list ARG.  */	declaration of vswscanf
"/* Read formatted input from stdin into argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vwscanf
"/* Read formatted input from S into argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vfwscanf
/* Use ISO C95, C99 and Unix98. */	#endif
/* __attribute__ ((__format__ (__wscanf__, 2, 3))) */	#else
/* __attribute__ ((__format__ (__wscanf__, 1, 2))) */	declaration of swscanf
/* __attribute__ ((__format__ (__wscanf__, 2, 3))) */	declaration of wscanf
"/* For historical reasons, the C99-compliant versions of the scanf
   functions are at alternative names.  When __LDBL_COMPAT is in
   effect, this is handled in bits/wchar-ldbl.h.  */"	#if !__GLIBC_USE (DEPRECATED_SCANF) && !defined __LDBL_COMPAT
/* Read formatted input from S.  */	declaration of swscanf
"/* Read formatted input from stdin.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of wscanf
"/* Read formatted input from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fwscanf
"/* Write formatted output of at most N character to S from argument
   list ARG.  */"	declaration of vswprintf
"/* Write formatted output to stdout from argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vwprintf
"/* Write formatted output to S from argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vfwprintf
/* Write formatted output of at most N characters to S.  */	declaration of swprintf
"/* Write formatted output to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of wprintf
"/* Write formatted output to STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fwprintf
/* Select orientation for stream.  */	declaration of fwide
"/* Like OPEN_MEMSTREAM, but the stream is wide oriented and produces
   a wide character string.  */"	declaration of open_wmemstream
/* Wide character I/O functions.  */	#if defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)
"/* Copy no more than N characters of SRC to DEST, returning the address of
   the last character written into DEST.  */"	declaration of wcpncpy
"/* Copy SRC to DEST, returning the address of the terminating L'\0' in
   DEST.  */"	declaration of wcpcpy
/* use GNU */	#endif
"/* Parallel versions of the functions above which take the locale to
   use as an additional parameter.  These are GNU extensions inspired
   by the POSIX.1-2008 extended locale API.  */"	declaration of wcstol_l
/* Use GNU.  */	#endif
"/* Convert initial portion of wide string NPTR to `unsigned long long int'
   representation.  */"	declaration of wcstouq
"/* Convert initial portion of wide string NPTR to `long long int'
   representation.  */"	declaration of wcstoq
/* ISO C99.  */	#endif
"/* Convert initial portion of wide string NPTR to `unsigned long long int'
   representation.  */"	declaration of wcstoull
"/* Convert initial portion of wide string NPTR to `long long int'
   representation.  */"	declaration of wcstoll
"/* Convert initial portion of wide string NPTR to `unsigned long int'
   representation.  */"	declaration of wcstoul
"/* Convert initial portion of wide string NPTR to `long int'
   representation.  */"	declaration of wcstol
/* Likewise for `_FloatN' and `_FloatNx' when support is enabled.  */	#if __HAVE_FLOAT16 && defined __USE_GNU
/* C99 */	#endif
/* Likewise for `float' and `long double' sizes of floating-point numbers.  */	declaration of wcstof
"/* Convert initial portion of the wide string NPTR to `double'
   representation.  */"	declaration of wcstod
/* Use X/Open.  */	#endif
"/* Determine number of column positions required for first N wide
   characters (or fewer if S ends before this) in S.  */"	declaration of wcswidth
/* Determine number of column positions required for C.  */	declaration of wcwidth
/* The following functions are extensions found in X/Open CAE.  */	#ifdef __USE_XOPEN
/* use POSIX 2008 */	#endif
"/* Write multibyte character representation of at most NWC characters
   from the wide character string SRC to DST.  */"	declaration of wcsnrtombs
"/* Write wide character representation of at most NMC bytes of the
   multibyte character string SRC to DST.  */"	declaration of mbsnrtowcs
"/* Write multibyte character representation of wide character string
   SRC to DST.  */"	declaration of wcsrtombs
"/* Write wide character representation of multibyte character string
   SRC to DST.  */"	declaration of mbsrtowcs
"/* We can use the BTOWC and WCTOB optimizations since we know that all
   locales must use ASCII encoding for the values in the ASCII range
   and because the wchar_t encoding is always ISO 10646.  */"	declaration of __btowc_alias
/* Return number of bytes in multibyte character pointed to by S.  */	declaration of __mbrlen
/* Write multibyte representation of wide character WC to S.  */	declaration of wcrtomb
/* Write multibyte representation of wide character WC to S.  */	declaration of wcrtomb
"/* Write wide character representation of multibyte character pointed
   to by S to PWC.  */"	declaration of mbrtowc
"/* Determine whether PS points to an object representing the initial
   state.  */"	declaration of mbsinit
"/* Determine whether C corresponds to a member of the extended
   character set whose multibyte representation is a single byte.  */"	declaration of wctob
"/* Determine whether C constitutes a valid (one-byte) multibyte
   character.  */"	declaration of btowc
"/* Copy N wide characters of SRC to DEST and return pointer to following
   wide character.  */"	declaration of wmempcpy
/* Set N wide characters of S to C.  */	declaration of wmemset
"/* Copy N wide characters of SRC to DEST, guaranteeing
   correct behavior for overlapping strings.  */"	declaration of wmemmove
/* Copy N wide characters of SRC to DEST.  */	declaration of wmemcpy
/* Compare N wide characters of S1 and S2.  */	declaration of wmemcmp
/* Search N wide characters of S for C.  */	#ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
/* Return the number of wide characters in S, but at most MAXLEN.  */	declaration of wcsnlen
/* Another name for `wcsstr' from XPG4.  */	#ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
/* Return the number of wide characters in S.  */	declaration of wcslen
/* Divide WCS into tokens separated by characters in DELIM.  */	declaration of wcstok
/* Find the first occurrence of NEEDLE in HAYSTACK.  */	#ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
/* Find the first occurrence in WCS of any character in ACCEPT.  */	#ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
"/* Return the length of the initial segmet of WCS which
   consists entirely of wide characters in  ACCEPT.  */"	declaration of wcsspn
"/* Return the length of the initial segmet of WCS which
   consists entirely of wide characters not in REJECT.  */"	declaration of wcscspn
"/* This function is similar to `wcschr'.  But it returns a pointer to
   the closing NUL wide character in case C is not found in S.  */"	declaration of wcschrnul
/* Find the last occurrence of WC in WCS.  */	#ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
/* Find the first occurrence of WC in WCS.  */	#ifdef __CORRECT_ISO_CPP_WCHAR_H_PROTO
/* Duplicate S, returning an identical malloc'd string.  */	declaration of wcsdup
"/* Transform S2 into array pointed to by S1 such that if wcscmp is
   applied to two transformed strings the result is the as applying
   `wcscoll' to the original strings.  */"	declaration of wcsxfrm_l
"/* Compare S1 and S2, both interpreted as appropriate to the
   LC_COLLATE category of the given locale.  */"	declaration of wcscoll_l
"/* Transform S2 into array pointed to by S1 such that if wcscmp is
   applied to two transformed strings the result is the as applying
   `wcscoll' to the original strings.  */"	declaration of wcsxfrm
"/* Compare S1 and S2, both interpreted as appropriate to the
   LC_COLLATE category of the current locale.  */"	declaration of wcscoll
"/* Similar to the two functions above but take the information from
   the provided locale and not the global locale.  */"	declaration of wcscasecmp_l
/* Compare no more than N chars of S1 and S2, ignoring case.  */	declaration of wcsncasecmp
/* Compare S1 and S2, ignoring case.  */	declaration of wcscasecmp
/* Compare N wide-characters of S1 and S2.  */	declaration of wcsncmp
/* Compare S1 and S2.  */	declaration of wcscmp
/* Append no more than N wide-characters of SRC onto DEST.  */	declaration of wcsncat
/* Append SRC onto DEST.  */	declaration of wcscat
/* Copy no more than N wide-characters of SRC to DEST.  */	declaration of wcsncpy
/* Copy SRC to DEST.  */	declaration of wcscpy
"/* This incomplete type is defined in <time.h> but needed here because
   of `wcsftime'.  */"	declaration of tm
"/* All versions of XPG prior to the publication of ISO C99 required
   the bulk of <wctype.h>'s declarations to appear in this header
   (because <wctype.h> did not exist prior to C99).  In POSIX.1-2001
   those declarations were marked as XSI extensions; in -2008 they
   were additionally marked as obsolescent.  _GNU_SOURCE mode
   anticipates the removal of these declarations in the next revision
   of POSIX.  */"	#if (defined __USE_XOPEN && !defined __USE_GNU \
/* These constants might also be defined in <inttypes.h>.  */	#define WCHAR_MIN __WCHAR_MIN
/* These constants might also be defined in <inttypes.h>.  */	#endif
/* Tell the caller that we provide correct C++ prototypes.  */	#if defined __cplusplus && __GNUC_PREREQ (4, 4)
"/*
 *      ISO C99 Standard: 7.24
 *	Extended multibyte and wide character utilities	<wchar.h>
 */"	#ifndef _WCHAR_H
// C++11	#endif
// _GLIBCXX_USE_WCHAR_T	#endif
// namespace	#endif
//_GLIBCXX_USE_WCHAR_T	#endif
// namespace	#endif
// namespace __gnu_cxx	std
"// extern ""C++"""	#if _GLIBCXX_USE_C99_WCHAR
// Get rid of those macros defined in <wchar.h> in lieu of real functions.	#undef btowc
// Get rid of those macros defined in <wchar.h> in lieu of real functions.	#if _GLIBCXX_HAVE_VFWSCANF
// assumes it is in wchar.h, regardless of wchar_t specializations.	#ifndef _GLIBCXX_HAVE_MBSTATE_T
//	#pragma GCC system_header
// namespace	#endif
/// File position for char32_t streams.	declaration of u32streampos
/// File position for char16_t streams.	declaration of u16streampos
/// File position for char8_t streams.	#endif
/// File position for wchar_t streams.	declaration of wstreampos
/// File position for char streams.	declaration of streampos
/// Test if equivalent to another position.	definition of operator==
/// Subtract position to return offset.	declaration of operator-
/// Subtract offset from position.	declaration of operator-
/// Add position and offset.	declaration of operator+
/// Subtract offset from this position.	declaration of operator-=
/// Add offset to this position.	declaration of operator+=
/// Return the last set value of @a st.	declaration of state
/// Remember the value of @a st.	declaration of state
/// Convert to streamoff.	declaration of operator std::streamoff
/// Construct position from offset.	#if __cplusplus >= 201103L
"/**
   *  @brief  Class representing stream positions.
   *
   *  The standard places no requirements upon the template parameter StateT.
   *  In this implementation StateT must be DefaultConstructible,
   *  CopyConstructible and Assignable.  The standard only requires that fpos
   *  should contain a member of type StateT. In this implementation it also
   *  contains an offset stored as a signed integer.
   *
   *  @param  StateT  Type passed to and returned from state().
   */"	definition of fpos<_StateT>
// Signed integral type	declaration of streamsize
/// Integral type for I/O operation counts and buffer sizes.	declaration of streamsize
"/**
   *  @brief  Type used by fpos, char_traits<char>, and char_traits<wchar_t>.
   *
   *  In clauses 21.1.3.1 and 27.4.1 streamoff is described as an
   *  implementation defined type.
   *  Note: In versions of GCC up to and including GCC 3.3, streamoff
   *  was typedef long.
  */"	#ifdef _GLIBCXX_HAVE_INT64_T_LONG
// For int64_t	#ifdef _UNDEF__STDC_LIMIT_MACROS
// in C++11).  Reconsider all this as soon as possible...	#if (defined(_GLIBCXX_HAVE_INT64_T) && !defined(_GLIBCXX_HAVE_INT64_T_LONG) \
//	#ifndef _GLIBCXX_POSTYPES_H
/* _GLIBCXX_IOSFWD */	#endif
// namespace	#endif
/// Class for @c wchar_t mixed input and output file streams.	declaration of wfstream
/// Class for @c wchar_t output file streams.	declaration of wofstream
/// Class for @c wchar_t input file streams.	declaration of wifstream
/// Class for @c wchar_t file buffers.	declaration of wfilebuf
/// Class for @c wchar_t mixed input and output memory streams.	declaration of wstringstream
/// Class for @c wchar_t mixed input and output memory streams.	declaration of wstringstream
/// Class for @c wchar_t output memory streams.	declaration of wostringstream
/// Class for @c wchar_t output memory streams.	declaration of wostringstream
/// Class for @c wchar_t input memory streams.	declaration of wistringstream
/// Class for @c wchar_t input memory streams.	declaration of wistringstream
/// Class for @c wchar_t memory buffers.	declaration of wstringbuf
/// Class for @c wchar_t memory buffers.	declaration of wstringbuf
/// Base class for @c wchar_t mixed input and output streams.	declaration of wiostream
/// Base class for @c wchar_t mixed input and output streams.	declaration of wiostream
/// Base class for @c wchar_t output streams.	declaration of wostream
/// Base class for @c wchar_t output streams.	declaration of wostream
/// Base class for @c wchar_t input streams.	declaration of wistream
/// Base class for @c wchar_t input streams.	declaration of wistream
/// Base class for @c wchar_t buffers.	declaration of wstreambuf
/// Base class for @c wchar_t buffers.	declaration of wstreambuf
/// Base class for @c wchar_t streams.	declaration of wios
/// Base class for @c wchar_t streams.	declaration of wios
/// Class for @c char mixed input and output file streams.	declaration of fstream
/// Class for @c char output file streams.	declaration of ofstream
/// Class for @c char input file streams.	declaration of ifstream
/// Class for @c char file buffers.	declaration of filebuf
/// Class for @c char mixed input and output memory streams.	declaration of stringstream
/// Class for @c char mixed input and output memory streams.	declaration of stringstream
/// Class for @c char output memory streams.	declaration of ostringstream
/// Class for @c char output memory streams.	declaration of ostringstream
/// Class for @c char input memory streams.	declaration of istringstream
/// Class for @c char input memory streams.	declaration of istringstream
/// Class for @c char memory buffers.	declaration of stringbuf
/// Class for @c char memory buffers.	declaration of stringbuf
/// Base class for @c char mixed input and output streams.	declaration of iostream
/// Base class for @c char mixed input and output streams.	declaration of iostream
/// Base class for @c char output streams.	declaration of ostream
/// Base class for @c char output streams.	declaration of ostream
/// Base class for @c char input streams.	declaration of istream
/// Base class for @c char input streams.	declaration of istream
/// Base class for @c char buffers.	declaration of streambuf
/// Base class for @c char buffers.	declaration of streambuf
/// Base class for @c char streams.	declaration of ios
/// Base class for @c char streams.	declaration of ios
"/**
   *  @defgroup io I/O
   *
   *  Nearly all of the I/O classes are parameterized on the type of
   *  characters they read and write.  (The major exception is ios_base at
   *  the top of the hierarchy.)  This is a change from pre-Standard
   *  streams, which were not templates.
   *
   *  For ease of use and compatibility, all of the basic_* I/O-related
   *  classes are given typedef names for both of the builtin character
   *  widths (wide and narrow).  The typedefs are the same as the
   *  pre-Standard names, for example:
   *
   *  @code
   *     typedef basic_ifstream<char>  ifstream;
   *  @endcode
   *
   *  Because properly forward-declaring these classes can be difficult, you
   *  should not do it yourself.  Instead, include the &lt;iosfwd&gt;
   *  header, which contains only declarations of all the I/O classes as
   *  well as the typedefs.  Trying to forward-declare the typedefs
   *  themselves (e.g., <code>class ostream;</code>) is not valid ISO C++.
   *
   *  For more specific declarations, see
   *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html#std.io.objects
   *
   *  @{
  */"	declaration of ios_base
"/**
   *  @defgroup io I/O
   *
   *  Nearly all of the I/O classes are parameterized on the type of
   *  characters they read and write.  (The major exception is ios_base at
   *  the top of the hierarchy.)  This is a change from pre-Standard
   *  streams, which were not templates.
   *
   *  For ease of use and compatibility, all of the basic_* I/O-related
   *  classes are given typedef names for both of the builtin character
   *  widths (wide and narrow).  The typedefs are the same as the
   *  pre-Standard names, for example:
   *
   *  @code
   *     typedef basic_ifstream<char>  ifstream;
   *  @endcode
   *
   *  Because properly forward-declaring these classes can be difficult, you
   *  should not do it yourself.  Instead, include the &lt;iosfwd&gt;
   *  header, which contains only declarations of all the I/O classes as
   *  well as the typedefs.  Trying to forward-declare the typedefs
   *  themselves (e.g., <code>class ostream;</code>) is not valid ISO C++.
   *
   *  For more specific declarations, see
   *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html#std.io.objects
   *
   *  @{
  */"	declaration of ios_base
//	#ifndef _GLIBCXX_IOSFWD
/* i386/x86_64 are little-endian.  */	#ifndef _ENDIAN_H
/* For others, time size is word size.  */	#define __TIMESIZE __WORDSIZE
/* For x32, time is 64-bit even though word size is 32-bit.  */	#else
"/* Bit size of the time_t type at glibc build time, x86-64 and x32 case.
   Copyright (C) 2018-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if defined __x86_64__ && defined __ILP32__
/* bits/typesizes.h */	#endif
/* Number of descriptors that can fit in an `fd_set'.  */	#define __FD_SETSIZE 1024
/* And for __rlim_t and __rlim64_t.  */	#define __RLIM_T_MATCHES_RLIM64_T 1
/* Same for ino_t and ino64_t.  */	#define __INO_T_MATCHES_INO64_T 1
"/* Tell the libc code that off_t and off64_t are actually the same type
   for all ABI purposes, even if possibly expressed as different base types
   for C type-checking purposes.  */"	#define __OFF_T_MATCHES_OFF64_T 1
/* X32 kernel interface is 64-bit.  */	#if defined __x86_64__ && defined __ILP32__
"/* bits/typesizes.h -- underlying types for *_t.  Linux/x86-64 version.
   Copyright (C) 2012-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_TYPES_H
/* bits/time64.h */	#endif
/* Define a 64-bit time type alongsize the 32-bit one.  */	#endif
/* If we already have 64-bit time type then use it.  */	#define __TIME64_T_TYPE __TIME_T_TYPE
/* Define __TIME64_T_TYPE so that it is always a 64-bit type.  */	#if __TIMESIZE == 64
"/* bits/time64.h -- underlying types for __time64_t.  Generic version.
   Copyright (C) 2018-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_TYPES_H
/* bits/types.h */	#endif
"/* Seconds since the Epoch, visible to user code when time_t is too
   narrow only for consistency with the old way of widening too-narrow
   types.  User code should never use __time64_t.  */"	#if __TIMESIZE == 64 && defined __LIBC
"/* C99: An integer type that can be accessed as an atomic entity,
   even in the presence of asynchronous interrupts.
   It is not currently necessary for this to be machine-specific.  */"	declaration of __sig_atomic_t
/* Duplicate info from sys/socket.h.  */	declaration of __socklen_t
/* Duplicates info from stdint.h but this is used in unistd.h.  */	declaration of __intptr_t
/* Type of file sizes and offsets (LFS).  */	declaration of __loff_t
"/* These few don't really vary by system, they always correspond
   to one of the other defined types.  */"	declaration of __loff_t
/* Unsigned long type used in system calls.  */	declaration of __syscall_ulong_t
/* Signed long type used in system calls.  */	declaration of __syscall_slong_t
/* Type of a byte count, or error.  */	declaration of __ssize_t
/* Type of miscellaneous file system fields.  */	declaration of __fsword_t
/* Type to count file system nodes.  */	declaration of __fsfilcnt_t
/* Type to count file system blocks.  */	declaration of __fsblkcnt_t
/* Type to count number of disk blocks.  */	declaration of __blkcnt_t
/* Type to represent block size.  */	declaration of __blksize_t
/* Timer ID returned by `timer_create'.  */	declaration of __timer_t
/* Clock ID used in clock and timer functions.  */	declaration of __clockid_t
/* Type of an IPC key.  */	declaration of __key_t
/* The type of a disk address.  */	declaration of __daddr_t
/* Signed count of microseconds.  */	declaration of __suseconds_t
/* Count of microseconds.  */	declaration of __useconds_t
/* Seconds since the Epoch.  */	declaration of __time_t
/* General type for IDs.  */	declaration of __id_t
/* Type for resource measurement (LFS).  */	declaration of __rlim64_t
/* Type for resource measurement.  */	declaration of __rlim_t
/* Type of CPU usage counts.  */	declaration of __clock_t
/* Type of file system IDs.  */	declaration of __fsid_t
/* Type of process identifications.  */	declaration of __pid_t
/* Type of file sizes and offsets (LFS).  */	declaration of __off64_t
/* Type of file sizes and offsets.  */	declaration of __off_t
/* Type of file link counts.  */	declaration of __nlink_t
/* Type of file attribute bitmasks.  */	declaration of __mode_t
/* Type of file serial numbers (LFS).*/	declaration of __ino64_t
/* Type of file serial numbers.  */	declaration of __ino_t
/* Type of group identifications.  */	declaration of __gid_t
/* Type of user identifications.  */	declaration of __uid_t
/* Type of device numbers.  */	declaration of __dev_t
/* No need to mark the typedef with __extension__.   */	#define __STD_TYPE typedef
"/* We want __extension__ before typedef's that use nonstandard base types
   such as `long long' in C89 mode.  */"	#elif __WORDSIZE == 64
"/* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
   macros for each of the OS types we define below.  The definitions
   of those macros must use the following macros for underlying types.
   We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsigned
   variants of each of the following integer types on this machine.

	16		-- ""natural"" 16-bit type (always short)
	32		-- ""natural"" 32-bit type (always int)
	64		-- ""natural"" 64-bit type (long or long long)
	LONG32		-- 32-bit type, traditionally long
	QUAD		-- 64-bit type, traditionally long long
	WORD		-- natural type of __WORDSIZE bits (int or long)
	LONGWORD	-- type of __WORDSIZE bits, traditionally long

   We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
   conventional uses of `long' or `long long' type modifiers match the
   types we define, even when a less-adorned type would be the same size.
   This matters for (somewhat) portably writing printf/scanf formats for
   these types, where using the appropriate l or ll format modifiers can
   make the typedefs and the formats match up across all GNU platforms.  If
   we used `long' when it's 64 bits where `long long' is expected, then the
   compiler would warn about the formats not matching the argument types,
   and the programmer changing them to shut up the compiler would break the
   program's portability.

   Here we assume what is presently the case in all the GCC configurations
   we support: long long is always 64 bits, long is always word/address size,
   and int is always 32 bits.  */"	#define __S16_TYPE short int
/* Largest integral types.  */	#if __WORDSIZE == 64
/* quad_t is also 64 bits.  */	#if __WORDSIZE == 64
/* Smallest types with at least a given width.  */	declaration of __int_least8_t
/* Fixed-size types, underlying types depend on word size and compiler.  */	declaration of __int8_t
/* Convenience types.  */	declaration of __u_char
"/*
 * Never include this file directly; use <sys/types.h> instead.
 */"	#ifndef _BITS_TYPES_H
/* _BITS_BYTESWAP_H */	#endif
/* Swap bytes in 64-bit value.  */	#define __bswap_constant_64(x) ((((x) & 0xff00000000000000ull) >> 56) | (((x) & 0x00ff000000000000ull) >> 40) | (((x) & 0x0000ff0000000000ull) >> 24) | (((x) & 0x000000ff00000000ull) >> 8) | (((x) & 0x00000000ff000000ull) << 8) | (((x) & 0x0000000000ff0000ull) << 24) | (((x) & 0x000000000000ff00ull) << 40) | (((x) & 0x00000000000000ffull) << 56))
/* Swap bytes in 64-bit value.  */	#if __GNUC_PREREQ (4, 3)
/* Swap bytes in 32-bit value.  */	#define __bswap_constant_32(x) ((((x) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) | (((x) & 0x0000ff00u) << 8) | (((x) & 0x000000ffu) << 24))
/* Swap bytes in 32-bit value.  */	#if __GNUC_PREREQ (4, 3)
/* Swap bytes in 16-bit value.  */	#define __bswap_constant_16(x) ((__uint16_t) ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8)))
/* Swap bytes in 16-bit value.  */	#if __GNUC_PREREQ (4, 8)
"/* Macros and inline functions to swap the order of bytes in integer values.
   Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _BYTESWAP_H && !defined _NETINET_IN_H && !defined _ENDIAN_H
/* _BITS_UINTN_IDENTITY_H.  */	#endif
"/* These inline functions are to ensure the appropriate type
   conversions and associated diagnostics from macros that convert to
   a given endianness.  */"	definition of __uint16_identity
"/* These inline functions are to ensure the appropriate type
   conversions and associated diagnostics from macros that convert to
   a given endianness.  */"	#endif
"/* Inline functions to return unsigned integer values unchanged.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _NETINET_IN_H && !defined _ENDIAN_H
/* endian.h */	#endif
"/* Some machines may need to use a different endianness for floating point
   values.  */"	#ifndef __FLOAT_WORD_ORDER
"/* Definitions for byte order, according to significance of bytes,
   from low addresses to high addresses.  The value is what you get by
   putting '4' in the most significant byte, '3' in the second most
   significant byte, '2' in the second least significant byte, and '1'
   in the least significant byte, and then writing down one digit for
   each byte, starting with the byte at the lowest address at the left,
   and proceeding to the byte with the highest address at the right.  */"	#define __LITTLE_ENDIAN 1234
"/* Copyright (C) 1992-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _ENDIAN_H
/* Returned by `time'.  */	declaration of time_t
/* Nanoseconds.  */	definition of tv_nsec
/* Seconds.  */	definition of tv_sec
"/* POSIX.1b structure for a time value.  This is like a `struct timeval' but
   has nanoseconds instead of microseconds.  */"	definition of timespec
/* NB: Include guard matches what <linux/time.h> uses.  */	#ifndef _STRUCT_TIMESPEC
/* bits/types/struct_sched_param.h */	#endif
/* Data structure to describe a process' schedulability.  */	definition of sched_param
"/* Sched parameter structure.  Generic version.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library;  if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_TYPES_STRUCT_SCHED_PARAM
/* bits/sched.h */	#endif
/* Switch process to namespace of type NSTYPE indicated by FD.  */	declaration of setns
/* Get currently used CPU and NUMA node.  */	declaration of getcpu
/* Get index of currently used CPU.  */	declaration of sched_getcpu
/* Unshare the specified resources.  */	declaration of unshare
/* Clone current process.  */	declaration of clone
/* Clone I/O context.  */	#define CLONE_IO 0x80000000
/* New network namespace.  */	#define CLONE_NEWNET 0x40000000
/* New pid namespace.  */	#define CLONE_NEWPID 0x20000000
/* New user namespace.  */	#define CLONE_NEWUSER 0x10000000
/* New ipcs.  */	#define CLONE_NEWIPC 0x08000000
/* New utsname group.  */	#define CLONE_NEWUTS 0x04000000
/* New cgroup namespace.  */	#define CLONE_NEWCGROUP 0x02000000
"/* Store TID in userlevel buffer in
					  the child.  */"	#define CLONE_CHILD_SETTID 0x01000000
"/* Set if the tracing process can't
				      force CLONE_PTRACE on this clone.  */"	#define CLONE_UNTRACED 0x00800000
/* Create clone detached.  */	#define CLONE_DETACHED 0x00400000
"/* Register exit futex and memory
					    location to clear.  */"	#define CLONE_CHILD_CLEARTID 0x00200000
"/* Store TID in userlevel buffer
					   before MM copy.  */"	#define CLONE_PARENT_SETTID 0x00100000
/* Set TLS info.  */	#define CLONE_SETTLS 0x00080000
/* Set to shared SVID SEM_UNDO semantics.  */	#define CLONE_SYSVSEM 0x00040000
/* Set to create new namespace.  */	#define CLONE_NEWNS 0x00020000
/* Set to add to same thread group.  */	#define CLONE_THREAD 0x00010000
"/* Set if we want to have the same
				     parent as the cloner.  */"	#define CLONE_PARENT 0x00008000
"/* Set if the parent wants the child to
				     wake it up on mm_release.  */"	#define CLONE_VFORK 0x00004000
/* Set if tracing continues on the child.  */	#define CLONE_PTRACE 0x00002000
/* Set if signal handlers shared.  */	#define CLONE_SIGHAND 0x00000800
/* Set if open files shared between processes.  */	#define CLONE_FILES 0x00000400
/* Set if fs info shared between processes.  */	#define CLONE_FS 0x00000200
/* Set if VM shared between processes.  */	#define CLONE_VM 0x00000100
/* Signal mask to be sent at exit.  */	#define CSIGNAL 0x000000ff
/* Cloning flags.  */	#define CSIGNAL 0x000000ff
/* Scheduling algorithms.  */	#define SCHED_OTHER 0
"/* Definitions of constants and data structure for POSIX 1003.1b-1993
   scheduling interface.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SCHED_H
/* bits/cpu-set.h */	#endif
/* Access functions for CPU masks.  */	#if __GNUC_PREREQ (2, 91)
/* Data structure to describe CPU mask.  */	definition of cpu_set_t
/* Basic access functions.  */	#define __CPUELT(cpu) ((cpu) / __NCPUBITS)
/* Type for array elements in 'cpu_set_t'.  */	declaration of __cpu_mask
/* Size definition for CPU sets.  */	#define __CPU_SETSIZE 1024
"/* Definition of the cpu_set_t structure used by the POSIX 1003.1b-1993
   scheduling interface.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_CPU_SET_H
/* sched.h */	#endif
/* Get the CPU affinity for a task */	declaration of sched_getaffinity
/* Set the CPU affinity for a task */	declaration of sched_setaffinity
/* Access macros for `cpu_set'.  */	#define CPU_SETSIZE __CPU_SETSIZE
/* Get the SCHED_RR interval for the named process.  */	declaration of sched_rr_get_interval
/* Get minimum priority value for a scheduler.  */	declaration of sched_get_priority_min
/* Get maximum priority value for a scheduler.  */	declaration of sched_get_priority_max
/* Yield the processor.  */	declaration of sched_yield
/* Retrieve scheduling algorithm for a particular purpose.  */	declaration of sched_getscheduler
/* Set scheduling algorithm and/or parameters for a process.  */	declaration of sched_setscheduler
/* Retrieve scheduling parameters for a particular process.  */	declaration of sched_getparam
/* Set scheduling parameters for a process.  */	declaration of sched_setparam
/* Backward compatibility.  */	#define sched_priority sched_priority
"/* Definitions for POSIX 1003.1b-1993 (aka POSIX.4) scheduling interface.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SCHED_H
/* Microseconds.  */	definition of tv_usec
/* Seconds.  */	definition of tv_sec
"/* A time value that is accurate to the nearest
   microsecond but also has a range of years.  */"	definition of timeval
/* bits/timex.h */	#endif
/* Read-only bits */	#define STA_RONLY (STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER | STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK)
/* clock source (0 = A, 1 = B) (ro) */	#define STA_CLK 0x8000
/* mode (0 = PLL, 1 = FLL) (ro) */	#define STA_MODE 0x4000
/* resolution (0 = us, 1 = ns) (ro) */	#define STA_NANO 0x2000
/* clock hardware fault (ro) */	#define STA_CLOCKERR 0x1000
/* PPS signal calibration error (ro) */	#define STA_PPSERROR 0x0800
/* PPS signal wander exceeded (ro) */	#define STA_PPSWANDER 0x0400
/* PPS signal jitter exceeded (ro) */	#define STA_PPSJITTER 0x0200
/* PPS signal present (ro) */	#define STA_PPSSIGNAL 0x0100
/* hold frequency (rw) */	#define STA_FREQHOLD 0x0080
/* clock unsynchronized (rw) */	#define STA_UNSYNC 0x0040
/* delete leap (rw) */	#define STA_DEL 0x0020
/* insert leap (rw) */	#define STA_INS 0x0010
/* select frequency-lock mode (rw) */	#define STA_FLL 0x0008
/* enable PPS time discipline (rw) */	#define STA_PPSTIME 0x0004
/* enable PPS freq discipline (rw) */	#define STA_PPSFREQ 0x0002
/* enable PLL updates (rw) */	#define STA_PLL 0x0001
/* Status codes (timex.status) */	#define STA_PLL 0x0001
/* 0x8000 in original */	#define MOD_CLKA ADJ_OFFSET_SINGLESHOT
/* xntp 3.4 compatibility names */	#define MOD_OFFSET ADJ_OFFSET
/* read-only adjtime */	#define ADJ_OFFSET_SS_READ 0xa001
/* old-fashioned adjtime */	#define ADJ_OFFSET_SINGLESHOT 0x8001
/* tick value */	#define ADJ_TICK 0x4000
/* select nanosecond resolution */	#define ADJ_NANO 0x2000
/* select microsecond resolution */	#define ADJ_MICRO 0x1000
/* add 'time' to current time */	#define ADJ_SETOFFSET 0x0100
/* set TAI offset */	#define ADJ_TAI 0x0080
/* pll time constant */	#define ADJ_TIMECONST 0x0020
/* clock status */	#define ADJ_STATUS 0x0010
/* estimated time error */	#define ADJ_ESTERROR 0x0008
/* maximum time error */	#define ADJ_MAXERROR 0x0004
/* frequency offset */	#define ADJ_FREQUENCY 0x0002
/* time offset */	#define ADJ_OFFSET 0x0001
/* Mode codes (timex.mode) */	#define ADJ_OFFSET 0x0001
/* ??? */	definition of (unnamed bitfield)
/* TAI offset (ro) */	definition of tai
/* stability limit exceeded (ro) */	definition of stbcnt
/* calibration errors (ro) */	definition of errcnt
/* calibration intervals (ro) */	definition of calcnt
/* jitter limit exceeded (ro) */	definition of jitcnt
/* pps stability (scaled ppm) (ro) */	definition of stabil
/* interval duration (s) (shift) (ro) */	definition of shift
/* pps jitter (us) (ro) */	definition of jitter
/* pps frequency (scaled ppm) (ro) */	definition of ppsfreq
/* (modified) usecs between clock ticks */	definition of tick
/* (read only, except for ADJ_SETOFFSET) */	definition of time
/* clock frequency tolerance (ppm) (ro) */	definition of tolerance
/* clock precision (usec) (ro) */	definition of precision
/* pll time constant */	definition of constant
/* clock command/status */	definition of status
/* estimated error (usec) */	definition of esterror
/* maximum error (usec) */	definition of maxerror
/* frequency offset (scaled ppm) */	definition of freq
/* time offset (usec) */	definition of offset
/* mode selector */	definition of modes
/* These definitions from linux/timex.h as of 3.18.  */	definition of timex
"/* Copyright (C) 1995-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_TIMEX_H
/* bits/time.h */	#endif
/* use GNU */	#endif
/* Tune a POSIX clock.  */	declaration of clock_adjtime
/* Flag to indicate time is absolute.  */	#define TIMER_ABSTIME 1
/* Like CLOCK_REALTIME but in International Atomic Time.  */	#define CLOCK_TAI 11
/* Like CLOCK_BOOTTIME but also wakes suspended system.  */	#define CLOCK_BOOTTIME_ALARM 9
/* Like CLOCK_REALTIME but also wakes suspended system.  */	#define CLOCK_REALTIME_ALARM 8
/* Monotonic system-wide clock that includes time spent in suspension.  */	#define CLOCK_BOOTTIME 7
/* Monotonic system-wide clock, updated only on ticks.  */	#define CLOCK_MONOTONIC_COARSE 6
/* Identifier for system-wide realtime clock, updated only on ticks.  */	#define CLOCK_REALTIME_COARSE 5
/* Monotonic system-wide clock, not adjusted for frequency scaling.  */	#define CLOCK_MONOTONIC_RAW 4
/* Thread-specific CPU-time clock.  */	#define CLOCK_THREAD_CPUTIME_ID 3
/* High-resolution timer from the CPU.  */	#define CLOCK_PROCESS_CPUTIME_ID 2
/* Monotonic system-wide clock.  */	#define CLOCK_MONOTONIC 1
/* Identifier for system-wide realtime clock.  */	#define CLOCK_REALTIME 0
/* 2 is _SC_CLK_TCK */	#endif
"/* CAE XSH, Issue 4, Version 2: <time.h>
   The value of CLOCKS_PER_SEC is required to be 1 million on all
   XSI-conformant systems. */"	#define CLOCKS_PER_SEC ((__clock_t) 1000000)
"/*
 * Never include this file directly; use <time.h> instead.
 */"	#ifndef _BITS_TIME_H
/* Returned by `clock'.  */	declaration of clock_t
/* Timezone abbreviation.  */	#endif
/* Timezone abbreviation.  */	definition of tm_zone
/* Seconds east of UTC.  */	definition of tm_gmtoff
"/* DST.		[-1/0/1]*/"	definition of tm_isdst
"/* Days in year.[0-365]	*/"	definition of tm_yday
"/* Day of week.	[0-6] */"	definition of tm_wday
"/* Year	- 1900.  */"	definition of tm_year
"/* Month.	[0-11] */"	definition of tm_mon
"/* Day.		[1-31] */"	definition of tm_mday
"/* Hours.	[0-23] */"	definition of tm_hour
"/* Minutes.	[0-59] */"	definition of tm_min
"/* Seconds.	[0-60] (1 leap second) */"	definition of tm_sec
/* ISO C `broken-down time' structure.  */	definition of tm
/* Clock ID used in clock and timer functions.  */	declaration of clockid_t
/* Timer ID returned by `timer_create'.  */	declaration of timer_t
/* POSIX.1b structure for timer start values and intervals.  */	definition of itimerspec
/* time.h.  */	#endif
"/* Since `getdate' is not reentrant because of the use of `getdate_err'
   and the static buffer to return the result in, we provide a thread-safe
   variant.  The functionality is the same.  The result is returned in
   the buffer pointed to by RESBUFP and in case of an error the return
   value is != 0 with the same values as given above for `getdate_err'.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of getdate_r
"/* Parse the given string as a date specification and return a value
   representing the value.  The templates from the file identified by
   the environment variable DATEMSK are used.  In case of an error
   `getdate_err' is set.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of getdate
"/* Set to one of the following values to indicate an error.
     1  the DATEMSK environment variable is null or undefined,
     2  the template file cannot be opened for reading,
     3  failed to get file status information,
     4  the template file is not a regular file,
     5  an error is encountered while reading the template file,
     6  memory allication failed (not enough memory available),
     7  there is no line in the template that matches the input,
     8  invalid input specification Example: February 31 or a time is
	specified that can not be represented in a time_t (representing
	the time in seconds since 00:00:00 UTC, January 1, 1970) */"	declaration of getdate_err
/* Set TS to calendar time based in time base BASE.  */	declaration of timespec_get
/* Get expiration overrun for timer TIMERID.  */	declaration of timer_getoverrun
/* Get current value of timer TIMERID and store it in VALUE.  */	declaration of timer_gettime
/* Set timer TIMERID to VALUE, returning old value in OVALUE.  */	declaration of timer_settime
/* Delete timer TIMERID.  */	declaration of timer_delete
/* Create new per-process timer using CLOCK_ID.  */	declaration of timer_create
/* Return clock ID for CPU-time clock.  */	declaration of clock_getcpuclockid
"/* High-resolution sleep with the specified clock.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of clock_nanosleep
/* Set clock CLOCK_ID to value TP.  */	declaration of clock_settime
/* Get current value of clock CLOCK_ID and store it in TP.  */	declaration of clock_gettime
/* Get resolution of clock CLOCK_ID.  */	declaration of clock_getres
"/* Pause execution for a number of nanoseconds.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of nanosleep
/* Return the number of days in YEAR.  */	declaration of dysize
/* Another name for `mktime'.  */	declaration of timelocal
/* Like `mktime', but for TP represents Universal Time, not local time.  */	declaration of timegm
"/* Nonzero if YEAR is a leap year (every 4 years,
   except every 100th isn't, and every 400th is).  */"	#define __isleap(year) ((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))
"/* Set the system time to *WHEN.
   This call is restricted to the superuser.  */"	declaration of stime
"/* Set time conversion information from the TZ environment variable.
   If TZ is not defined, a locale-dependent default is used.  */"	declaration of tzset
/* Same as above.  */	declaration of tzname
/* Seconds west of UTC.  */	declaration of __timezone
/* If daylight-saving time is ever in use.  */	declaration of __daylight
/* Current timezone names.  */	declaration of __tzname
/* Defined in localtime.c.  */	declaration of __tzname
/* POSIX */	#endif
/* Equivalent to `asctime_r (localtime_r (timer, *TMP*), buf)'.  */	declaration of ctime_r
"/* Return in BUF a string of the form ""Day Mon dd hh:mm:ss yyyy\n""
   that is the representation of TP in this format.  */"	declaration of asctime_r
/* Equivalent to `asctime (localtime (timer))'.  */	declaration of ctime
"/* Return a string of the form ""Day Mon dd hh:mm:ss yyyy\n""
   that is the representation of TP in this format.  */"	declaration of asctime
/* POSIX */	#endif
"/* Return the `struct tm' representation of *TIMER in local time,
   using *TP to store the result.  */"	declaration of localtime_r
"/* Return the `struct tm' representation of *TIMER in UTC,
   using *TP to store the result.  */"	declaration of gmtime_r
"/* Return the `struct tm' representation
   of *TIMER in the local timezone.  */"	declaration of localtime
"/* Return the `struct tm' representation of *TIMER
   in Universal Coordinated Time (aka Greenwich Mean Time).  */"	declaration of gmtime
"/* Similar to the two functions above but take the information from
   the provided locale and not the global locale.  */"	declaration of strftime_l
"/* Parse S according to FORMAT and store binary time information in TP.
   The return value is a pointer to the first unparsed character in S.  */"	declaration of strptime
"/* Format TP into S according to FORMAT.
   Write no more than MAXSIZE characters and return the number
   of characters written, or 0 if it would exceed MAXSIZE.  */"	declaration of strftime
/* Return the `time_t' representation of TP and normalize TP.  */	declaration of mktime
/* Return the difference between TIME1 and TIME0.  */	declaration of difftime
/* Return the current time and put it in *TIMER if TIMER is not NULL.  */	declaration of time
"/* Time used by the program so far (user time + system time).
   The result / CLOCKS_PER_SEC is program time in seconds.  */"	declaration of clock
/* Time base values for timespec_get.  */	#define TIME_UTC 1
"/*
 *	ISO C99 Standard: 7.23 Date and time	<time.h>
 */"	#ifndef _TIME_H
/* bits/pthreadtypes.h */	#endif
/* Extra attributes for the cleanup functions.  */	#endif
"/* FLAGS must stay at this position in the structure to maintain
     binary compatibility.  */"	#endif
"/* FLAGS must stay at this position in the structure to maintain
     binary compatibility.  */"	definition of __flags
/* Definitions for internal mutex struct.  */	#define __PTHREAD_COMPAT_PADDING_MID
"/* Copyright (C) 2002-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_PTHREADTYPES_ARCH_H
/* _THREAD_SHARED_TYPES_H  */	#endif
/* Common definition of pthread_cond_t. */	definition of __pthread_cond_s
"/* KIND must stay at this position in the structure to maintain
     binary compatibility with static initializers.

     Concurrency notes:
     The __kind of a mutex is initialized either by the static
     PTHREAD_MUTEX_INITIALIZER or by a call to pthread_mutex_init.

     After a mutex has been initialized, the __kind of a mutex is usually not
     changed.  BUT it can be set to -1 in pthread_mutex_destroy or elision can
     be enabled.  This is done concurrently in the pthread_mutex_*lock functions
     by using the macro FORCE_ELISION. This macro is only defined for
     architectures which supports lock elision.

     For elision, there are the flags PTHREAD_MUTEX_ELISION_NP and
     PTHREAD_MUTEX_NO_ELISION_NP which can be set in addition to the already set
     type of a mutex.
     Before a mutex is initialized, only PTHREAD_MUTEX_NO_ELISION_NP can be set
     with pthread_mutexattr_settype.
     After a mutex has been initialized, the functions pthread_mutex_*lock can
     enable elision - if the mutex-type and the machine supports it - by setting
     the flag PTHREAD_MUTEX_ELISION_NP. This is done concurrently. Afterwards
     the lock / unlock functions are using specific elision code-paths.  */"	definition of __kind
/* Mutex __spins initializer used by PTHREAD_MUTEX_INITIALIZER.  */	#endif
/* Lock elision support.  */	#if __PTHREAD_MUTEX_LOCK_ELISION
/* Common definition of pthread_mutex_t. */	#if !__PTHREAD_MUTEX_USE_UNION
"/* Common threading primitives definitions for both POSIX and C11.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _THREAD_SHARED_TYPES_H
"/* POSIX barriers data type.  The structure of the type is
   deliberately not exposed.  */"	definition of pthread_barrier_t
/* POSIX spinlock data type.  */	declaration of pthread_spinlock_t
"/* Data structure for reader-writer lock variable handling.  The
   structure of the attribute type is deliberately not exposed.  */"	definition of pthread_rwlock_t
/* Once-only execution */	declaration of pthread_once_t
/* Keys for thread-specific data */	declaration of pthread_key_t
"/* Data structure for condition variable handling.  The structure of
   the attribute type is not exposed on purpose.  */"	definition of pthread_condattr_t
"/* Data structures for mutex handling.  The structure of the attribute
   type is not exposed on purpose.  */"	definition of pthread_mutexattr_t
"/* Thread identifiers.  The structure of the attribute type is not
   exposed on purpose.  */"	declaration of pthread_t
"/* Declaration of common pthread types for all architectures.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_PTHREADTYPES_COMMON_H
/* bits/setjmp.h */	#endif
/* Define the machine-dependent type `jmp_buf'.  x86-64 version.  */	#ifndef _BITS_SETJMP_H
/* pthread.h */	#endif
/* Optimizations.  */	definition of pthread_equal
"/* Install handlers to be called when a new process is created with FORK.
   The PREPARE handler is called in the parent process just before performing
   FORK. The PARENT handler is called in the parent process just after FORK.
   The CHILD handler is called in the child process.  Each of the three
   handlers can be NULL, meaning that no handler needs to be called at that
   point.
   PTHREAD_ATFORK can be called several times, in which case the PREPARE
   handlers are called in LIFO order (last added with PTHREAD_ATFORK,
   first called before FORK), and the PARENT and CHILD handlers are called
   in FIFO (first added, first called).  */"	declaration of pthread_atfork
/* Get ID of CPU-time clock for thread THREAD_ID.  */	declaration of pthread_getcpuclockid
/* Store POINTER in the thread-specific data slot identified by KEY. */	declaration of pthread_setspecific
/* Return current value of the thread-specific data slot identified by KEY.  */	declaration of pthread_getspecific
/* Destroy KEY.  */	declaration of pthread_key_delete
"/* Create a key value identifying a location in the thread-specific
   data area.  Each thread maintains a distinct thread-specific data
   area.  DESTR_FUNCTION, if non-NULL, is called with the value
   associated to that key when the key is destroyed.
   DESTR_FUNCTION is not called if the value associated is NULL when
   the key is destroyed.  */"	declaration of pthread_key_create
/* Set the process-shared flag of the barrier attribute ATTR.  */	declaration of pthread_barrierattr_setpshared
/* Get the process-shared flag of the barrier attribute ATTR.  */	declaration of pthread_barrierattr_getpshared
/* Destroy previously dynamically initialized barrier attribute ATTR.  */	declaration of pthread_barrierattr_destroy
/* Initialize barrier attribute ATTR.  */	declaration of pthread_barrierattr_init
/* Wait on barrier BARRIER.  */	declaration of pthread_barrier_wait
/* Destroy a previously dynamically initialized barrier BARRIER.  */	declaration of pthread_barrier_destroy
"/* Initialize BARRIER with the attributes in ATTR.  The barrier is
   opened when COUNT waiters arrived.  */"	declaration of pthread_barrier_init
/* Release spinlock LOCK.  */	declaration of pthread_spin_unlock
/* Try to lock spinlock LOCK.  */	declaration of pthread_spin_trylock
/* Wait until spinlock LOCK is retrieved.  */	declaration of pthread_spin_lock
/* Destroy the spinlock LOCK.  */	declaration of pthread_spin_destroy
"/* Initialize the spinlock LOCK.  If PSHARED is nonzero the spinlock can
   be shared between different processes.  */"	declaration of pthread_spin_init
/* Set the clock selected for the condition variable attribute ATTR.  */	declaration of pthread_condattr_setclock
/* Get the clock selected for the condition variable attribute ATTR.  */	declaration of pthread_condattr_getclock
/* Set the process-shared flag of the condition variable attribute ATTR.  */	declaration of pthread_condattr_setpshared
/* Get the process-shared flag of the condition variable attribute ATTR.  */	declaration of pthread_condattr_getpshared
/* Destroy condition variable attribute ATTR.  */	declaration of pthread_condattr_destroy
/* Initialize condition variable attribute ATTR.  */	declaration of pthread_condattr_init
"/* Wait for condition variable COND to be signaled or broadcast until
   ABSTIME measured by the specified clock. MUTEX is assumed to be
   locked before. CLOCK is the clock to use. ABSTIME is an absolute
   time specification against CLOCK's epoch.

   This function is a cancellation point and therefore not marked with
   __THROW. */"	declaration of pthread_cond_clockwait
"/* Wait for condition variable COND to be signaled or broadcast until
   ABSTIME.  MUTEX is assumed to be locked before.  ABSTIME is an
   absolute time specification; zero is the beginning of the epoch
   (00:00:00 GMT, January 1, 1970).

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of pthread_cond_timedwait
"/* Wait for condition variable COND to be signaled or broadcast.
   MUTEX is assumed to be locked before.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of pthread_cond_wait
/* Wake up all threads waiting for condition variables COND.  */	declaration of pthread_cond_broadcast
/* Wake up one thread waiting for condition variable COND.  */	declaration of pthread_cond_signal
/* Destroy condition variable COND.  */	declaration of pthread_cond_destroy
"/* Initialize condition variable COND using attributes ATTR, or use
   the default values if later is NULL.  */"	declaration of pthread_cond_init
/* Set reader/write preference.  */	declaration of pthread_rwlockattr_setkind_np
/* Return current setting of reader/writer preference.  */	declaration of pthread_rwlockattr_getkind_np
/* Set process-shared attribute of ATTR to PSHARED.  */	declaration of pthread_rwlockattr_setpshared
/* Return current setting of process-shared attribute of ATTR in PSHARED.  */	declaration of pthread_rwlockattr_getpshared
/* Destroy attribute object ATTR.  */	declaration of pthread_rwlockattr_destroy
/* Initialize attribute object ATTR with default values.  */	declaration of pthread_rwlockattr_init
/* Unlock RWLOCK.  */	declaration of pthread_rwlock_unlock
/* Try to acquire write lock for RWLOCK or return after specfied time.  */	declaration of pthread_rwlock_timedwrlock
/* Try to acquire write lock for RWLOCK.  */	declaration of pthread_rwlock_trywrlock
/* Acquire write lock for RWLOCK.  */	declaration of pthread_rwlock_wrlock
/* Try to acquire read lock for RWLOCK or return after specfied time.  */	declaration of pthread_rwlock_timedrdlock
/* Try to acquire read lock for RWLOCK.  */	declaration of pthread_rwlock_tryrdlock
/* Acquire read lock for RWLOCK.  */	declaration of pthread_rwlock_rdlock
/* Destroy read-write lock RWLOCK.  */	declaration of pthread_rwlock_destroy
"/* Initialize read-write lock RWLOCK using attributes ATTR, or use
   the default values if later is NULL.  */"	declaration of pthread_rwlock_init
/* Set the robustness flag of the mutex attribute ATTR.  */	declaration of pthread_mutexattr_setrobust
/* Get the robustness flag of the mutex attribute ATTR.  */	declaration of pthread_mutexattr_getrobust
/* Set the mutex prioceiling attribute in *ATTR to PRIOCEILING.  */	declaration of pthread_mutexattr_setprioceiling
/* Return in *PRIOCEILING the mutex prioceiling attribute in *ATTR.  */	declaration of pthread_mutexattr_getprioceiling
"/* Set the mutex protocol attribute in *ATTR to PROTOCOL (either
   PTHREAD_PRIO_NONE, PTHREAD_PRIO_INHERIT, or PTHREAD_PRIO_PROTECT).  */"	declaration of pthread_mutexattr_setprotocol
/* Return in *PROTOCOL the mutex protocol attribute in *ATTR.  */	declaration of pthread_mutexattr_getprotocol
"/* Set the mutex kind attribute in *ATTR to KIND (either PTHREAD_MUTEX_NORMAL,
   PTHREAD_MUTEX_RECURSIVE, PTHREAD_MUTEX_ERRORCHECK, or
   PTHREAD_MUTEX_DEFAULT).  */"	declaration of pthread_mutexattr_settype
/* Return in *KIND the mutex kind attribute in *ATTR.  */	declaration of pthread_mutexattr_gettype
/* Set the process-shared flag of the mutex attribute ATTR.  */	declaration of pthread_mutexattr_setpshared
/* Get the process-shared flag of the mutex attribute ATTR.  */	declaration of pthread_mutexattr_getpshared
/* Destroy mutex attribute object ATTR.  */	declaration of pthread_mutexattr_destroy
"/* Initialize mutex attribute object ATTR with default attributes
   (kind is PTHREAD_MUTEX_TIMED_NP).  */"	declaration of pthread_mutexattr_init
/* Declare the state protected by MUTEX as consistent.  */	declaration of pthread_mutex_consistent
"/* Set the priority ceiling of MUTEX to PRIOCEILING, return old
   priority ceiling value in *OLD_CEILING.  */"	declaration of pthread_mutex_setprioceiling
/* Get the priority ceiling of MUTEX.  */	declaration of pthread_mutex_getprioceiling
/* Unlock a mutex.  */	declaration of pthread_mutex_unlock
/* Wait until lock becomes available, or specified time passes. */	declaration of pthread_mutex_timedlock
/* Lock a mutex.  */	declaration of pthread_mutex_lock
/* Try locking a mutex.  */	declaration of pthread_mutex_trylock
/* Destroy a mutex.  */	declaration of pthread_mutex_destroy
/* Initialize a mutex.  */	declaration of pthread_mutex_init
/* Function used in the macros.  */	declaration of __jmp_buf_tag
/* Internal interface to initiate cleanup.  */	declaration of __pthread_unwind_next
/* Empty to allow label before pthread_cleanup_pop.  */	declaration of __pthread_unregister_cancel_restore
"/* Remove a cleanup handler as pthread_cleanup_pop does, but also
   restores the cancellation type that was in effect when the matching
   pthread_cleanup_push_defer was called.  */"	#define pthread_cleanup_pop_restore_np(execute) do { } while (0); } while (0); __pthread_unregister_cancel_restore (&__cancel_buf); if (execute) __cancel_routine (__cancel_arg); } while (0)
/* NOTREACHED */	declaration of __pthread_register_cancel_defer
"/* Install a cleanup handler as pthread_cleanup_push does, but also
   saves the current cancellation type and sets it to deferred
   cancellation.  */"	#define pthread_cleanup_push_defer_np(routine,arg) do { __pthread_unwind_buf_t __cancel_buf; void (*__cancel_routine) (void *) = (routine); void *__cancel_arg = (arg); int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *) __cancel_buf.__cancel_jmp_buf, 0); if (__glibc_unlikely (__not_first_call)) { __cancel_routine (__cancel_arg); __pthread_unwind_next (&__cancel_buf); } __pthread_register_cancel_defer (&__cancel_buf); do {
/* Empty to allow label before pthread_cleanup_pop.  */	declaration of __pthread_unregister_cancel
"/* Remove a cleanup handler installed by the matching pthread_cleanup_push.
   If EXECUTE is non-zero, the handler function is called. */"	#define pthread_cleanup_pop(execute) do { } while (0); } while (0); __pthread_unregister_cancel (&__cancel_buf); if (execute) __cancel_routine (__cancel_arg); } while (0)
/* NOTREACHED */	declaration of __pthread_register_cancel
"/* Install a cleanup handler: ROUTINE will be called with arguments ARG
   when the thread is canceled or calls pthread_exit.  ROUTINE will also
   be called with arguments ARG when the matching pthread_cleanup_pop
   is executed with non-zero EXECUTE argument.

   pthread_cleanup_push and pthread_cleanup_pop are macros and must always
   be used in matching pairs at the same nesting level of braces.  */"	#define pthread_cleanup_push(routine,arg) do { __pthread_unwind_buf_t __cancel_buf; void (*__cancel_routine) (void *) = (routine); void *__cancel_arg = (arg); int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *) __cancel_buf.__cancel_jmp_buf, 0); if (__glibc_unlikely (__not_first_call)) { __cancel_routine (__cancel_arg); __pthread_unwind_next (&__cancel_buf); } __pthread_register_cancel (&__cancel_buf); do {
"/* Remove a cleanup handler as pthread_cleanup_pop does, but also
   restores the cancellation type that was in effect when the matching
   pthread_cleanup_push_defer was called.  */"	#endif
"/* Remove a cleanup handler installed by the matching pthread_cleanup_push.
   If EXECUTE is non-zero, the handler function is called. */"	#ifdef __USE_GNU
"/* Remove a cleanup handler as pthread_cleanup_pop does, but also
   restores the cancellation type that was in effect when the matching
   pthread_cleanup_push_defer was called.  */"	#endif
"/* Remove a cleanup handler installed by the matching pthread_cleanup_push.
   If EXECUTE is non-zero, the handler function is called. */"	#ifdef __USE_GNU
/* Structure to hold the cleanup handler information.  */	definition of __pthread_cleanup_frame
/* No special attributes by default.  */	#ifndef __cleanup_fct_attribute
/* Cancellation handling with integration into exception handling.  */	definition of __pthread_unwind_buf_t
"/* Test for pending cancellation for the current thread and terminate
   the thread as per pthread_exit(PTHREAD_CANCELED) if it has been
   cancelled.  */"	declaration of pthread_testcancel
/* Cancel THREAD immediately or at the next possibility.  */	declaration of pthread_cancel
"/* Set cancellation state of current thread to TYPE, returning the old
   type in *OLDTYPE if OLDTYPE is not NULL.  */"	declaration of pthread_setcanceltype
"/* Set cancelability state of current thread to STATE, returning old
   state in *OLDSTATE if OLDSTATE is not NULL.  */"	declaration of pthread_setcancelstate
"/* Guarantee that the initialization function INIT_ROUTINE will be called
   only once, even if pthread_once is executed several times with the
   same ONCE_CONTROL argument. ONCE_CONTROL must point to a static or
   extern variable initialized to PTHREAD_ONCE_INIT.

   The initialization functions might throw exception which is why
   this function is not marked with __THROW.  */"	declaration of pthread_once
/* Get bit set in CPUSET representing the processors TH can run on.  */	declaration of pthread_getaffinity_np
"/* Limit specified thread TH to run only on the processors represented
   in CPUSET.  */"	declaration of pthread_setaffinity_np
"/* Yield the processor to another thread or process.
   This function is similar to the POSIX `sched_yield' function but
   might be differently implemented in the case of a m-on-n thread
   implementation.  */"	declaration of pthread_yield
/* Set new concurrency level to LEVEL.  */	declaration of pthread_setconcurrency
/* Determine level of concurrency.  */	declaration of pthread_getconcurrency
/* Set thread name visible in the kernel and its interfaces.  */	declaration of pthread_setname_np
/* Get thread name visible in the kernel and its interfaces.  */	declaration of pthread_getname_np
/* Set the scheduling priority for TARGET_THREAD.  */	declaration of pthread_setschedprio
/* Return in *POLICY and *PARAM the scheduling parameters for TARGET_THREAD. */	declaration of pthread_getschedparam
"/* Set the scheduling parameters for TARGET_THREAD according to POLICY
   and *PARAM.  */"	declaration of pthread_setschedparam
"/* Initialize thread attribute *ATTR with attributes corresponding to the
   already running thread TH.  It shall be called on uninitialized ATTR
   and destroyed with pthread_attr_destroy when no longer needed.  */"	declaration of pthread_getattr_np
"/* Set the default attributes to be used by pthread_create in this
   process.  */"	declaration of pthread_setattr_default_np
/* Get the default attributes used by pthread_create in this process.  */	declaration of pthread_getattr_default_np
"/* Get bit set in CPUSET representing the processors threads created with
   ATTR can run on.  */"	declaration of pthread_attr_getaffinity_np
"/* Thread created with attribute ATTR will be limited to run only on
   the processors represented in CPUSET.  */"	declaration of pthread_attr_setaffinity_np
"/* The following two interfaces are intended to replace the last two.  They
   require setting the address as well as the size since only setting the
   address will make the implementation on some architectures impossible.  */"	declaration of pthread_attr_setstack
/* Return the previously set address for the stack.  */	declaration of pthread_attr_getstack
"/* Add information about the minimum stack size needed for the thread
   to be started.  This size must never be less than PTHREAD_STACK_MIN
   and must also not exceed the system limits.  */"	declaration of pthread_attr_setstacksize
/* Return the currently used minimal stack size.  */	declaration of pthread_attr_getstacksize
"/* Set the starting address of the stack of the thread to be created.
   Depending on whether the stack grows up or down the value must either
   be higher or lower than all the address in the memory block.  The
   minimal size of the block must be PTHREAD_STACK_MIN.  */"	declaration of pthread_attr_setstackaddr
/* Return the previously set address for the stack.  */	declaration of pthread_attr_getstackaddr
/* Set scheduling contention scope in *ATTR according to SCOPE.  */	declaration of pthread_attr_setscope
/* Return in *SCOPE the scheduling contention scope of *ATTR.  */	declaration of pthread_attr_getscope
/* Set scheduling inheritance mode in *ATTR according to INHERIT.  */	declaration of pthread_attr_setinheritsched
/* Return in *INHERIT the scheduling inheritance mode of *ATTR.  */	declaration of pthread_attr_getinheritsched
/* Set scheduling policy in *ATTR according to POLICY.  */	declaration of pthread_attr_setschedpolicy
/* Return in *POLICY the scheduling policy of *ATTR.  */	declaration of pthread_attr_getschedpolicy
/* Set scheduling parameters (priority, etc) in *ATTR according to PARAM.  */	declaration of pthread_attr_setschedparam
/* Return in *PARAM the scheduling parameters of *ATTR.  */	declaration of pthread_attr_getschedparam
/* Set the size of the guard area created for stack overflow protection.  */	declaration of pthread_attr_setguardsize
/* Get the size of the guard area created for stack overflow protection.  */	declaration of pthread_attr_getguardsize
/* Set detach state attribute.  */	declaration of pthread_attr_setdetachstate
/* Get detach state attribute.  */	declaration of pthread_attr_getdetachstate
/* Destroy thread attribute *ATTR.  */	declaration of pthread_attr_destroy
"/* Initialize thread attribute *ATTR with default attributes
   (detachstate is PTHREAD_JOINABLE, scheduling policy is SCHED_OTHER,
    no user-provided stack).  */"	declaration of pthread_attr_init
/* Compare two thread identifiers.  */	declaration of pthread_equal
/* Obtain the identifier of the current thread.  */	declaration of pthread_self
"/* Indicate that the thread TH is never to be joined with PTHREAD_JOIN.
   The resources of TH will therefore be freed immediately when it
   terminates, instead of waiting for another thread to perform PTHREAD_JOIN
   on it.  */"	declaration of pthread_detach
"/* Make calling thread wait for termination of the thread TH, but only
   until TIMEOUT.  The exit status of the thread is stored in
   *THREAD_RETURN, if THREAD_RETURN is not NULL.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of pthread_timedjoin_np
"/* Check whether thread TH has terminated.  If yes return the status of
   the thread in *THREAD_RETURN, if THREAD_RETURN is not NULL.  */"	declaration of pthread_tryjoin_np
"/* Make calling thread wait for termination of the thread TH.  The
   exit status of the thread is stored in *THREAD_RETURN, if THREAD_RETURN
   is not NULL.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of pthread_join
"/* Terminate calling thread.

   The registered cleanup handlers are called via exception handling
   so we cannot mark this function with __THROW.*/"	declaration of pthread_exit
"/* Create a new thread, starting with execution of START-ROUTINE
   getting passed ARG.  Creation attributed come from ATTR.  The new
   handle is stored in *NEWTHREAD.  */"	declaration of pthread_create
"/* Value returned by 'pthread_barrier_wait' for one of the threads after
   the required number of threads have called this function.
   -1 is distinct from 0 and all errno constants */"	#define PTHREAD_BARRIER_SERIAL_THREAD -1
/* Single execution handling.  */	#define PTHREAD_ONCE_INIT 0
/* Cancellation */	definition of (unnamed enum)
/* Chaining of cleanup functions.  */	definition of __prev
/* Saved cancellation type. */	definition of __canceltype
/* Its argument.  */	definition of __arg
/* Function to call.  */	definition of __routine
/* Cleanup buffers */	definition of _pthread_cleanup_buffer
/* Conditional variable handling.  */	#define PTHREAD_COND_INITIALIZER { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }
/* Process shared or private flag.  */	definition of (unnamed enum)
/* Scope handling.  */	definition of (unnamed enum)
/* Scheduler inheritance.  */	definition of (unnamed enum)
/* Unix98 or XOpen2K */	#endif
/* Read-write lock initializers.  */	#define PTHREAD_RWLOCK_INITIALIZER { { 0, 0, 0, 0, 0, 0, 0, 0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0, 0 } }
"/* Define __PTHREAD_RWLOCK_INT_FLAGS_SHARED to 1 if pthread_rwlock_t
   has the shared field.  All 64-bit architectures have the shared field
   in pthread_rwlock_t.  */"	#ifndef __PTHREAD_RWLOCK_INT_FLAGS_SHARED
/* Read-write lock types.  */	#if defined __USE_UNIX98 || defined __USE_XOPEN2K
/* Mutex protocols.  */	definition of (unnamed enum)
/* Robust mutex or not flags.  */	definition of (unnamed enum)
/* For compatibility.  */	PTHREAD_MUTEX_FAST_NP
/* Mutex types.  */	definition of (unnamed enum)
/* Detach state.  */	definition of (unnamed enum)
"/* Copyright (C) 2002-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _PTHREAD_H
/* ! _GLIBCXX_GCC_GTHR_POSIX_H */	#endif
/* _LIBOBJC */	#endif
/* _LIBOBJC */	#else
/* Wake up one thread waiting on this condition.  */	#else
/* _POSIX_PRIORITY_SCHEDULING */	#endif
/* _POSIX_THREAD_PRIORITY_SCHEDULING */	#endif
/* Return the current thread's priority.  */	#ifdef _POSIX_PRIORITY_SCHEDULING
/* _POSIX_PRIORITY_SCHEDULING */	#endif
/* _POSIX_THREAD_PRIORITY_SCHEDULING */	#endif
"/*
	   * The solaris 7 and several other man pages incorrectly state that
	   * this should be a pointer to policy but pthread.h is universally
	   * at odds with this.
	   */"	#endif
/* Set the current thread's priority.  */	#ifdef _POSIX_PRIORITY_SCHEDULING
/* This is the config.h file in libobjc/ */	#ifdef HAVE_SCHED_H
/* __GXX_WEAK__ */	#endif
/* hppa-hpux */	#endif
/* not hppa-hpux */	#else
/* Avoid reading __gthread_active twice on the main code path.  */	#else
"/* Similar to Solaris, HP-UX 11 for PA-RISC provides stubs for pthread
   calls in shared flavors of the HP-UX C library.  Most of the stubs
   have no functionality.  The details are described in the ""libc cumulative
   patch"" for each subversion of HP-UX 11.  There are two special interfaces
   provided for checking whether an application is linked to a shared pthread
   library or not.  However, these interfaces aren't available in early
   libpthread libraries.  We also need a test that works for archive
   libraries.  We can't use pthread_once as some libc versions call the
   init function.  We also can't use pthread_create or pthread_attr_init
   as these create a thread and thereby prevent changing the default stack
   size.  The function pthread_default_stacksize_np is available in both
   the archive and shared versions of libpthread.   It can be used to
   determine the default pthread stack size.  There is a stub in some
   shared libc versions which returns a zero size if pthreads are not
   active.  We provide an equivalent stub to handle cases where libc
   doesn't provide one.  */"	#if defined(__hppa__) && defined(__hpux__)
/* not __GXX_WEAK__ */	#else
/* FreeBSD or Solaris */	#endif
"/* For a program to be multi-threaded the only thing that it certainly must
   be using is pthread_create.  However, there may be other libraries that
   intercept pthread_create with their own definitions to wrap pthreads
   functionality for some purpose.  In those cases, pthread_create being
   defined might not necessarily mean that libpthread is actually linked
   in.

   For the GNU C library, we can use a known internal name.  This is always
   available in the ABI, but no other library would define it.  That is
   ideal, since any public pthread function might be intercepted just as
   pthread_create might be.  __pthread_key_create is an ""internal""
   implementation symbol, but it is part of the public exported ABI.  Also,
   it's among the symbols that the static libpthread.a always links in
   whenever pthread_create is used, so there is no danger of a false
   negative result in any statically-linked, multi-threaded program.

   For others, we choose pthread_cancel as a function that seems unlikely
   to be redefined by an interceptor library.  The bionic (Android) C
   library does not provide pthread_cancel, so we do use pthread_create
   there (and interceptor libraries lose).  */"	#ifdef __GLIBC__
/* neither FreeBSD nor Solaris */	#else
/* Make sure we'll never enter this block again.  */	#else
"/* On Solaris 2.6 up to 9, the libc exposes a POSIX threads interface even if
   -pthreads is not specified.  The functions are dummies and most return an
   error value.  However pthread_once returns 0 without invoking the routine
   it is passed so we cannot pretend that the interface is active if -pthreads
   is not specified.  On Solaris 2.5.1, the interface is not exposed at all so
   we need to play the usual game with weak symbols.  On Solaris 10 and up, a
   working interface is always exposed.  On FreeBSD 6 and later, libc also
   exposes a dummy POSIX threads interface, similar to what Solaris 2.6 up
   to 9 does.  FreeBSD >= 700014 even provides a pthread_cancel stub in libc,
   which means the alternate __gthread_active_p below cannot be used there.  */"	#if defined(__FreeBSD__) || (defined(__sun) && defined(__svr4__))
/* _LIBOBJC || _LIBOBJC_WEAK */	#endif
/* _POSIX_THREAD_PRIORITY_SCHEDULING */	#endif
/* _POSIX_PRIORITY_SCHEDULING */	#endif
/* _POSIX_THREAD_PRIORITY_SCHEDULING */	#endif
/* Objective-C.  */	#ifdef _POSIX_PRIORITY_SCHEDULING
/* Typically, __gthrw_foo is a weak reference to symbol foo.  */	#define __gthrw(name) __gthrw2(__gthrw_ ## name,name,name)
"/* POSIX like conditional variables are supported.  Please look at comments
   in gthr.h for details. */"	#define __GTHREAD_HAS_COND 1
"/* POSIX threads specific definitions.
   Easy, since the interface is just one-to-one mapping.  */"	#define __GTHREADS 1
"/* Copyright (C) 1997-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */"	#ifndef _GLIBCXX_GCC_GTHR_POSIX_H
/* ! _GLIBCXX_GCC_GTHR_H */	#endif
"/* The pe-coff weak support isn't fully compatible to ELF's weak.
   For static libraries it might would work, but as we need to deal
   with shared versions too, we disable it for mingw-targets.  */"	#ifdef __MINGW32__
"/* If this file is compiled with threads support, it must
       #define __GTHREADS 1
   to indicate that threads support is present.  Also it has define
   function
     int __gthread_active_p ()
   that returns 1 if thread system is active, 0 if not.

   The threads interface must define the following types:
     __gthread_key_t
     __gthread_once_t
     __gthread_mutex_t
     __gthread_recursive_mutex_t

   The threads interface must define the following macros:

     __GTHREAD_ONCE_INIT
     		to initialize __gthread_once_t
     __GTHREAD_MUTEX_INIT
     		to initialize __gthread_mutex_t to get a fast
		non-recursive mutex.
     __GTHREAD_MUTEX_INIT_FUNCTION
		to initialize __gthread_mutex_t to get a fast
		non-recursive mutex.
		Define this to a function which looks like this:
		  void __GTHREAD_MUTEX_INIT_FUNCTION (__gthread_mutex_t *)
     		Some systems can't initialize a mutex without a
		function call.  Don't define __GTHREAD_MUTEX_INIT in this case.
     __GTHREAD_RECURSIVE_MUTEX_INIT
     __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION
     		as above, but for a recursive mutex.

   The threads interface must define the following static functions:

     int __gthread_once (__gthread_once_t *once, void (*func) ())

     int __gthread_key_create (__gthread_key_t *keyp, void (*dtor) (void *))
     int __gthread_key_delete (__gthread_key_t key)

     void *__gthread_getspecific (__gthread_key_t key)
     int __gthread_setspecific (__gthread_key_t key, const void *ptr)

     int __gthread_mutex_destroy (__gthread_mutex_t *mutex);
     int __gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *mutex);

     int __gthread_mutex_lock (__gthread_mutex_t *mutex);
     int __gthread_mutex_trylock (__gthread_mutex_t *mutex);
     int __gthread_mutex_unlock (__gthread_mutex_t *mutex);

     int __gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *mutex);
     int __gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *mutex);
     int __gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *mutex);

   The following are supported in POSIX threads only. They are required to
   fix a deadlock in static initialization inside libsupc++. The header file
   gthr-posix.h defines a symbol __GTHREAD_HAS_COND to signify that these extra
   features are supported.

   Types:
     __gthread_cond_t

   Macros:
     __GTHREAD_COND_INIT
     __GTHREAD_COND_INIT_FUNCTION

   Interface:
     int __gthread_cond_broadcast (__gthread_cond_t *cond);
     int __gthread_cond_wait (__gthread_cond_t *cond, __gthread_mutex_t *mutex);
     int __gthread_cond_wait_recursive (__gthread_cond_t *cond,
					__gthread_recursive_mutex_t *mutex);

   All functions returning int should return zero on success or the error
   number.  If the operation is not supported, -1 is returned.

   If the following are also defined, you should
     #define __GTHREADS_CXX0X 1
   to enable the c++0x thread library.

   Types:
     __gthread_t
     __gthread_time_t

   Interface:
     int __gthread_create (__gthread_t *thread, void *(*func) (void*),
                           void *args);
     int __gthread_join (__gthread_t thread, void **value_ptr);
     int __gthread_detach (__gthread_t thread);
     int __gthread_equal (__gthread_t t1, __gthread_t t2);
     __gthread_t __gthread_self (void);
     int __gthread_yield (void);

     int __gthread_mutex_timedlock (__gthread_mutex_t *m,
                                    const __gthread_time_t *abs_timeout);
     int __gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *m,
                                          const __gthread_time_t *abs_time);

     int __gthread_cond_signal (__gthread_cond_t *cond);
     int __gthread_cond_timedwait (__gthread_cond_t *cond,
                                   __gthread_mutex_t *mutex,
                                   const __gthread_time_t *abs_timeout);

*/"	#if __GXX_WEAK__
"/* Copyright (C) 1997-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */"	#ifndef _GLIBCXX_GCC_GTHR_H
// This is a memory order release fence.	#define _GLIBCXX_WRITE_MEM_BARRIER __atomic_thread_fence (__ATOMIC_RELEASE)
// This is a memory order acquire fence.	#define _GLIBCXX_READ_MEM_BARRIER __atomic_thread_fence (__ATOMIC_ACQUIRE)
"/** @file atomic_word.h
 *  This file is a GNU extension to the Standard C++ Library.
 */"	#ifndef _GLIBCXX_ATOMIC_WORD_H
// barriers.	#ifndef _GLIBCXX_READ_MEM_BARRIER
// __atomic_add_dispatch	#ifdef _GLIBCXX_ATOMIC_BUILTINS
"/** @file ext/atomicity.h
 *  This file is a GNU extension to the Standard C++ Library.
 */"	#ifndef _GLIBCXX_ATOMICITY_H
// namespace	#endif
// the destructor call in accordance with RAII style.	definition of __scoped_lock
// Substitute for concurrence_error object in the case of -fno-exceptions.	definition of __throw_concurrence_lock_error
// exception. No stdexception classes, no use of std::string.	definition of __concurrence_lock_error
// the current configuration.	definition of __default_lock_policy
// _S_atomic    multi-threaded code using atomic operations.	definition of _Lock_policy
"/** @file ext/concurrence.h
 *  This file is a GNU extension to the Standard C++ Library.
 */"	#ifndef _CONCURRENCE_H
/* _BACKWARD_BINDERS_H */	#endif
// namespace	#pragma GCC diagnostic pop
/// One of the @link binders binder functors@endlink.	definition of bind2nd
// 109.  Missing binders for non-const sequence elements	declaration of operator()
/// One of the @link binders binder functors@endlink.	definition of binder2nd<_Operation>
/// One of the @link binders binder functors@endlink.	definition of bind1st
// 109.  Missing binders for non-const sequence elements	declaration of operator()
/// One of the @link binders binder functors@endlink.	definition of binder1st<_Operation>
// Suppress deprecated warning for this file.	#pragma GCC diagnostic push
"/** @file backward/binders.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{functional}
 */"	#ifndef _BACKWARD_BINDERS_H
/* _STL_FUNCTION_H */	#endif
// namespace	#if (__cplusplus < 201103L) || _GLIBCXX_USE_DEPRECATED
// mem_fun and mem_fun_ref.	definition of mem_fun
/// pointers@endlink.	definition of const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
/// pointers@endlink.	definition of mem_fun1_ref_t<_Ret, _Tp, _Arg>
/// pointers@endlink.	definition of const_mem_fun1_t<_Ret, _Tp, _Arg>
/// pointers@endlink.	definition of mem_fun1_t<_Ret, _Tp, _Arg>
/// pointers@endlink.	definition of const_mem_fun_ref_t<_Ret, _Tp>
/// pointers@endlink.	definition of mem_fun_ref_t<_Ret, _Tp>
/// pointers@endlink.	definition of const_mem_fun_t<_Ret, _Tp>
/// pointers@endlink.	definition of mem_fun_t<_Ret, _Tp>
// Partial specialization, avoids confusing errors in e.g. std::set<const T>.	definition of _Identity<const _Tp>
/** @}  */	definition of _Identity<_Tp>
/// One of the @link pointer_adaptors adaptors for function pointers@endlink.	definition of ptr_fun
/// One of the @link pointer_adaptors adaptors for function pointers@endlink.	definition of pointer_to_binary_function<_Arg1, _Arg2, _Result>
/// One of the @link pointer_adaptors adaptors for function pointers@endlink.	definition of ptr_fun
/// One of the @link pointer_adaptors adaptors for function pointers@endlink.	definition of pointer_to_unary_function<_Arg, _Result>
/// One of the @link negators negation functors@endlink.	definition of not2
/// One of the @link negators negation functors@endlink.	definition of binary_negate<_Predicate>
/// One of the @link negators negation functors@endlink.	definition of not1
/// One of the @link negators negation functors@endlink.	definition of unary_negate<_Predicate>
// DR 660. Missing Bitwise Operations.	definition of bit_and<_Tp>
/** @}  */	#if __cplusplus > 201103L
/// One of the @link logical_functors Boolean operations functors@endlink.	#endif
/// One of the @link logical_functors Boolean operations functors@endlink.	definition of logical_not<_Tp>
/// One of the @link logical_functors Boolean operations functors@endlink.	definition of logical_or<_Tp>
/// One of the @link logical_functors Boolean operations functors@endlink.	definition of logical_and<_Tp>
"/** @defgroup logical_functors Boolean Operations Classes
   * @ingroup functors
   *
   *  Here are wrapper functors for Boolean operations: @c &&, @c ||,
   *  and @c !.
   *
   *  @{
   */"	#if __cplusplus > 201103L
// C++14	#endif
// False if we can call operator<=(T,U)	#endif
// Partial specialization of std::less_equal for pointers.	definition of less_equal<_Tp *>
// Partial specialization of std::greater_equal for pointers.	definition of greater_equal<_Tp *>
// Partial specialization of std::less for pointers.	definition of less<_Tp *>
// Partial specialization of std::greater for pointers.	definition of greater<_Tp *>
/// One of the @link comparison_functors comparison functors@endlink.	definition of less_equal<_Tp>
/// One of the @link comparison_functors comparison functors@endlink.	definition of greater_equal<_Tp>
/// One of the @link comparison_functors comparison functors@endlink.	definition of less<_Tp>
/// One of the @link comparison_functors comparison functors@endlink.	definition of greater<_Tp>
/// One of the @link comparison_functors comparison functors@endlink.	definition of not_equal_to<_Tp>
/// One of the @link comparison_functors comparison functors@endlink.	definition of equal_to<_Tp>
"/** @defgroup comparison_functors Comparison Classes
   * @ingroup functors
   *
   *  The library provides six wrapper functors for all the basic comparisons
   *  in C++, like @c <.
   *
   *  @{
   */"	#if __cplusplus > 201103L
/// One of the @link arithmetic_functors math functors@endlink.	#endif
/// One of the @link arithmetic_functors math functors@endlink.	definition of negate<_Tp>
/// One of the @link arithmetic_functors math functors@endlink.	definition of modulus<_Tp>
/// One of the @link arithmetic_functors math functors@endlink.	definition of divides<_Tp>
/// One of the @link arithmetic_functors math functors@endlink.	definition of multiplies<_Tp>
/// One of the @link arithmetic_functors math functors@endlink.	definition of minus<_Tp>
/// One of the @link arithmetic_functors math functors@endlink.	definition of plus<_Tp>
// undefined	#endif
"/** @defgroup arithmetic_functors Arithmetic Classes
   * @ingroup functors
   *
   *  Because basic math often needs to be done during an algorithm,
   *  the library provides functors for those operations.  See the
   *  documentation for @link functors the base classes@endlink
   *  for examples of their use.
   *
   *  @{
   */"	#if __cplusplus > 201103L
/// @c result_type is the return type	declaration of result_type
/// @c second_argument_type is the type of the second argument	declaration of second_argument_type
/// @c first_argument_type is the type of the first argument	declaration of first_argument_type
"/**
   *  This is one of the @link functors functor base classes@endlink.
   */"	definition of binary_function<_Arg1, _Arg2, _Result>
/// @c result_type is the return type	declaration of result_type
/// @c argument_type is the type of the argument	declaration of argument_type
"/**
   *  This is one of the @link functors functor base classes@endlink.
   */"	definition of unary_function<_Arg, _Result>
"/** @file bits/stl_function.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{functional}
 */"	#ifndef _STL_FUNCTION_H
// namespace std	#endif
// C++14	#endif
// C++14	#endif
// C++17	#endif
// 2586. Wrong value category used in scoped_allocator_adaptor::construct	"static_assert(..., ""construction with an allocator must be possible if uses_allocator is true"")"
/// [allocator.uses.trait]	definition of uses_allocator<_Tp, _Alloc>
/// [allocator.tag]	definition of allocator_arg_t
// The second condition will always be false for types not using the TS.	definition of __is_erased_or_convertible
// This is used for std::experimental::erased_type from Library Fundamentals.	definition of __erased_type
// <http://www.gnu.org/licenses/>.	#ifndef _USES_ALLOCATOR_H
/* _STL_RELOPS_H */	#endif
// namespace std	#endif
"/**
     *  @brief Defines @c >= for arbitrary types, in terms of @c <.
     *  @param  __x  A thing.
     *  @param  __y  Another thing.
     *  @return   __x >= __y
     *
     *  This function uses @c < to determine its result.
     */"	definition of operator>=
"/**
     *  @brief Defines @c <= for arbitrary types, in terms of @c <.
     *  @param  __x  A thing.
     *  @param  __y  Another thing.
     *  @return   __x <= __y
     *
     *  This function uses @c < to determine its result.
     */"	definition of operator<=
"/**
     *  @brief Defines @c > for arbitrary types, in terms of @c <.
     *  @param  __x  A thing.
     *  @param  __y  Another thing.
     *  @return   __x > __y
     *
     *  This function uses @c < to determine its result.
     */"	definition of operator>
"/**
     *  @brief Defines @c != for arbitrary types, in terms of @c ==.
     *  @param  __x  A thing.
     *  @param  __y  Another thing.
     *  @return   __x != __y
     *
     *  This function uses @c == to determine its result.
     */"	definition of operator!=
"/** @file bits/stl_relops.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{utility}
 *
 *  Inclusion of this file has been removed from
 *  all of the other STL headers for safety reasons, except std_utility.h.
 *  For more information, see the thread of about twenty messages starting
 *  with http://gcc.gnu.org/ml/libstdc++/2001-01/msg00223.html, or
 *  http://gcc.gnu.org/onlinedocs/libstdc++/faq.html#faq.ambiguous_overloads
 *
 *  Short summary: the rel_ops operators should be avoided for the present.
 */"	#ifndef _STL_RELOPS_H
// _INITIALIZER_LIST	#endif
// C++11	#endif
"/**
   *  @brief  Return an iterator pointing to one past the last element
   *          of the initializer_list.
   *  @param  __ils  Initializer list.
   */"	definition of end
"/**
   *  @brief  Return an iterator pointing to the first element of
   *          the initializer_list.
   *  @param  __ils  Initializer list.
   */"	definition of begin
// One past the last element.	definition of end
// One past the last element.	declaration of end
// One past the last element.	declaration of end
// First element.	definition of begin
// First element.	declaration of begin
// First element.	declaration of begin
// Number of elements.	definition of size
// Number of elements.	declaration of size
// Number of elements.	declaration of size
// The compiler can call a private constructor.	definition of initializer_list
// The compiler can call a private constructor.	declaration of initializer_list
// The compiler can call a private constructor.	declaration of initializer_list
/// initializer_list	definition of initializer_list<_E>
// C++0x	#else
"/** @file initializer_list
 *  This is a Standard C++ Library header.
 */"	#ifndef _INITIALIZER_LIST
/* _GLIBCXX_UTILITY */	#endif
// namespace	#endif
// C++17	#endif
/// Alias template index_sequence_for	#endif
/// Alias template make_integer_sequence	#if _GLIBCXX_USE_MAKE_INTEGER_SEQ
// Builds an _Index_tuple<0, 1, 2, ..., _Num-1>.	definition of _Build_index_tuple<_Num>
// extract the elements in a tuple.	definition of _Index_tuple<_Indexes...>
/// Assign @p __new_val to @p __obj and return its previous value.	#endif
/// Partial specialization for std::pair	definition of tuple_element<1UL, pair<_Tp1, _Tp2>>
/// Partial specialization for std::pair	definition of tuple_element<0UL, pair<_Tp1, _Tp2>>
/// Partial specialization for std::pair	definition of tuple_size<pair<_Tp1, _Tp2>>
/// Partial specialization for std::pair	definition of __is_tuple_like_impl<pair<_T1, _T2>>
// of tuple_element<pair<T,U>> and tuple_element<array<T,N>> are defined.	#endif
// Duplicate of C++14's tuple_element_t for internal use in C++11 mode	definition of __tuple_element_t
// 2770. tuple_size<const T> specialization is not SFINAE compatible	definition of __enable_if_has_tuple_size
"/** @file include/utility
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_UTILITY
/* bits/stdint-intn.h */	#endif
"/* Define intN_t types.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_STDINT_INTN_H
/* bits/stdint-uintn.h */	#endif
"/* Define uintN_t types.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_STDINT_UINTN_H
/* stdint.h */	#endif
/* Maximal type.  */	#if __WORDSIZE == 64
/* Unsigned.  */	#define UINT8_C(c) c
/* Signed.  */	#define INT8_C(c) c
/* Limits of `wint_t'.  */	#define WINT_MIN (0u)
/* These constants might also be defined in <wchar.h>.  */	#endif
/* These constants might also be defined in <wchar.h>.  */	#define WCHAR_MIN __WCHAR_MIN
/* Limits of `wchar_t'.  */	#ifndef WCHAR_MIN
/* Limit of `size_t' type.  */	#if __WORDSIZE == 64
/* Limits of `sig_atomic_t'.  */	#define SIG_ATOMIC_MIN (-2147483647-1)
/* Limits of `ptrdiff_t' type.  */	#if __WORDSIZE == 64
/* Maximum for largest unsigned integral type.  */	#define UINTMAX_MAX (__UINT64_C(18446744073709551615))
/* Maximum for largest signed integral type.  */	#define INTMAX_MAX (__INT64_C(9223372036854775807))
/* Minimum for largest signed integral type.  */	#define INTMAX_MIN (-__INT64_C(9223372036854775807)-1)
/* Values to test for integral types holding `void *' pointer.  */	#if __WORDSIZE == 64
/* Maximum of fast unsigned integral types having a minimum size.  */	#define UINT_FAST8_MAX (255)
/* Maximum of fast signed integral types having a minimum size.  */	#define INT_FAST8_MAX (127)
/* Minimum of fast signed integral types having a minimum size.  */	#define INT_FAST8_MIN (-128)
/* Maximum of unsigned integral types having a minimum size.  */	#define UINT_LEAST8_MAX (255)
/* Maximum of signed integral types having a minimum size.  */	#define INT_LEAST8_MAX (127)
/* Minimum of signed integral types having a minimum size.  */	#define INT_LEAST8_MIN (-128)
/* Maximum of unsigned integral types.  */	#define UINT8_MAX (255)
/* Maximum of signed integral types.  */	#define INT8_MAX (127)
/* Minimum of signed integral types.  */	#define INT8_MIN (-128)
/* Largest integral types.  */	declaration of intmax_t
/* Types for `void *' pointers.  */	#if __WORDSIZE == 64
/* Unsigned.  */	declaration of uint_fast8_t
/* Signed.  */	declaration of int_fast8_t
/* Unsigned.  */	declaration of uint_least8_t
/* Signed.  */	declaration of int_least8_t
"/*
 *	ISO C99: 7.18 Integer types <stdint.h>
 */"	#ifndef _STDINT_H
// _GLIBCXX_CSTDINT	#endif
// C++11	#endif
// namespace std	#endif
// _GLIBCXX_USE_C99_STDINT_TR1	#endif
// Define the minimum needed for <ratio>, <chrono> etc.	#endif
// !_GLIBCXX_USE_C99_STDINT_TR1	#else
"/** @file include/cstdint
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_CSTDINT
// _CHAR_TRAITS_H	#endif
// C++11	#endif
// namespace	#endif
// namespace	#if __cplusplus >= 201103L
//_GLIBCXX_USE_CHAR8_T	#endif
//_GLIBCXX_USE_WCHAR_T	#endif
/// 21.1.3.2  char_traits specializations	definition of char_traits<wchar_t>
// from ending up as 0xffffffff.	definition of to_int_type
// LWG 467.	return ...
/// 21.1.3.1  char_traits specializations	definition of char_traits<char>
"/**
   *  @brief  Basis for explicit traits specializations.
   *
   *  @note  For any given actual character type, this definition is
   *  probably wrong.  Since this is just a thin wrapper around
   *  __gnu_cxx::char_traits, it is possible to achieve a more
   *  appropriate definition by specializing __gnu_cxx::char_traits.
   *
   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_types
   *  for advice on how to make use of this class for @a unusual character
   *  types. Also, check out include/ext/pod_char_traits.h.
  */"	definition of char_traits<_CharT>
// In constexpr contexts all character arrays should be constant.	#else
"/**
   *  @brief Determine whether the characters of a character array are
   *  known at compile time.
   *  @param  __a  The character array.
   *  @param  __n  Number of characters.
   *
   *  Assumes that _CharT is a built-in character type.
   */"	#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
// In constexpr contexts all strings should be constant.	#else
"/**
   *  @brief Determine whether the characters of a NULL-terminated
   *  string are known at compile time.
   *  @param  __s  The string.
   *
   *  Assumes that _CharT is a built-in character type.
   */"	#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
// namespace	std
// NB: Inline std::copy so no recursive dependencies.	definition of assign
"/**
   *  @brief  Base class used to implement std::char_traits.
   *
   *  @note For any given actual character type, this definition is
   *  probably wrong.  (Most of the member functions are likely to be
   *  right, but the int_type and state_type typedefs, and the eof()
   *  member function, are likely to be wrong.)  The reason this class
   *  exists is so users can specialize it.  Classes in namespace std
   *  may not be specialized for fundamental types, but classes in
   *  namespace __gnu_cxx may be.
   *
   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_types
   *  for advice on how to make use of this class for @a unusual character
   *  types. Also, check out include/ext/pod_char_traits.h.  
   */"	definition of char_traits<_CharT>
"/**
   *  @brief  Mapping from character type to associated types.
   *
   *  @note This is an implementation class for the generic version
   *  of char_traits.  It defines int_type, off_type, pos_type, and
   *  state_type.  By default these are unsigned long, streamoff,
   *  streampos, and mbstate_t.  Users who need a different set of
   *  types, but who don't need to change the definitions of any function
   *  defined in char_traits, can specialize __gnu_cxx::_Char_types
   *  while leaving __gnu_cxx::char_traits alone. */"	definition of _Char_types<_CharT>
//	#ifndef _CHAR_TRAITS_H
/* bits/locale.h */	#endif
"/* Definition of locale category symbol values.
   Copyright (C) 2001-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _LOCALE_H && !defined _LANGINFO_H
/* locale.h  */	#endif
"/* This value can be passed to `uselocale' and may be returned by it.
   Passing this value to any other function has undefined behavior.  */"	#define LC_GLOBAL_LOCALE ((locale_t) -1L)
"/* Switch the current thread's locale to DATASET.
   If DATASET is null, instead just return the current setting.
   The special value LC_GLOBAL_LOCALE is the initial setting
   for all threads and can also be installed any time, meaning
   the thread uses the global settings controlled by `setlocale'.  */"	declaration of uselocale
"/* Free the data associated with a locale dataset previously returned
   by a call to `setlocale_r'.  */"	declaration of freelocale
"/* Return a duplicate of the set of locale in DATASET.  All usage
   counters are increased if necessary.  */"	declaration of duplocale
"/* These are the bits that can be set in the CATEGORY_MASK argument to
   `newlocale'.  In the GNU implementation, LC_FOO_MASK has the value
   of (1 << LC_FOO), but this is not a part of the interface that
   callers can assume will be true.  */"	#define LC_CTYPE_MASK (1 << __LC_CTYPE)
"/* Return a reference to a data structure representing a set of locale
   datasets.  Unlike for the CATEGORY parameter for `setlocale' the
   CATEGORY_MASK parameter here uses a single bit for each category,
   made by OR'ing together LC_*_MASK bits above.  */"	declaration of newlocale
/* Return the numeric/monetary information for the current locale.  */	declaration of localeconv
/* Set and/or return the current locale.  */	declaration of setlocale
"/* Positive and negative sign positions:
     0 Parentheses surround the quantity and int_curr_symbol.
     1 The sign string precedes the quantity and int_curr_symbol.
     2 The sign string follows the quantity and int_curr_symbol.
     3 The sign string immediately precedes the int_curr_symbol.
     4 The sign string immediately follows the int_curr_symbol.  */"	definition of int_p_sign_posn
/* 1 iff a space separates int_curr_symbol from a negative value.  */	definition of int_n_sep_by_space
/* 1 if int_curr_symbol precedes a negative value, 0 if succeeds.  */	definition of int_n_cs_precedes
/* 1 iff a space separates int_curr_symbol from a positive value.  */	definition of int_p_sep_by_space
/* 1 if int_curr_symbol precedes a positive value, 0 if succeeds.  */	definition of int_p_cs_precedes
"/* Positive and negative sign positions:
     0 Parentheses surround the quantity and currency_symbol.
     1 The sign string precedes the quantity and currency_symbol.
     2 The sign string follows the quantity and currency_symbol.
     3 The sign string immediately precedes the currency_symbol.
     4 The sign string immediately follows the currency_symbol.  */"	definition of p_sign_posn
/* 1 iff a space separates currency_symbol from a negative value.  */	definition of n_sep_by_space
/* 1 if currency_symbol precedes a negative value, 0 if succeeds.  */	definition of n_cs_precedes
/* 1 iff a space separates currency_symbol from a positive value.  */	definition of p_sep_by_space
/* 1 if currency_symbol precedes a positive value, 0 if succeeds.  */	definition of p_cs_precedes
/* Local fractional digits.  */	definition of frac_digits
/* Int'l fractional digits.  */	definition of int_frac_digits
/* Sign for negative values.  */	definition of negative_sign
/* Sign for positive values.  */	definition of positive_sign
/* Like `grouping' element (above).  */	definition of mon_grouping
/* Thousands separator.  */	definition of mon_thousands_sep
/* Decimal point character.  */	definition of mon_decimal_point
/* Local currency symbol.  */	definition of currency_symbol
"/* First three chars are a currency symbol from ISO 4217.
     Fourth char is the separator.  Fifth char is '\0'.  */"	definition of int_curr_symbol
"/* Each element is the number of digits in each group;
     elements with higher indices are farther left.
     An element with value CHAR_MAX means that no further grouping is done.
     An element with value 0 means that the previous element is used
     for all groups farther left.  */"	definition of grouping
/* Thousands separator.  */	definition of thousands_sep
/* Decimal point character.  */	definition of decimal_point
/* Numeric (non-monetary) information.  */	definition of decimal_point
/* Structure giving information about numeric and monetary notation.  */	definition of lconv
"/* These are the possibilities for the first argument to setlocale.
   The code assumes that the lowest LC_* symbol has the value zero.  */"	#define LC_CTYPE __LC_CTYPE
"/*
 *	ISO C99 Standard: 7.11 Localization	<locale.h>
 */"	#ifndef _LOCALE_H
// namespace std	#endif
// Get rid of those macros defined in <locale.h> in lieu of real functions.	#undef setlocale
//	#pragma GCC system_header
// namespace	#endif
// and should be avoided.	definition of __convert_from_v
// namespace	#endif
// Written by Benjamin Kosnik <bkoz@redhat.com>	#ifndef _GLIBCXX_CXX_LOCALE_H
/* ctype.h  */	#endif
/* Use POSIX 2008.  */	#endif
/* Not __NO_CTYPE.  */	#endif
/* Optimizing gcc */	#endif
/* Return the uppercase version of C.  */	declaration of toupper_l
/* Return the uppercase version of C.  */	declaration of __toupper_l
/* Return the lowercase version of C in locale L.  */	declaration of tolower_l
/* Return the lowercase version of C in locale L.  */	declaration of __tolower_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isxdigit_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isupper_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isspace_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of ispunct_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isprint_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isgraph_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of islower_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isdigit_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of iscntrl_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isalpha_l
"/* The following names are all functions:
     int isCHARACTERISTIC(int c, locale_t *locale);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isalnum_l
"/* These definitions are similar to the ones above but all functions
   take as an argument a handle for the locale which shall be used.  */"	#define __isctype_l(c,type,locale) ((locale)->__ctype_b[(int) (c)] & (unsigned short int) type)
/* Not __NO_CTYPE.  */	#endif
/* Optimizing gcc */	#endif
/* This code is needed for the optimized mapping functions.  */	#define __tobody(c,f,a,args) (__extension__ ({ int __res; if (sizeof (c) > 1) { if (__builtin_constant_p (c)) { int __c = (c); __res = __c < -128 || __c > 255 ? __c : (a)[__c]; } else __res = f args; } else __res = (a)[(int) (c)]; __res; }))
/* Use X/Open or use misc.  */	#endif
"/* These are the same as `toupper' and `tolower' except that they do not
   check the argument for being in the range of a `char'.  */"	declaration of _tolower
"/* These are the same as `toupper' and `tolower' except that they do not
   check the argument for being in the range of a `char'.  */"	declaration of _toupper
"/* Return the part of C that is in the ASCII set
   (i.e., the low-order 7 bits of C).  */"	declaration of toascii
"/* Return nonzero iff C is in the ASCII set
   (i.e., is no more than 7 bits wide).  */"	declaration of isascii
/* Test C for a set of character classes according to MASK.  */	declaration of isctype
/* ISO C99 introduced one new function.  */	#ifdef __USE_ISOC99
/* Return the uppercase version of C.  */	declaration of toupper
/* Return the uppercase version of C.  */	declaration of toupper
/* Return the lowercase version of C.  */	declaration of tolower
/* Return the lowercase version of C.  */	declaration of tolower
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isxdigit
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isxdigit
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isupper
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isupper
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isspace
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isspace
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of ispunct
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of ispunct
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isprint
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isprint
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isgraph
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isgraph
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of islower
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of islower
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isdigit
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isdigit
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of iscntrl
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of iscntrl
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isalpha
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isalpha
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isalnum
"/* The following names are all functions:
     int isCHARACTERISTIC(int c);
   which return nonzero iff C has CHARACTERISTIC.
   For the meaning of the characteristic names, see the `enum' above.  */"	declaration of isalnum
/* Mask off high bits.  */	#define __toascii(c) ((c) & 0x7f)
/* If C is a 7 bit value.  */	#define __isascii(c) (((c) & ~0x7f) == 0)
"/* These are defined in ctype-info.c.
   The declarations here must match those in localeinfo.h.

   In the thread-specific locale model (see `uselocale' in <locale.h>)
   we cannot use global variables for these as was done in the past.
   Instead, the following accessor functions return the address of
   each variable, which is local to the current thread if multithreaded.

   These point into arrays of 384, so they can be indexed by any `unsigned
   char' value [0,255]; by EOF (-1); or by any `signed char' value
   [-128,-1).  ISO C requires that the ctype functions work for `unsigned
   char' values and for EOF; we also support negative `signed char' values
   for broken old programs.  The case conversion arrays are of `int's
   rather than `unsigned char's because tolower (EOF) must be EOF, which
   doesn't fit into an `unsigned char'.  But today more important is that
   the arrays are also used for multi-byte character sets.  */"	declaration of __ctype_b_loc
/* ! _ISbit  */	#endif
/* Alphanumeric.  */	_ISalnum
/* Punctuation.  */	_ISpunct
/* Control character.  */	_IScntrl
/* Blank (usually SPC and TAB).  */	_ISblank
/* Graphical.  */	_ISgraph
/* Printing.  */	_ISprint
/* Whitespace.  */	_ISspace
/* Hexadecimal numeric.  */	_ISxdigit
/* Numeric.  */	_ISdigit
/* Alphabetic.  */	_ISalpha
/* lowercase.  */	_ISlower
/* UPPERCASE.  */	_ISupper
/* __BYTE_ORDER == __LITTLE_ENDIAN */	#else
"/*
 *	ISO C99 Standard 7.4: Character handling	<ctype.h>
 */"	#ifndef _CTYPE_H
// C++11	#endif
// _GLIBCXX_USE_C99_CTYPE_TR1	#endif
// namespace std	#endif
// namespace std	#if __cplusplus >= 201103L
// Get rid of those macros defined in <ctype.h> in lieu of real functions.	#undef isalnum
//	#pragma GCC system_header
// namespace std	#endif
// 22.2.7 message retrieval	declaration of messages_base
// 22.2.7 message retrieval	declaration of messages_base
// 22.2.6 money	declaration of money_base
// 22.2.6 money	declaration of money_base
// 22.2.5 date and time	declaration of time_base
// 22.2.5 date and time	declaration of time_base
// NB: Specialized for char and wchar_t in locale_facets.h.	declaration of codecvt_base
// NB: Specialized for char and wchar_t in locale_facets.h.	declaration of codecvt_base
// 22.2.1 and 22.2.1.3 ctype	declaration of ctype_base
// 22.2.1 and 22.2.1.3 ctype	declaration of ctype_base
// 22.1.1 Locale	declaration of locale
// 22.1.1 Locale	declaration of locale
//	#ifndef _LOCALE_FWD_H
// __CXXABI_FORCED_H 	#endif
// __cplusplus	#endif
// Prevent catch by value.	declaration of __pure_dummy
"/** 
   *  @brief Thrown as part of forced unwinding.
   *  @ingroup exceptions
   *
   *  A magic placeholder class that can be caught by reference to
   *  recognize forced unwinding.
   */"	definition of __forced_unwind
"/** @file bits/cxxabi_forced.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{cxxabi.h}
 */"	#ifndef _CXXABI_FORCED_H
/* _OSTREAM_INSERT_H */	#endif
// namespace std	#endif
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
"/** @file bits/ostream_insert.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{ostream}
 */"	#ifndef _OSTREAM_INSERT_H
// _GLIBCXX_RANGE_ACCESS_H	#endif
// C++11	#endif
// namespace	#endif
// C++17	#endif
"/**
   *  @brief  Return the data pointer of an initializer list.
   *  @param  __il  Initializer list.
   */"	#endif
// C++14	#endif
"/**
   *  @brief  Return a reverse iterator pointing one past the first element of
   *          the const container.
   *  @param  __cont  Container.
   */"	#endif
"/**
   *  @brief  Return an iterator pointing to one past the last element
   *          of the array.
   *  @param  __arr  Array.
   */"	definition of end
"/**
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */"	definition of begin
"/**
   *  @brief  Return an iterator pointing to one past the last element of
   *          the const container.
   *  @param  __cont  Container.
   */"	definition of end
"/**
   *  @brief  Return an iterator pointing to one past the last element of
   *          the const container.
   *  @param  __cont  Container.
   */"	definition of end
"/**
   *  @brief  Return an iterator pointing to one past the last element of
   *          the container.
   *  @param  __cont  Container.
   */"	definition of end
"/**
   *  @brief  Return an iterator pointing to the first element of
   *          the const container.
   *  @param  __cont  Container.
   */"	definition of begin
"/**
   *  @brief  Return an iterator pointing to the first element of
   *          the const container.
   *  @param  __cont  Container.
   */"	definition of begin
"/**
   *  @brief  Return an iterator pointing to the first element of
   *          the container.
   *  @param  __cont  Container.
   */"	definition of begin
"/** @file bits/range_access.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iterator}
 */"	#ifndef _GLIBCXX_RANGE_ACCESS_H
/* Wait for members of process group.  */	P_PGID
/* Wait for specified process.  */	P_PID
/* Wait for any child.  */	P_ALL
"/* The Linux kernel defines these bare, rather than an enum,
   which causes a conflict if the include order is reversed. */"	#undef P_ALL
/* The following values are used by the `waitid' function.  */	#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
/* Wait for cloned process.  */	#define __WCLONE 0x80000000
/* Wait for any child.  */	#define __WALL 0x40000000
"/* Don't wait on children of other threads
				      in this group */"	#define __WNOTHREAD 0x20000000
/* Don't reap, just poll status.  */	#define WNOWAIT 0x01000000
/* Report continued child.  */	#define WCONTINUED 8
/* Report dead child.  */	#define WEXITED 4
/* Report stopped child (same as WUNTRACED). */	#define WSTOPPED 2
/* Bits in the fourth argument to `waitid'.  */	#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
/* Report status of stopped children.  */	#define WUNTRACED 2
/* Don't block waiting.  */	#define WNOHANG 1
/* Bits in the third argument to `waitpid'.  */	#define WNOHANG 1
"/* Definitions of flag bits for `waitpid' et al.
   Copyright (C) 1992-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _SYS_WAIT_H && !defined _STDLIB_H
/* Macros for constructing status values.  */	#define __W_EXITCODE(ret,sig) ((ret) << 8 | (sig))
/* Nonzero if STATUS indicates the child dumped core.  */	#define __WCOREDUMP(status) ((status) & __WCOREFLAG)
"/* Nonzero if STATUS indicates the child continued after a stop.  We only
   define this if <bits/waitflags.h> provides the WCONTINUED flag bit.  */"	#ifdef WCONTINUED
/* Nonzero if STATUS indicates the child is stopped.  */	#define __WIFSTOPPED(status) (((status) & 0xff) == 0x7f)
/* Nonzero if STATUS indicates termination by a signal.  */	#define __WIFSIGNALED(status) (((signed char) (((status) & 0x7f) + 1) >> 1) > 0)
/* Nonzero if STATUS indicates normal termination.  */	#define __WIFEXITED(status) (__WTERMSIG(status) == 0)
/* If WIFSTOPPED(STATUS), the signal that stopped the child.  */	#define __WSTOPSIG(status) __WEXITSTATUS(status)
/* If WIFSIGNALED(STATUS), the terminating signal.  */	#define __WTERMSIG(status) ((status) & 0x7f)
/* If WIFEXITED(STATUS), the low-order 8 bits of the status.  */	#define __WEXITSTATUS(status) (((status) & 0xff00) >> 8)
"/* Definitions of status bits for `wait' et al.
   Copyright (C) 1992-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _SYS_WAIT_H && !defined _STDLIB_H
/* GNU CC */	#endif
"/* We don't use `memset' because this would require a prototype and
   the array isn't too big.  */"	#endif
/* ! GNU CC */	#else
"/* Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_SELECT_H
/* A set of signals to be blocked, unblocked, or waited for.  */	declaration of sigset_t
/* Helper functions to issue warnings and errors when needed.  */	declaration of __fdelt_warn
/* Helper functions to issue warnings and errors when needed.  */	declaration of __fdelt_chk
"/* Checking macros for select functions.
   Copyright (C) 2011-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_SELECT_H
/* sys/select.h */	#endif
/* Define some inlines helping to catch common problems.  */	#if __USE_FORTIFY_LEVEL > 0 && defined __GNUC__
"/* Same as above only that the TIMEOUT value is given with higher
   resolution and a sigmask which is been set temporarily.  This version
   should be used.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of pselect
"/* Check the first NFDS descriptors each in READFDS (if not NULL) for read
   readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS
   (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out
   after waiting the interval specified therein.  Returns the number of ready
   descriptors, or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of select
/* Access macros for `fd_set'.  */	#define FD_SET(fd,fdsetp) __FD_SET (fd, fdsetp)
/* Number of bits per word of `fd_set' (some code assumes this is 32).  */	#define NFDBITS __NFDBITS
/* Sometimes the fd_set member is assumed to have this type.  */	declaration of fd_mask
/* Maximum number of file descriptors in `fd_set'.  */	#define FD_SETSIZE __FD_SETSIZE
"/* XPG4.2 requires this member name.  Otherwise avoid the name
       from the global namespace.  */"	#ifdef __USE_XOPEN
/* fd_set for select and pselect.  */	definition of fd_set
/* It's easier to assume 8-bit bytes than to get CHAR_BIT.  */	#define __NFDBITS (8 * (int) sizeof (__fd_mask))
/* Some versions of <linux/posix_types.h> define this macros.  */	#undef __NFDBITS
/* The fd_set member is required to be an array of longs.  */	declaration of __fd_mask
"/*	POSIX 1003.1g: 6.2 Select from File Descriptor Sets <sys/select.h>  */"	#ifndef _SYS_SELECT_H
/* sys/types.h */	#endif
/* Now add the thread types.  */	#if defined __USE_POSIX199506 || defined __USE_UNIX98
/* Type to count file system inodes.  */	declaration of fsfilcnt64_t
/* Type to count file system blocks.  */	declaration of fsblkcnt64_t
/* Type to count number of disk blocks. */	declaration of blkcnt64_t
/* Type to count file system inodes.  */	#endif
/* Type to count file system blocks.  */	#endif
/* Type to count number of disk blocks.  */	#endif
/* Type to count file system inodes.  */	declaration of fsfilcnt_t
/* Type to count file system blocks.  */	declaration of fsblkcnt_t
/* Type to count number of disk blocks.  */	declaration of blkcnt_t
/* Type to count number of disk blocks.  */	#endif
/* Types from the Large File Support interface.  */	#ifndef __USE_FILE_OFFSET64
/* Use misc.  */	#endif
"/* Some code from BIND tests this macro to see if the types above are
   defined.  */"	#define __BIT_TYPES_DEFINED__ 1
/* These were defined by ISO C without the first `_'.  */	declaration of u_int8_t
/* Old compatibility names for C types.  */	declaration of ulong
"/*
 *	POSIX Standard: 2.6 Primitive System Data Types	<sys/types.h>
 */"	#ifndef _SYS_TYPES_H
/* alloca.h */	#endif
/* GCC.  */	#endif
/* Allocate a block that will be freed when the calling function exits.  */	declaration of alloca
/* Remove any previous definitions.  */	#undef alloca
"/* Copyright (C) 1992-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _ALLOCA_H
"/* Perform binary search - inline version.
   Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	definition of bsearch
/* Optimizing and Inlining.  */	#endif
"/* Floating-point inline functions for stdlib.h.
   Copyright (C) 2012-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _STDLIB_H
"/* We would have to include <limits.h> to get a definition of MB_LEN_MAX.
     But this would only disturb the namespace.  So we define our own
     version here.  */"	#define __STDLIB_MB_LEN_MAX 16
"/* Checking macros for stdlib functions.
   Copyright (C) 2005-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _STDLIB_H
/* stdlib.h  */	#endif
/* Define some macros helping to catch buffer overflows.  */	#if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
"/* Return the index into the active-logins file (utmp) for
   the controlling terminal.  */"	#endif
"/* Put the 1 minute, 5 minute and 15 minute load averages into the first
   NELEM elements of LOADAVG.  Return the number written (never more than
   three, but may be less than NELEM), or -1 if an error occurred.  */"	declaration of getloadavg
/* Open a master pseudo terminal and return its file descriptor.  */	declaration of getpt
"/* Store at most BUFLEN characters of the pathname of the slave pseudo
   terminal associated with the master FD is open on in BUF.
   Return 0 on success, otherwise an error number.  */"	declaration of ptsname_r
"/* Return the pathname of the pseudo terminal slave associated with
   the master FD is open on, or NULL on errors.
   The returned storage is good until the next call to this function.  */"	declaration of ptsname
"/* Release an internal lock so the slave can be opened.
   Call after grantpt().  */"	declaration of unlockpt
/* Chown the slave to the calling user.  */	declaration of grantpt
/* Return a master pseudo-terminal handle.  */	declaration of posix_openpt
/* X/Open pseudo terminal handling.  */	#ifdef __USE_XOPEN2KXSI
"/* Parse comma separated suboption from *OPTIONP and match against
   strings in TOKENS.  If found return index and set *VALUEP to
   optional value introduced by an equal sign.  If the suboption is
   not part of TOKENS return in *VALUEP beginning of unknown
   suboption.  On exit *OPTIONP is set to the beginning of the next
   token or at the terminating NUL character.  */"	declaration of getsubopt
"/* Determine whether the string value of RESPONSE matches the affirmation
   or negative response expression as specified by the LC_MESSAGES category
   in the program's current locale.  Returns 1 if affirmative, 0 if
   negative, and -1 if not matching.  */"	declaration of rpmatch
/* Convert a wide char string to multibyte string.  */	declaration of wcstombs
/* Convert a multibyte string to a wide char string.  */	declaration of mbstowcs
"/* Put the multibyte character represented
   by WCHAR in S, returning its length.  */"	declaration of wctomb
"/* Put the multibyte character represented
   by WCHAR in S, returning its length.  */"	declaration of wctomb
"/* Return the length of the given multibyte character,
   putting its `wchar_t' representation in *PWC.  */"	declaration of mbtowc
"/* Return the length of the multibyte character
   in S, which is no longer than N.  */"	declaration of mblen
/* misc */	#endif
"/* Reentrant version of the functions above which provide their own
   buffers.  */"	declaration of ecvt_r
/* Long double versions of above functions.  */	declaration of qecvt
"/* If possible convert VALUE to a string with NDIGIT significant digits.
   Otherwise use exponential representation.  The resulting string will
   be written to BUF.  */"	declaration of gcvt
"/* Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT
   with the position of the decimal character and *SIGN with the sign of
   the number.  */"	declaration of fcvt
"/* Convert VALUE to a string with NDIGIT digits and return a pointer to
   this.  Set *DECPT with the position of the decimal character and *SIGN
   with the sign of the number.  */"	declaration of ecvt
/* GCC may have built-ins for these someday.  */	declaration of div
/* Return the absolute value of X.  */	declaration of labs
/* Return the absolute value of X.  */	declaration of abs
"/* Sort NMEMB elements of BASE, of SIZE bytes each,
   using COMPAR to perform the comparisons.  */"	declaration of qsort
"/* Do a binary search for KEY in BASE, which consists of NMEMB elements
   of SIZE bytes each, using COMPAR to perform the comparisons.  */"	declaration of bsearch
/* Shorthand for type of comparison functions.  */	#ifndef __COMPAR_FN_T
"/* Return the canonical absolute name of file NAME.  If RESOLVED is
   null, the result is malloc'd; otherwise, if the canonical name is
   PATH_MAX chars or more, returns null with `errno' set to
   ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,
   returns the name in RESOLVED.  */"	declaration of realpath
"/* Return the canonical absolute name of file NAME.  If RESOLVED is
   null, the result is malloc'd; otherwise, if the canonical name is
   PATH_MAX chars or more, returns null with `errno' set to
   ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,
   returns the name in RESOLVED.  */"	declaration of realpath
"/* Return a malloc'd string containing the canonical absolute name of the
   existing named file.  */"	declaration of canonicalize_file_name
"/* Execute the given line as a shell command.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of system
"/* Similar to mkostemp, but the template can have a suffix after the
   XXXXXX.  The length of the suffix is specified in the second
   parameter.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Generate a unique temporary file name from TEMPLATE similar to
   mkstemp.  But allow the caller to pass additional flags which are
   used in the open call to create the file..

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Create a unique temporary directory from TEMPLATE.
   The last six characters of TEMPLATE must be ""XXXXXX"";
   they are replaced with a string that makes the directory name unique.
   Returns TEMPLATE, or a null pointer if it cannot get a unique name.
   The directory is created mode 700.  */"	declaration of mkdtemp
"/* Similar to mkstemp, but the template can have a suffix after the
   XXXXXX.  The length of the suffix is specified in the second
   parameter.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Generate a unique temporary file name from TEMPLATE.
   The last six characters of TEMPLATE must be ""XXXXXX"";
   they are replaced with a string that makes the filename unique.
   Returns a file descriptor open on the file for reading and writing,
   or -1 if it cannot create a uniquely-named file.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Generate a unique temporary file name from TEMPLATE.
   The last six characters of TEMPLATE must be ""XXXXXX"";
   they are replaced with a string that makes the file name unique.
   Always returns TEMPLATE, it's either a temporary file name or a null
   string if it cannot get a unique file name.  */"	declaration of mktemp
"/* The `clearenv' was planned to be added to POSIX.1 but probably
   never made it.  Nevertheless the POSIX.9 standard (POSIX bindings
   for Fortran 77) requires this function.  */"	declaration of clearenv
/* Remove the variable NAME from the environment.  */	declaration of unsetenv
"/* Set NAME to VALUE in the environment.
   If REPLACE is nonzero, overwrite an existing value.  */"	declaration of setenv
"/* Put STRING, which is of the form ""NAME=VALUE"", in the environment.
   If there is no `=', remove NAME from the environment.  */"	declaration of putenv
"/* This function is similar to the above but returns NULL if the
   programs is running with SUID or SGID enabled.  */"	declaration of secure_getenv
/* Return the value of envariable NAME, or NULL if it doesn't exist.  */	declaration of getenv
"/* Terminate the program with STATUS without calling any of the
   functions registered with `atexit' or `on_exit'.  */"	declaration of _Exit
"/* Call all functions registered with `at_quick_exit' in the reverse
   of the order in which they were registered and terminate program
   execution with STATUS.  */"	declaration of quick_exit
"/* Call all functions registered with `atexit' and `on_exit',
   in the reverse of the order in which they were registered,
   perform stdio cleanup, and terminate program execution with STATUS.  */"	declaration of exit
"/* Register a function to be called with the status
   given to `exit' and the given argument.  */"	declaration of on_exit
/* Register a function to be called when `quick_exit' is called.  */	#ifdef __cplusplus
/* Register a function to be called when `exit' is called.  */	declaration of atexit
/* Abort execution and generate a core-dump.  */	declaration of abort
/* ISO C variant of aligned allocation.  */	declaration of aligned_alloc
/* Allocate memory of SIZE bytes with an alignment of ALIGNMENT.  */	declaration of posix_memalign
/* Allocate SIZE bytes on a page boundary.  The storage cannot be freed.  */	declaration of valloc
/* Use misc.  */	#endif
/* Free a block allocated by `malloc', `realloc' or `calloc'.  */	declaration of free
"/* __attribute_malloc__ is not used, because if reallocarray returns
   the same pointer that was passed to it, aliasing needs to be allowed
   between objects pointed by the old and new pointers.  */"	declaration of reallocarray
"/* __attribute_malloc__ is not used, because if realloc returns
   the same pointer that was passed to it, aliasing needs to be allowed
   between objects pointed by the old and new pointers.  */"	declaration of realloc
/* Allocate NMEMB elements of SIZE bytes each, all initialized to 0.  */	declaration of calloc
/* Allocate SIZE bytes of memory.  */	declaration of malloc
/* Use misc or X/Open.  */	#endif
/* Use misc.  */	#endif
/* Seed random number generator.  */	declaration of srand48_r
/* Return signed, long integers in [-2^31,2^31).  */	declaration of mrand48_r
/* Return non-negative, long integer in [0,2^31).  */	declaration of lrand48_r
/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */	declaration of drand48_r
"/* Factor in congruential
						   formula.  */"	definition of __a
/* Flag for initializing.  */	definition of __init
/* Additive const. in congruential formula.  */	definition of __c
/* Old state.  */	definition of __old_x
/* Current state.  */	definition of __x
"/* Data structure for communication with thread safe versions.  This
   type is to be regarded as opaque.  It's only exported because users
   have to allocate objects of this type.  */"	definition of drand48_data
/* Seed random number generator.  */	declaration of seed48
/* Seed random number generator.  */	declaration of srand48
/* Return signed, long integers in [-2^31,2^31).  */	declaration of jrand48
/* Return signed, long integers in [-2^31,2^31).  */	declaration of mrand48
/* Return non-negative, long integer in [0,2^31).  */	declaration of nrand48
/* Return non-negative, long integer in [0,2^31).  */	declaration of lrand48
/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */	declaration of erand48
/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */	declaration of drand48
/* Reentrant interface according to POSIX.1.  */	declaration of rand_r
/* Seed the random number generator with the given number.  */	declaration of srand
/* Return a random integer between 0 and RAND_MAX inclusive.  */	declaration of rand
/* Use extended X/Open || misc. */	#endif
/* Use misc.  */	#endif
/* Pointer behind state table.  */	definition of end_ptr
/* Distance between front and rear.  */	definition of rand_sep
/* Degree of random number generator.  */	definition of rand_deg
/* Type of random number generator.  */	definition of rand_type
/* Array of state values.  */	definition of state
/* Rear pointer.  */	definition of rptr
/* Front pointer.  */	definition of fptr
"/* Reentrant versions of the `random' family of functions.
   These functions all use the following data structure to contain
   state, rather than global state variables.  */"	definition of random_data
"/* Switch the random number generator to state buffer STATEBUF,
   which should have been previously initialized by `initstate'.  */"	declaration of setstate
"/* Initialize the random number generator to use state buffer STATEBUF,
   of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,
   32, 64, 128 and 256, the bigger the better; values less than 8 will
   cause an error and values greater than 256 will be rounded down.  */"	declaration of initstate
/* Seed the random number generator with the given number.  */	declaration of srandom
/* Return a random long integer between 0 and RAND_MAX inclusive.  */	declaration of random
/* Use misc || extended X/Open.  */	#endif
/* Read a number from a string S in base 64 as above.  */	declaration of a64l
"/* Convert N to base 64 using the digits ""./0-9A-Za-z"", least-significant
   digit first.  Returns a pointer to static storage overwritten by the
   next call.  */"	declaration of l64a
/* Optimizing and Inlining.  */	#endif
/* GNU */	#endif
/* Convert a floating-point number to a string.  */	#if __GLIBC_USE (IEC_60559_BFP_EXT)
/* ISO C99 or use MISC.  */	#endif
/* Convert a string to an unsigned quadword integer.  */	declaration of strtoull
/* Convert a string to a quadword integer.  */	declaration of strtoll
/* Use misc.  */	#endif
/* Convert a string to an unsigned quadword integer.  */	declaration of strtouq
/* Convert a string to a quadword integer.  */	declaration of strtoq
/* Convert a string to an unsigned long integer.  */	declaration of strtoul
/* Convert a string to a long integer.  */	declaration of strtol
/* Likewise for '_FloatN' and '_FloatNx'.  */	#if __HAVE_FLOAT16 && __GLIBC_USE (IEC_60559_TYPES_EXT)
/* Likewise for `float' and `long double' sizes of floating-point numbers.  */	declaration of strtof
/* Convert a string to a floating-point number.  */	declaration of strtod
/* Convert a string to a long long integer.  */	declaration of atoll
/* Convert a string to a long integer.  */	declaration of atol
/* Convert a string to an integer.  */	declaration of atoi
/* Convert a string to a floating-point number.  */	declaration of atof
/* Maximum length of a multibyte character in the current locale.  */	#define MB_CUR_MAX (__ctype_get_mb_cur_max ())
/* Successful exit status.  */	#define EXIT_SUCCESS 0
/* Failing exit status.  */	#define EXIT_FAILURE 1
"/* We define these the same for all machines.
   Changes from this to the outside world should be done in `_exit'.  */"	#define EXIT_FAILURE 1
/* The largest number rand will return (same as INT_MAX).  */	#define RAND_MAX 2147483647
/* Remainder.  */	definition of rem
/* Quotient.  */	definition of quot
/* Returned by `lldiv'.  */	definition of lldiv_t
/* Remainder.  */	definition of rem
/* Quotient.  */	definition of quot
/* Returned by `ldiv'.  */	#ifndef __ldiv_t_defined
/* Remainder.  */	definition of rem
/* Quotient.  */	definition of quot
/* Returned by `div'.  */	definition of div_t
/* X/Open or XPG7 and <sys/wait.h> not included.  */	#endif
/* Define the macros <sys/wait.h> also would define this way.  */	#define WEXITSTATUS(status) __WEXITSTATUS (status)
/* Define the macros <sys/wait.h> also would define this way.  */	#ifdef __WIFCONTINUED
/* Get size_t, wchar_t and NULL from <stddef.h>.  */	#define __need_size_t
"/*
 *	ISO C99 Standard: 7.20 General utilities	<stdlib.h>
 */"	#ifndef _STDLIB_H
// _GLIBCXX_BITS_STD_ABS_H	#endif
"// extern ""C""++"""	#endif
// 2735. std::abs(short), std::abs(signed char) and others should return int	#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
"/** @file include/bits/std_abs.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{cmath, cstdlib}
 */"	#ifndef _GLIBCXX_BITS_STD_ABS_H
// !_GLIBCXX_HOSTED	#endif
"// extern ""C++"""	#endif
// _GLIBCXX_USE_C99_STDLIB	#endif
// namespace std	#endif
// namespace __gnu_cxx	#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC
// namespace __gnu_cxx	std
// namespace	#if _GLIBCXX_USE_C99_STDLIB
// _GLIBCXX_USE_WCHAR_T	#endif
// _GLIBCXX_HAVE_MBSTATE_T	#endif
// Get rid of those macros defined in <stdlib.h> in lieu of real functions.	#undef abort
// Get rid of those macros defined in <stdlib.h> in lieu of real functions.	#if __cplusplus >= 201703L && defined(_GLIBCXX_HAVE_ALIGNED_ALLOC)
// wrapper that might already be installed later in the include search path.	#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
// namespace std	#else
// [lib.support.start.term].	#if __cplusplus >= 201103L
//	#pragma GCC system_header
"/* The tag name of this struct is _G_fpos_t to preserve historic
   C++ mangled names for functions taking fpos_t arguments.
   That name should not be used in new code.  */"	definition of _G_fpos_t
"/* The tag name of this struct is _G_fpos64_t to preserve historic
   C++ mangled names for functions taking fpos_t and/or fpos64_t
   arguments.  That name should not be used in new code.  */"	definition of _G_fpos64_t
/* Many more flag bits are defined internally.  */	#endif
/* These macros are used by bits/stdio.h and internal headers.  */	#define __getc_unlocked_body(_fp) (__glibc_unlikely ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end) ? __uflow (_fp) : *(unsigned char *) (_fp)->_IO_read_ptr++)
/* Make sure we don't get into trouble again.  */	definition of _unused2
/* Wide character stream stuff.  */	definition of _codecvt
/* 1+column number of pbase(); 0 is unknown. */	definition of _cur_column
/* This used to be _offset but it's too small.  */	definition of _old_offset
/* Pointer to end of non-current get area. */	definition of _IO_save_end
/* Pointer to first valid character of backup area */	definition of _IO_backup_base
/* Pointer to start of non-current get area. */	definition of _IO_save_base
/* The following fields are used to support backing up and undo. */	definition of _IO_save_base
/* End of reserve area. */	definition of _IO_buf_end
/* Start of reserve area. */	definition of _IO_buf_base
/* End of put area. */	definition of _IO_write_end
/* Current put pointer. */	definition of _IO_write_ptr
/* Start of put area. */	definition of _IO_write_base
/* Start of putback+get area. */	definition of _IO_read_base
/* End of get area. */	definition of _IO_read_end
/* Current read pointer */	definition of _IO_read_ptr
/* The following pointers correspond to the C++ streambuf protocol. */	definition of _IO_read_ptr
/* High-order word is _IO_MAGIC; rest is flags. */	definition of _flags
"/* The tag name of this struct is _IO_FILE to preserve historic
   C++ mangled names for functions taking FILE* arguments.
   That name should not be used in new code.  */"	definition of _IO_FILE
"/* During the build of glibc itself, _IO_lock_t will already have been
   defined by internal headers.  */"	#ifndef _IO_lock_t_defined
"/* Caution: The contents of this file are not part of the official
   stdio.h API.  However, much of it is part of the official *binary*
   interface, and therefore cannot be changed.  */"	#if defined _IO_USE_OLD_IO_FILE && !defined _LIBC
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef __struct_FILE_defined
/* Close file.  */	definition of close
/* Seek/tell file position.  */	definition of seek
/* Write bytes.  */	definition of write
/* Read bytes.  */	definition of read
"/* The structure with the cookie function pointers.
   The tag name of this struct is _IO_cookie_io_functions_t to
   preserve historic C++ mangled names for functions taking
   cookie_io_functions_t arguments.  That name should not be used in
   new code.  */"	definition of _IO_cookie_io_functions_t
/* Close COOKIE.  */	declaration of cookie_close_function_t
"/* Move COOKIE's file position to *POS bytes from the
   beginning of the file (if W is SEEK_SET),
   the current position (if W is SEEK_CUR),
   or the end of the file (if W is SEEK_END).
   Set *POS to the new file position.
   Returns zero if successful, nonzero if not.  */"	declaration of cookie_seek_function_t
"/* Write NBYTES bytes pointed to by BUF to COOKIE.  Write all NBYTES bytes
   unless there is an error.  Return number of bytes written.  If
   there is an error, return 0 and do not write anything.  If the file
   has been opened for append (__mode.__append set), then set the file
   pointer to the end of the file and then do the write; if not, just
   write at the current file pointer.  */"	declaration of cookie_write_function_t
"/* Read NBYTES bytes from COOKIE into a buffer pointed to by BUF.
   Return number of bytes read.  */"	declaration of cookie_read_function_t
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef __cookie_io_functions_t_defined
/* bits/stdio_lim.h */	#endif
"/* Copyright (C) 1994-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_STDIO_LIM_H
/* sys_errlist and sys_nerr are deprecated.  Use strerror instead.  */	#ifdef __USE_MISC
"/* Declare sys_errlist and sys_nerr, or don't.  Compatibility (do) version.
   Copyright (C) 2002-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _STDIO_H
/* bits/stdio.h.  */	#endif
/* Define helper macro.  */	#undef __STDIO_INLINE
/* Evaluate all parameters once.  */	#endif
/* Use extern inlines.  */	#endif
/* misc */	#endif
/* Faster versions when locking is not required.  */	definition of ferror_unlocked
/* Faster versions when locking is not required.  */	definition of feof_unlocked
/* GNU */	#endif
/* Like `getdelim', but reads up to a newline.  */	definition of getline
/* POSIX */	#endif
/* This is defined in POSIX.1:1996.  */	definition of putchar_unlocked
/* This is defined in POSIX.1:1996.  */	definition of putc_unlocked
/* misc */	#endif
/* Faster version when locking is not necessary.  */	definition of fputc_unlocked
/* Write a character to stdout.  */	definition of putchar
/* POSIX */	#endif
/* This is defined in POSIX.1:1996.  */	definition of getchar_unlocked
/* This is defined in POSIX.1:1996.  */	definition of getc_unlocked
/* misc */	#endif
/* Faster version when locking is not necessary.  */	definition of fgetc_unlocked
/* Read a character from stdin.  */	definition of getchar
/* Write formatted output to stdout from argument list ARG.  */	#endif
"/* For -D_FORTIFY_SOURCE{,=2} bits/stdio2.h will define a different
   inline.  */"	#if !(__USE_FORTIFY_LEVEL > 0 && defined __fortify_function)
"/* Optimizing macros and inline functions for stdio functions.
   Copyright (C) 1998-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_STDIO_H
/* bits/stdio2.h.  */	#endif
"/* Checking macros for stdio functions.
   Copyright (C) 2004-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_STDIO2_H
/* <stdio.h> included.  */	#endif
"/* If we are compiling with optimizing read this file.  It contains
   several optimizing inline functions and macros.  */"	#ifdef __USE_EXTERN_INLINES
"/* Slow-path routines used by the optimized inline functions in
   bits/stdio.h.  */"	declaration of __overflow
"/* Slow-path routines used by the optimized inline functions in
   bits/stdio.h.  */"	declaration of __uflow
"/*  X/Open Issues 1-5 required getopt to be declared in this
   header.  It was removed in Issue 6.  GNU follows Issue 6.  */"	#endif
/* POSIX */	#endif
/* Relinquish the ownership granted for STREAM.  */	declaration of funlockfile
"/* Try to acquire ownership of STREAM but do not block if it is not
   possible.  */"	declaration of ftrylockfile
/* Acquire ownership of STREAM.  */	declaration of flockfile
/* Use GNU.  */	#endif
/* Write formatted output to an obstack.  */	declaration of obstack_printf
/* See <obstack.h>.  */	declaration of obstack
/* Use X/Open, but not issue 6.  */	#endif
/* Return the name of the current user.  */	declaration of cuserid
/* Use POSIX.  */	#endif
/* Return the name of the controlling terminal.  */	declaration of ctermid
"/* Close a stream opened by popen and return the status of its child.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of pclose
"/* Create a new stream connected to a pipe running the given command.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of popen
/* Faster version when locking is not required.  */	declaration of fileno_unlocked
/* Use POSIX.  */	#endif
/* Return the system file descriptor for STREAM.  */	declaration of fileno
"/* Print a message describing the meaning of the value of errno.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of perror
/* Faster versions when locking is not required.  */	declaration of ferror_unlocked
/* Faster versions when locking is not required.  */	declaration of feof_unlocked
/* Faster versions when locking is not required.  */	declaration of clearerr_unlocked
/* Return the error indicator for STREAM.  */	declaration of ferror
/* Return the EOF indicator for STREAM.  */	declaration of feof
/* Clear the error and EOF indicators for STREAM.  */	declaration of clearerr
"/* Set STREAM's position.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fsetpos
"/* Get STREAM's position.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fgetpos
"/* Return the current position of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of ftello
"/* Seek to a certain position on STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fseeko
"/* The Single Unix Specification, Version 2, specifies an alternative,
   more adequate interface for the two functions above which deal with
   file offset.  `long int' is not the right type.  These definitions
   are originally defined in the Large File Support API.  */"	#if defined __USE_LARGEFILE || defined __USE_XOPEN2K
"/* Rewind to the beginning of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of rewind
"/* Return the current position of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of ftell
"/* Seek to a certain position on STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fseek
"/* Faster versions when locking is not necessary.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */"	declaration of fread_unlocked
"/* This function does the same as `fputs' but does not lock the stream.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fputs_unlocked
"/* Write chunks of generic data to STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fwrite
"/* Read chunks of generic data from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fread
"/* Push a character back onto the input buffer of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of ungetc
"/* Write a string, followed by a newline, to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of puts
"/* Write a string to STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fputs
"/* Like `getdelim', but reads up to a newline.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of getline
"/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   necessary.  Returns the number of characters read (not including the
   null terminator), or -1 on error or EOF.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */"	declaration of __getdelim
"/* This function does the same as `fgets' but does not lock the stream.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fgets_unlocked
"/* Get a newline-terminated string from stdin, removing the newline.

   This function is impossible to use safely.  It has been officially
   removed from ISO C11 and ISO C++14, and we have also removed it
   from the _GNU_SOURCE feature list.  It remains available when
   explicitly using an old ISO C, Unix, or POSIX standard.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of gets
"/* Get a newline-terminated string of finite length from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fgets
/* Write a word (int) to STREAM.  */	declaration of putw
/* Get a word (int) from STREAM.  */	declaration of getw
/* Use POSIX.  */	#endif
"/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of putchar_unlocked
"/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of putc_unlocked
/* Use MISC.  */	#endif
"/* Faster version when locking is not necessary.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fputc_unlocked
"/* Write a character to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of putchar
"/* Write a character to STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.

   These functions is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of putc
"/* Write a character to STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.

   These functions is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fputc
/* Use MISC.  */	#endif
"/* Faster version when locking is not necessary.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fgetc_unlocked
/* Use POSIX.  */	#endif
"/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of getchar_unlocked
"/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of getc_unlocked
"/* Read a character from stdin.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of getchar
"/* Read a character from STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of getc
"/* Read a character from STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of fgetc
/* Use ISO C9x.  */	#endif
/* Same redirection as above for the v*scanf family.  */	#if !__GLIBC_USE (DEPRECATED_SCANF)
/* Read formatted input from S into argument list ARG.  */	declaration of vsscanf
"/* Read formatted input from stdin into argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vscanf
"/* Read formatted input from S into argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vfscanf
"/* For historical reasons, the C99-compliant versions of the scanf
   functions are at alternative names.  When __LDBL_COMPAT is in
   effect, this is handled in bits/stdio-ldbl.h.  */"	#if !__GLIBC_USE (DEPRECATED_SCANF) && !defined __LDBL_COMPAT
/* Read formatted input from S.  */	declaration of sscanf
"/* Read formatted input from stdin.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of scanf
"/* Read formatted input from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fscanf
/* Write formatted output to a file descriptor.  */	declaration of vdprintf
"/* Write formatted output to a string dynamically allocated with `malloc'.
   Store the address of the string in *PTR.  */"	declaration of vasprintf
/* Maximum chars of output to write in MAXLEN.  */	declaration of snprintf
/* Write formatted output to S from argument list ARG.  */	declaration of vsprintf
"/* Write formatted output to stdout from argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vprintf
"/* Write formatted output to S from argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vfprintf
/* Write formatted output to S.  */	declaration of sprintf
"/* Write formatted output to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of printf
"/* Write formatted output to STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fprintf
/* Make STREAM line-buffered.  */	declaration of setlinebuf
"/* If BUF is NULL, make STREAM unbuffered.
   Else make it use SIZE bytes of BUF for buffering.  */"	declaration of setbuffer
"/* Make STREAM use buffering mode MODE.
   If BUF is not NULL, use N bytes of it for buffering;
   else allocate an internal buffer N bytes long.  */"	declaration of setvbuf
"/* If BUF is NULL, make STREAM unbuffered.
   Else make it use buffer BUF, of size BUFSIZ.  */"	declaration of setbuf
"/* Open a stream that writes into a malloc'd buffer that is expanded as
   necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location
   and the number of characters written on fflush or fclose.  */"	declaration of open_memstream
/* Create a new stream that refers to a memory buffer.  */	declaration of fmemopen
"/* Create a new stream that refers to the given magic cookie,
   and uses the given functions for input and output.  */"	declaration of fopencookie
/* Create a new stream that refers to an existing system file descriptor.  */	declaration of fdopen
"/* Open a file, replacing an existing stream with it.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of freopen
"/* Open a file and create a new stream for it.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fopen
"/* Close all streams.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fcloseall
"/* Faster versions when locking is not required.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fflush_unlocked
"/* Flush STREAM, or all streams if STREAM is NULL.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fflush
"/* Close STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fclose
"/* Generate a unique temporary filename using up to five characters of PFX
   if it is not NULL.  The directory to put this file in is searched for
   as follows: First the environment variable ""TMPDIR"" is checked.
   If it contains the name of a writable directory, that directory is used.
   If not and if DIR is not NULL, that value is checked.  If that fails,
   P_tmpdir is tried and finally ""/tmp"".  The storage for the filename
   is allocated by `malloc'.  */"	declaration of tempnam
"/* This is the reentrant variant of `tmpnam'.  The only difference is
   that it does not allow S to be NULL.  */"	declaration of tmpnam_r
/* Generate a temporary filename.  */	declaration of tmpnam
"/* Create a temporary file and open it read/write.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Rename file OLD relative to OLDFD to NEW relative to NEWFD, with
   additional flags.  */"	declaration of renameat2
/* Flags for renameat2.  */	#define RENAME_NOREPLACE (1 << 0)
/* Rename file OLD relative to OLDFD to NEW relative to NEWFD.  */	declaration of renameat
/* Rename file OLD to NEW.  */	declaration of rename
/* Remove file FILENAME.  */	declaration of remove
/* C89/C99 say they're macros.  Make them happy.  */	#define stdin stdin
/* Standard error output stream.  */	declaration of stderr
/* Standard output stream.  */	declaration of stdout
/* Standard input stream.  */	declaration of stdin
/* Standard streams.  */	declaration of stdin
/* Default path prefix for `tempnam' and `tmpnam'.  */	"#define P_tmpdir ""/tmp"""
/* Seek to next hole.  */	#define SEEK_HOLE 4
/* Seek to next data.  */	#define SEEK_DATA 3
/* Seek from end of file.  */	#define SEEK_END 2
/* Seek from current position.  */	#define SEEK_CUR 1
/* Seek from beginning of file.  */	#define SEEK_SET 0
"/* The possibilities for the third argument to `fseek'.
   These values should not be changed.  */"	#define SEEK_SET 0
"/* The value returned by fgetc and similar functions to indicate the
   end of the file.  */"	#define EOF (-1)
/* Default buffer size.  */	#define BUFSIZ 8192
/* No buffering.  */	#define _IONBF 2
/* Line buffered.  */	#define _IOLBF 1
/* Fully buffered.  */	#define _IOFBF 0
/* The possibilities for the third argument to `setvbuf'.  */	#define _IOFBF 0
/* The type of the second argument to `fgetpos' and `fsetpos'.  */	#ifndef __USE_FILE_OFFSET64
"/*
 *	ISO C99 Standard: 7.19 Input/output	<stdio.h>
 */"	#ifndef _STDIO_H
// _GLIBCXX_USE_C99_STDIO	#endif
// namespace std	#endif
// namespace __gnu_cxx	std
// namespace	#if _GLIBCXX_USE_C99_STDIO
// LWG 2249	#endif
// Get rid of those macros defined in <stdio.h> in lieu of real functions.	#undef clearerr
// Get rid of those macros defined in <stdio.h> in lieu of real functions.	#if __cplusplus <= 201103L
//	#pragma GCC system_header
/* Math result not representable */	#define ERANGE 34
/* Math argument out of domain of func */	#define EDOM 33
/* Broken pipe */	#define EPIPE 32
/* Too many links */	#define EMLINK 31
/* Read-only file system */	#define EROFS 30
/* Illegal seek */	#define ESPIPE 29
/* No space left on device */	#define ENOSPC 28
/* File too large */	#define EFBIG 27
/* Text file busy */	#define ETXTBSY 26
/* Not a typewriter */	#define ENOTTY 25
/* Too many open files */	#define EMFILE 24
/* File table overflow */	#define ENFILE 23
/* Invalid argument */	#define EINVAL 22
/* Is a directory */	#define EISDIR 21
/* Not a directory */	#define ENOTDIR 20
/* No such device */	#define ENODEV 19
/* Cross-device link */	#define EXDEV 18
/* File exists */	#define EEXIST 17
/* Device or resource busy */	#define EBUSY 16
/* Block device required */	#define ENOTBLK 15
/* Bad address */	#define EFAULT 14
/* Permission denied */	#define EACCES 13
/* Out of memory */	#define ENOMEM 12
/* Try again */	#define EAGAIN 11
/* No child processes */	#define ECHILD 10
/* Bad file number */	#define EBADF 9
/* Exec format error */	#define ENOEXEC 8
/* Argument list too long */	#define E2BIG 7
/* No such device or address */	#define ENXIO 6
/* I/O error */	#define EIO 5
/* Interrupted system call */	#define EINTR 4
/* No such process */	#define ESRCH 3
/* No such file or directory */	#define ENOENT 2
/* Operation not permitted */	#define EPERM 1
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef _ASM_GENERIC_ERRNO_BASE_H
/* Memory page has hardware error */	#define EHWPOISON 133
/* Operation not possible due to RF-kill */	#define ERFKILL 132
/* State not recoverable */	#define ENOTRECOVERABLE 131
/* Owner died */	#define EOWNERDEAD 130
/* for robust mutexes */	#define EOWNERDEAD 130
/* Key was rejected by service */	#define EKEYREJECTED 129
/* Key has been revoked */	#define EKEYREVOKED 128
/* Key has expired */	#define EKEYEXPIRED 127
/* Required key not available */	#define ENOKEY 126
/* Operation Canceled */	#define ECANCELED 125
/* Wrong medium type */	#define EMEDIUMTYPE 124
/* No medium found */	#define ENOMEDIUM 123
/* Quota exceeded */	#define EDQUOT 122
/* Remote I/O error */	#define EREMOTEIO 121
/* Is a named type file */	#define EISNAM 120
/* No XENIX semaphores available */	#define ENAVAIL 119
/* Not a XENIX named type file */	#define ENOTNAM 118
/* Structure needs cleaning */	#define EUCLEAN 117
/* Stale file handle */	#define ESTALE 116
/* Operation now in progress */	#define EINPROGRESS 115
/* Operation already in progress */	#define EALREADY 114
/* No route to host */	#define EHOSTUNREACH 113
/* Host is down */	#define EHOSTDOWN 112
/* Connection refused */	#define ECONNREFUSED 111
/* Connection timed out */	#define ETIMEDOUT 110
/* Too many references: cannot splice */	#define ETOOMANYREFS 109
/* Cannot send after transport endpoint shutdown */	#define ESHUTDOWN 108
/* Transport endpoint is not connected */	#define ENOTCONN 107
/* Transport endpoint is already connected */	#define EISCONN 106
/* No buffer space available */	#define ENOBUFS 105
/* Connection reset by peer */	#define ECONNRESET 104
/* Software caused connection abort */	#define ECONNABORTED 103
/* Network dropped connection because of reset */	#define ENETRESET 102
/* Network is unreachable */	#define ENETUNREACH 101
/* Network is down */	#define ENETDOWN 100
/* Cannot assign requested address */	#define EADDRNOTAVAIL 99
/* Address already in use */	#define EADDRINUSE 98
/* Address family not supported by protocol */	#define EAFNOSUPPORT 97
/* Protocol family not supported */	#define EPFNOSUPPORT 96
/* Operation not supported on transport endpoint */	#define EOPNOTSUPP 95
/* Socket type not supported */	#define ESOCKTNOSUPPORT 94
/* Protocol not supported */	#define EPROTONOSUPPORT 93
/* Protocol not available */	#define ENOPROTOOPT 92
/* Protocol wrong type for socket */	#define EPROTOTYPE 91
/* Message too long */	#define EMSGSIZE 90
/* Destination address required */	#define EDESTADDRREQ 89
/* Socket operation on non-socket */	#define ENOTSOCK 88
/* Too many users */	#define EUSERS 87
/* Streams pipe error */	#define ESTRPIPE 86
/* Interrupted system call should be restarted */	#define ERESTART 85
/* Illegal byte sequence */	#define EILSEQ 84
/* Cannot exec a shared library directly */	#define ELIBEXEC 83
/* Attempting to link in too many shared libraries */	#define ELIBMAX 82
/* .lib section in a.out corrupted */	#define ELIBSCN 81
/* Accessing a corrupted shared library */	#define ELIBBAD 80
/* Can not access a needed shared library */	#define ELIBACC 79
/* Remote address changed */	#define EREMCHG 78
/* File descriptor in bad state */	#define EBADFD 77
/* Name not unique on network */	#define ENOTUNIQ 76
/* Value too large for defined data type */	#define EOVERFLOW 75
/* Not a data message */	#define EBADMSG 74
/* RFS specific error */	#define EDOTDOT 73
/* Multihop attempted */	#define EMULTIHOP 72
/* Protocol error */	#define EPROTO 71
/* Communication error on send */	#define ECOMM 70
/* Srmount error */	#define ESRMNT 69
/* Advertise error */	#define EADV 68
/* Link has been severed */	#define ENOLINK 67
/* Object is remote */	#define EREMOTE 66
/* Package not installed */	#define ENOPKG 65
/* Machine is not on the network */	#define ENONET 64
/* Out of streams resources */	#define ENOSR 63
/* Timer expired */	#define ETIME 62
/* No data available */	#define ENODATA 61
/* Device not a stream */	#define ENOSTR 60
/* Bad font file format */	#define EBFONT 59
/* Invalid slot */	#define EBADSLT 57
/* Invalid request code */	#define EBADRQC 56
/* No anode */	#define ENOANO 55
/* Exchange full */	#define EXFULL 54
/* Invalid request descriptor */	#define EBADR 53
/* Invalid exchange */	#define EBADE 52
/* Level 2 halted */	#define EL2HLT 51
/* No CSI structure available */	#define ENOCSI 50
/* Protocol driver not attached */	#define EUNATCH 49
/* Link number out of range */	#define ELNRNG 48
/* Level 3 reset */	#define EL3RST 47
/* Level 3 halted */	#define EL3HLT 46
/* Level 2 not synchronized */	#define EL2NSYNC 45
/* Channel number out of range */	#define ECHRNG 44
/* Identifier removed */	#define EIDRM 43
/* No message of desired type */	#define ENOMSG 42
/* Operation would block */	#define EWOULDBLOCK EAGAIN
/* Too many symbolic links encountered */	#define ELOOP 40
/* Directory not empty */	#define ENOTEMPTY 39
/* Invalid system call number */	#define ENOSYS 38
"/*
 * This error code is special: arch syscall entry code will return
 * -ENOSYS if users try to call a syscall that doesn't exist.  To keep
 * failures of syscalls that really do exist distinguishable from
 * failures due to attempts to use a nonexistent syscall, syscall
 * implementations should refrain from returning -ENOSYS.
 */"	#define ENOSYS 38
/* No record locks available */	#define ENOLCK 37
/* File name too long */	#define ENAMETOOLONG 36
/* Resource deadlock would occur */	#define EDEADLK 35
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef _ASM_GENERIC_ERRNO_H
/* bits/errno.h.  */	#endif
/* Older Linux headers do not define these constants.  */	#ifndef ENOTSUP
"/* Error constants.  Linux specific version.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_ERRNO_H
"/* Define error_t.
   Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef __error_t_defined
/* errno.h */	#endif
/* !__ASSEMBLER__ */	#endif
/* __USE_GNU */	#endif
"/* The full and simple forms of the name with which the program was
   invoked.  These variables are set up automatically at startup based on
   the value of argv[0].  */"	declaration of program_invocation_short_name
"/* The full and simple forms of the name with which the program was
   invoked.  These variables are set up automatically at startup based on
   the value of argv[0].  */"	declaration of program_invocation_name
/* The error code set by various library functions.  */	declaration of __errno_location
"/* When included from assembly language, this header only provides the
   E* constants.  */"	#ifndef __ASSEMBLER__
"/*
 *	ISO C99 Standard: 7.5 Errors	<errno.h>
 */"	#ifndef _ERRNO_H
// Adhere to section 17.4.1.2 clause 5 of ISO 14882:1998	#ifndef errno
//	#pragma GCC system_header
// _STRING_CONVERSIONS_H	#endif
// C++11	#endif
// namespace	#endif
// Helper for the to_string / to_wstring functions.	definition of __to_xstring
// Helper for all the sto* functions.	definition of __stoa
"/** @file ext/string_conversions.h
 *  This file is a GNU extension to the Standard C++ Library.
 */"	#ifndef _STRING_CONVERSIONS_H
// _FUNCTIONAL_HASH_H	#endif
// namespace	#endif
// otherwise.	definition of __is_fast_hash<_Hash>
/// Specialization for long double.	definition of hash<long double>
// 0 and -0 both hash to zero.	return ...
/// Specialization for double.	definition of hash<double>
// 0 and -0 both hash to zero.	return ...
/// Specialization for float.	definition of hash<float>
// A hash function similar to FNV-1a (see PR59406 for how it differs).	definition of _Fnv_hash_impl
/// Explicit specialization for unsigned long long.	definition of hash<unsigned long long>
/// Explicit specialization for unsigned long.	definition of hash<unsigned long>
/// Explicit specialization for unsigned int.	definition of hash<unsigned int>
/// Explicit specialization for unsigned short.	definition of hash<unsigned short>
/// Explicit specialization for long long.	definition of hash<long long>
/// Explicit specialization for long.	definition of hash<long>
/// Explicit specialization for int.	definition of hash<int>
/// Explicit specialization for short.	definition of hash<short>
/// Explicit specialization for char32_t.	definition of hash<char32_t>
/// Explicit specialization for char16_t.	definition of hash<char16_t>
/// Explicit specialization for char8_t.	#endif
/// Explicit specialization for wchar_t.	definition of hash<wchar_t>
/// Explicit specialization for unsigned char.	definition of hash<unsigned char>
/// Explicit specialization for signed char.	definition of hash<signed char>
/// Explicit specialization for char.	definition of hash<char>
/// Explicit specialization for bool.	definition of hash<bool>
// Explicit specializations for integer types.	#define _Cxx_hashtable_define_trivial_hash(_Tp) template<> struct hash<_Tp> : public __hash_base<size_t, _Tp> { size_t operator()(_Tp __val) const noexcept { return static_cast<size_t>(__val); } };
/// Partial specializations for pointer types.	definition of hash<_Tp *>
// Use with non-enum types still SFINAES.	definition of hash<_Tp>
// Helper struct for hash with enum types.	definition of __hash_enum<_Tp, true>
// Private rather than deleted to be non-trivially-copyable.	declaration of ~__hash_enum
// Private rather than deleted to be non-trivially-copyable.	declaration of __hash_enum
// Helper struct for SFINAE-poisoning non-enum types.	definition of __hash_enum<_Tp, <unnamed>>
// Private rather than deleted to be non-trivially-copyable.	declaration of ~__poison_hash
// Private rather than deleted to be non-trivially-copyable.	declaration of __poison_hash
"/** @defgroup hashes Hashes
   *  @ingroup functors
   *
   *   Hashing functors taking a variable type and returning a @c std::size_t.
   *
   *  @{
   */"	definition of __hash_base<_Result, _Arg>
"/** @file bits/functional_hash.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{functional}
 */"	#ifndef _FUNCTIONAL_HASH_H
// namespace std	#endif
// _GLIBCXX_EXTERN_TEMPLATE	#endif
// _GLIBCXX_USE_WCHAR_T	#endif
// to ensure the definition in libstdc++.so is unique (PR 86138).	#endif
// as needed.	#if __cplusplus <= 201703L && _GLIBCXX_EXTERN_TEMPLATE > 0
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// 211.  operator>>(istream&, string&) doesn't set failbit	definition of getline
// 21.3.7.9 basic_string::getline and operators	definition of operator>>
// anyway because __s is probably aligned, which helps memcmp.	definition of find
// !_GLIBCXX_USE_CXX11_ABI	#endif
// 21.3.5.7 par 3: do not append null.  (good.)	#endif
// Todo: overlapping case.	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
// TBD: DPG annotate	#if __cplusplus >= 201103L
// Check for out_of_range and length_error exceptions.	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
// Allocate more space.	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
// pointers, calling for a different coding style.	#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
// !_GLIBCXX_USE_CXX11_ABI	#else
// 21.3.5.7 par 3: do not append null.  (good.)	#else
// Work in-place.	definition of copy
// Make sure we don't shrink below the current size.	definition of _M_mutate
// Check for out_of_range and length_error exceptions.	definition of _M_construct
// Allocate more space.	definition of _M_construct
// pointers, calling for a different coding style.	definition of _M_construct
// updated by Jonathan Wakely for ISO-14882-2011.	#ifndef _BASIC_STRING_TCC
/* _GLIBCXX_STRING */	#endif
// C++20	#endif
// namespace std	#endif
// C++17	#endif
// namespace std	#endif
// namespace pmr	#ifdef _GLIBCXX_USE_CHAR8_T
// C++20	#endif
// For remove and remove_if	#endif
//	#ifndef _GLIBCXX_STRING
/* _GLIBCXX_STDEXCEPT */	#endif
// namespace	#endif
/** Thrown to indicate arithmetic underflow.  */	definition of underflow_error
/** Thrown to indicate arithmetic overflow.  */	definition of overflow_error
/** Thrown to indicate range errors in internal computations.  */	definition of range_error
"/** Returns a C-style character string describing the general cause of
     *  the current error (the same string passed to the ctor).  */"	declaration of what
/** Takes a character string describing the error.  */	declaration of runtime_error
/** Takes a character string describing the error.  */	declaration of runtime_error
"/** Runtime errors represent problems outside the scope of a program;
   *  they cannot be easily predicted and can generally only be caught as
   *  the program executes.
   *  @brief One of two subclasses of exception.
   */"	definition of runtime_error
"/** This represents an argument whose value is not within the expected
   *  range (e.g., boundary checks in basic_string).  */"	definition of out_of_range
"/** Thrown when an object is constructed that would exceed its maximum
   *  permitted size (e.g., a basic_string instance).  */"	definition of length_error
/** Thrown to report invalid arguments to functions.  */	definition of invalid_argument
"/** Thrown by the library, or by you, to report domain errors (domain in
   *  the mathematical sense).  */"	definition of domain_error
"/** Returns a C-style character string describing the general cause of
     *  the current error (the same string passed to the ctor).  */"	declaration of what
/** Takes a character string describing the error.  */	declaration of logic_error
/** Takes a character string describing the error.  */	declaration of logic_error
"/** Logic errors represent problems in the internal logic of a program;
   *  in theory, these are preventable, and even detectable before the
   *  program runs (e.g., violations of class invariants).
   *  @brief One of two subclasses of exception.
   */"	definition of logic_error
// _GLIBCXX_USE_DUAL_ABI	#else
// _GLIBCXX_USE_CXX11_ABI	#endif
// Emulates a new SSO string when the old std::string is in use.	#if __cplusplus >= 201103L
// _GLIBCXX_USE_CXX11_ABI	#else
// Emulates an old COW string when the new std::string is in use.	definition of __cow_string
//	#ifndef _GLIBCXX_STDEXCEPT
// _GLIBCXX_INVOKE_H	#endif
// C++11	#endif
// namespace std	#endif
/// Invoke a callable object.	definition of __invoke
// reference_wrapper is converted to an lvalue-reference.	definition of __invfwd
"/** @file include/bits/invoke.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{functional}
 */"	#ifndef _GLIBCXX_INVOKE_H
// _GLIBCXX_TUPLE	#endif
// C++11	#endif
// namespace std	#endif
// C++17	#endif
// See stl_pair.h...	definition of pair
/// Partial specialization for tuples	definition of uses_allocator<tuple<_Types...>, _Alloc>
// 2773. Making std::ignore constexpr	definition of ignore
// 2933. PR for LWG 2773 could be clearer	definition of _Swallow_assign
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
// Constrained free swap overload, see p0185r1	#else
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
/// swap	definition of swap
/// tie	definition of tie
/// tuple_cat	definition of tuple_cat
// Computes the result type of tuple_cat given a set of tuple-like types.	definition of __tuple_cat_result<_Tpls...>
// Returns the std::tuple equivalent of a tuple-like type.	definition of __make_tuple<_Tuple>
/// std::forward_as_tuple	definition of forward_as_tuple
// NB: DR 705.	definition of make_tuple
// This class performs the comparison operations on tuples	definition of __tuple_compare<_Tp, _Up, __i, __size>
/// a const tuple rvalue.	#endif
/// Return a const rvalue reference to the ith element of a const tuple rvalue.	definition of get
/// Return an rvalue reference to the ith element of a tuple rvalue.	definition of get
/// Return a const reference to the ith element of a const tuple.	definition of get
/// Return a reference to the ith element of a tuple.	definition of get
"/**
   * Error case for tuple_element: invalid index.
   */"	definition of tuple_element<__i, tuple<>>
"/**
   * Basis case for tuple_element: The first element is the one we're seeking.
   */"	definition of tuple_element<0UL, tuple<_Head, _Tail...>>
"/**
   * Recursive case for tuple_element: strip off the first element in
   * the tuple and retrieve the (i-1)th element of the remaining tuple.
   */"	definition of tuple_element<__i, tuple<_Head, _Tail...>>
/// class tuple_size	definition of tuple_size<tuple<_Elements...>>
// Allocator-extended constructors.	definition of tuple
// need to be constrained.	declaration of _TMC
// need to be constrained.	definition of _TCC
/// Includes construction and assignment from a pair.	definition of tuple<_T1, _T2>
// No-op allocator constructors.	definition of tuple
// allocator constructors.	declaration of tuple
/* no-op */	{ ... }
// Explicit specialization, zero-element tuple.	definition of tuple<>
// tuple swap	declaration of swap
// tuple assignment	declaration of operator=
// Allocator-extended constructors.	definition of tuple
// must avoid creating temporaries.	definition of _TNTC
// need to be constrained.	definition of _TMCT
// need to be constrained.	definition of _TMC
// need to be constrained.	definition of _TCC
// that it becomes dependent on the constraints.	definition of _TC2<_Dummy>
/// Primary class template, tuple	definition of tuple<_Elements...>
// constructors.	definition of _TC<<unnamed>, _Elements...>
// 2729. Missing SFINAE on std::pair::operator=	definition of operator=
// Basis case of inheritance recursion.	definition of _Tuple_impl<_Idx, _Head>
// 2729. Missing SFINAE on std::pair::operator=	definition of operator=
"/**
   * Recursive tuple implementation. Here we store the @c Head element
   * and derive from a @c Tuple_impl containing the remaining elements
   * (which contains the @c Tail).
   */"	definition of _Tuple_impl<_Idx, _Head, _Tail...>
// Use the Empty Base-class Optimization for empty, non-final types.	definition of __empty_not_final
// Using EBO for elements that are tuples causes ambiguous base errors.	definition of __is_empty_non_tuple<tuple<_El0, _El...>>
"/** @file include/tuple
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_TUPLE
// namespace std	#endif
/// Allocate space for a single object using __a	definition of __allocate_guarded
/// Get the address that the owned pointer refers to.	definition of get
/// Get the address that the owned pointer refers to.	declaration of get
/// Release ownership of the owned pointer	definition of operator=
/// Release ownership of the owned pointer	declaration of operator=
/// Deallocate the owned pointer	definition of ~__allocated_ptr
/// Deallocate the owned pointer	declaration of ~__allocated_ptr
/// Transfer ownership of the owned pointer	definition of __allocated_ptr
/// Transfer ownership of the owned pointer	declaration of __allocated_ptr
/// Convert __ptr to allocator's pointer type and take ownership of it	definition of __allocated_ptr
/// Take ownership of __ptr	definition of __allocated_ptr
/// Take ownership of __ptr	declaration of __allocated_ptr
/// Non-standard RAII type for managing pointers obtained from allocators.	definition of __allocated_ptr<_Alloc>
"/** @file bits/allocated_ptr.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _ALLOCATED_PTR_H
// _GLIBCXX_REFWRAP_H	#endif
// C++11	#endif
// namespace std	#endif
/// std::cref overload to prevent wrapping a reference_wrapper	definition of cref
/// std::ref overload to prevent wrapping a reference_wrapper	definition of ref
/// Denotes a const reference should be taken to a variable.	definition of cref
/// Denotes a reference should be taken to a variable.	definition of ref
// 3041. Unnecessary decay in reference_wrapper	#if __cplusplus > 201703L
// so checking for nested types could result in ODR violations.	#endif
"/**
   *  @brief Primary class template for reference_wrapper.
   *  @ingroup functors
   *  @{
   */"	definition of reference_wrapper<_Tp>
// ! C++20	#endif
// - a function pointer type (binary)	definition of _Reference_wrapper_base<..(*)(..)>
// - a function pointer type (unary)	definition of _Reference_wrapper_base<..(*)(..)>
// - a function type (binary)	definition of _Reference_wrapper_base<..(..)>
// - a function type (unary)	definition of _Reference_wrapper_base<..(..)>
"/**
   *  Derives from unary_function or binary_function when it
   *  can. Specializations handle all of the easy cases. The primary
   *  template determines what to do with a class type, which may
   *  derive from both unary_function and binary_function.
  */"	definition of _Reference_wrapper_base<_Tp>
// Nested first_argument_type and second_argument_type.	definition of _Refwrap_base_arg2<_Tp, __void_t<first_argument_type, second_argument_type>>
// Detect nested first_argument_type and second_argument_type.	definition of _Refwrap_base_arg2<_Tp, <unnamed>>
// Nested argument_type.	definition of _Refwrap_base_arg1<_Tp, __void_t<argument_type>>
// Detect nested argument_type.	definition of _Refwrap_base_arg1<_Tp, <unnamed>>
"/**
   *  Strip top-level cv-qualifiers from the function object and let
   *  _Weak_result_type_memfun perform the real work.
  */"	definition of _Weak_result_type<_Functor>
// A pointer to data member doesn't have a weak result type.	definition of _Weak_result_type_memfun<_Func _Class::*, false>
// A pointer to member function has a weak result type.	definition of _Weak_result_type_memfun<_MemFunPtr, true>
// Let _Weak_result_type_impl perform the real work.	definition of _Weak_result_type_memfun<_Functor, <unnamed>>
/// Retrieve the result type for a varargs function pointer.	definition of _Weak_result_type_impl<..(*)(..)>
/// Retrieve the result type for a function pointer.	definition of _Weak_result_type_impl<..(*)(..)>
/// Retrieve the result type for a varargs function type.	definition of _Weak_result_type_impl<..(..)>
/// Retrieve the result type for a function type.	definition of _Weak_result_type_impl<..(..)>
"/**
   *  Base class for any function object that has a weak result type, as
   *  defined in 20.8.2 [func.require] of C++11.
  */"	definition of _Weak_result_type_impl<_Functor>
/// If we have found a result_type, extract it.	definition of _Maybe_get_result_type<_Functor, <unnamed>>
/// Derives from @c binary_function, as appropriate.	definition of _Maybe_unary_or_binary_function<_Res, _T1, _T2>
/// Derives from @c unary_function, as appropriate.	definition of _Maybe_unary_or_binary_function<_Res, _T1>
"/**
   * Derives from @c unary_function or @c binary_function, or perhaps
   * nothing, depending on the number of arguments provided. The
   * primary template is the basis case, which derives nothing.
   */"	definition of _Maybe_unary_or_binary_function<_Res, _ArgTypes...>
// for unary_function and binary_function	std
"/** @file include/bits/refwrap.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{functional}
 */"	#ifndef _GLIBCXX_REFWRAP_H
/* _ALIGNED_BUFFER_H */	#endif
// namespace	#endif
// Can be used to avoid value-initialization	declaration of __aligned_buffer
// This type is still used to avoid an ABI change.	definition of __aligned_buffer<_Tp>
// Can be used to avoid value-initialization zeroing _M_storage.	declaration of __aligned_membuf
// versions of non-GNU compilers might still need this trick.	definition of _Tp2
// complete objects.	definition of __aligned_membuf<_Tp>
"/** @file ext/aligned_buffer.h
 *  This file is a GNU extension to the Standard C++ Library.
 */"	#ifndef _ALIGNED_BUFFER_H
// _SHARED_PTR_BASE_H	#endif
// namespace	#endif
/// std::hash specialization for __shared_ptr.	definition of hash<__shared_ptr<_Tp, _Lp>>
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
// 20.7.2.3.6 weak_ptr specialized algorithms.	definition of swap
// Reference counter.	definition of _M_refcount
// Contained pointer.	definition of _M_ptr
// Used by __enable_shared_from_this.	declaration of _M_assign
// Used by __enable_shared_from_this.	definition of _M_assign
// in multithreaded programs __r._M_ptr may be invalidated at any point.	definition of __weak_ptr
// Constraint for assignment from shared_ptr and weak_ptr:	definition of _Assignable
/// dynamic_pointer_cast	definition of dynamic_pointer_cast
/// const_pointer_cast	definition of const_pointer_cast
/// static_pointer_cast	definition of static_pointer_cast
// 20.7.2.2.8 shared_ptr specialized algorithms.	definition of swap
// 20.7.2.2.7 shared_ptr comparisons	definition of operator==
// Reference counter.	definition of _M_refcount
// Contained pointer.	definition of _M_ptr
// No enable shared_from_this for arrays	definition of _M_enable_shared_from_this_with
// Detect an accessible and unambiguous enable_shared_from_this base.	definition of __has_esft_base<_Yp, <unnamed>>
// shared_ptr::shared_ptr(const weak_ptr&, std::nothrow_t).	declaration of __shared_ptr
// This constructor is non-standard, it is used by allocate_shared.	definition of __shared_ptr
// never throws	definition of operator bool
// never throws	declaration of operator bool
// Catch self-reset errors.	definition of reset
// __shared_count::op= doesn't throw	#if _GLIBCXX_USE_DEPRECATED
// Postcondition: use_count() == 1 and __r.get() == 0	#pragma GCC diagnostic pop
// If an exception is thrown this constructor has no effect.	#endif
// If an exception is thrown this constructor has no effect.	#if __cplusplus <= 201402L && _GLIBCXX_USE_DEPRECATED
// Constraint for assignment from unique_ptr:	#if __cplusplus > 201402L
// Define operator[] for shared_ptr<T[]> and shared_ptr<T[N]>.	definition of __shared_ptr_access<_Tp, _Lp, true, false>
// Define operator-> for shared_ptr<cv void>.	definition of __shared_ptr_access<_Tp, _Lp, false, true>
// Define operator* and operator-> for shared_ptr<T>.	definition of __shared_ptr_access<_Tp, _Lp, <unnamed>, <unnamed>>
// otherwise, Y* shall be convertible to T*.	definition of __sp_is_constructible<_Tp, _Yp>
// when T is U[], Y(*)[] shall be convertible to T*;	definition of __sp_is_constructible<_Up[], _Yp>
// When T is U[N], Y(*)[N] shall be convertible to T*;	definition of __sp_is_constructible<_Up[], _Yp>
// Test conversion from Y(*)[] to U(*)[] without forming invalid type Y[].	definition of __sp_is_constructible_arr<_Up, _Yp, <unnamed>>
// Test conversion from Y(*)[N] to U(*)[N] without forming invalid type Y[N].	definition of __sp_is_constructible_arrN<_Up, _Nm, _Yp, <unnamed>>
// either Y* is convertible to T* or Y is U[N] and T is U cv [].	definition of __sp_compatible_with<_Yp_ptr, _Tp_ptr>
// Now that __weak_count is defined we can define this constructor:	definition of __shared_count
// Now that __weak_count is defined we can define this constructor:	definition of __shared_count
// Friend function injected into enclosing namespace and found by ADL	definition of operator==
// Friend function injected into enclosing namespace and found by ADL	definition of operator==
// Does not throw if __r._M_get_use_count() == 0, caller must check.	declaration of __shared_count
// Throw bad_weak_ptr when __r._M_get_use_count() == 0.	declaration of __shared_count
// Special case for unique_ptr<_Tp,_Del> to provide the strong guarantee.	definition of __shared_count
// Special case for auto_ptr<_Tp> to provide the strong guarantee.	#pragma GCC diagnostic pop
// Call _Deleter on __p.	#if _GLIBCXX_USE_DEPRECATED
// The default deleter for shared_ptr<T[]> and shared_ptr<T[N]>.	definition of __sp_array_delete
// or call a library function to do it.	#if __cpp_rtti
// helpers for make_shared / allocate_shared	definition of _Sp_make_shared_tag
// 2400. shared_ptr's get_deleter() should use addressof()	#else
// __d(__p) must not throw.	#if __cpp_rtti
// Support for custom deleter and/or allocator	definition of _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>
/// Specialization not using EBO.	definition of _Sp_ebo_helper<_Nm, _Tp, false>
/// Specialization using EBO.	definition of _Sp_ebo_helper<_Nm, _Tp, true>
// Counted ptr with no deleter or allocator support	definition of _Sp_counted_ptr<_Ptr, _Lp>
// Perform lock-free add-if-not-zero operation.	declaration
// Perform lock-free add-if-not-zero operation.	declaration
// #weak + (#shared != 0)	definition of _M_weak_count
// #shared	definition of _M_use_count
// with other threads.	return ...
// destroy() must observe results of dispose()	definition of _M_get_use_count
// destroy() must observe results of dispose()	ExprStmt
// Be race-detector-friendly. For more info see bits/c++config.	;
// Be race-detector-friendly.  For more info see bits/c++config.	;
// Be race-detector-friendly.  For more info see bits/c++config.	declaration of _M_weak_add_ref
// See http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html	if (...) ... 
// Be race-detector-friendly.  For more info see bits/c++config.	;
// Called when _M_weak_count drops to zero.	definition of _M_destroy
// managed by *this.	declaration of _M_dispose
// memory barriers.	definition of (unnamed enum)
// The atomic policy uses fully-fenced builtins, single doesn't care.	definition of (unnamed enum)
// Empty helper class except when the template argument is _S_mutex.	definition of _Mutex_base<_Lp>
// Substitute for bad_weak_ptr object in the case of -fno-exceptions.	definition of __throw_bad_weak_ptr
"/**
   *  @brief  Exception possibly thrown by @c shared_ptr.
   *  @ingroup exceptions
   */"	definition of bad_weak_ptr
"/** @file bits/shared_ptr_base.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _SHARED_PTR_BASE_H
// _SHARED_PTR_H	#endif
// namespace	#endif
// C++17	#endif
// namespace __detail::__variant	#endif
// @} group pointer_abstractions	#if __cplusplus >= 201703L
/// std::hash specialization for shared_ptr.	definition of hash<shared_ptr<_Tp>>
"/**
   *  @brief  Create an object that is owned by a shared_ptr.
   *  @param  __args  Arguments for the @a _Tp object's constructor.
   *  @return A shared_ptr that owns the newly created object.
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */"	definition of make_shared
"/**
   *  @brief  Create an object that is owned by a shared_ptr.
   *  @param  __a     An allocator.
   *  @param  __args  Arguments for the @a _Tp object's constructor.
   *  @return A shared_ptr that owns the newly created object.
   *  @throw  An exception thrown from @a _Alloc::allocate or from the
   *          constructor of @a _Tp.
   *
   *  A copy of @a __a will be used to allocate memory for the shared_ptr
   *  and the new object.
   */"	definition of allocate_shared
// Found by ADL when this is an associated class.	definition of __enable_shared_from_this_base
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
"/**
   *  @brief Base class allowing use of member function shared_from_this.
   */"	definition of enable_shared_from_this<_Tp>
/// Partial specialization of owner_less for weak_ptr.	definition of owner_less<weak_ptr<_Tp>>
/// Partial specialization of owner_less for shared_ptr.	definition of owner_less<shared_ptr<_Tp>>
/// Void specialization of owner_less	definition of owner_less<void>
// 20.7.2.3.6 weak_ptr specialized algorithms.	definition of swap
"/**
   *  @brief  A smart pointer with weak semantics.
   *
   *  With forwarding constructors and assignment operators.
   */"	definition of weak_ptr<_Tp>
// 20.7.2.2.9 shared_ptr casts.	definition of static_pointer_cast
// 20.7.2.2.8 shared_ptr specialized algorithms.	definition of swap
// 20.7.2.2.7 shared_ptr comparisons	definition of operator==
// This constructor is non-standard, it is used by weak_ptr::lock().	declaration of shared_ptr
// This constructor is non-standard, it is used by allocate_shared.	definition of shared_ptr
"/**
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */"	#if _GLIBCXX_USE_DEPRECATED
// If an exception is thrown this constructor has no effect.	#endif
// 2399. shared_ptr's constructor from unique_ptr should be constrained	#if __cplusplus <= 201402L && _GLIBCXX_USE_DEPRECATED
"/**
       *  @brief  Constructs a %shared_ptr that shares ownership with @a __r
       *          and stores a copy of the pointer stored in @a __r.
       *  @param  __r  A weak_ptr.
       *  @post   use_count() == __r.use_count()
       *  @throw  bad_weak_ptr when __r.expired(),
       *          in which case the constructor has no effect.
       */"	#if _GLIBCXX_USE_DEPRECATED
"/**
   *  @brief  A smart pointer with reference-counted copy semantics.
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */"	definition of shared_ptr<_Tp>
/// 20.7.2.2.10 shared_ptr get_deleter	definition of get_deleter
/// 20.7.2.2.11 shared_ptr I/O	definition of operator<<
"/** @file
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _SHARED_PTR_H
// @} group atomics	#endif
"/**
 * Lock-free property.
 *
 * 0 indicates that the types are never lock-free.
 * 1 indicates that the types are sometimes lock-free.
 * 2 indicates that the types are always lock-free.
 */"	#if __cplusplus >= 201103L
"/** @file bits/atomic_lockfree_defines.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{atomic}
 */"	#ifndef _GLIBCXX_ATOMIC_LOCK_FREE_H
// namespace std	#endif
// Produce a fake, minimally aligned pointer.	declaration of store
// Produce a fake, minimally aligned pointer.	definition of store
// Produce a fake, minimally aligned pointer.	declaration of is_lock_free
// Requires __pointer_type convertible to _M_p.	declaration of __atomic_base
// Factored out to facilitate explicit specialization.	declaration of _M_type_size
/// Partial specialization for pointer types.	definition of __atomic_base<_PTp *>
// Use a fake, minimally aligned pointer.	return ...
// Use a fake, minimally aligned pointer.	return ...
// Requires __int_type convertible to _M_i.	definition of __atomic_base
// memory access expect.	definition of __atomic_base<_ITp>
// Conversion to ATOMIC_FLAG_INIT.	definition of atomic_flag
/// atomic_flag	definition of atomic_flag
"/**
   *  @brief Base type for atomic_flag.
   *
   *  Base type is POD with data, allowing atomic_flag to derive from
   *  it and meet the standard layout type requirement. In addition to
   *  compatibility with a C interface, this allows different
   *  implementations of atomic_flag to use the same atomic operation
   *  functions, via a standard conversion to the __atomic_flag_base
   *  argument.
  */"	definition of __atomic_flag_base
"/* The target's ""set"" value for test-and-set may not be exactly 1.  */"	#if __GCC_ATOMIC_TEST_AND_SET_TRUEVAL == 1
/// kill_dependency	definition of kill_dependency
// Drop release ordering as per [atomics.types.operations.req]/21	definition of __cmpexch_failure_order2
/// Enumeration for memory_order	#if __cplusplus > 201703L
"/** @file bits/atomic_base.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{atomic}
 */"	#ifndef _GLIBCXX_ATOMIC_BASE_H
// _SHARED_PTR_ATOMIC_H	#endif
// namespace	#endif
// goes out of scope after __lock	definition of atomic_compare_exchange_strong
// goes out of scope after __lock	definition of atomic_compare_exchange_strong
"/**
   *  @brief  Atomic compare-and-swap for shared_ptr objects.
   *  @param  __p A non-null pointer to a shared_ptr object.
   *  @param  __v A non-null pointer to a shared_ptr object.
   *  @param  __w A non-null pointer to a shared_ptr object.
   *  @return True if @c *__p was equivalent to @c *__v, false otherwise.
   *
   *  The memory order for failure shall not be @c memory_order_release or
   *  @c memory_order_acq_rel, or stronger than the memory order for success.
   *  @{
  */"	definition of atomic_compare_exchange_strong_explicit
"/**
   *  @brief  Atomic exchange for shared_ptr objects.
   *  @param  __p A non-null pointer to a shared_ptr object.
   *  @param  __r New value to store in @c *__p.
   *  @return The original value of @c *__p
   *  @{
  */"	definition of atomic_exchange_explicit
// use swap so that **__p not destroyed while lock held	definition of atomic_store
// use swap so that **__p not destroyed while lock held	definition of atomic_store
"/**
   *  @brief  Atomic store for shared_ptr objects.
   *  @param  __p A non-null pointer to a shared_ptr object.
   *  @param  __r The value to store.
   *
   *  The memory order shall not be @c memory_order_acquire or
   *  @c memory_order_acq_rel.
   *  @{
  */"	definition of atomic_store_explicit
"/**
   *  @brief  Atomic load for shared_ptr objects.
   *  @param  __p A non-null pointer to a shared_ptr object.
   *  @return @c *__p
   *
   *  The memory order shall not be @c memory_order_release or
   *  @c memory_order_acq_rel.
   *  @{
  */"	definition of atomic_load_explicit
"/**
   *  @brief  Report whether shared_ptr atomic operations are lock-free.
   *  @param  __p A non-null pointer to a shared_ptr object.
   *  @return True if atomic access to @c *__p is lock-free, false otherwise.
   *  @{
  */"	definition of atomic_is_lock_free
"/**
   * @addtogroup pointer_abstractions
   * @{
   */"	definition of _Sp_locker
"/** @file bits/shared_ptr_atomic.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _SHARED_PTR_ATOMIC_H
/* _BACKWARD_AUTO_PTR_H */	#endif
// namespace	#endif
// 541. shared_ptr template assignment and void	definition of auto_ptr<void>
"/** 
       *  @brief  Automatic conversions
       *
       *  These operations are supposed to convert an %auto_ptr into and from
       *  an auto_ptr_ref automatically as needed.  This would allow
       *  constructs such as
       *  @code
       *    auto_ptr<Derived>  func_returning_auto_ptr(.....);
       *    ...
       *    auto_ptr<Base> ptr = func_returning_auto_ptr(.....);
       *  @endcode
       *
       *  But it doesn't work, and won't be fixed. For further details see
       *  http://cplusplus.github.io/LWG/lwg-closed.html#463
       */"	declaration of auto_ptr
"/**
       *  @brief  Forcibly deletes the managed object.
       *  @param  __p  A pointer (defaults to NULL).
       *
       *  This object now @e owns the object pointed to by @a __p.  The
       *  previous object has been deleted.
       */"	declaration of reset
"/**
       *  @brief  Bypassing the smart pointer.
       *  @return  The raw pointer being managed.
       *
       *  You can get a copy of the pointer that this object owns, for
       *  situations such as passing to a function which only accepts
       *  a raw pointer.
       *
       *  @note  This %auto_ptr no longer owns the memory.  When this object
       *  goes out of scope, nothing will happen.
       */"	declaration of release
"/**
       *  @brief  Bypassing the smart pointer.
       *  @return  The raw pointer being managed.
       *
       *  You can get a copy of the pointer that this object owns, for
       *  situations such as passing to a function which only accepts
       *  a raw pointer.
       *
       *  @note  This %auto_ptr still owns the memory.
       */"	declaration of get
"/**
       *  @brief  Smart pointer dereferencing.
       *
       *  This returns the pointer itself, which the language then will
       *  automatically cause to be dereferenced.
       */"	declaration of operator->
"/**
       *  @brief  Smart pointer dereferencing.
       *
       *  If this %auto_ptr no longer owns anything, then this
       *  operation will crash.  (For a smart pointer, <em>no longer owns
       *  anything</em> is the same as being a null pointer, and you know
       *  what happens when you dereference one of those...)
       */"	declaration of operator*
"/**
       *  When the %auto_ptr goes out of scope, the object it owns is
       *  deleted.  If it no longer owns anything (i.e., @c get() is
       *  @c NULL), then this has no effect.
       *
       *  The C++ standard says there is supposed to be an empty throw
       *  specification here, but omitting it is standard conforming.  Its
       *  presence can be detected only if _Tp::~_Tp() throws, but this is
       *  prohibited.  [17.4.3.6]/2
       */"	declaration of ~auto_ptr
"/**
       *  @brief  %auto_ptr assignment operator.
       *  @param  __a  Another %auto_ptr of a different but related type.
       *
       *  A pointer-to-Tp1 must be convertible to a pointer-to-Tp/element_type.
       *
       *  This object now @e owns the object previously owned by @a __a,
       *  which has given up ownership.  The object that this one @e
       *  used to own and track has been deleted.
       */"	definition of operator=
"/**
       *  @brief  %auto_ptr assignment operator.
       *  @param  __a  Another %auto_ptr of the same type.
       *
       *  This object now @e owns the object previously owned by @a __a,
       *  which has given up ownership.  The object that this one @e
       *  used to own and track has been deleted.
       */"	declaration of operator=
"/**
       *  @brief  An %auto_ptr can be constructed from another %auto_ptr.
       *  @param  __a  Another %auto_ptr of a different but related type.
       *
       *  A pointer-to-Tp1 must be convertible to a
       *  pointer-to-Tp/element_type.
       *
       *  This object now @e owns the object previously owned by @a __a,
       *  which has given up ownership.
       */"	definition of auto_ptr
"/**
       *  @brief  An %auto_ptr can be constructed from another %auto_ptr.
       *  @param  __a  Another %auto_ptr of the same type.
       *
       *  This object now @e owns the object previously owned by @a __a,
       *  which has given up ownership.
       */"	declaration of auto_ptr
"/**
       *  @brief  An %auto_ptr is usually constructed from a raw pointer.
       *  @param  __p  A pointer (defaults to NULL).
       *
       *  This object now @e owns the object pointed to by @a __p.
       */"	declaration of auto_ptr
/// The pointed-to type.	declaration of element_type
"/**
   *  @brief  A simple smart pointer providing strict ownership semantics.
   *
   *  The Standard says:
   *  <pre>
   *  An @c auto_ptr owns the object it holds a pointer to.  Copying
   *  an @c auto_ptr copies the pointer and transfers ownership to the
   *  destination.  If more than one @c auto_ptr owns the same object
   *  at the same time the behavior of the program is undefined.
   *
   *  The uses of @c auto_ptr include providing temporary
   *  exception-safety for dynamically allocated memory, passing
   *  ownership of dynamically allocated memory to a function, and
   *  returning dynamically allocated memory from a function.  @c
   *  auto_ptr does not meet the CopyConstructible and Assignable
   *  requirements for Standard Library <a
   *  href=""tables.html#65"">container</a> elements and thus
   *  instantiating a Standard Library container with an @c auto_ptr
   *  results in undefined behavior.
   *  </pre>
   *  Quoted from [20.4.5]/3.
   *
   *  Good examples of what can and cannot be done with auto_ptr can
   *  be found in the libstdc++ testsuite.
   *
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  127.  auto_ptr<> conversion issues
   *  These resolutions have all been incorporated.
   */"	definition of auto_ptr<_Tp>
"/**
   *  A wrapper class to provide auto_ptr with reference semantics.
   *  For example, an auto_ptr can be assigned (or constructed from)
   *  the result of a function which returns an auto_ptr by value.
   *
   *  All the auto_ptr_ref stuff should happen behind the scenes.
   */"	definition of auto_ptr_ref<_Tp1>
"/** @file backward/auto_ptr.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{memory}
 */"	#ifndef _BACKWARD_AUTO_PTR_H
/* _GLIBCXX_MEMORY */	#endif
// C++17	#endif
// Feature test macro for parallel algorithms	#endif
// Otherwise just pull in forward declarations	#endif
// If <execution> has already been included, pull in implementations	#else
// Parallel STL algorithms	#if __PSTL_EXECUTION_POLICIES_DEFINED
// C++11	#endif
// namespace	#endif
// C++2a	#endif
// This is a temporary workaround until -fconcepts is implied by -std=gnu++2a	#if __cpp_concepts
// C++2a	#endif
/// Inform the compiler that a pointer is aligned.	#endif
// 20.7.4 [util.dynamic.safety], pointer safety	definition of pointer_safety
// Cannot use std::uintptr_t so assume that std::size_t can be used instead.	#endif
"/**
 *  @brief Fit aligned storage in buffer.
 *
 *  [ptr.align]
 *
 *  This function tries to fit @a __size bytes of storage with alignment
 *  @a __align into the buffer @a __ptr of size @a __space bytes.  If such
 *  a buffer fits then @a __ptr is changed to point to the first byte of the
 *  aligned storage and @a __space is reduced by the bytes used for alignment.
 *
 *  @param __align   A fundamental or extended alignment value.
 *  @param __size    Size of the aligned storage required.
 *  @param __ptr     Pointer to a buffer of @a __space bytes.
 *  @param __space   Size of the buffer pointed to by @a __ptr.
 *  @return the updated pointer if the aligned storage fits, otherwise nullptr.
 */"	definition of align
// for tuple, make_tuple, make_from_tuple	#endif
"/** @file include/memory
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_MEMORY
// _GLIBCXX_NUMERIC_LIMITS	#endif
// namespace	#undef __glibcxx_signed
/// numeric_limits<long double> specialization.	definition of numeric_limits<long double>
/// numeric_limits<double> specialization.	definition of numeric_limits<double>
/// numeric_limits<float> specialization.	definition of numeric_limits<float>
/// numeric_limits<unsigned long long> specialization.	definition of numeric_limits<unsigned long long>
/// numeric_limits<long long> specialization.	definition of numeric_limits<long long>
/// numeric_limits<unsigned long> specialization.	definition of numeric_limits<unsigned long>
/// numeric_limits<long> specialization.	definition of numeric_limits<long>
/// numeric_limits<unsigned int> specialization.	definition of numeric_limits<unsigned int>
/// numeric_limits<int> specialization.	definition of numeric_limits<int>
/// numeric_limits<unsigned short> specialization.	definition of numeric_limits<unsigned short>
/// numeric_limits<short> specialization.	definition of numeric_limits<short>
/// numeric_limits<char32_t> specialization.	definition of numeric_limits<char32_t>
/// numeric_limits<char16_t> specialization.	definition of numeric_limits<char16_t>
/// numeric_limits<char8_t> specialization.	#endif
/// numeric_limits<wchar_t> specialization.	definition of numeric_limits<wchar_t>
/// numeric_limits<unsigned char> specialization.	definition of numeric_limits<unsigned char>
/// numeric_limits<signed char> specialization.	definition of numeric_limits<signed char>
/// numeric_limits<char> specialization.	definition of numeric_limits<char>
// promotion semantics.	definition of traps
/// numeric_limits<bool> specialization.	definition of numeric_limits<bool>
// 559. numeric_limits<const T>	definition of numeric_limits<const _Tp>
"/** The minimum positive denormalized value.  For types where
	  @c has_denorm is false, this is the minimum positive normalized
	  value.  */"	declaration of denorm_min
"/** The representation of a signaling Not a Number, if
	  @c has_signaling_NaN. */"	declaration of signaling_NaN
"/** The representation of a quiet Not a Number,
	  if @c has_quiet_NaN. */"	declaration of quiet_NaN
/** The representation of positive infinity, if @c has_infinity.  */	declaration of infinity
/** The maximum rounding error measurement (see LIA-1).  */	declaration of round_error
"/** The @e machine @e epsilon:  the difference between 1 and the least
	  value greater than 1 that is representable.  */"	declaration of epsilon
"/** A finite value x such that there is no other finite value y
       *  where y < x.  */"	#endif
/** The maximum finite value.  */	#if __cplusplus >= 201103L
"/**
   *  @brief Properties of fundamental types.
   *
   *  This class allows a program to obtain information about the
   *  representation of a fundamental type on a given platform.  For
   *  non-fundamental types, the functions will return 0 and the data
   *  members will all be @c false.
  */"	definition of numeric_limits<_Tp>
"/** See std::float_round_style for more information.  This is only
	meaningful for floating types; integer types will all be
	round_toward_zero.  */"	definition of round_style
/** True if tininess is detected before rounding.  (see IEC 559)  */	definition of tinyness_before
/** True if trapping is implemented for this type.  */	definition of traps
"/** True if the type is @e modulo. A type is modulo if, for any
	operation involving +, -, or * on values of that type whose
	result would fall outside the range [min(),max()], the value
	returned differs from the true value by an integer multiple of
	max() - min() + 1. On most machines, this is false for floating
	types, true for unsigned integers, and true for signed integers.
	See PR22200 about signed integers.  */"	definition of is_modulo
"/** True if the set of values representable by the type is
	finite.  All built-in types are bounded, this member would be
	false for arbitrary precision types. */"	definition of is_bounded
"/** True if-and-only-if the type adheres to the IEC 559 standard, also
	known as IEEE 754.  (Only makes sense for floating point types.)  */"	definition of is_iec559
"/** True if loss of accuracy is detected as a denormalization loss,
	rather than as an inexact result. */"	definition of has_denorm_loss
/** See std::float_denorm_style for more information.  */	definition of has_denorm
"/** True if the type has a representation for a signaling
	Not a Number.  */"	definition of has_signaling_NaN
"/** True if the type has a representation for a quiet (non-signaling)
	Not a Number.  */"	definition of has_quiet_NaN
/** True if the type has a representation for positive infinity.  */	definition of has_infinity
"/** The maximum positive integer such that 10 raised to that power is in
	the range of representable finite floating point numbers.  */"	definition of max_exponent10
"/** The maximum positive integer such that @c radix raised to the power of
	(one less than that integer) is a representable finite floating point
	number.  */"	definition of max_exponent
"/** The minimum negative integer such that 10 raised to that power is in
	the range of normalized floating point numbers.  */"	definition of min_exponent10
"/** The minimum negative integer such that @c radix raised to the power of
	(one less than that integer) is a normalized floating point number.  */"	definition of min_exponent
"/** For integer types, specifies the base of the representation.  For
	floating types, specifies the base of the exponent representation.  */"	definition of radix
"/** True if the type uses an exact representation. All integer types are
	exact, but not all exact types are integer.  For example, rational and
	fixed-exponent representations are exact but not integer. */"	definition of is_exact
/** True if the type is integer.  */	definition of is_integer
/** True if the type is signed.  */	definition of is_signed
"/** The number of base 10 digits required to ensure that values which
	differ are always differentiated.  */"	definition of max_digits10
/** The number of base 10 digits that can be represented without change. */	definition of digits10
"/** The number of @c radix digits that be represented without change:  for
	integer types, the number of non-sign bits in the mantissa; for
	floating types, the number of @c radix digits in the mantissa.  */"	definition of digits
"/** This will be true for all fundamental types (which have
	specializations), and false for everything else.  */"	definition of is_specialized
"/**
   *  @brief Part of std::numeric_limits.
   *
   *  The @c static @c const members are usable as integral constant
   *  expressions.
   *
   *  @note This is a separate class for purposes of efficiency; you
   *        should only access these members as part of an instantiation
   *        of the std::numeric_limits class.
  */"	definition of __numeric_limits_base
/// The type allows denormalized values.	denorm_present
/// The type does not allow denormalized values.	denorm_absent
/// Indeterminate at compile time whether denormalized values are allowed.	denorm_indeterminate
"/**
   *  @brief Describes the denormalization for floating-point types.
   *
   *  These values represent the presence or absence of a variable number
   *  of exponent bits.  This type is used in the std::numeric_limits class.
  */"	definition of float_denorm_style
/// To negative infinity.	round_toward_neg_infinity
/// To infinity.	round_toward_infinity
/// To the nearest representable value.	round_to_nearest
/// To zero.	round_toward_zero
/// Intermediate.	round_indeterminate
"/**
   *  @brief Describes the rounding style for floating-point types.
   *
   *  This is used in the std::numeric_limits class.
  */"	definition of float_round_style
// The fraction 643/2136 approximates log10(2) to 7 significant digits.	#define __glibcxx_digits10_b(T,B) (__glibcxx_digits_b (T,B) * 643L / 2136)
// You should not need to define any macros below this point.	#define __glibcxx_signed_b(T,B) ((T)(-1) < 0)
// Default values.  Should be overridden in configuration files if necessary.	#ifndef __glibcxx_long_double_has_denorm_loss
// Default values.  Should be overridden in configuration files if necessary.	#ifndef __glibcxx_double_has_denorm_loss
// Default values.  Should be overridden in configuration files if necessary.	#ifndef __glibcxx_float_has_denorm_loss
"// signal division by zero in some ""hard to ignore"" way should use false."	#ifndef __glibcxx_integral_traps
//	#ifndef _GLIBCXX_NUMERIC_LIMITS
// _HASHTABLE_POLICY_H	#endif
// namespace std	#endif
// functions.	definition of _M_allocate_node
// Deallocate the linked list of nodes pointed to by __n	declaration of _M_deallocate_nodes
// Use __gnu_cxx to benefit from _S_always_equal and al.	declaration of __node_alloc_traits
"/**
   * This type deals with all allocation and keeps an allocator instance through
   * inheritance to benefit from EBO when possible.
   */"	definition of _Hashtable_alloc<_NodeAlloc>
/// Specialization.	definition of _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false>
/// Specialization.	definition of _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
// See std::is_permutation in N3068.	definition of _S_is_permutation
"/**
   *  struct _Equality_base.
   *
   *  Common types and functions for class _Equality.
   */"	definition of _Equality_base
"/**
   *  Primary class template _Hashtable_base.
   *
   *  Helper class adding management of _Equal functor to
   *  _Hash_code_base type.
   *
   *  Base class templates are:
   *    - __detail::_Hash_code_base
   *    - __detail::_Hashtable_ebo_helper
   */"	definition of _Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>
/// local const_iterators	definition of _Local_const_iterator<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __constant_iterators, __cache>
/// local iterators	definition of _Local_iterator<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __constant_iterators, __cache>
// for debug mode	declaration of _M_get_bucket
// for equality ops and debug mode	declaration of _M_curr
// Partial specialization used when hash codes are not cached	definition of _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>
// the cast pointer, so no strict-aliasing violation.	declaration of _M_h
// Empty partial specialization for empty _Hash_code_base types.	definition of _Hash_code_storage<_Tp, true>
// can be DefaultConstructible and Assignable.	definition of _Hash_code_storage<_Tp, _IsEmpty>
// for debug mode	declaration of _M_get_bucket
// for equality ops	declaration of _M_curr
/// Partial specialization used when nodes contain a cached hash code.	definition of _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, true>
/// Specialization.	definition of _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, false>
/// Specialization.	definition of _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
// We need the default constructor for _Hashtable default constructor.	declaration of _Hash_code_base
/// typedef and accessor required by C++ 11.	definition of _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Default_ranged_hash, true>
// default constructor.	declaration of _Hash_code_base
/// Provides typedef and accessor required by C++ 11.	definition of _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Default_ranged_hash, false>
// default constructor.	declaration of _Hash_code_base
/// and H2 are provided but ignored.  We define a dummy hash code type.	definition of _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>
/// Specialization not using EBO.	definition of _Hashtable_ebo_helper<_Nm, _Tp, false>
/// Specialization using EBO.	definition of _Hashtable_ebo_helper<_Nm, _Tp, true>
/// Specialization when rehash policy provide load factor management.	definition of _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true_type>
/// Specialization when rehash policy doesn't provide load factor management.	definition of _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false_type>
/// Specialization.	definition of _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false>
/// Specialization.	definition of _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
"/**
   *  Primary class template _Insert_base.
   *
   *  Defines @c insert member functions appropriate to all _Hashtables.
   */"	definition of _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>
// DR 761. unordered_map needs an at() member function.	declaration of at
/// Partial specialization, __unique_keys set to true.	definition of _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
/// Partial specialization, __unique_keys set to false.	definition of _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false>
"/**
   *  Primary class template _Map_base.
   *
   *  If the hashtable has a value type of the form pair<T1, T2> and a
   *  key extraction policy (_ExtractKey) that returns the first part
   *  of the pair, the hashtable gets a mapped_type typedef.  If it
   *  satisfies those criteria and also has unique keys, then it also
   *  gets an operator[].
   */"	definition of _Map_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, _Unique_keys>
// is the new bucket count.  If not, return make_pair(false, 0).	definition of _M_need_rehash
// Return a bucket count appropriate for n elements	definition of _M_bkt_for_elements
// Note that it might result in max_load_factor not being respected.	ExprStmt
// highest power of 2).	definition of _M_next_bkt
/// operations.	definition of _Power2_rehash_policy
// Doing two shifts avoids undefined behaviour when __lz == 0.	return ...
// Equivalent to return __n ? std::ceil2(__n) : 0;	if (...) ... 
/// Compute closest power of 2 not less than __n	definition of __clp2
/// Range hashing function assuming that second arg is a power of 2.	definition of _Mask_range_hashing
// is the new bucket count.  If not, return make_pair(false, 0).	declaration of _M_need_rehash
// Return a bucket count appropriate for n elements	definition of _M_bkt_for_elements
// Return a bucket size no smaller than n.	declaration of _M_next_bkt
/// smallest prime that keeps the load factor small enough.	definition of _Prime_rehash_policy
/// hashtable to do that composition.	definition of _Default_ranged_hash
/// into the range [0, N).	definition of _Mod_range_hashing
/// Node const_iterators, used to iterate through all the hashtable.	definition of _Node_const_iterator<_Value, __constant_iterators, __cache>
/// Node iterators, used to iterate through all the hashtable.	definition of _Node_iterator<_Value, __constant_iterators, __cache>
/// Base class for node iterators.	definition of _Node_iterator_base<_Value, _Cache_hash_code>
"/**
   *  Specialization for nodes without caches, struct _Hash_node.
   *
   *  Base class is __detail::_Hash_node_value_base.
   */"	definition of _Hash_node<_Value, false>
"/**
   *  Specialization for nodes with caches, struct _Hash_node.
   *
   *  Base class is __detail::_Hash_node_value_base.
   */"	definition of _Hash_node<_Value, true>
"/**
   *  struct _Hash_node_value_base
   *
   *  Node type with the value to store.
   */"	definition of _Hash_node_value_base<_Value>
"/**
   *  struct _Hash_node_base
   *
   *  Nodes, used to wrap elements stored in the hash table.  A policy
   *  template parameter of class template _Hashtable controls whether
   *  nodes also store a hash code. In some cases (e.g. strings) this
   *  may be a performance win.
   */"	definition of _Hash_node_base
"/**
   *  struct _Hashtable_traits
   *
   *  Important traits for hash tables.
   *
   *  @tparam _Cache_hash_code  Boolean value. True if the value of
   *  the hash function is stored along with the value. This is a
   *  time-space tradeoff.  Storing it may improve lookup speed by
   *  reducing the number of times we need to call the _Equal
   *  function.
   *
   *  @tparam _Constant_iterators  Boolean value. True if iterator and
   *  const_iterator are both constant iterator types. This is true
   *  for unordered_set and unordered_multiset, false for
   *  unordered_map and unordered_multimap.
   *
   *  @tparam _Unique_keys  Boolean value. True if the return value
   *  of _Hashtable::count(k) is always at most one, false if it may
   *  be an arbitrary number. This is true for unordered_set and
   *  unordered_map, false for unordered_multiset and
   *  unordered_multimap.
   */"	definition of _Hashtable_traits<_Cache_hash_code, _Constant_iterators, _Unique_keys>
// recycle.	definition of _AllocNode<_NodeAlloc>
// empty.	definition of _ReuseOrAllocNode<_NodeAlloc>
// iterators, or 0/1 for input iterators.	definition of __distance_fw
// for std::min.	std
"/** @file bits/hashtable_policy.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly.
 *  @headername{unordered_map,unordered_set}
 */"	#ifndef _HASHTABLE_POLICY_H
// _HASHTABLE_H	#endif
// namespace std	#endif
// Used to constrain deduction guides	#endif
// C++17	#endif
// insertions into __prev_bkt bucket.	#if __cplusplus > 201402L
// order.	definition of _M_rehash_aux
// Rehash when there is no equivalent elements.	definition of _M_rehash_aux
// No rehash, restore previous state to keep a consistent state.	definition of _M_rehash
// Deallocate nodes.	definition of erase
// We found a matching node, erase it.	definition of _M_erase
// this search fast.	definition of _M_erase
// Second allocate new node so that we don't rehash if it throws.	definition of erase
// Insert v unconditionally.	definition of _M_insert
// Insert v if no element with its key is already present.	definition of _M_insert
// already present). Take ownership of the node, deallocate it on exception.	definition of _M_insert_multi_node
// First build the node to get its hash code.	definition of _M_insert_unique_node
// Insert the node	definition of _M_emplace
// Second update before begin node if necessary	definition of _M_get_previous_node
// _M_before_begin.	definition of _M_remove_bucket_begin
// Return nullptr if no node is found.	definition of _M_find_before_node
// means that we won't find any new equivalent value.	definition of equal_range
// swapped.	definition of find
// moved.	definition of ~_Hashtable
// moved.	definition of _Hashtable
// Can't move memory, move elements then.	definition of _Hashtable
// moved.	definition of _M_move_assign
// Then deal with other nodes.	definition of _M_reset
// Restore previous buckets.	definition of _M_assign
// Reuse allocated buckets and nodes.	definition of _M_assign_elements
// Definitions of class template _Hashtable's out-of-line member functions.	definition of _M_bucket_begin
// hash policy state to __state on exception.	declaration of _M_rehash
// Helper rehash method used when keys can be non-unique.	declaration of _M_rehash_aux
// Helper rehash method used when keys are unique.	declaration of _M_rehash_aux
/// Merge from a compatible container into one with equivalent keys.	#endif
// reserve, if present, comes from _Rehash_base.	#if __cplusplus > 201402L
// which must then be default constructible.	#if __cplusplus > 201402L
"/**
   *  Primary class template _Hashtable.
   *
   *  @ingroup hashtable-detail
   *
   *  @tparam _Value  CopyConstructible type.
   *
   *  @tparam _Key    CopyConstructible type.
   *
   *  @tparam _Alloc  An allocator type
   *  ([lib.allocator.requirements]) whose _Alloc::value_type is
   *  _Value.  As a conforming extension, we allow for
   *  _Alloc::value_type != _Value.
   *
   *  @tparam _ExtractKey  Function object that takes an object of type
   *  _Value and returns a value of type _Key.
   *
   *  @tparam _Equal  Function object that takes two objects of type k
   *  and returns a bool-like value that is true if the two objects
   *  are considered equal.
   *
   *  @tparam _H1  The hash function. A unary function object with
   *  argument type _Key and result type size_t. Return values should
   *  be distributed over the entire range [0, numeric_limits<size_t>:::max()].
   *
   *  @tparam _H2  The range-hashing function (in the terminology of
   *  Tavori and Dreizin).  A binary function object whose argument
   *  types and result type are all size_t.  Given arguments r and N,
   *  the return value is in the range [0, N).
   *
   *  @tparam _Hash  The ranged hash function (Tavori and Dreizin). A
   *  binary function whose argument types are _Key and size_t and
   *  whose result type is size_t.  Given arguments k and N, the
   *  return value is in the range [0, N).  Default: hash(k, N) =
   *  h2(h1(k), N).  If _Hash is anything other than the default, _H1
   *  and _H2 are ignored.
   *
   *  @tparam _RehashPolicy  Policy class with three members, all of
   *  which govern the bucket count. _M_next_bkt(n) returns a bucket
   *  count no smaller than n.  _M_bkt_for_elements(n) returns a
   *  bucket count appropriate for an element count of n.
   *  _M_need_rehash(n_bkt, n_elt, n_ins) determines whether, if the
   *  current bucket count is n_bkt and the current element count is
   *  n_elt, we need to increase the bucket count.  If so, returns
   *  make_pair(true, n), where n is the new bucket count.  If not,
   *  returns make_pair(false, <anything>)
   *
   *  @tparam _Traits  Compile-time class with three boolean
   *  std::integral_constant members:  __cache_hash_code, __constant_iterators,
   *   __unique_keys.
   *
   *  Each _Hashtable data structure has:
   *
   *  - _Bucket[]       _M_buckets
   *  - _Hash_node_base _M_before_begin
   *  - size_type       _M_bucket_count
   *  - size_type       _M_element_count
   *
   *  with _Bucket being _Hash_node* and _Hash_node containing:
   *
   *  - _Hash_node*   _M_next
   *  - Tp            _M_value
   *  - size_t        _M_hash_code if cache_hash_code is true
   *
   *  In terms of Standard containers the hashtable is like the aggregation of:
   *
   *  - std::forward_list<_Node> containing the elements
   *  - std::vector<std::forward_list<_Node>::iterator> representing the buckets
   *
   *  The non-empty buckets contain the node before the first node in the
   *  bucket. This design makes it possible to implement something like a
   *  std::forward_list::insert_after on container insertion and
   *  std::forward_list::erase_after on container erase
   *  calls. _M_before_begin is equivalent to
   *  std::forward_list::before_begin. Empty buckets contain
   *  nullptr.  Note that one of the non-empty buckets contains
   *  &_M_before_begin which is not a dereferenceable node so the
   *  node pointer in a bucket shall never be dereferenced, only its
   *  next node can be.
   *
   *  Walking through a bucket's nodes requires a check on the hash code to
   *  see if each node is still in the bucket. Such a design assumes a
   *  quite efficient hash functor and is one of the reasons it is
   *  highly advisable to set __cache_hash_code to true.
   *
   *  The container iterators are simply built from nodes. This way
   *  incrementing the iterator is perfectly efficient independent of
   *  how many empty buckets there are in the container.
   *
   *  On insert we compute the element's hash code and use it to find the
   *  bucket index. If the element must be inserted in an empty bucket
   *  we add it at the beginning of the singly linked list and make the
   *  bucket point to _M_before_begin. The bucket that used to point to
   *  _M_before_begin, if any, is updated to point to its new before
   *  begin node.
   *
   *  On erase, the simple iterator design requires using the hash
   *  functor to get the index of the bucket to update. For this
   *  reason, when __cache_hash_code is set to false the hash functor must
   *  not throw and this is enforced by a static assertion.
   *
   *  Functionality is implemented by decomposition into base classes,
   *  where the derived _Hashtable class is used in _Map_base,
   *  _Insert, _Rehash_base, and _Equality base classes to access the
   *  ""this"" pointer. _Hashtable_base is used in the base classes as a
   *  non-recursive, fully-completed-type so that detailed nested type
   *  information, such as iterator type and node type, can be
   *  used. This is similar to the ""Curiously Recurring Template
   *  Pattern"" (CRTP) technique, but uses a reconstructed, not
   *  explicitly passed, template pattern.
   *
   *  Base class templates are: 
   *    - __detail::_Hashtable_base
   *    - __detail::_Map_base
   *    - __detail::_Insert
   *    - __detail::_Rehash_base
   *    - __detail::_Equality
   */"	definition of _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>
"/** @file bits/hashtable.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{unordered_map, unordered_set}
 */"	#ifndef _HASHTABLE_H
/* _UNORDERED_MAP_H */	#endif
// namespace std	#endif
// C++17	#endif
// Allow std::unordered_multimap access to internals of compatible maps.	#endif
"/**
       *  @brief  Prepare the %unordered_multimap for a specified number of
       *          elements.
       *  @param  __n Number of elements required.
       *
       *  Same as rehash(ceil(n / max_load_factor())).
       */"	declaration of reserve
"/**
       *  @brief  May rehash the %unordered_multimap.
       *  @param  __n The new number of buckets.
       *
       *  Rehash will occur only if the new number of buckets respect the
       *  %unordered_multimap maximum load factor.
       */"	declaration of rehash
"/**
       *  @brief  Change the %unordered_multimap maximum load factor.
       *  @param  __z The new maximum load factor.
       */"	declaration of max_load_factor
/// the load factor less than or equal to.	declaration of max_load_factor
/// Returns the average number of elements per bucket.	declaration of load_factor
"/**
       *  @brief  Returns a read-only (constant) iterator pointing to one past
       *         the last bucket elements.
       *  @param  __n The bucket index.
       *  @return  A read-only local iterator.
       */"	declaration of end
"/**
       *  @brief  Returns a read/write iterator pointing to one past the last
       *         bucket elements.
       *  @param  __n The bucket index.
       *  @return  A read/write local iterator.
       */"	declaration of end
"/**
       *  @brief  Returns a read-only (constant) iterator pointing to the first
       *         bucket element.
       *  @param  __n The bucket index.
       *  @return  A read-only local iterator.
       */"	declaration of begin
"/**
       *  @brief  Returns a read/write iterator pointing to the first bucket
       *         element.
       *  @param  __n The bucket index.
       *  @return  A read/write local iterator.
       */"	declaration of begin
"/*
       * @brief  Returns the bucket index of a given element.
       * @param  __key  A key instance.
       * @return  The key bucket index.
       */"	declaration of bucket
"/*
       * @brief  Returns the number of elements in a given bucket.
       * @param  __n  A bucket index.
       * @return  The number of elements in the bucket.
       */"	declaration of bucket_size
/// Returns the maximum number of buckets of the %unordered_multimap.	declaration of max_bucket_count
/// Returns the number of buckets of the %unordered_multimap.	declaration of bucket_count
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return  Pair of iterators that possibly points to the subsequence
       *           matching given key.
       */"	declaration of equal_range
"/**
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of elements to be located.
       *  @return  True if there is any element with the specified key.
       */"	#endif
"/**
       *  @brief  Finds the number of elements.
       *  @param  __x  Key to count.
       *  @return  Number of elements with specified key.
       */"	#if __cplusplus > 201703L
// C++17	#endif
"/**
       *  @brief  Swaps data with another %unordered_multimap.
       *  @param  __x  An %unordered_multimap of the same element and allocator
       *  types.
       *
       *  This exchanges the elements between two %unordered_multimap in
       *  constant time.
       *  Note that the global std::swap() function is specialized such that
       *  std::swap(m1,m2) will feed to this function.
       */"	#if __cplusplus > 201402L
// C++17	#endif
/// Re-insert an extracted node.	#endif
"/**
       *  @brief Attempts to insert a list of elements into the
       *  %unordered_multimap.
       *  @param  __l  A std::initializer_list<value_type> of elements
       *               to be inserted.
       *
       *  Complexity similar to that of the range constructor.
       */"	#if __cplusplus > 201402L
//@}	#if __cplusplus > 201402L
"/**
   *  @brief A standard container composed of equivalent keys
   *  (possibly containing multiple of each key value) that associates
   *  values of another type with the keys.
   *
   *  @ingroup unordered_associative_containers
   *
   *  @tparam  _Key    Type of key objects.
   *  @tparam  _Tp     Type of mapped objects.
   *  @tparam  _Hash   Hashing function object type, defaults to hash<_Value>.
   *  @tparam  _Pred   Predicate function object type, defaults
   *                   to equal_to<_Value>.
   *  @tparam  _Alloc  Allocator type, defaults to
   *                   std::allocator<std::pair<const _Key, _Tp>>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, and
   *  <a href=""tables.html#xx"">unordered associative container</a>
   *
   * The resulting value type of the container is std::pair<const _Key, _Tp>.
   *
   *  Base is _Hashtable, dispatched at compile time via template
   *  alias __ummap_hashtable.
   */"	definition of unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>
"/**
       *  @brief  Prepare the %unordered_map for a specified number of
       *          elements.
       *  @param  __n Number of elements required.
       *
       *  Same as rehash(ceil(n / max_load_factor())).
       */"	declaration of reserve
"/**
       *  @brief  May rehash the %unordered_map.
       *  @param  __n The new number of buckets.
       *
       *  Rehash will occur only if the new number of buckets respect the
       *  %unordered_map maximum load factor.
       */"	declaration of rehash
"/**
       *  @brief  Change the %unordered_map maximum load factor.
       *  @param  __z The new maximum load factor.
       */"	declaration of max_load_factor
/// load factor less than or equal to.	declaration of max_load_factor
/// Returns the average number of elements per bucket.	declaration of load_factor
"/**
       *  @brief  Returns a read-only (constant) iterator pointing to one past
       *         the last bucket elements.
       *  @param  __n The bucket index.
       *  @return  A read-only local iterator.
       */"	declaration of end
"/**
       *  @brief  Returns a read/write iterator pointing to one past the last
       *         bucket elements.
       *  @param  __n The bucket index.
       *  @return  A read/write local iterator.
       */"	declaration of end
"/**
       *  @brief  Returns a read-only (constant) iterator pointing to the first
       *         bucket element.
       *  @param  __n The bucket index.
       *  @return  A read-only local iterator.
       */"	declaration of begin
"/**
       *  @brief  Returns a read/write iterator pointing to the first bucket
       *         element.
       *  @param  __n The bucket index.
       *  @return  A read/write local iterator.
       */"	declaration of begin
"/*
       * @brief  Returns the bucket index of a given element.
       * @param  __key  A key instance.
       * @return  The key bucket index.
       */"	declaration of bucket
"/*
       * @brief  Returns the number of elements in a given bucket.
       * @param  __n  A bucket index.
       * @return  The number of elements in the bucket.
       */"	declaration of bucket_size
/// Returns the maximum number of buckets of the %unordered_map.	declaration of max_bucket_count
/// Returns the number of buckets of the %unordered_map.	declaration of bucket_count
"/**
       *  @brief  Access to %unordered_map data.
       *  @param  __k  The key for which data should be retrieved.
       *  @return  A reference to the data whose key is equal to @a __k, if
       *           such a data is present in the %unordered_map.
       *  @throw  std::out_of_range  If no such data is present.
       */"	declaration of at
"/**
       *  @brief  Subscript ( @c [] ) access to %unordered_map data.
       *  @param  __k  The key for which data should be retrieved.
       *  @return  A reference to the data of the (key,data) %pair.
       *
       *  Allows for easy lookup with the subscript ( @c [] )operator.  Returns
       *  data associated with the key specified in subscript.  If the key does
       *  not exist, a pair with that key is created using default values, which
       *  is then returned.
       *
       *  Lookup requires constant time.
       */"	definition of operator[]
"/**
       *  @brief  Subscript ( @c [] ) access to %unordered_map data.
       *  @param  __k  The key for which data should be retrieved.
       *  @return  A reference to the data of the (key,data) %pair.
       *
       *  Allows for easy lookup with the subscript ( @c [] )operator.  Returns
       *  data associated with the key specified in subscript.  If the key does
       *  not exist, a pair with that key is created using default values, which
       *  is then returned.
       *
       *  Lookup requires constant time.
       */"	declaration of operator[]
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return  Pair of iterators that possibly points to the subsequence
       *           matching given key.
       *
       *  This function probably only makes sense for %unordered_multimap.
       */"	declaration of equal_range
"/**
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of elements to be located.
       *  @return  True if there is any element with the specified key.
       */"	#endif
"/**
       *  @brief  Finds the number of elements.
       *  @param  __x  Key to count.
       *  @return  Number of elements with specified key.
       *
       *  This function only makes sense for %unordered_multimap; for
       *  %unordered_map the result will either be 0 (not present) or 1
       *  (present).
       */"	#if __cplusplus > 201703L
// C++17	#endif
"/**
       *  @brief  Swaps data with another %unordered_map.
       *  @param  __x  An %unordered_map of the same element and allocator
       *  types.
       *
       *  This exchanges the elements between two %unordered_map in constant
       *  time.
       *  Note that the global std::swap() function is specialized such that
       *  std::swap(m1,m2) will feed to this function.
       */"	#if __cplusplus > 201402L
// move-capable overload	#endif
"/**
       *  @brief Attempts to insert a list of elements into the %unordered_map.
       *  @param  __l  A std::initializer_list<value_type> of elements
       *               to be inserted.
       *
       *  Complexity similar to that of the range constructor.
       */"	#if __cplusplus > 201402L
// C++17	#endif
// move-capable overload	#endif
"/**
       *  @brief Attempts to build and insert a std::pair into the
       *  %unordered_map.
       *
       *  @param  __pos  An iterator that serves as a hint as to where the pair
       *                should be inserted.
       *  @param  __args  Arguments used to generate a new pair instance (see
       *	         std::piecewise_contruct for passing arguments to each
       *	         part of the pair constructor).
       *  @return An iterator that points to the element with key of the
       *          std::pair built from @a __args (may or may not be that
       *          std::pair).
       *
       *  This function is not concerned about whether the insertion took place,
       *  and thus does not return a boolean like the single-argument emplace()
       *  does.
       *  Note that the first parameter is only a hint and can potentially
       *  improve the performance of the insertion process. A bad hint would
       *  cause no gains in efficiency.
       *
       *  See
       *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       *  for more on @a hinting.
       *
       *  Insertion requires amortized constant time.
       */"	#if __cplusplus > 201402L
//@}	#if __cplusplus > 201402L
"/**
   *  @brief A standard container composed of unique keys (containing
   *  at most one of each key value) that associates values of another type
   *  with the keys.
   *
   *  @ingroup unordered_associative_containers
   *
   *  @tparam  _Key    Type of key objects.
   *  @tparam  _Tp     Type of mapped objects.
   *  @tparam  _Hash   Hashing function object type, defaults to hash<_Value>.
   *  @tparam  _Pred   Predicate function object type, defaults
   *                   to equal_to<_Value>.
   *  @tparam  _Alloc  Allocator type, defaults to 
   *                   std::allocator<std::pair<const _Key, _Tp>>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, and
   *  <a href=""tables.html#xx"">unordered associative container</a>
   *
   * The resulting value type of the container is std::pair<const _Key, _Tp>.
   *
   *  Base is _Hashtable, dispatched at compile time via template
   *  alias __umap_hashtable.
   */"	definition of unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>
/// Base types for unordered_multimap.	definition of __ummap_traits
/// Base types for unordered_map.	definition of __umap_traits
"/** @file bits/unordered_map.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{unordered_map}
 */"	#ifndef _UNORDERED_MAP_H
// _GLIBCXX_ERASE_IF_H	#endif
// C++14	#endif
// namespace std	#endif
"/** @file bits/erase_if.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly.
 */"	#ifndef _GLIBCXX_ERASE_IF_H
// _GLIBCXX_UNORDERED_MAP	#endif
// C++11	#endif
// C++20	#endif
// namespace std	#endif
// C++17	#endif
// namespace std	#endif
"/** @file include/unordered_map
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_UNORDERED_MAP
/* _UNORDERED_SET_H */	#endif
// namespace std	#endif
// C++17	#endif
// Allow std::unordered_multiset access to internals of compatible sets.	#endif
"/**
       *  @brief  Prepare the %unordered_multiset for a specified number of
       *          elements.
       *  @param  __n Number of elements required.
       *
       *  Same as rehash(ceil(n / max_load_factor())).
       */"	declaration of reserve
"/**
       *  @brief  May rehash the %unordered_multiset.
       *  @param  __n The new number of buckets.
       *
       *  Rehash will occur only if the new number of buckets respect the
       *  %unordered_multiset maximum load factor.
       */"	declaration of rehash
"/**
       *  @brief  Change the %unordered_multiset maximum load factor.
       *  @param  __z The new maximum load factor.
       */"	declaration of max_load_factor
/// load factor less than or equal to.	declaration of max_load_factor
/// Returns the average number of elements per bucket.	declaration of load_factor
"/**
       *  @brief  Returns a read-only (constant) iterator pointing to one past
       *         the last bucket elements.
       *  @param  __n The bucket index.
       *  @return  A read-only local iterator.
       */"	declaration of end
"/**
       *  @brief  Returns a read-only (constant) iterator pointing to the first
       *         bucket element.
       *  @param  __n The bucket index.
       *  @return  A read-only local iterator.
       */"	declaration of begin
"/*
       * @brief  Returns the bucket index of a given element.
       * @param  __key  A key instance.
       * @return  The key bucket index.
       */"	declaration of bucket
"/*
       * @brief  Returns the number of elements in a given bucket.
       * @param  __n  A bucket index.
       * @return  The number of elements in the bucket.
       */"	declaration of bucket_size
/// Returns the maximum number of buckets of the %unordered_multiset.	declaration of max_bucket_count
/// Returns the number of buckets of the %unordered_multiset.	declaration of bucket_count
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return  Pair of iterators that possibly points to the subsequence
       *           matching given key.
       */"	declaration of equal_range
"/**
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of elements to be located.
       *  @return  True if there is any element with the specified key.
       */"	#endif
"/**
       *  @brief  Finds the number of elements.
       *  @param  __x  Element to located.
       *  @return  Number of elements with specified key.
       */"	#if __cplusplus > 201703L
// C++17	#endif
"/**
       *  @brief  Swaps data with another %unordered_multiset.
       *  @param  __x  An %unordered_multiset of the same element and allocator
       *  types.
       *
       *  This exchanges the elements between two sets in constant time.
       *  Note that the global std::swap() function is specialized such that
       *  std::swap(s1,s2) will feed to this function.
       */"	#if __cplusplus > 201402L
// C++17	#endif
/// Re-insert an extracted node.	#endif
"/**
       *  @brief Inserts a list of elements into the %unordered_multiset.
       *  @param  __l  A std::initializer_list<value_type> of elements to be
       *              inserted.
       *
       *  Complexity similar to that of the range constructor.
       */"	#if __cplusplus > 201402L
//@}	#if __cplusplus > 201402L
"/**
   *  @brief A standard container composed of equivalent keys
   *  (possibly containing multiple of each key value) in which the
   *  elements' keys are the elements themselves.
   *
   *  @ingroup unordered_associative_containers
   *
   *  @tparam  _Value  Type of key objects.
   *  @tparam  _Hash  Hashing function object type, defaults to hash<_Value>.
   *  @tparam  _Pred  Predicate function object type, defaults
   *                  to equal_to<_Value>.
   *  @tparam  _Alloc  Allocator type, defaults to allocator<_Key>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, and
   *  <a href=""tables.html#xx"">unordered associative container</a>
   *
   *  Base is _Hashtable, dispatched at compile time via template
   *  alias __umset_hashtable.
   */"	definition of unordered_multiset<_Value, _Hash, _Pred, _Alloc>
"/**
       *  @brief  Prepare the %unordered_set for a specified number of
       *          elements.
       *  @param  __n Number of elements required.
       *
       *  Same as rehash(ceil(n / max_load_factor())).
       */"	declaration of reserve
"/**
       *  @brief  Prepare the %unordered_set for a specified number of
       *          elements.
       *  @param  __n Number of elements required.
       *
       *  Same as rehash(ceil(n / max_load_factor())).
       */"	definition of reserve
"/**
       *  @brief  May rehash the %unordered_set.
       *  @param  __n The new number of buckets.
       *
       *  Rehash will occur only if the new number of buckets respect the
       *  %unordered_set maximum load factor.
       */"	declaration of rehash
"/**
       *  @brief  Change the %unordered_set maximum load factor.
       *  @param  __z The new maximum load factor.
       */"	declaration of max_load_factor
/// load factor less than or equal to.	declaration of max_load_factor
/// Returns the average number of elements per bucket.	declaration of load_factor
"/**
       *  @brief  Returns a read-only (constant) iterator pointing to one past
       *         the last bucket elements.
       *  @param  __n The bucket index.
       *  @return  A read-only local iterator.
       */"	declaration of end
"/**
       *  @brief  Returns a read-only (constant) iterator pointing to the first
       *         bucket element.
       *  @param  __n The bucket index.
       *  @return  A read-only local iterator.
       */"	declaration of begin
"/*
       * @brief  Returns the bucket index of a given element.
       * @param  __key  A key instance.
       * @return  The key bucket index.
       */"	declaration of bucket
"/*
       * @brief  Returns the number of elements in a given bucket.
       * @param  __n  A bucket index.
       * @return  The number of elements in the bucket.
       */"	declaration of bucket_size
/// Returns the maximum number of buckets of the %unordered_set.	declaration of max_bucket_count
/// Returns the number of buckets of the %unordered_set.	declaration of bucket_count
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return  Pair of iterators that possibly points to the subsequence
       *           matching given key.
       *
       *  This function probably only makes sense for multisets.
       */"	declaration of equal_range
"/**
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of elements to be located.
       *  @return  True if there is any element with the specified key.
       */"	#endif
"/**
       *  @brief  Finds the number of elements.
       *  @param  __x  Element to located.
       *  @return  Number of elements with specified key.
       *
       *  This function only makes sense for unordered_multisets; for
       *  unordered_set the result will either be 0 (not present) or 1
       *  (present).
       */"	#if __cplusplus > 201703L
// C++17	#endif
"/**
       *  @brief  Swaps data with another %unordered_set.
       *  @param  __x  An %unordered_set of the same element and allocator
       *  types.
       *
       *  This exchanges the elements between two sets in constant time.
       *  Note that the global std::swap() function is specialized such that
       *  std::swap(s1,s2) will feed to this function.
       */"	#if __cplusplus > 201402L
// C++17	#endif
/// Re-insert an extracted node.	#endif
"/**
       *  @brief Attempts to insert a list of elements into the %unordered_set.
       *  @param  __l  A std::initializer_list<value_type> of elements
       *               to be inserted.
       *
       *  Complexity similar to that of the range constructor.
       */"	#if __cplusplus > 201402L
//@}	#if __cplusplus > 201402L
"/**
   *  @brief A standard container composed of unique keys (containing
   *  at most one of each key value) in which the elements' keys are
   *  the elements themselves.
   *
   *  @ingroup unordered_associative_containers
   *
   *  @tparam  _Value  Type of key objects.
   *  @tparam  _Hash  Hashing function object type, defaults to hash<_Value>.

   *  @tparam _Pred Predicate function object type, defaults to
   *                equal_to<_Value>.
   *
   *  @tparam  _Alloc  Allocator type, defaults to allocator<_Key>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, and
   *  <a href=""tables.html#xx"">unordered associative container</a>
   *
   *  Base is _Hashtable, dispatched at compile time via template
   *  alias __uset_hashtable.
   */"	definition of unordered_set<_Value, _Hash, _Pred, _Alloc>
/// Base types for unordered_multiset.	definition of __umset_traits
/// Base types for unordered_set.	definition of __uset_traits
"/** @file bits/unordered_set.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{unordered_set}
 */"	#ifndef _UNORDERED_SET_H
// _GLIBCXX_UNORDERED_SET	#endif
// C++11	#endif
// C++20	#endif
// namespace std	#endif
// C++17	#endif
// namespace std	#endif
"/** @file include/unordered_set
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_UNORDERED_SET
/* size of extended attribute namelist (64k) */	#define XATTR_LIST_MAX 65536
/* size of an extended attribute value (64k) */	#define XATTR_SIZE_MAX 65536
/* # chars in an extended attribute name */	#define XATTR_NAME_MAX 255
/* # bytes in atomic write to a pipe */	#define PIPE_BUF 4096
/* # chars in a path name including nul */	#define PATH_MAX 4096
/* # chars in a file name */	#define NAME_MAX 255
/* size of the type-ahead buffer */	#define MAX_INPUT 255
/* size of the canonical input queue */	#define MAX_CANON 255
/* # links a file may have */	#define LINK_MAX 127
/* # bytes of args + environ for exec() */	#define ARG_MAX 131072
/* supplemental group IDs are available */	#define NGROUPS_MAX 65536
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef _LINUX_LIMITS_H
/* Maximum value the semaphore can have.  */	#define SEM_VALUE_MAX (2147483647)
/* Maximum message queue priority level.  */	#define MQ_PRIO_MAX 32768
/* Maximum host name length.  */	#define HOST_NAME_MAX 64
/* Maximum login name length.  This is arbitrary.  */	#define LOGIN_NAME_MAX 256
/* Maximum tty name length.  */	#define TTY_NAME_MAX 32
/* Maximum number of timer expiration overruns.  */	#define DELAYTIMER_MAX 2147483647
/* Minimum size for a thread.  We are free to choose a reasonable value.  */	#define PTHREAD_STACK_MIN 16384
"/* Maximum amount by which a process can descrease its asynchronous I/O
   priority level.  */"	#define AIO_PRIO_DELTA_MAX 20
/* We have no predefined limit on the number of threads.  */	#undef PTHREAD_THREADS_MAX
/* The number of threads per process.  */	#define _POSIX_THREAD_THREADS_MAX 64
/* Number of iterations this implementation does.  */	#define PTHREAD_DESTRUCTOR_ITERATIONS _POSIX_THREAD_DESTRUCTOR_ITERATIONS
/* Controlling the iterations of destructors for thread-specific data.  */	#define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4
/* This is the value this implementation supports.  */	#define PTHREAD_KEYS_MAX 1024
/* The number of data keys per process.  */	#define _POSIX_THREAD_KEYS_MAX 128
/* Have to remove ARG_MAX?  */	#ifdef __undef_ARG_MAX
/* Have to remove OPEN_MAX?  */	#ifdef __undef_OPEN_MAX
/* Have to remove LINK_MAX?  */	#ifdef __undef_LINK_MAX
/* Have to remove NR_OPEN?  */	#ifdef __undef_NR_OPEN
"/* The kernel header pollutes the namespace with the NR_OPEN symbol
   and defines LINK_MAX although filesystems have different maxima.  A
   similar thing is true for OPEN_MAX: the limit can be changed at
   runtime and therefore the macro must not be defined.  Remove this
   after including the header if necessary.  */"	#ifndef NR_OPEN
/* bits/posix1_lim.h  */	#endif
"/* This value is a guaranteed minimum maximum.
   The current maximum can be got from `sysconf'.  */"	#ifndef NGROUPS_MAX
"/* ssize_t is not formally required to be the signed type
   corresponding to size_t, but it is for all configurations supported
   by glibc.  */"	#if __WORDSIZE == 64 || __WORDSIZE32_SIZE_ULONG
/* Maximum clock resolution in nanoseconds.  */	#define _POSIX_CLOCKRES_MIN 20000000
/* Maximum number of elements in an `iovec' array.  */	#define _POSIX_UIO_MAXIOV 16
"/* Maximum number of bytes that can be buffered on a socket for send
   or receive.  */"	#define _POSIX_HIWAT _POSIX_PIPE_BUF
/* Maximum number of connections that can be queued on a socket.  */	#define _POSIX_QLIMIT 1
/* Maximum length of a timezone name (element of `tzname').  */	#ifdef __USE_XOPEN2K
/* Maximum number of characters in a tty name.  */	#define _POSIX_TTY_NAME_MAX 9
/* Number of timer for a process.  */	#define _POSIX_TIMER_MAX 32
"/* The number of symbolic links that can be traversed in the
   resolution of a pathname in the absence of a loop.  */"	#define _POSIX_SYMLOOP_MAX 8
/* The number of bytes in a symbolic link.  */	#define _POSIX_SYMLINK_MAX 255
/* Number of streams a process can have open at once.  */	#define _POSIX_STREAM_MAX 8
/* Largest value of a `ssize_t'.  */	#define _POSIX_SSIZE_MAX 32767
/* Number of pending realtime signals.  */	#define _POSIX_SIGQUEUE_MAX 32
/* Maximal value of a semaphore.  */	#define _POSIX_SEM_VALUE_MAX 32767
/* Number of semaphores a process can have.  */	#define _POSIX_SEM_NSEMS_MAX 256
/* Minimal number of realtime signals reserved for the application.  */	#define _POSIX_RTSIG_MAX 8
"/* The number of repeated occurrences of a BRE permitted by the
   REGEXEC and REGCOMP functions when using the interval notation.  */"	#define _POSIX_RE_DUP_MAX 255
/* Number of bytes than can be written atomically to a pipe.  */	#define _POSIX_PIPE_BUF 512
/* Number of bytes in a pathname.  */	#define _POSIX_PATH_MAX 256
"/* Number of descriptors that a process may examine with `pselect' or
   `select'.  */"	#define _POSIX_FD_SETSIZE _POSIX_OPEN_MAX
/* Number of files one process can have open at once.  */	#ifdef __USE_XOPEN2K
/* Number of simultaneous supplementary group IDs per process.  */	#ifdef __USE_XOPEN2K
/* Number of bytes in a filename.  */	#define _POSIX_NAME_MAX 14
/* Maximum number of supported message priorities.  */	#define _POSIX_MQ_PRIO_MAX 32
/* Maximum number of message queues open for a process.  */	#define _POSIX_MQ_OPEN_MAX 8
"/* Number of bytes for which space will be
   available in a terminal input queue.  */"	#define _POSIX_MAX_INPUT 255
/* Number of bytes in a terminal canonical input queue.  */	#define _POSIX_MAX_CANON 255
/* Maximum length of login name.  */	#define _POSIX_LOGIN_NAME_MAX 9
/* Maximum link count of a file.  */	#define _POSIX_LINK_MAX 8
"/* Maximum length of a host name (not including the terminating null)
   as returned from the GETHOSTNAME function.  */"	#define _POSIX_HOST_NAME_MAX 255
/* Minimal number of timer expiration overruns.  */	#define _POSIX_DELAYTIMER_MAX 32
/* Maximum simultaneous processes per real user ID.  */	#ifdef __USE_XOPEN2K
/* Maximum length of arguments to `execve', including environment.  */	#define _POSIX_ARG_MAX 4096
/* Minimal number of outstanding asynchronous I/O operations.  */	#define _POSIX_AIO_MAX 1
/* Minimum number of operations in one list I/O call.  */	#define _POSIX_AIO_LISTIO_MAX 2
"/*
 *	POSIX Standard: 2.9.2 Minimum Values	Added to <limits.h>
 *
 *	Never include this file directly; use <limits.h> instead.
 */"	#ifndef _BITS_POSIX1_LIM_H
/* bits/posix2_lim.h */	#endif
/* This value is defined like this in regex.h.  */	#define RE_DUP_MAX (0x7fff)
"/* These values are implementation-specific,
   and may vary within the implementation.
   Their precise values can be obtained from sysconf.  */"	#ifndef BC_BASE_MAX
"/* The maximum number of bytes in a character class name.  We have no
   fixed limit, 2048 is a high number.  */"	#define _POSIX2_CHARCLASS_NAME_MAX 14
"/* The maximum number of repeated occurrences of a regular expression
   permitted when using the interval notation `\{M,N\}'.  */"	#define _POSIX2_RE_DUP_MAX 255
/* The maximum length, in bytes, of an input line.  */	#define _POSIX2_LINE_MAX 2048
"/* The maximum number of expressions that can be nested
   within parentheses by the `expr' utility.  */"	#define _POSIX2_EXPR_NEST_MAX 32
"/* The maximum number of weights that can be assigned to an entry of
   the LC_COLLATE `order' keyword in the locale definition file.  */"	#define _POSIX2_COLL_WEIGHTS_MAX 2
/* The maximum length of a string constant accepted by the `bc' utility.  */	#define _POSIX2_BC_STRING_MAX 1000
/* The maximum `scale' value allowed by the `bc' utility.  */	#define _POSIX2_BC_SCALE_MAX 99
/* The maximum number of elements allowed in an array by the `bc' utility.  */	#define _POSIX2_BC_DIM_MAX 2048
/* The maximum `ibase' and `obase' values allowed by the `bc' utility.  */	#define _POSIX2_BC_BASE_MAX 99
"/*
 * Never include this file directly; include <limits.h> instead.
 */"	#ifndef _BITS_POSIX2_LIM_H
"/* Maximum length of the 'struct iovec' array in a single call to
   readv or writev.

   This macro has different values in different kernel versions.  The
   latest versions of the kernel use 1024 and this is good choice.  Since
   the C library implementation of readv/writev is able to emulate the
   functionality even if the currently running kernel does not support
   this large value the readv/writev call will not fail because of this.  */"	#define __IOV_MAX 1024
"/* Implementation limits related to sys/uio.h - Linux version.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_UIO_LIM_H
/* bits/xopen_lim.h */	#endif
/* Safe assumption.  */	#define LONG_BIT 64
/* Safe assumption.  */	#endif
/* Number of bits in a word of type `long int'.  */	#ifdef LONG_MAX
/* Safe assumption.  */	#endif
/* Safe assumption.  */	#endif
/* Number of bits in a word of type `int'.  */	#ifdef INT_MAX
/* Default process priority.  */	#define NZERO 20
/* Maximum number of bytes in a message.  We have no limit.  */	#define NL_TEXTMAX INT_MAX
/* Maximum set number.  We have no limit.  */	#define NL_SETMAX INT_MAX
"/* Maximum number of bytes in N-to-1 collation mapping.  We have no
   limit.  */"	#if defined __USE_GNU || !defined __USE_XOPEN2K8
/* Maximum message number.  We have no limit.  */	#define NL_MSGMAX INT_MAX
/* Maximum number of bytes in a `LANG' name.  We have no limit.  */	#define NL_LANGMAX _POSIX2_LINE_MAX
"/* Maximum value of `digit' in calls to the `printf' and `scanf'
   functions.  We have no limit, so return a reasonable value.  */"	#define NL_ARGMAX _POSIX_ARG_MAX
"/* Maximum number of `iovec' structures that may be used in a single call
   to `readv', `writev', etc.  */"	#define _XOPEN_IOV_MAX _POSIX_UIO_MAXIOV
"/* Additional definitions from X/Open Portability Guide, Issue 4, Version 2
   System Interfaces and Headers, 4.16 <limits.h>

   Please note only the values which are not greater than the minimum
   stated in the standard document are listed.  The `sysconf' functions
   should be used to obtain the actual value.  */"	#ifndef _XOPEN_LIM_H
/* Use IEC_60559_BFP_EXT.  */	#endif
"/* The integer width macros are not defined by GCC's <limits.h> before
   GCC 7, or if _GNU_SOURCE rather than
   __STDC_WANT_IEC_60559_BFP_EXT__ is used to enable this feature.  */"	#if __GLIBC_USE (IEC_60559_BFP_EXT)
"/* The <limits.h> files in some gcc versions don't define LLONG_MIN,
   LLONG_MAX, and ULLONG_MAX.  Instead only the values gcc defined for
   ages are available.  */"	#if defined __USE_ISOC99 && defined __GNUC__
/* `_GCC_LIMITS_H_' is what GCC's file defines.  */	#endif
"/* Get the compiler's limits.h, which defines almost all the ISO constants.

    We put this #include_next outside the double inclusion check because
    it should be possible to include this file more than once and still get
    the definitions from gcc's header.  */"	#if defined __GNUC__ && !defined _GCC_LIMITS_H_
/* !_LIBC_LIMITS_H_ */	#endif
/* GCC 2.  */	#endif
/* limits.h  */	#endif
/* ISO C99 */	#endif
/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0.)  */	#endif
/* Maximum value an `unsigned long int' can hold.  (Minimum is 0.)  */	#if __WORDSIZE == 64
/* Minimum and maximum values a `signed long int' can hold.  */	#if __WORDSIZE == 64
/* Minimum and maximum values a `char' can hold.  */	#ifdef __CHAR_UNSIGNED__
"/* We only protect from multiple inclusion here, because all the other
   #include's protect themselves, and in GCC 2 we may #include_next through
   multiple copies of this file before we get to GCC's.  */"	#ifndef _LIMITS_H
"/* If we are not using GNU CC we have to define all the symbols ourself.
   Otherwise use gcc's definitions (see below).  */"	#if !defined __GNUC__ || __GNUC__ < 2
"/* Maximum length of any multibyte character in any locale.
   We define this value here since the gcc header does not define
   the correct value.  */"	#define MB_LEN_MAX 16
"/*
 *	ISO C99 Standard: 7.10/5.2.4.2.1 Sizes of integer types	<limits.h>
 */"	#ifndef _LIBC_LIMITS_H_
/* not _GCC_LIMITS_H_ */	#endif
/* recurse down to the real one */	#endif
/* not _GCC_LIMITS_H_ */	#else
"/* This administrivia gets added to the end of limits.h
   if the system has its own version of limits.h.  */"	#else
/* _LIMITS_H___ */	#endif
/* TS 18661-1 widths of integer types.  */	#endif
/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */	#endif
/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */	#undef ULONG_LONG_MAX
/* Minimum and maximum values a `signed long long int' can hold.  */	#undef LONG_LONG_MIN
/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */	#endif
/* Maximum value an `unsigned long int' can hold.  (Minimum is 0).  */	#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
/* Maximum value an `unsigned long int' can hold.  (Minimum is 0).  */	#undef ULONG_MAX
"/* Minimum and maximum values a `signed long int' can hold.
   (Same as `int').  */"	#undef LONG_MIN
/* Maximum value an `unsigned int' can hold.  (Minimum is 0).  */	#undef UINT_MAX
/* Minimum and maximum values a `signed int' can hold.  */	#undef INT_MIN
/* Maximum value an `unsigned short int' can hold.  (Minimum is 0).  */	#if __SHRT_MAX__ == __INT_MAX__
/* Maximum value an `unsigned short int' can hold.  (Minimum is 0).  */	#undef USHRT_MAX
/* Minimum and maximum values a `signed short int' can hold.  */	#undef SHRT_MIN
/* Minimum and maximum values a `char' can hold.  */	#ifdef __CHAR_UNSIGNED__
/* Maximum value an `unsigned char' can hold.  (Minimum is 0).  */	#if __SCHAR_MAX__ == __INT_MAX__
/* Maximum value an `unsigned char' can hold.  (Minimum is 0).  */	#undef UCHAR_MAX
/* Minimum and maximum values a `signed char' can hold.  */	#undef SCHAR_MIN
/* Maximum length of a multibyte character.  */	#ifndef MB_LEN_MAX
/* Number of bits in a `char'.  */	#undef CHAR_BIT
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */"	#ifndef _LIMITS_H___
"/* Use ""..."" so that we find syslimits.h only in this same directory.  */"	#endif
/* Terminated in limity.h.  */	#ifndef _GCC_LIMITS_H_
"/* We use _GCC_LIMITS_H_ because we want this not to match
   any macros that the system's limits.h uses for its own purposes.  */"	#ifndef _GCC_LIMITS_H_
/* tell gcc's limits.h to recurse */	#define _GCC_NEXT_LIMITS_H
"/* syslimits.h stands for the system's own limits.h file.
   If we can use it ok unmodified, then we install this text.
   If fixincludes fixes it, then the fixed version is installed
   instead of this text.  */"	#define _GCC_NEXT_LIMITS_H
/* _ASM_GENERIC_IOCTL_H */	#endif
/* ...and for the drivers/sound files... */	#define IOC_IN (_IOC_WRITE << _IOC_DIRSHIFT)
/* used to decode ioctl numbers.. */	#define _IOC_DIR(nr) (((nr) >> _IOC_DIRSHIFT) & _IOC_DIRMASK)
"/*
 * Used to create numbers.
 *
 * NOTE: _IOW means userland is writing and kernel is reading. _IOR
 * means userland is reading and kernel is writing.
 */"	#define _IO(type,nr) _IOC(_IOC_NONE,(type),(nr),0)
"/*
 * Direction bits, which any architecture can choose to override
 * before including this file.
 *
 * NOTE: _IOC_WRITE means userland is writing and kernel is
 * reading. _IOC_READ means userland is reading and kernel is writing.
 */"	#ifndef _IOC_NONE
"/*
 * Let any architecture override either of the following before
 * including this file.
 */"	#ifndef _IOC_SIZEBITS
"/*
 * The following is for compatibility across the various Linux
 * platforms.  The generic ioctl numbering scheme doesn't really enforce
 * a type field.  De facto, however, the top 8 bits of the lower 16
 * bits are indeed used as a type field, so we might just as well make
 * this explicit here.  Please be sure to use the decoding macros
 * below from now on.
 */"	#define _IOC_NRBITS 8
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef _ASM_GENERIC_IOCTL_H
/* _LINUX_IOCTL_H */	#endif
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef _LINUX_IOCTL_H
/* __ASM_GENERIC_IOCTLS_H */	#endif
/* Transmitter physically empty */	#define TIOCSER_TEMT 0x01
/* Used for packet mode */	#define TIOCPKT_DATA 0
"/*
 * Some arches already define FIOQSIZE due to a historical
 * conflict with a Hayes modem-specific ioctl value.
 */"	#ifndef FIOQSIZE
/* read serial port __inline__ interrupt counts */	#define TIOCGICOUNT 0x545D
/* wait for a change on serial input line(s) */	#define TIOCMIWAIT 0x545C
/* Set multiport config */	#define TIOCSERSETMULTI 0x545B
/* Get multiport config  */	#define TIOCSERGETMULTI 0x545A
/* Get line status register */	#define TIOCSERGETLSR 0x5459
/* For debugging only */	#define TIOCSERGSTRUCT 0x5458
/* Safely open the slave */	#define TIOCGPTPEER _IO('T', 0x41)
/* Get exclusive mode state */	#define TIOCGEXCL _IOR('T', 0x40, int)
/* Get Pty lock state */	#define TIOCGPTLCK _IOR('T', 0x39, int)
/* Get packet mode state */	#define TIOCGPKT _IOR('T', 0x38, int)
/* pty: generate signal */	#define TIOCSIG _IOW('T', 0x36, int)
/* SYS5 TCGETX compatibility */	#define TCGETX 0x5432
/* Get primary device node of /dev/console */	#define TIOCGDEV _IOR('T', 0x32, unsigned int)
/* Lock/unlock Pty */	#define TIOCSPTLCK _IOW('T', 0x31, int)
/* Get Pty Number (of pty-mux device) */	#define TIOCGPTN _IOR('T', 0x30, unsigned int)
/* Return the session ID of FD */	#define TIOCGSID 0x5429
/* BSD compatibility */	#define TIOCCBRK 0x5428
/* BSD compatibility */	#define TIOCSBRK 0x5427
/* Needed for POSIX tcsendbreak() */	#define TCSBRKP 0x5425
/* 0x54 is just a magic number to make these relatively unique ('T') */	#define TCGETS 0x5401
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef __ASM_GENERIC_IOCTLS_H
/* to 89EF */	#define SIOCPROTOPRIVATE 0x89E0
"/*
 *	These 16 ioctl calls are protocol private
 */"	#define SIOCPROTOPRIVATE 0x89E0
/* to 89FF */	#define SIOCDEVPRIVATE 0x89F0
"/* These 16 ioctls are available to devices via the do_ioctl() device
   vector.  Each device should include this file and redefine these
   names as their own. Because these are device dependent it is a good
   idea _NOT_ to issue them to random objects and hope.  */"	#define SIOCDEVPRIVATE 0x89F0
"/* Delete DLCI device		*/"	#define SIOCDELDLCI 0x8981
"/* Create new DLCI device	*/"	#define SIOCADDDLCI 0x8980
/* DLCI configuration calls */	#define SIOCADDDLCI 0x8980
"/* Set device parameters	*/"	#define SIOCSIFMAP 0x8971
"/* Get device parameters	*/"	#define SIOCGIFMAP 0x8970
/* Driver configuration calls */	#define SIOCGIFMAP 0x8970
"/* set RARP table entry		*/"	#define SIOCSRARP 0x8962
"/* get RARP table entry		*/"	#define SIOCGRARP 0x8961
"/* delete RARP table entry	*/"	#define SIOCDRARP 0x8960
/* RARP cache control calls. */	#define SIOCDRARP 0x8960
"/* set ARP table entry		*/"	#define SIOCSARP 0x8955
"/* get ARP table entry		*/"	#define SIOCGARP 0x8954
"/* delete ARP table entry	*/"	#define SIOCDARP 0x8953
/*  0x8950 - 0x8952  * obsolete calls, don't re-use */	#define SIOCDARP 0x8953
"/* Set the tx queue length 	*/"	#define SIOCSIFTXQLEN 0x8943
"/* Get the tx queue length	*/"	#define SIOCGIFTXQLEN 0x8942
"/* Set bridging options 	*/"	#define SIOCSIFBR 0x8941
"/* Bridging support		*/"	#define SIOCGIFBR 0x8940
/* get number of devices */	#define SIOCGIFCOUNT 0x8938
"/* set hardware broadcast addr	*/"	#define SIOCSIFHWBROADCAST 0x8937
"/* delete PA address		*/"	#define SIOCDIFADDR 0x8936
"/* set/get extended flags set	*/"	#define SIOCSIFPFLAGS 0x8934
"/* misprint compatibility :-)	*/"	#define SIOGIFINDEX SIOCGIFINDEX
"/* name -> if_index mapping	*/"	#define SIOCGIFINDEX 0x8933
"/* Multicast address lists	*/"	#define SIOCADDMULTI 0x8931
"/* Driver slaving support	*/"	#define SIOCGIFSLAVE 0x8929
"/* Get hardware address		*/"	#define SIOCGIFHWADDR 0x8927
/* get/set encapsulations       */	#define SIOCGIFENCAP 0x8925
"/* set hardware address 	*/"	#define SIOCSIFHWADDR 0x8924
"/* set interface name		*/"	#define SIOCSIFNAME 0x8923
"/* set MTU size			*/"	#define SIOCSIFMTU 0x8922
"/* get MTU size			*/"	#define SIOCGIFMTU 0x8921
"/* set memory address (BSD)	*/"	#define SIOCSIFMEM 0x8920
"/* get memory address (BSD)	*/"	#define SIOCGIFMEM 0x891f
"/* set metric			*/"	#define SIOCSIFMETRIC 0x891e
"/* get metric			*/"	#define SIOCGIFMETRIC 0x891d
"/* set network PA mask		*/"	#define SIOCSIFNETMASK 0x891c
"/* get network PA mask		*/"	#define SIOCGIFNETMASK 0x891b
"/* set broadcast PA address	*/"	#define SIOCSIFBRDADDR 0x891a
"/* get broadcast PA address	*/"	#define SIOCGIFBRDADDR 0x8919
"/* set remote PA address	*/"	#define SIOCSIFDSTADDR 0x8918
"/* get remote PA address	*/"	#define SIOCGIFDSTADDR 0x8917
"/* set PA address		*/"	#define SIOCSIFADDR 0x8916
"/* get PA address		*/"	#define SIOCGIFADDR 0x8915
"/* set flags			*/"	#define SIOCSIFFLAGS 0x8914
"/* get flags			*/"	#define SIOCGIFFLAGS 0x8913
"/* get iface list		*/"	#define SIOCGIFCONF 0x8912
"/* set iface channel		*/"	#define SIOCSIFLINK 0x8911
"/* get iface name		*/"	#define SIOCGIFNAME 0x8910
/* Socket configuration controls. */	#define SIOCGIFNAME 0x8910
"/* call to routing system	*/"	#define SIOCRTMSG 0x890D
"/* delete routing table entry	*/"	#define SIOCDELRT 0x890C
"/* add routing table entry	*/"	#define SIOCADDRT 0x890B
/* Routing table calls.  */	#define SIOCADDRT 0x890B
"/* Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_IOCTL_H
/* Bluetooth HCI UART  */	#define N_HCI 15
/* synchronous PPP  */	#define N_SYNC_PPP 14
/* synchronous HDLC  */	#define N_HDLC 13
/* SMS block mode  */	#define N_SMSBLOCK 12
/* Linux IR  */	#define N_IRDA 11
/* Profibus  */	#define N_PROFIBUS_FDL 10
/* Simatic R3964 module  */	#define N_R3964 9
/* Mobitex module  */	#define N_MASC 8
/* X.25 async  */	#define N_X25 6
/* line disciplines */	#define N_TTY 0
/* modem lines */	#define TIOCM_LE 0x001
/* control characters */	definition of c_cc
/* line discipline */	definition of c_line
/* local mode flags */	definition of c_lflag
/* control mode flags */	definition of c_cflag
/* output mode flags */	definition of c_oflag
/* input mode flags */	definition of c_iflag
"/* Structure types for pre-termios terminal ioctls.  Linux version.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_IOCTL_H
"/*
 * #define TTYDEFCHARS to include an array of default control characters.
 */"	#ifdef TTYDEFCHARS
/* !_SYS_TTYDEFAULTS_H_ */	#endif
/* PROTECTED INCLUSION ENDS HERE */	#endif
/* compat */	#define CBRK CEOL
/* FS, ^\ */	#define CQUIT 034
/* XXX avoid _POSIX_VDISABLE */	#define CSTATUS '\0'
/* XXX avoid _POSIX_VDISABLE */	#endif
/* XXX avoid _POSIX_VDISABLE */	#define CEOL '\0'
/* XXX avoid _POSIX_VDISABLE */	#endif
"/*
 * Control Character Defaults
 */"	#define CTRL(x) (x&037)
"/*
 * Control Character Defaults
 */"	#ifdef _POSIX_VDISABLE
"/*
 * Defaults on ""first"" open.
 */"	#define TTYDEF_IFLAG (BRKINT | ISTRIP | ICRNL | IMAXBEL | IXON | IXANY)
"/*
 * System wide defaults for terminal state.  Linux version.
 */"	#ifndef _SYS_TTYDEFAULTS_H_
/* sys/ioctl.h */	#endif
"/* Perform the I/O control operation specified by REQUEST on FD.
   One argument may follow; its presence and type depend on REQUEST.
   Return value depends on REQUEST.  Usually -1 indicates error.  */"	declaration of ioctl
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_IOCTL_H
// namespace std	#ifdef _GLIBCXX_PARALLEL
// For C++11 swap() is declared in <type_traits>.	#endif
// set_union	#if (__cplusplus >= 201103L) && defined(_GLIBCXX_USE_C99_STDINT_TR1)
// partition	#if __cplusplus >= 201103L
// min_element	#if __cplusplus >= 201103L
// find_if	#if __cplusplus >= 201103L
// adjacent_find	#if __cplusplus >= 201103L
"/** @file bits/algorithmfwd.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{algorithm}
 */"	#ifndef _GLIBCXX_ALGORITHMFWD_H
/* _STL_HEAP_H */	#endif
// namespace	#endif
// concept requirements	#endif
"/**
   *  @brief  Determines whether a range is a heap using comparison functor.
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @param  __comp   Comparison functor to use.
   *  @return  True if range is a heap, false otherwise.
   *  @ingroup heap_algorithms
  */"	definition of is_heap
"/**
   *  @brief  Determines whether a range is a heap.
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @return  True if range is a heap, false otherwise.
   *  @ingroup heap_algorithms
  */"	definition of is_heap
"/**
   *  @brief  Search the end of a heap using comparison functor.
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @param  __comp   Comparison functor to use.
   *  @return  An iterator pointing to the first element not in the heap.
   *  @ingroup heap_algorithms
   *
   *  This operation returns the last iterator i in [__first, __last) for which
   *  the range [__first, i) is a heap.  Comparisons are made using __comp.
  */"	definition of is_heap_until
"/**
   *  @brief  Search the end of a heap.
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @return  An iterator pointing to the first element not in the heap.
   *  @ingroup heap_algorithms
   *
   *  This operation returns the last iterator i in [__first, __last) for which
   *  the range [__first, i) is a heap.
  */"	definition of is_heap_until
// concept requirements	#if __cplusplus >= 201103L
"/**
   *  @brief  Sort a heap using comparison functor.
   *  @param  __first  Start of heap.
   *  @param  __last   End of heap.
   *  @param  __comp   Comparison functor to use.
   *  @ingroup heap_algorithms
   *
   *  This operation sorts the valid heap in the range [__first,__last).
   *  Comparisons are made using __comp.
  */"	definition of sort_heap
"/**
   *  @brief  Sort a heap.
   *  @param  __first  Start of heap.
   *  @param  __last   End of heap.
   *  @ingroup heap_algorithms
   *
   *  This operation sorts the valid heap in the range [__first,__last).
  */"	definition of sort_heap
// concept requirements	definition of __sort_heap
"/**
   *  @brief  Construct a heap over a range using comparison functor.
   *  @param  __first  Start of heap.
   *  @param  __last   End of heap.
   *  @param  __comp   Comparison functor to use.
   *  @ingroup heap_algorithms
   *
   *  This operation makes the elements in [__first,__last) into a heap.
   *  Comparisons are made using __comp.
  */"	definition of make_heap
"/**
   *  @brief  Construct a heap over a range.
   *  @param  __first  Start of heap.
   *  @param  __last   End of heap.
   *  @ingroup heap_algorithms
   *
   *  This operation makes the elements in [__first,__last) into a heap.
  */"	definition of make_heap
// concept requirements	definition of __make_heap
"/**
   *  @brief  Pop an element off a heap using comparison functor.
   *  @param  __first  Start of heap.
   *  @param  __last   End of heap.
   *  @param  __comp   Comparison functor to use.
   *  @ingroup heap_algorithms
   *
   *  This operation pops the top of the heap.  The elements __first
   *  and __last-1 are swapped and [__first,__last-1) is made into a
   *  heap.  Comparisons are made using comp.
  */"	definition of pop_heap
"/**
   *  @brief  Pop an element off a heap.
   *  @param  __first  Start of heap.
   *  @param  __last   End of heap.
   *  @pre    [__first, __last) is a valid, non-empty range.
   *  @ingroup heap_algorithms
   *
   *  This operation pops the top of the heap.  The elements __first
   *  and __last-1 are swapped and [__first,__last-1) is made into a
   *  heap.
  */"	definition of pop_heap
// concept requirements	definition of __adjust_heap
"/**
   *  @brief  Push an element onto a heap using comparison functor.
   *  @param  __first  Start of heap.
   *  @param  __last   End of heap + element.
   *  @param  __comp   Comparison functor.
   *  @ingroup heap_algorithms
   *
   *  This operation pushes the element at __last-1 onto the valid
   *  heap over the range [__first,__last-1).  After completion,
   *  [__first,__last) is a valid heap.  Compare operations are
   *  performed using comp.
  */"	definition of push_heap
"/**
   *  @brief  Push an element onto a heap.
   *  @param  __first  Start of heap.
   *  @param  __last   End of heap + element.
   *  @ingroup heap_algorithms
   *
   *  This operation pushes the element at last-1 onto the valid heap
   *  over the range [__first,__last-1).  After completion,
   *  [__first,__last) is a valid heap.
  */"	definition of push_heap
// + is_heap and is_heap_until in C++0x.	definition of __push_heap
// This function is an extension, not part of the C++ standard.	definition of __is_heap
"/**
   * @defgroup heap_algorithms Heap
   * @ingroup sorting_algorithms
   */"	definition of __is_heap_until
"/** @file bits/stl_heap.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{queue}
 */"	#ifndef _STL_HEAP_H
// namespace std	#endif
// wraparound control	definition of __generate_impl
"/**
       * @brief Return true if two uniform integer distributions have
       *        the same parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the inclusive upper bound of the distribution range.
       */"	declaration of max
"/**
       * @brief Returns the inclusive lower bound of the distribution range.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Resets the distribution state.
       *
       * Does nothing for the uniform integer distribution.
       */"	declaration of reset
"/**
       * @brief Constructs a uniform distribution object.
       */"	declaration of uniform_int_distribution
"/**
       * @brief Constructs a uniform distribution object.
       */"	declaration of uniform_int_distribution
"/**
       * @brief Constructs a uniform distribution object.
       */"	definition of uniform_int_distribution
"/**
       * @brief Constructs a uniform distribution object.
       */"	declaration of uniform_int_distribution
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief Uniform discrete distribution for random numbers.
   * A discrete random distribution on the range @f$[min, max]@f$ with equal
   * probability throughout the range.
   */"	definition of uniform_int_distribution<_IntType>
/* Determine whether number is a power of 2.  */	definition of _Power_of_2
"/**
 * @file bits/uniform_int_dist.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{random}
 */"	#ifndef _GLIBCXX_BITS_UNIFORM_INT_DIST_H
/* _STL_ALGO_H */	#endif
// namespace std	#endif
// C++14	#endif
// C++17	#endif
/// Take a random sample from a population.	#endif
// The loop above is otherwise equivalent to this one-at-a-time version:	#if __cplusplus > 201402L
// concept requirements	#if __cplusplus >= 201402L
"/**
   *  @brief  Return the maximum element in a range using comparison functor.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @param  __comp   Comparison functor.
   *  @return  Iterator referencing the first instance of the largest value
   *  according to __comp.
  */"	definition of max_element
"/**
   *  @brief  Return the maximum element in a range.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @return  Iterator referencing the first instance of the largest value.
  */"	definition of max_element
// concept requirements	definition of __max_element
"/**
   *  @brief  Return the minimum element in a range using comparison functor.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @param  __comp   Comparison functor.
   *  @return  Iterator referencing the first instance of the smallest value
   *  according to __comp.
  */"	definition of min_element
"/**
   *  @brief  Return the minimum element in a range.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @return  Iterator referencing the first instance of the smallest value.
  */"	definition of min_element
// concept requirements	definition of __min_element
"/**
   *  @brief  Return the symmetric difference of two sorted ranges using
   *  comparison functor.
   *  @ingroup set_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __last2   End of second range.
   *  @param  __result  Start of output range.
   *  @param  __comp    The comparison functor.
   *  @return  End of the output range.
   *  @ingroup set_algorithms
   *
   *  This operation iterates over both ranges, copying elements present in
   *  one range but not the other in order to the output range.  Iterators
   *  increment for each range.  When the current element of one range is less
   *  than the other according to @p comp, that element is copied and the
   *  iterator advances.  If an element is contained in both ranges according
   *  to @p __comp, no elements are copied and both ranges advance.  The output
   *  range may not overlap either input range.
  */"	definition of set_symmetric_difference
"/**
   *  @brief  Return the symmetric difference of two sorted ranges.
   *  @ingroup set_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __last2   End of second range.
   *  @param  __result  Start of output range.
   *  @return  End of the output range.
   *  @ingroup set_algorithms
   *
   *  This operation iterates over both ranges, copying elements present in
   *  one range but not the other in order to the output range.  Iterators
   *  increment for each range.  When the current element of one range is less
   *  than the other, that element is copied and the iterator advances.  If an
   *  element is contained in both ranges, no elements are copied and both
   *  ranges advance.  The output range may not overlap either input range.
  */"	definition of set_symmetric_difference
// concept requirements	definition of __set_symmetric_difference
"/**
   *  @brief  Return the difference of two sorted ranges using comparison
   *  functor.
   *  @ingroup set_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __last2   End of second range.
   *  @param  __result  Start of output range.
   *  @param  __comp    The comparison functor.
   *  @return  End of the output range.
   *  @ingroup set_algorithms
   *
   *  This operation iterates over both ranges, copying elements present in
   *  the first range but not the second in order to the output range.
   *  Iterators increment for each range.  When the current element of the
   *  first range is less than the second according to @p __comp, that element
   *  is copied and the iterator advances.  If the current element of the
   *  second range is less, no element is copied and the iterator advances.
   *  If an element is contained in both ranges according to @p __comp, no
   *  elements are copied and both ranges advance.  The output range may not
   *  overlap either input range.
  */"	definition of set_difference
"/**
   *  @brief Return the difference of two sorted ranges.
   *  @ingroup set_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __last2   End of second range.
   *  @param  __result  Start of output range.
   *  @return  End of the output range.
   *  @ingroup set_algorithms
   *
   *  This operation iterates over both ranges, copying elements present in
   *  the first range but not the second in order to the output range.
   *  Iterators increment for each range.  When the current element of the
   *  first range is less than the second, that element is copied and the
   *  iterator advances.  If the current element of the second range is less,
   *  the iterator advances, but no element is copied.  If an element is
   *  contained in both ranges, no elements are copied and both ranges
   *  advance.  The output range may not overlap either input range.
  */"	definition of set_difference
// concept requirements	definition of __set_difference
"/**
   *  @brief Return the intersection of two sorted ranges using comparison
   *  functor.
   *  @ingroup set_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __last2   End of second range.
   *  @param  __result  Start of output range.
   *  @param  __comp    The comparison functor.
   *  @return  End of the output range.
   *  @ingroup set_algorithms
   *
   *  This operation iterates over both ranges, copying elements present in
   *  both ranges in order to the output range.  Iterators increment for each
   *  range.  When the current element of one range is less than the other
   *  according to @p __comp, that iterator advances.  If an element is
   *  contained in both ranges according to @p __comp, the element from the
   *  first range is copied and both ranges advance.  The output range may not
   *  overlap either input range.
  */"	definition of set_intersection
"/**
   *  @brief Return the intersection of two sorted ranges.
   *  @ingroup set_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __last2   End of second range.
   *  @param  __result  Start of output range.
   *  @return  End of the output range.
   *  @ingroup set_algorithms
   *
   *  This operation iterates over both ranges, copying elements present in
   *  both ranges in order to the output range.  Iterators increment for each
   *  range.  When the current element of one range is less than the other,
   *  that iterator advances.  If an element is contained in both ranges, the
   *  element from the first range is copied and both ranges advance.  The
   *  output range may not overlap either input range.
  */"	definition of set_intersection
// concept requirements	definition of __set_intersection
"/**
   *  @brief Return the union of two sorted ranges using a comparison functor.
   *  @ingroup set_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __last2   End of second range.
   *  @param  __result  Start of output range.
   *  @param  __comp    The comparison functor.
   *  @return  End of the output range.
   *  @ingroup set_algorithms
   *
   *  This operation iterates over both ranges, copying elements present in
   *  each range in order to the output range.  Iterators increment for each
   *  range.  When the current element of one range is less than the other
   *  according to @p __comp, that element is copied and the iterator advanced.
   *  If an equivalent element according to @p __comp is contained in both
   *  ranges, the element from the first range is copied and both ranges
   *  advance.  The output range may not overlap either input range.
  */"	definition of set_union
"/**
   *  @brief Return the union of two sorted ranges.
   *  @ingroup set_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __last2   End of second range.
   *  @param  __result  Start of output range.
   *  @return  End of the output range.
   *  @ingroup set_algorithms
   *
   *  This operation iterates over both ranges, copying elements present in
   *  each range in order to the output range.  Iterators increment for each
   *  range.  When the current element of one range is less than the other,
   *  that element is copied and the iterator advanced.  If an element is
   *  contained in both ranges, the element from the first range is copied and
   *  both ranges advance.  The output range may not overlap either input
   *  range.
  */"	definition of set_union
// concept requirements	definition of __set_union
"/**
   *  @brief Sort the elements of a sequence using a predicate for comparison,
   *         preserving the relative order of equivalent elements.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A comparison functor.
   *  @return  Nothing.
   *
   *  Sorts the elements in the range @p [__first,__last) in ascending order,
   *  such that for each iterator @p i in the range @p [__first,__last-1),
   *  @p __comp(*(i+1),*i) is false.
   *
   *  The relative ordering of equivalent elements is preserved, so any two
   *  elements @p x and @p y in the range @p [__first,__last) such that
   *  @p __comp(x,y) is false and @p __comp(y,x) is false will have the same
   *  relative ordering after calling @p stable_sort().
  */"	definition of stable_sort
"/**
   *  @brief Sort the elements of a sequence using a predicate for comparison,
   *         preserving the relative order of equivalent elements.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A comparison functor.
   *  @return  Nothing.
   *
   *  Sorts the elements in the range @p [__first,__last) in ascending order,
   *  such that for each iterator @p i in the range @p [__first,__last-1),
   *  @p __comp(*(i+1),*i) is false.
   *
   *  The relative ordering of equivalent elements is preserved, so any two
   *  elements @p x and @p y in the range @p [__first,__last) such that
   *  @p __comp(x,y) is false and @p __comp(y,x) is false will have the same
   *  relative ordering after calling @p stable_sort().
  */"	definition of stable_sort
"/**
   *  @brief Sort the elements of a sequence, preserving the relative order
   *         of equivalent elements.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @return  Nothing.
   *
   *  Sorts the elements in the range @p [__first,__last) in ascending order,
   *  such that for each iterator @p i in the range @p [__first,__last-1),
   *  @p *(i+1)<*i is false.
   *
   *  The relative ordering of equivalent elements is preserved, so any two
   *  elements @p x and @p y in the range @p [__first,__last) such that
   *  @p x<y is false and @p y<x is false will have the same relative
   *  ordering after calling @p stable_sort().
  */"	definition of stable_sort
// concept requirements	definition of __stable_sort
// concept requirements	definition of __stable_sort
"/**
   *  @brief Merges two sorted ranges.
   *  @ingroup sorting_algorithms
   *  @param  __first1  An iterator.
   *  @param  __first2  Another iterator.
   *  @param  __last1   Another iterator.
   *  @param  __last2   Another iterator.
   *  @param  __result  An iterator pointing to the end of the merged range.
   *  @param  __comp    A functor to use for comparisons.
   *  @return         An iterator pointing to the first element ""not less
   *                  than"" @e val.
   *
   *  Merges the ranges @p [__first1,__last1) and @p [__first2,__last2) into
   *  the sorted range @p [__result, __result + (__last1-__first1) +
   *  (__last2-__first2)).  Both input ranges must be sorted, and the
   *  output range must not overlap with either of the input ranges.
   *  The sort is @e stable, that is, for equivalent elements in the
   *  two ranges, elements from the first range will always come
   *  before elements from the second.
   *
   *  The comparison function should have the same effects on ordering as
   *  the function used for the initial sort.
  */"	definition of merge
"/**
   *  @brief Merges two sorted ranges.
   *  @ingroup sorting_algorithms
   *  @param  __first1  An iterator.
   *  @param  __first2  Another iterator.
   *  @param  __last1   Another iterator.
   *  @param  __last2   Another iterator.
   *  @param  __result  An iterator pointing to the end of the merged range.
   *  @return         An iterator pointing to the first element <em>not less
   *                  than</em> @e val.
   *
   *  Merges the ranges @p [__first1,__last1) and @p [__first2,__last2) into
   *  the sorted range @p [__result, __result + (__last1-__first1) +
   *  (__last2-__first2)).  Both input ranges must be sorted, and the
   *  output range must not overlap with either of the input ranges.
   *  The sort is @e stable, that is, for equivalent elements in the
   *  two ranges, elements from the first range will always come
   *  before elements from the second.
  */"	definition of merge
// concept requirements	definition of __merge
"/**
   *  @brief Sort the elements of a sequence using a predicate for comparison.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A comparison functor.
   *  @return  Nothing.
   *
   *  Sorts the elements in the range @p [__first,__last) in ascending order,
   *  such that @p __comp(*(i+1),*i) is false for every iterator @e i in the
   *  range @p [__first,__last-1).
   *
   *  The relative ordering of equivalent elements is not preserved, use
   *  @p stable_sort() if this is needed.
  */"	definition of sort
"/**
   *  @brief Sort the elements of a sequence.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @return  Nothing.
   *
   *  Sorts the elements in the range @p [__first,__last) in ascending order,
   *  such that for each iterator @e i in the range @p [__first,__last-1),  
   *  *(i+1)<*i is false.
   *
   *  The relative ordering of equivalent elements is not preserved, use
   *  @p stable_sort() if this is needed.
  */"	definition of sort
"/**
   *  @brief Sort the elements of a sequence.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @return  Nothing.
   *
   *  Sorts the elements in the range @p [__first,__last) in ascending order,
   *  such that for each iterator @e i in the range @p [__first,__last-1),  
   *  *(i+1)<*i is false.
   *
   *  The relative ordering of equivalent elements is not preserved, use
   *  @p stable_sort() if this is needed.
  */"	definition of sort
"/**
   *  @brief Sort a sequence just enough to find a particular position
   *         using a predicate for comparison.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __nth     Another iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A comparison functor.
   *  @return  Nothing.
   *
   *  Rearranges the elements in the range @p [__first,__last) so that @p *__nth
   *  is the same element that would have been in that position had the
   *  whole sequence been sorted. The elements either side of @p *__nth are
   *  not completely sorted, but for any iterator @e i in the range
   *  @p [__first,__nth) and any iterator @e j in the range @p [__nth,__last) it
   *  holds that @p __comp(*j,*i) is false.
  */"	definition of nth_element
"/**
   *  @brief Sort a sequence just enough to find a particular position.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __nth     Another iterator.
   *  @param  __last    Another iterator.
   *  @return  Nothing.
   *
   *  Rearranges the elements in the range @p [__first,__last) so that @p *__nth
   *  is the same element that would have been in that position had the
   *  whole sequence been sorted. The elements either side of @p *__nth are
   *  not completely sorted, but for any iterator @e i in the range
   *  @p [__first,__nth) and any iterator @e j in the range @p [__nth,__last) it
   *  holds that *j < *i is false.
  */"	definition of nth_element
"/**
   *  @brief Sort the smallest elements of a sequence using a predicate
   *         for comparison.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __middle  Another iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A comparison functor.
   *  @return  Nothing.
   *
   *  Sorts the smallest @p (__middle-__first) elements in the range
   *  @p [__first,__last) and moves them to the range @p [__first,__middle). The
   *  order of the remaining elements in the range @p [__middle,__last) is
   *  undefined.
   *  After the sort if @e i and @e j are iterators in the range
   *  @p [__first,__middle) such that i precedes j and @e k is an iterator in
   *  the range @p [__middle,__last) then @p *__comp(j,*i) and @p __comp(*k,*i)
   *  are both false.
  */"	definition of partial_sort
"/**
   *  @brief Sort the smallest elements of a sequence.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __middle  Another iterator.
   *  @param  __last    Another iterator.
   *  @return  Nothing.
   *
   *  Sorts the smallest @p (__middle-__first) elements in the range
   *  @p [first,last) and moves them to the range @p [__first,__middle). The
   *  order of the remaining elements in the range @p [__middle,__last) is
   *  undefined.
   *  After the sort if @e i and @e j are iterators in the range
   *  @p [__first,__middle) such that i precedes j and @e k is an iterator in
   *  the range @p [__middle,__last) then *j<*i and *k<*i are both false.
  */"	definition of partial_sort
"/**
   *  @brief Move elements for which a predicate is true to the beginning
   *         of a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first   A forward iterator.
   *  @param  __last    A forward iterator.
   *  @param  __pred    A predicate functor.
   *  @return  An iterator @p middle such that @p __pred(i) is true for each
   *  iterator @p i in the range @p [__first,middle) and false for each @p i
   *  in the range @p [middle,__last).
   *
   *  @p __pred must not modify its operand. @p partition() does not preserve
   *  the relative ordering of elements in each group, use
   *  @p stable_partition() if this is needed.
  */"	definition of partition
"/**
   *  @brief Shuffle the elements of a sequence using a random number
   *         generator.
   *  @ingroup mutating_algorithms
   *  @param  __first   A forward iterator.
   *  @param  __last    A forward iterator.
   *  @param  __rand    The RNG functor or function.
   *  @return  Nothing.
   *
   *  Reorders the elements in the range @p [__first,__last) using @p __rand to
   *  provide a random distribution. Calling @p __rand(N) for a positive
   *  integer @p N should return a randomly chosen integer from the
   *  range [0,N).
  */"	definition of random_shuffle
// XXX rand() % N is not uniformly distributed	#endif
"/**
   *  @brief Randomly shuffle the elements of a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first   A forward iterator.
   *  @param  __last    A forward iterator.
   *  @return  Nothing.
   *
   *  Reorder the elements in the range @p [__first,__last) using a random
   *  distribution, so that every possible ordering of the sequence is
   *  equally likely.
  */"	definition of random_shuffle
// concept requirements -- predicates checked later	#if _GLIBCXX_HOSTED
"/**
   *  @brief Copy a sequence, removing consecutive values using a predicate.
   *  @ingroup mutating_algorithms
   *  @param  __first        An input iterator.
   *  @param  __last         An input iterator.
   *  @param  __result       An output iterator.
   *  @param  __binary_pred  A binary predicate.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  Copies each element in the range @p [__first,__last) to the range
   *  beginning at @p __result, except that only the first element is copied
   *  from groups of consecutive elements for which @p __binary_pred returns
   *  true.
   *  unique_copy() is stable, so the relative order of elements that are
   *  copied is unchanged.
   *
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 241. Does unique_copy() require CopyConstructible and Assignable?
  */"	definition of unique_copy
"/**
   *  @brief Copy a sequence, removing consecutive duplicate values.
   *  @ingroup mutating_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    An input iterator.
   *  @param  __result  An output iterator.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  Copies each element in the range @p [__first,__last) to the range
   *  beginning at @p __result, except that only the first element is copied
   *  from groups of consecutive elements that compare equal.
   *  unique_copy() is stable, so the relative order of elements that are
   *  copied is unchanged.
   *
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 241. Does unique_copy() require CopyConstructible and Assignable?
   *  
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 538. 241 again: Does unique_copy() require CopyConstructible and 
   *  Assignable?
  */"	definition of unique_copy
"/**
   *  @brief Assign the result of a function object to each value in a
   *         sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first  A forward iterator.
   *  @param  __n      The length of the sequence.
   *  @param  __gen    A function object taking no arguments and returning
   *                 std::iterator_traits<_ForwardIterator>::value_type
   *  @return   The end of the sequence, @p __first+__n
   *
   *  Performs the assignment @c *i = @p __gen() for each @c i in the range
   *  @p [__first,__first+__n).
   *
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */"	definition of generate_n
"/**
   *  @brief Assign the result of a function object to each value in a
   *         sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first  A forward iterator.
   *  @param  __last   A forward iterator.
   *  @param  __gen    A function object taking no arguments and returning
   *                 std::iterator_traits<_ForwardIterator>::value_type
   *  @return   generate() returns no value.
   *
   *  Performs the assignment @c *i = @p __gen() for each @c i in the range
   *  @p [__first,__last).
  */"	definition of generate
"/**
   *  @brief Replace each value in a sequence for which a predicate returns
   *         true with another value.
   *  @ingroup mutating_algorithms
   *  @param  __first      A forward iterator.
   *  @param  __last       A forward iterator.
   *  @param  __pred       A predicate.
   *  @param  __new_value  The replacement value.
   *  @return   replace_if() returns no value.
   *
   *  For each iterator @c i in the range @p [__first,__last) if @p __pred(*i)
   *  is true then the assignment @c *i = @p __new_value is performed.
  */"	definition of replace_if
"/**
   *  @brief Replace each occurrence of one value in a sequence with another
   *         value.
   *  @ingroup mutating_algorithms
   *  @param  __first      A forward iterator.
   *  @param  __last       A forward iterator.
   *  @param  __old_value  The value to be replaced.
   *  @param  __new_value  The replacement value.
   *  @return   replace() returns no value.
   *
   *  For each iterator @c i in the range @p [__first,__last) if @c *i ==
   *  @p __old_value then the assignment @c *i = @p __new_value is performed.
  */"	definition of replace
"/**
   *  @brief Replace each occurrence of one value in a sequence with another
   *         value.
   *  @ingroup mutating_algorithms
   *  @param  __first      A forward iterator.
   *  @param  __last       A forward iterator.
   *  @param  __old_value  The value to be replaced.
   *  @param  __new_value  The replacement value.
   *  @return   replace() returns no value.
   *
   *  For each iterator @c i in the range @p [__first,__last) if @c *i ==
   *  @p __old_value then the assignment @c *i = @p __new_value is performed.
  */"	definition of replace
"/**
   *  @brief Perform an operation on corresponding elements of two sequences.
   *  @ingroup mutating_algorithms
   *  @param  __first1     An input iterator.
   *  @param  __last1      An input iterator.
   *  @param  __first2     An input iterator.
   *  @param  __result     An output iterator.
   *  @param  __binary_op  A binary operator.
   *  @return   An output iterator equal to @p result+(last-first).
   *
   *  Applies the operator to the corresponding elements in the two
   *  input ranges and assigns the results to successive elements of the
   *  output sequence.
   *  Evaluates @p
   *  *(__result+N)=__binary_op(*(__first1+N),*(__first2+N)) for each
   *  @c N in the range @p [0,__last1-__first1).
   *
   *  @p binary_op must not alter either of its arguments.
  */"	definition of transform
"/**
   *  @brief Perform an operation on a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first     An input iterator.
   *  @param  __last      An input iterator.
   *  @param  __result    An output iterator.
   *  @param  __unary_op  A unary operator.
   *  @return   An output iterator equal to @p __result+(__last-__first).
   *
   *  Applies the operator to each element in the input range and assigns
   *  the results to successive elements of the output sequence.
   *  Evaluates @p *(__result+N)=unary_op(*(__first+N)) for each @c N in the
   *  range @p [0,__last-__first).
   *
   *  @p unary_op must not alter its argument.
  */"	definition of transform
"/**
   *  @brief Perform an operation on a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first     An input iterator.
   *  @param  __last      An input iterator.
   *  @param  __result    An output iterator.
   *  @param  __unary_op  A unary operator.
   *  @return   An output iterator equal to @p __result+(__last-__first).
   *
   *  Applies the operator to each element in the input range and assigns
   *  the results to successive elements of the output sequence.
   *  Evaluates @p *(__result+N)=unary_op(*(__first+N)) for each @c N in the
   *  range @p [0,__last-__first).
   *
   *  @p unary_op must not alter its argument.
  */"	definition of transform
"/** @brief Search a sequence using a Searcher object.
   *
   *  @param  __first        A forward iterator.
   *  @param  __last         A forward iterator.
   *  @param  __searcher     A callable object.
   *  @return @p __searcher(__first,__last).first
  */"	#endif
// concept requirements	#if __cplusplus > 201402L
"/**
   *  @brief Search a sequence for a number of consecutive values using a
   *         predicate.
   *  @ingroup non_mutating_algorithms
   *  @param  __first        A forward iterator.
   *  @param  __last         A forward iterator.
   *  @param  __count        The number of consecutive values.
   *  @param  __val          The value to find.
   *  @param  __binary_pred  A binary predicate.
   *  @return The first iterator @c i in the range @p
   *  [__first,__last-__count) such that @p
   *  __binary_pred(*(i+N),__val) is true for each @c N in the range
   *  @p [0,__count), or @p __last if no such iterator exists.
   *
   *  Searches the range @p [__first,__last) for @p __count
   *  consecutive elements for which the predicate returns true.
  */"	definition of search_n
"/**
   *  @brief Search a sequence for a number of consecutive values.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  A forward iterator.
   *  @param  __last   A forward iterator.
   *  @param  __count  The number of consecutive values.
   *  @param  __val    The value to find.
   *  @return The first iterator @c i in the range @p
   *  [__first,__last-__count) such that @c *(i+N) == @p __val for
   *  each @c N in the range @p [0,__count), or @p __last if no such
   *  iterator exists.
   *
   *  Searches the range @p [__first,__last) for @p count consecutive elements
   *  equal to @p __val.
  */"	definition of search_n
"/**
   *  @brief Search a sequence for a matching sub-sequence using a predicate.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1     A forward iterator.
   *  @param  __last1      A forward iterator.
   *  @param  __first2     A forward iterator.
   *  @param  __last2      A forward iterator.
   *  @param  __predicate  A binary predicate.
   *  @return   The first iterator @c i in the range
   *  @p [__first1,__last1-(__last2-__first2)) such that
   *  @p __predicate(*(i+N),*(__first2+N)) is true for each @c N in the range
   *  @p [0,__last2-__first2), or @p __last1 if no such iterator exists.
   *
   *  Searches the range @p [__first1,__last1) for a sub-sequence that
   *  compares equal value-by-value with the sequence given by @p
   *  [__first2,__last2), using @p __predicate to determine equality,
   *  and returns an iterator to the first element of the
   *  sub-sequence, or @p __last1 if no such iterator exists.
   *
   *  @see search(_ForwardIter1, _ForwardIter1, _ForwardIter2, _ForwardIter2)
  */"	definition of search
"/**
   *  @brief Search a sequence for a matching sub-sequence using a predicate.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1     A forward iterator.
   *  @param  __last1      A forward iterator.
   *  @param  __first2     A forward iterator.
   *  @param  __last2      A forward iterator.
   *  @param  __predicate  A binary predicate.
   *  @return   The first iterator @c i in the range
   *  @p [__first1,__last1-(__last2-__first2)) such that
   *  @p __predicate(*(i+N),*(__first2+N)) is true for each @c N in the range
   *  @p [0,__last2-__first2), or @p __last1 if no such iterator exists.
   *
   *  Searches the range @p [__first1,__last1) for a sub-sequence that
   *  compares equal value-by-value with the sequence given by @p
   *  [__first2,__last2), using @p __predicate to determine equality,
   *  and returns an iterator to the first element of the
   *  sub-sequence, or @p __last1 if no such iterator exists.
   *
   *  @see search(_ForwardIter1, _ForwardIter1, _ForwardIter2, _ForwardIter2)
  */"	definition of search
"/**
   *  @brief Search a sequence for a matching sub-sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  A forward iterator.
   *  @param  __last1   A forward iterator.
   *  @param  __first2  A forward iterator.
   *  @param  __last2   A forward iterator.
   *  @return The first iterator @c i in the range @p
   *  [__first1,__last1-(__last2-__first2)) such that @c *(i+N) == @p
   *  *(__first2+N) for each @c N in the range @p
   *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
   *
   *  Searches the range @p [__first1,__last1) for a sub-sequence that
   *  compares equal value-by-value with the sequence given by @p
   *  [__first2,__last2) and returns an iterator to the first element
   *  of the sub-sequence, or @p __last1 if the sub-sequence is not
   *  found.
   *
   *  Because the sub-sequence must lie completely within the range @p
   *  [__first1,__last1) it must start at a position less than @p
   *  __last1-(__last2-__first2) where @p __last2-__first2 is the
   *  length of the sub-sequence.
   *
   *  This means that the returned iterator @c i will be in the range
   *  @p [__first1,__last1-(__last2-__first2))
  */"	definition of search
"/**
   *  @brief Search a sequence for a matching sub-sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  A forward iterator.
   *  @param  __last1   A forward iterator.
   *  @param  __first2  A forward iterator.
   *  @param  __last2   A forward iterator.
   *  @return The first iterator @c i in the range @p
   *  [__first1,__last1-(__last2-__first2)) such that @c *(i+N) == @p
   *  *(__first2+N) for each @c N in the range @p
   *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
   *
   *  Searches the range @p [__first1,__last1) for a sub-sequence that
   *  compares equal value-by-value with the sequence given by @p
   *  [__first2,__last2) and returns an iterator to the first element
   *  of the sub-sequence, or @p __last1 if the sub-sequence is not
   *  found.
   *
   *  Because the sub-sequence must lie completely within the range @p
   *  [__first1,__last1) it must start at a position less than @p
   *  __last1-(__last2-__first2) where @p __last2-__first2 is the
   *  length of the sub-sequence.
   *
   *  This means that the returned iterator @c i will be in the range
   *  @p [__first1,__last1-(__last2-__first2))
  */"	definition of search
"/**
   *  @brief Count the elements of a sequence for which a predicate is true.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __pred   A predicate.
   *  @return   The number of iterators @c i in the range @p [__first,__last)
   *  for which @p __pred(*i) is true.
  */"	definition of count_if
"/**
   *  @brief Count the number of copies of a value in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __value  The value to be counted.
   *  @return   The number of iterators @c i in the range @p [__first,__last)
   *  for which @c *i == @p __value
  */"	definition of count
"/**
   *  @brief Count the number of copies of a value in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __value  The value to be counted.
   *  @return   The number of iterators @c i in the range @p [__first,__last)
   *  for which @c *i == @p __value
  */"	definition of count
"/**
   *  @brief Find two adjacent values in a sequence using a predicate.
   *  @ingroup non_mutating_algorithms
   *  @param  __first         A forward iterator.
   *  @param  __last          A forward iterator.
   *  @param  __binary_pred   A binary predicate.
   *  @return   The first iterator @c i such that @c i and @c i+1 are both
   *  valid iterators in @p [__first,__last) and such that
   *  @p __binary_pred(*i,*(i+1)) is true, or @p __last if no such iterator
   *  exists.
  */"	definition of adjacent_find
"/**
   *  @brief Find two adjacent values in a sequence that are equal.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  A forward iterator.
   *  @param  __last   A forward iterator.
   *  @return   The first iterator @c i such that @c i and @c i+1 are both
   *  valid iterators in @p [__first,__last) and such that @c *i == @c *(i+1),
   *  or @p __last if no such iterator exists.
  */"	definition of adjacent_find
"/**
   *  @brief  Find element from a set in a sequence using a predicate.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  Start of range to search.
   *  @param  __last1   End of range to search.
   *  @param  __first2  Start of match candidates.
   *  @param  __last2   End of match candidates.
   *  @param  __comp    Predicate to use.
   *  @return   The first iterator @c i in the range
   *  @p [__first1,__last1) such that @c comp(*i, @p *(i2)) is true
   *  and i2 is an iterator in [__first2,__last2), or @p __last1 if no
   *  such iterator exists.
   *

   *  Searches the range @p [__first1,__last1) for an element that is
   *  equal to some element in the range [__first2,__last2).  If
   *  found, returns an iterator in the range [__first1,__last1),
   *  otherwise returns @p __last1.
  */"	definition of find_first_of
"/**
   *  @brief  Find element from a set in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  Start of range to search.
   *  @param  __last1   End of range to search.
   *  @param  __first2  Start of match candidates.
   *  @param  __last2   End of match candidates.
   *  @return   The first iterator @c i in the range
   *  @p [__first1,__last1) such that @c *i == @p *(i2) such that i2 is an
   *  iterator in [__first2,__last2), or @p __last1 if no such iterator exists.
   *
   *  Searches the range @p [__first1,__last1) for an element that is
   *  equal to some element in the range [__first2,__last2).  If
   *  found, returns an iterator in the range [__first1,__last1),
   *  otherwise returns @p __last1.
  */"	definition of find_first_of
"/**
   *  @brief Find the first element in a sequence for which a
   *         predicate is true.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __pred   A predicate.
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @p __pred(*i) is true, or @p __last if no such iterator exists.
  */"	definition of find_if
"/**
   *  @brief Find the first element in a sequence for which a
   *         predicate is true.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __pred   A predicate.
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @p __pred(*i) is true, or @p __last if no such iterator exists.
  */"	definition of find_if
"/**
   *  @brief Find the first occurrence of a value in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __val    The value to find.
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */"	definition of find
"/**
   *  @brief Find the first occurrence of a value in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __val    The value to find.
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */"	definition of find
// C++17	#endif
"/**
   *  @brief Apply a function to every element of a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __n      A value convertible to an integer.
   *  @param  __f      A unary function object.
   *  @return   `__first+__n`
   *
   *  Applies the function object `__f` to each element in the range
   *  `[first, first+n)`.  `__f` must not modify the order of the sequence.
   *  If `__f` has a return value it is ignored.
  */"	#endif
// N.B. [alg.foreach] says std::move(f) but it's redundant.	#if __cplusplus >= 201703L
"/**
   *  @brief Apply a function to every element of a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __f      A unary function object.
   *  @return   @p __f
   *
   *  Applies the function object @p __f to each element in the range
   *  @p [first,last).  @p __f must not modify the order of the sequence.
   *  If @p __f has a return value it is ignored.
  */"	definition of for_each
// C++11	#endif
// for two successive elements at a time:	#endif
"/**
   *  @brief Shuffle the elements of a sequence using a uniform random
   *         number generator.
   *  @ingroup mutating_algorithms
   *  @param  __first   A forward iterator.
   *  @param  __last    A forward iterator.
   *  @param  __g       A UniformRandomNumberGenerator (26.5.1.3).
   *  @return  Nothing.
   *
   *  Reorders the elements in the range @p [__first,__last) using @p __g to
   *  provide random numbers.
  */"	definition of shuffle
"/**
   *  @brief Generate two uniformly distributed integers using a
   *         single distribution invocation.
   *  @param  __b0    The upper bound for the first integer.
   *  @param  __b1    The upper bound for the second integer.
   *  @param  __g     A UniformRandomBitGenerator.
   *  @return  A pair (i, j) with i and j uniformly distributed
   *           over [0, __b0) and [0, __b1), respectively.
   *
   *  Requires: __b0 * __b1 <= __g.max() - __g.min().
   *
   *  Using uniform_int_distribution with a range that is very
   *  small relative to the range of the generator ends up wasting
   *  potentially expensively generated randomness, since
   *  uniform_int_distribution does not store leftover randomness
   *  between invocations.
   *
   *  If we know we want two integers in ranges that are sufficiently
   *  small, we can compose the ranges, use a single distribution
   *  invocation, and significantly reduce the waste.
  */"	definition of __gen_two_uniform_ints
// C++14	#endif
// C++17	#endif
"/**
   *  @brief  Returns the value clamped between lo and hi.
   *  @ingroup sorting_algorithms
   *  @param  __val   A value of arbitrary type.
   *  @param  __lo    A lower limit of arbitrary type.
   *  @param  __hi    An upper limit of arbitrary type.
   *  @param  __comp  A comparison functor.
   *  @return max(__val, __lo, __comp) if __comp(__val, __hi)
   *	      or min(__val, __hi, __comp) otherwise.
   */"	#endif
"/**
   *  @brief  Checks whether a permutation of the second sequence is equal
   *          to the first sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __last2   End of first range.
   *  @param  __pred    A binary predicate.
   *  @return true if there exists a permutation of the elements in the range
   *          [__first2, __last2), beginning with ForwardIterator2 begin,
   *          such that equal(__first1, __last1, __begin, __pred) returns true;
   *          otherwise, returns false.
  */"	#if __cplusplus > 201402L
// concept requirements	#if __cplusplus > 201103L
"/**
   *  @brief  Checks whether a permutation of the second sequence is equal
   *          to the first sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @param  __pred    A binary predicate.
   *  @return true if there exists a permutation of the elements in
   *          the range [__first2, __first2 + (__last1 - __first1)),
   *          beginning with ForwardIterator2 begin, such that
   *          equal(__first1, __last1, __begin, __pred) returns true;
   *          otherwise, returns false.
  */"	definition of is_permutation
"/**
   *  @brief  Checks whether a permutation of the second sequence is equal
   *          to the first sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  Start of first range.
   *  @param  __last1   End of first range.
   *  @param  __first2  Start of second range.
   *  @return true if there exists a permutation of the elements in the range
   *          [__first2, __first2 + (__last1 - __first1)), beginning with 
   *          ForwardIterator2 begin, such that equal(__first1, __last1, begin)
   *          returns true; otherwise, returns false.
  */"	definition of is_permutation
// N2722 + DR 915.	definition of min
"/**
   *  @brief  Return a pair of iterators pointing to the minimum and maximum
   *          elements in a range.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @param  __comp   Comparison functor.
   *  @return  make_pair(m, M), where m is the first iterator i in 
   *           [__first, __last) such that no other element in the range is
   *           smaller, and where M is the last iterator i in [__first, __last)
   *           such that no other element in the range is larger.
  */"	definition of minmax_element
"/**
   *  @brief  Return a pair of iterators pointing to the minimum and maximum
   *          elements in a range.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @return  make_pair(m, M), where m is the first iterator i in 
   *           [__first, __last) such that no other element in the range is
   *           smaller, and where M is the last iterator i in [__first, __last)
   *           such that no other element in the range is larger.
  */"	definition of minmax_element
"/**
   *  @brief  Determines min and max at once as an ordered pair.
   *  @ingroup sorting_algorithms
   *  @param  __a  A thing of arbitrary type.
   *  @param  __b  Another thing of arbitrary type.
   *  @param  __comp  A @link comparison_functors comparison functor @endlink.
   *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
   *  __b) otherwise.
  */"	definition of minmax
"/**
   *  @brief  Determines min and max at once as an ordered pair.
   *  @ingroup sorting_algorithms
   *  @param  __a  A thing of arbitrary type.
   *  @param  __b  Another thing of arbitrary type.
   *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
   *  __b) otherwise.
  */"	definition of minmax
"/**
   *  @brief  Determines the end of a sorted sequence using comparison functor.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A comparison functor.
   *  @return  An iterator pointing to the last iterator i in [__first, __last)
   *           for which the range [__first, i) is sorted.
  */"	definition of is_sorted_until
"/**
   *  @brief  Determines the end of a sorted sequence using comparison functor.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A comparison functor.
   *  @return  An iterator pointing to the last iterator i in [__first, __last)
   *           for which the range [__first, i) is sorted.
  */"	definition of is_sorted_until
"/**
   *  @brief  Determines the end of a sorted sequence.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @return  An iterator pointing to the last iterator i in [__first, __last)
   *           for which the range [__first, i) is sorted.
  */"	definition of is_sorted_until
"/**
   *  @brief  Determines whether the elements of a sequence are sorted
   *          according to a comparison functor.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A comparison functor.
   *  @return  True if the elements are sorted, false otherwise.
  */"	definition of is_sorted
"/**
   *  @brief  Determines whether the elements of a sequence are sorted
   *          according to a comparison functor.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A comparison functor.
   *  @return  True if the elements are sorted, false otherwise.
  */"	definition of is_sorted
"/**
   *  @brief  Determines whether the elements of a sequence are sorted.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @return  True if the elements are sorted, false otherwise.
  */"	definition of is_sorted
// concept requirements	definition of __count_if
// concept requirements	definition of __count_if
"/**
   *  @brief Copy a sequence, replacing each value for which a predicate
   *         returns true with another value.
   *  @ingroup mutating_algorithms
   *  @param  __first      An input iterator.
   *  @param  __last       An input iterator.
   *  @param  __result     An output iterator.
   *  @param  __pred       A predicate.
   *  @param  __new_value  The replacement value.
   *  @return   The end of the output sequence, @p __result+(__last-__first).
   *
   *  Copies each element in the range @p [__first,__last) to the range
   *  @p [__result,__result+(__last-__first)) replacing elements for which
   *  @p __pred returns true with @p __new_value.
  */"	definition of replace_copy_if
"/**
   *  @brief Copy a sequence, replacing each element of one value with another
   *         value.
   *  @param  __first      An input iterator.
   *  @param  __last       An input iterator.
   *  @param  __result     An output iterator.
   *  @param  __old_value  The value to be replaced.
   *  @param  __new_value  The replacement value.
   *  @return   The end of the output sequence, @p result+(last-first).
   *
   *  Copies each element in the input range @p [__first,__last) to the
   *  output range @p [__result,__result+(__last-__first)) replacing elements
   *  equal to @p __old_value with @p __new_value.
  */"	definition of replace_copy
// replace_if	definition of __replace_copy_if
"/**
   *  @brief  Permute range into the previous @e dictionary ordering using
   *          comparison functor.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @param  __comp   A comparison functor.
   *  @return  False if wrapped to last permutation, true otherwise.
   *
   *  Treats all permutations of the range [__first,__last) as a set of
   *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
   *  sequence into the previous one of this set.  Returns true if there are
   *  more sequences to generate.  If the sequence is the smallest of the set,
   *  the largest is generated and false returned.
  */"	definition of prev_permutation
"/**
   *  @brief  Permute range into the previous @e dictionary ordering.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @return  False if wrapped to last permutation, true otherwise.
   *
   *  Treats all permutations of the range as a set of @e dictionary sorted
   *  sequences.  Permutes the current sequence into the previous one of this
   *  set.  Returns true if there are more sequences to generate.  If the
   *  sequence is the smallest of the set, the largest is generated and false
   *  returned.
  */"	definition of prev_permutation
// concept requirements	definition of __prev_permutation
"/**
   *  @brief  Permute range into the next @e dictionary ordering using
   *          comparison functor.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @param  __comp   A comparison functor.
   *  @return  False if wrapped to first permutation, true otherwise.
   *
   *  Treats all permutations of the range [__first,__last) as a set of
   *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
   *  sequence into the next one of this set.  Returns true if there are more
   *  sequences to generate.  If the sequence is the largest of the set, the
   *  smallest is generated and false returned.
  */"	definition of next_permutation
"/**
   *  @brief  Permute range into the next @e dictionary ordering.
   *  @ingroup sorting_algorithms
   *  @param  __first  Start of range.
   *  @param  __last   End of range.
   *  @return  False if wrapped to first permutation, true otherwise.
   *
   *  Treats all permutations of the range as a set of @e dictionary sorted
   *  sequences.  Permutes the current sequence into the next one of this set.
   *  Returns true if there are more sequences to generate.  If the sequence
   *  is the largest of the set, the smallest is generated and false returned.
  */"	definition of next_permutation
// max_element	definition of __next_permutation
"/**
   *  @brief Determines whether all elements of a sequence exists in a range
   *  using comparison.
   *  @ingroup set_algorithms
   *  @param  __first1  Start of search range.
   *  @param  __last1   End of search range.
   *  @param  __first2  Start of sequence
   *  @param  __last2   End of sequence.
   *  @param  __comp    Comparison function to use.
   *  @return True if each element in [__first2,__last2) is contained
   *  in order within [__first1,__last1) according to comp.  False
   *  otherwise.  @ingroup set_algorithms
   *
   *  This operation expects both [__first1,__last1) and
   *  [__first2,__last2) to be sorted.  Searches for the presence of
   *  each element in [__first2,__last2) within [__first1,__last1),
   *  using comp to decide.  The iterators over each range only move
   *  forward, so this is a linear algorithm.  If an element in
   *  [__first2,__last2) is not found before the search iterator
   *  reaches @p __last2, false is returned.
  */"	definition of includes
"/**
   *  @brief Determines whether all elements of a sequence exists in a range.
   *  @param  __first1  Start of search range.
   *  @param  __last1   End of search range.
   *  @param  __first2  Start of sequence
   *  @param  __last2   End of sequence.
   *  @return  True if each element in [__first2,__last2) is contained in order
   *  within [__first1,__last1).  False otherwise.
   *  @ingroup set_algorithms
   *
   *  This operation expects both [__first1,__last1) and
   *  [__first2,__last2) to be sorted.  Searches for the presence of
   *  each element in [__first2,__last2) within [__first1,__last1).
   *  The iterators over each range only move forward, so this is a
   *  linear algorithm.  If an element in [__first2,__last2) is not
   *  found before the search iterator reaches @p __last2, false is
   *  returned.
  */"	definition of includes
// ranges are sorted.	definition of __includes
/// This is a helper function for the stable sorting routines.	definition of __inplace_stable_sort
/// This is a helper function for the stable sorting routines.	definition of __inplace_stable_sort
/// This is a helper function for the __merge_sort_loop routines.	definition of __move_merge
/// This is a helper function for the __merge_sort_loop routines.	definition of __move_merge
"/**
   *  @brief Merges two sorted ranges in place.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __middle  Another iterator.
   *  @param  __last    Another iterator.
   *  @param  __comp    A functor to use for comparisons.
   *  @return  Nothing.
   *
   *  Merges two sorted and consecutive ranges, [__first,__middle) and
   *  [middle,last), and puts the result in [__first,__last).  The output will
   *  be sorted.  The sort is @e stable, that is, for equivalent
   *  elements in the two ranges, elements from the first range will always
   *  come before elements from the second.
   *
   *  If enough additional memory is available, this takes (__last-__first)-1
   *  comparisons.  Otherwise an NlogN algorithm is used, where N is
   *  distance(__first,__last).
   *
   *  The comparison function should have the same effects on ordering as
   *  the function used for the initial sort.
  */"	definition of inplace_merge
"/**
   *  @brief Merges two sorted ranges in place.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __middle  Another iterator.
   *  @param  __last    Another iterator.
   *  @return  Nothing.
   *
   *  Merges two sorted and consecutive ranges, [__first,__middle) and
   *  [__middle,__last), and puts the result in [__first,__last).  The
   *  output will be sorted.  The sort is @e stable, that is, for
   *  equivalent elements in the two ranges, elements from the first
   *  range will always come before elements from the second.
   *
   *  If enough additional memory is available, this takes (__last-__first)-1
   *  comparisons.  Otherwise an NlogN algorithm is used, where N is
   *  distance(__first,__last).
  */"	definition of inplace_merge
/// This is a helper function for the merge routines.	definition of __merge_without_buffer
/// This is a helper function for the merge routines.	definition of __merge_without_buffer
/// This is a helper function for the merge routines.	definition of __merge_adaptive
/// This is a helper function for the merge routines.	definition of __merge_adaptive
/// This is a helper function for the merge routines.	definition of __rotate_adaptive
/// This is a helper function for the merge routines.	definition of __rotate_adaptive
/// This is a helper function for the __merge_adaptive routines.	definition of __move_merge_adaptive_backward
/// This is a helper function for the __merge_adaptive routines.	definition of __move_merge_adaptive_backward
/// This is a helper function for the __merge_adaptive routines.	definition of __move_merge_adaptive
/// This is a helper function for the __merge_adaptive routines.	definition of __move_merge_adaptive
"/**
   *  @brief Determines whether an element exists in a range.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @param  __comp    A functor to use for comparisons.
   *  @return  True if @p __val (or its equivalent) is in @p [__first,__last].
   *
   *  Note that this does not actually return an iterator to @p __val.  For
   *  that, use std::find or a container's specialized find member functions.
   *
   *  The comparison function should have the same effects on ordering as
   *  the function used for the initial sort.
  */"	definition of binary_search
"/**
   *  @brief Determines whether an element exists in a range.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @param  __comp    A functor to use for comparisons.
   *  @return  True if @p __val (or its equivalent) is in @p [__first,__last].
   *
   *  Note that this does not actually return an iterator to @p __val.  For
   *  that, use std::find or a container's specialized find member functions.
   *
   *  The comparison function should have the same effects on ordering as
   *  the function used for the initial sort.
  */"	definition of binary_search
"/**
   *  @brief Determines whether an element exists in a range.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @return True if @p __val (or its equivalent) is in [@p
   *  __first,@p __last ].
   *
   *  Note that this does not actually return an iterator to @p __val.  For
   *  that, use std::find or a container's specialized find member functions.
  */"	definition of binary_search
"/**
   *  @brief Determines whether an element exists in a range.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @return True if @p __val (or its equivalent) is in [@p
   *  __first,@p __last ].
   *
   *  Note that this does not actually return an iterator to @p __val.  For
   *  that, use std::find or a container's specialized find member functions.
  */"	definition of binary_search
"/**
   *  @brief Finds the largest subrange in which @p __val could be inserted
   *         at any place in it without changing the ordering.
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @param  __comp    A functor to use for comparisons.
   *  @return  An pair of iterators defining the subrange.
   *  @ingroup binary_search_algorithms
   *
   *  This is equivalent to
   *  @code
   *    std::make_pair(lower_bound(__first, __last, __val, __comp),
   *                   upper_bound(__first, __last, __val, __comp))
   *  @endcode
   *  but does not actually call those functions.
  */"	definition of equal_range
"/**
   *  @brief Finds the largest subrange in which @p __val could be inserted
   *         at any place in it without changing the ordering.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @return  An pair of iterators defining the subrange.
   *  @ingroup binary_search_algorithms
   *
   *  This is equivalent to
   *  @code
   *    std::make_pair(lower_bound(__first, __last, __val),
   *                   upper_bound(__first, __last, __val))
   *  @endcode
   *  but does not actually call those functions.
  */"	definition of equal_range
// concept requirements	definition of __equal_range
"/**
   *  @brief Finds the last position in which @p __val could be inserted
   *         without changing the ordering.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @param  __comp    A functor to use for comparisons.
   *  @return  An iterator pointing to the first element greater than @p __val,
   *           or end() if no elements are greater than @p __val.
   *  @ingroup binary_search_algorithms
   *
   *  The comparison function should have the same effects on ordering as
   *  the function used for the initial sort.
  */"	definition of upper_bound
"/**
   *  @brief Finds the last position in which @p __val could be inserted
   *         without changing the ordering.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @return  An iterator pointing to the first element greater than @p __val,
   *           or end() if no elements are greater than @p __val.
   *  @ingroup binary_search_algorithms
  */"	definition of upper_bound
"/**
   *  @brief Finds the last position in which @p __val could be inserted
   *         without changing the ordering.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @return  An iterator pointing to the first element greater than @p __val,
   *           or end() if no elements are greater than @p __val.
   *  @ingroup binary_search_algorithms
  */"	definition of upper_bound
// concept requirements	definition of __upper_bound
// concept requirements	definition of __upper_bound
"/**
   *  @brief Finds the first position in which @p __val could be inserted
   *         without changing the ordering.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @param  __comp    A functor to use for comparisons.
   *  @return An iterator pointing to the first element <em>not less
   *           than</em> @p __val, or end() if every element is less
   *           than @p __val.
   *  @ingroup binary_search_algorithms
   *
   *  The comparison function should have the same effects on ordering as
   *  the function used for the initial sort.
  */"	definition of lower_bound
"/**
   *  @brief Finds the first position in which @p __val could be inserted
   *         without changing the ordering.
   *  @ingroup binary_search_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __val     The search term.
   *  @param  __comp    A functor to use for comparisons.
   *  @return An iterator pointing to the first element <em>not less
   *           than</em> @p __val, or end() if every element is less
   *           than @p __val.
   *  @ingroup binary_search_algorithms
   *
   *  The comparison function should have the same effects on ordering as
   *  the function used for the initial sort.
  */"	definition of lower_bound
// sort	definition of __sort
/// This is a helper function for the sort routine.	definition of __introsort_loop
/// This is a helper function...	definition of __unguarded_partition_pivot
/// This is a helper function...	definition of __unguarded_partition
/// This is a helper function for the sort routine.	definition of __final_insertion_sort
"/**
   *  @doctodo
   *  This controls some aspect of the sort routines.
  */"	definition of (unnamed enum)
/// This is a helper function for the sort routine.	definition of __unguarded_insertion_sort
/// This is a helper function for the sort routine.	definition of __insertion_sort
/// This is a helper function for the sort routine.	definition of __unguarded_linear_insert
"/**
   *  @brief Copy the smallest elements of a sequence using a predicate for
   *         comparison.
   *  @ingroup sorting_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    Another input iterator.
   *  @param  __result_first   A random-access iterator.
   *  @param  __result_last    Another random-access iterator.
   *  @param  __comp    A comparison functor.
   *  @return   An iterator indicating the end of the resulting sequence.
   *
   *  Copies and sorts the smallest N values from the range @p [__first,__last)
   *  to the range beginning at @p result_first, where the number of
   *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
   *  @p (__result_last-__result_first).
   *  After the sort if @e i and @e j are iterators in the range
   *  @p [__result_first,__result_first+N) such that i precedes j then
   *  @p __comp(*j,*i) is false.
   *  The value returned is @p __result_first+N.
  */"	definition of partial_sort_copy
"/**
   *  @brief Copy the smallest elements of a sequence.
   *  @ingroup sorting_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __result_first   A random-access iterator.
   *  @param  __result_last    Another random-access iterator.
   *  @return   An iterator indicating the end of the resulting sequence.
   *
   *  Copies and sorts the smallest N values from the range @p [__first,__last)
   *  to the range beginning at @p __result_first, where the number of
   *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
   *  @p (__result_last-__result_first).
   *  After the sort if @e i and @e j are iterators in the range
   *  @p [__result_first,__result_first+N) such that i precedes j then
   *  *j<*i is false.
   *  The value returned is @p __result_first+N.
  */"	definition of partial_sort_copy
// partial_sort	definition of __partial_sort_copy
/// This is a helper function for the sort routines.	definition of __heap_select
"/**
   *  @brief Move elements for which a predicate is true to the beginning
   *         of a sequence, preserving relative ordering.
   *  @ingroup mutating_algorithms
   *  @param  __first   A forward iterator.
   *  @param  __last    A forward iterator.
   *  @param  __pred    A predicate functor.
   *  @return  An iterator @p middle such that @p __pred(i) is true for each
   *  iterator @p i in the range @p [first,middle) and false for each @p i
   *  in the range @p [middle,last).
   *
   *  Performs the same function as @p partition() with the additional
   *  guarantee that the relative ordering of elements in each group is
   *  preserved, so any two elements @p x and @p y in the range
   *  @p [__first,__last) such that @p __pred(x)==__pred(y) will have the same
   *  relative ordering after calling @p stable_partition().
  */"	definition of stable_partition
// function's preconditions.	definition of __stable_partition
/// move-assign an element onto itself.	definition of __stable_partition_adaptive
/// This is a helper function...	definition of __partition
/// This is a helper function...	definition of __partition
"/**
   *  @brief Copy a sequence, rotating its elements.
   *  @ingroup mutating_algorithms
   *  @param  __first   A forward iterator.
   *  @param  __middle  A forward iterator.
   *  @param  __last    A forward iterator.
   *  @param  __result  An output iterator.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  Copies the elements of the range @p [__first,__last) to the
   *  range beginning at @result, rotating the copied elements by 
   *  @p (__middle-__first) positions so that the element at @p __middle
   *  is moved to @p __result, the element at @p __middle+1 is moved
   *  to @p __result+1 and so on for each element in the range @p
   *  [__first,__last).
   *
   *  Performs 
   *  @p *(__result+(n+(__last-__middle))%(__last-__first))=*(__first+n)
   *  for each @p n in the range @p [0,__last-__first).
  */"	definition of rotate_copy
"/**
   *  @brief Rotate the elements of a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first   A forward iterator.
   *  @param  __middle  A forward iterator.
   *  @param  __last    A forward iterator.
   *  @return  first + (last - middle).
   *
   *  Rotates the elements of the range @p [__first,__last) by 
   *  @p (__middle - __first) positions so that the element at @p __middle
   *  is moved to @p __first, the element at @p __middle+1 is moved to
   *  @p __first+1 and so on for each element in the range
   *  @p [__first,__last).
   *
   *  This effectively swaps the ranges @p [__first,__middle) and
   *  @p [__middle,__last).
   *
   *  Performs
   *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
   *  for each @p n in the range @p [0,__last-__first).
  */"	definition of rotate
"/**
   *  @brief Rotate the elements of a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first   A forward iterator.
   *  @param  __middle  A forward iterator.
   *  @param  __last    A forward iterator.
   *  @return  first + (last - middle).
   *
   *  Rotates the elements of the range @p [__first,__last) by 
   *  @p (__middle - __first) positions so that the element at @p __middle
   *  is moved to @p __first, the element at @p __middle+1 is moved to
   *  @p __first+1 and so on for each element in the range
   *  @p [__first,__last).
   *
   *  This effectively swaps the ranges @p [__first,__middle) and
   *  @p [__middle,__last).
   *
   *  Performs
   *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
   *  for each @p n in the range @p [0,__last-__first).
  */"	definition of rotate
/// This is a helper function for the rotate algorithm.	definition of __rotate
/// This is a helper function for the rotate algorithm.	definition of __rotate
/// This is a helper function for the rotate algorithm.	definition of __rotate
/// This is a helper function for the rotate algorithm.	definition of __rotate
"/**
   *  This is a helper function for the rotate algorithm specialized on RAIs.
   *  It returns the greatest common divisor of two integer values.
  */"	definition of __gcd
"/**
   *  @brief Copy a sequence, reversing its elements.
   *  @ingroup mutating_algorithms
   *  @param  __first   A bidirectional iterator.
   *  @param  __last    A bidirectional iterator.
   *  @param  __result  An output iterator.
   *  @return  An iterator designating the end of the resulting sequence.
   *
   *  Copies the elements in the range @p [__first,__last) to the
   *  range @p [__result,__result+(__last-__first)) such that the
   *  order of the elements is reversed.  For every @c i such that @p
   *  0<=i<=(__last-__first), @p reverse_copy() performs the
   *  assignment @p *(__result+(__last-__first)-1-i) = *(__first+i).
   *  The ranges @p [__first,__last) and @p
   *  [__result,__result+(__last-__first)) must not overlap.
  */"	definition of reverse_copy
"/**
   *  @brief Reverse a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first  A bidirectional iterator.
   *  @param  __last   A bidirectional iterator.
   *  @return   reverse() returns no value.
   *
   *  Reverses the order of the elements in the range @p [__first,__last),
   *  so that the first element becomes the last etc.
   *  For every @c i such that @p 0<=i<=(__last-__first)/2), @p reverse()
   *  swaps @p *(__first+i) and @p *(__last-(i+1))
  */"	definition of reverse
"/**
   *  @brief Reverse a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first  A bidirectional iterator.
   *  @param  __last   A bidirectional iterator.
   *  @return   reverse() returns no value.
   *
   *  Reverses the order of the elements in the range @p [__first,__last),
   *  so that the first element becomes the last etc.
   *  For every @c i such that @p 0<=i<=(__last-__first)/2), @p reverse()
   *  swaps @p *(__first+i) and @p *(__last-(i+1))
  */"	definition of reverse
"/**
   *  This is an uglified reverse(_BidirectionalIterator,
   *                              _BidirectionalIterator)
   *  overloaded for random access iterators.
  */"	definition of __reverse
"/**
   *  This is an uglified reverse(_BidirectionalIterator,
   *                              _BidirectionalIterator)
   *  overloaded for random access iterators.
  */"	definition of __reverse
"/**
   *  This is an uglified reverse(_BidirectionalIterator,
   *                              _BidirectionalIterator)
   *  overloaded for bidirectional iterators.
  */"	definition of __reverse
"/**
   *  This is an uglified
   *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
   *              _BinaryPredicate)
   *  overloaded for input iterators and forward iterator as result.
  */"	definition of __unique_copy
"/**
   *  This is an uglified
   *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
   *              _BinaryPredicate)
   *  overloaded for input iterators and output iterator as result.
  */"	definition of __unique_copy
"/**
   *  This is an uglified
   *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
   *              _BinaryPredicate)
   *  overloaded for forward iterators and output iterator as result.
  */"	definition of __unique_copy
"/**
   *  @brief Remove consecutive values from a sequence using a predicate.
   *  @ingroup mutating_algorithms
   *  @param  __first        A forward iterator.
   *  @param  __last         A forward iterator.
   *  @param  __binary_pred  A binary predicate.
   *  @return  An iterator designating the end of the resulting sequence.
   *
   *  Removes all but the first element from each group of consecutive
   *  values for which @p __binary_pred returns true.
   *  unique() is stable, so the relative order of elements that are
   *  not removed is unchanged.
   *  Elements between the end of the resulting sequence and @p __last
   *  are still present, but their value is unspecified.
  */"	definition of unique
"/**
   *  @brief Remove consecutive duplicate values from a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first  A forward iterator.
   *  @param  __last   A forward iterator.
   *  @return  An iterator designating the end of the resulting sequence.
   *
   *  Removes all but the first element from each group of consecutive
   *  values that compare equal.
   *  unique() is stable, so the relative order of elements that are
   *  not removed is unchanged.
   *  Elements between the end of the resulting sequence and @p __last
   *  are still present, but their value is unspecified.
  */"	definition of unique
// concept requirements	definition of __adjacent_find
"/**
   *  @brief Remove elements from a sequence using a predicate.
   *  @ingroup mutating_algorithms
   *  @param  __first  A forward iterator.
   *  @param  __last   A forward iterator.
   *  @param  __pred   A predicate.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  All elements for which @p __pred returns true are removed from the range
   *  @p [__first,__last).
   *
   *  remove_if() is stable, so the relative order of elements that are
   *  not removed is unchanged.
   *
   *  Elements between the end of the resulting sequence and @p __last
   *  are still present, but their value is unspecified.
  */"	definition of remove_if
"/**
   *  @brief Remove elements from a sequence using a predicate.
   *  @ingroup mutating_algorithms
   *  @param  __first  A forward iterator.
   *  @param  __last   A forward iterator.
   *  @param  __pred   A predicate.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  All elements for which @p __pred returns true are removed from the range
   *  @p [__first,__last).
   *
   *  remove_if() is stable, so the relative order of elements that are
   *  not removed is unchanged.
   *
   *  Elements between the end of the resulting sequence and @p __last
   *  are still present, but their value is unspecified.
  */"	definition of remove_if
"/**
   *  @brief Remove elements from a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __value  The value to be removed.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  All elements equal to @p __value are removed from the range
   *  @p [__first,__last).
   *
   *  remove() is stable, so the relative order of elements that are
   *  not removed is unchanged.
   *
   *  Elements between the end of the resulting sequence and @p __last
   *  are still present, but their value is unspecified.
  */"	definition of remove
"/**
   *  @brief Remove elements from a sequence.
   *  @ingroup mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __value  The value to be removed.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  All elements equal to @p __value are removed from the range
   *  @p [__first,__last).
   *
   *  remove() is stable, so the relative order of elements that are
   *  not removed is unchanged.
   *
   *  Elements between the end of the resulting sequence and @p __last
   *  are still present, but their value is unspecified.
  */"	definition of remove
// concept requirements	#endif
"/**
   *  @brief Copy the elements of a sequence to separate output sequences
   *         depending on the truth value of a predicate.
   *  @ingroup mutating_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    An input iterator.
   *  @param  __out_true   An output iterator.
   *  @param  __out_false  An output iterator.
   *  @param  __pred    A predicate.
   *  @return   A pair designating the ends of the resulting sequences.
   *
   *  Copies each element in the range @p [__first,__last) for which
   *  @p __pred returns true to the range beginning at @p out_true
   *  and each element for which @p __pred returns false to @p __out_false.
  */"	definition of partition_copy
"/**
   *  @brief Copies the range [first,first+n) into [result,result+n).
   *  @ingroup mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __n      The number of elements to copy.
   *  @param  __result An output iterator.
   *  @return  result+n.
   *
   *  This inline function will boil down to a call to @c memmove whenever
   *  possible.  Failing that, if random access iterators are passed, then the
   *  loop count will be known (and therefore a candidate for compiler
   *  optimizations such as unrolling).
  */"	definition of copy_n
// concept requirements	definition of __copy_n
"/**
   *  @brief Copy the elements of a sequence for which a predicate is true.
   *  @ingroup mutating_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    An input iterator.
   *  @param  __result  An output iterator.
   *  @param  __pred    A predicate.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  Copies each element in the range @p [__first,__last) for which
   *  @p __pred returns true to the range beginning at @p __result.
   *
   *  copy_if() is stable, so the relative order of elements that are
   *  copied is unchanged.
  */"	definition of copy_if
// concept requirements	#if __cplusplus >= 201103L
"/**
   *  @brief Copy a sequence, removing elements for which a predicate is true.
   *  @ingroup mutating_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    An input iterator.
   *  @param  __result  An output iterator.
   *  @param  __pred    A predicate.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  Copies each element in the range @p [__first,__last) for which
   *  @p __pred returns false to the range beginning at @p __result.
   *
   *  remove_copy_if() is stable, so the relative order of elements that are
   *  copied is unchanged.
  */"	definition of remove_copy_if
"/**
   *  @brief Copy a sequence, removing elements of a given value.
   *  @ingroup mutating_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    An input iterator.
   *  @param  __result  An output iterator.
   *  @param  __value   The value to be removed.
   *  @return   An iterator designating the end of the resulting sequence.
   *
   *  Copies each element in the range @p [__first,__last) not equal
   *  to @p __value to the range beginning at @p __result.
   *  remove_copy() is stable, so the relative order of elements that
   *  are copied is unchanged.
  */"	definition of remove_copy
// A specific debug-mode test will be necessary...	#endif
"/**
   *  @brief  Find the partition point of a partitioned range.
   *  @ingroup mutating_algorithms
   *  @param  __first   An iterator.
   *  @param  __last    Another iterator.
   *  @param  __pred    A predicate.
   *  @return  An iterator @p mid such that @p all_of(__first, mid, __pred)
   *           and @p none_of(mid, __last, __pred) are both true.
  */"	definition of partition_point
"/**
   *  @brief  Checks whether the sequence is partitioned.
   *  @ingroup mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __pred   A predicate.
   *  @return  True if the range @p [__first,__last) is partioned by @p __pred,
   *  i.e. if all elements that satisfy @p __pred appear before those that
   *  do not.
  */"	definition of is_partitioned
"/**
   *  @brief  Find the first element in a sequence for which a
   *          predicate is false.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __pred   A predicate.
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
  */"	definition of find_if_not
"/**
   *  @brief  Find the first element in a sequence for which a
   *          predicate is false.
   *  @ingroup non_mutating_algorithms
   *  @param  __first  An input iterator.
   *  @param  __last   An input iterator.
   *  @param  __pred   A predicate.
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
  */"	definition of find_if_not
"/**
   *  @brief  Checks that a predicate is false for at least an element
   *          of a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    An input iterator.
   *  @param  __pred    A predicate.
   *  @return  True if the check is true, false otherwise.
   *
   *  Returns true if an element exists in the range @p
   *  [__first,__last) such that @p __pred is true, and false
   *  otherwise.
  */"	definition of any_of
"/**
   *  @brief  Checks that a predicate is false for all the elements
   *          of a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    An input iterator.
   *  @param  __pred    A predicate.
   *  @return  True if the check is true, false otherwise.
   *
   *  Returns true if @p __pred is false for each element in the range
   *  @p [__first,__last), and false otherwise.
  */"	definition of none_of
"/**
   *  @brief  Checks that a predicate is true for all the elements
   *          of a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    An input iterator.
   *  @param  __pred    A predicate.
   *  @return  True if the check is true, false otherwise.
   *
   *  Returns true if @p __pred is true for each element in the range
   *  @p [__first,__last), and false otherwise.
  */"	definition of all_of
"/**
   *  @brief  Checks that a predicate is true for all the elements
   *          of a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first   An input iterator.
   *  @param  __last    An input iterator.
   *  @param  __pred    A predicate.
   *  @return  True if the check is true, false otherwise.
   *
   *  Returns true if @p __pred is true for each element in the range
   *  @p [__first,__last), and false otherwise.
  */"	definition of all_of
// concept requirements	#if __cplusplus >= 201103L
"/**
   *  @brief  Find last matching subsequence in a sequence using a predicate.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  Start of range to search.
   *  @param  __last1   End of range to search.
   *  @param  __first2  Start of sequence to match.
   *  @param  __last2   End of sequence to match.
   *  @param  __comp    The predicate to use.
   *  @return The last iterator @c i in the range @p
   *  [__first1,__last1-(__last2-__first2)) such that @c
   *  predicate(*(i+N), @p (__first2+N)) is true for each @c N in the
   *  range @p [0,__last2-__first2), or @p __last1 if no such iterator
   *  exists.
   *
   *  Searches the range @p [__first1,__last1) for a sub-sequence that
   *  compares equal value-by-value with the sequence given by @p
   *  [__first2,__last2) using comp as a predicate and returns an
   *  iterator to the first element of the sub-sequence, or @p __last1
   *  if the sub-sequence is not found.  The sub-sequence will be the
   *  last such subsequence contained in [__first,__last1).
   *
   *  Because the sub-sequence must lie completely within the range @p
   *  [__first1,__last1) it must start at a position less than @p
   *  __last1-(__last2-__first2) where @p __last2-__first2 is the
   *  length of the sub-sequence.  This means that the returned
   *  iterator @c i will be in the range @p
   *  [__first1,__last1-(__last2-__first2))
  */"	definition of find_end
"/**
   *  @brief  Find last matching subsequence in a sequence.
   *  @ingroup non_mutating_algorithms
   *  @param  __first1  Start of range to search.
   *  @param  __last1   End of range to search.
   *  @param  __first2  Start of sequence to match.
   *  @param  __last2   End of sequence to match.
   *  @return   The last iterator @c i in the range
   *  @p [__first1,__last1-(__last2-__first2)) such that @c *(i+N) ==
   *  @p *(__first2+N) for each @c N in the range @p
   *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
   *
   *  Searches the range @p [__first1,__last1) for a sub-sequence that
   *  compares equal value-by-value with the sequence given by @p
   *  [__first2,__last2) and returns an iterator to the __first
   *  element of the sub-sequence, or @p __last1 if the sub-sequence
   *  is not found.  The sub-sequence will be the last such
   *  subsequence contained in [__first1,__last1).
   *
   *  Because the sub-sequence must lie completely within the range @p
   *  [__first1,__last1) it must start at a position less than @p
   *  __last1-(__last2-__first2) where @p __last2-__first2 is the
   *  length of the sub-sequence.  This means that the returned
   *  iterator @c i will be in the range @p
   *  [__first1,__last1-(__last2-__first2))
  */"	definition of find_end
// find_end for bidirectional iterators (much faster).	definition of __find_end
// find_end for forward iterators.	definition of __find_end
// Failure	definition of __search_n
"/**
   *  This is an helper function for search_n overloaded for random access
   *  iterators.
  */"	definition of __search_n_aux
"/**
   *  This is an helper function for search_n overloaded for forward iterators.
  */"	definition of __search_n_aux
// search	definition of __search
// search	definition of __search
/// iterator.	definition of __find_if_not_n
/// Provided for stable_partition to use.	definition of __find_if_not
/// Provided for stable_partition to use.	definition of __find_if_not
/// This is an overload used by find algos for the RAI case.	definition of __find_if
/// This is an overload used by find algos for the RAI case.	definition of __find_if
/// This is an overload used by find algos for the Input Iterator case.	definition of __find_if
/// This is an overload used by find algos for the Input Iterator case.	definition of __find_if
/// Swaps the median value of *__a, *__b and *__c under __comp to *__result	definition of __move_median_to_first
// See concept_check.h for the __glibcxx_*_requires macros.	std
"/** @file bits/stl_algo.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{algorithm}
 */"	#ifndef _STL_ALGO_H
/* _GLIBCXX_ALGORITHM */	#endif
// C++17	#endif
// Feature test macro for parallel algorithms	#endif
// Otherwise just pull in forward declarations	#endif
// If <execution> has already been included, pull in implementations	#else
// Parallel STL algorithms	#if __PSTL_EXECUTION_POLICIES_DEFINED
"/** @file include/algorithm
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_ALGORITHM
// _GLIBCXX_ATOMIC	#endif
// C++11	#endif
// namespace	#endif
// which is implemented by taking a parameter of type __atomic_base<_ITp>*.	definition of atomic_fetch_add_explicit
// Function templates generally applicable to atomic types.	definition of atomic_is_lock_free
// Function definitions, atomic_flag operations.	definition of atomic_flag_test_and_set_explicit
/// atomic_uintmax_t	declaration of atomic_uintmax_t
/// atomic_intmax_t	declaration of atomic_intmax_t
/// atomic_ptrdiff_t	declaration of atomic_ptrdiff_t
/// atomic_size_t	declaration of atomic_size_t
/// atomic_uintptr_t	declaration of atomic_uintptr_t
/// atomic_intptr_t	declaration of atomic_intptr_t
/// atomic_uint_fast64_t	declaration of atomic_uint_fast64_t
/// atomic_int_fast64_t	declaration of atomic_int_fast64_t
/// atomic_uint_fast32_t	declaration of atomic_uint_fast32_t
/// atomic_int_fast32_t	declaration of atomic_int_fast32_t
/// atomic_uint_fast16_t	declaration of atomic_uint_fast16_t
/// atomic_int_fast16_t	declaration of atomic_int_fast16_t
/// atomic_uint_fast8_t	declaration of atomic_uint_fast8_t
/// atomic_int_fast8_t	declaration of atomic_int_fast8_t
/// atomic_uint_least64_t	declaration of atomic_uint_least64_t
/// atomic_int_least64_t	declaration of atomic_int_least64_t
/// atomic_uint_least32_t	declaration of atomic_uint_least32_t
/// atomic_int_least32_t	declaration of atomic_int_least32_t
/// atomic_uint_least16_t	declaration of atomic_uint_least16_t
/// atomic_int_least16_t	declaration of atomic_int_least16_t
/// atomic_uint_least8_t	declaration of atomic_uint_least8_t
/// atomic_int_least8_t	declaration of atomic_int_least8_t
/// atomic_uint64_t	declaration of atomic_uint64_t
/// atomic_int64_t	declaration of atomic_int64_t
/// atomic_uint32_t	declaration of atomic_uint32_t
/// atomic_int32_t	declaration of atomic_int32_t
/// atomic_uint16_t	declaration of atomic_uint16_t
/// atomic_int16_t	declaration of atomic_int16_t
/// atomic_uint8_t	declaration of atomic_uint8_t
/// atomic_int8_t	declaration of atomic_int8_t
/// atomic_char32_t	declaration of atomic_char32_t
/// atomic_char16_t	declaration of atomic_char16_t
/// atomic_char8_t	#endif
/// atomic_wchar_t	declaration of atomic_wchar_t
/// atomic_ullong	declaration of atomic_ullong
/// atomic_llong	declaration of atomic_llong
/// atomic_ulong	declaration of atomic_ulong
/// atomic_long	declaration of atomic_long
/// atomic_uint	declaration of atomic_uint
/// atomic_int	declaration of atomic_int
/// atomic_ushort	declaration of atomic_ushort
/// atomic_short	declaration of atomic_short
/// atomic_uchar	declaration of atomic_uchar
/// atomic_schar	declaration of atomic_schar
/// atomic_char	declaration of atomic_char
/// atomic_bool	declaration of atomic_bool
/// Explicit specialization for char32_t.	definition of atomic<char32_t>
/// Explicit specialization for char16_t.	definition of atomic<char16_t>
/// Explicit specialization for char8_t.	#if __cplusplus > 201402L
/// Explicit specialization for wchar_t.	definition of atomic<wchar_t>
/// Explicit specialization for unsigned long long.	definition of atomic<unsigned long long>
/// Explicit specialization for long long.	definition of atomic<long long>
/// Explicit specialization for unsigned long.	definition of atomic<unsigned long>
/// Explicit specialization for long.	definition of atomic<long>
/// Explicit specialization for unsigned int.	definition of atomic<unsigned int>
/// Explicit specialization for int.	definition of atomic<int>
/// Explicit specialization for unsigned short.	definition of atomic<unsigned short>
/// Explicit specialization for short.	definition of atomic<short>
/// Explicit specialization for unsigned char.	definition of atomic<unsigned char>
/// Explicit specialization for signed char.	definition of atomic<signed char>
/// Explicit specialization for char.	definition of atomic<char>
/// Partial specialization for pointer types.	definition of atomic<_Tp *>
// Produce a fake, minimally aligned pointer.	#if __cplusplus >= 201703L
"/**
   *  @brief Generic atomic type, primary class template.
   *
   *  @tparam _Tp  Type to be made atomic, must be trivally copyable.
   */"	definition of atomic<_Tp>
// NB: No operators or fetch-operations for this type.	definition of atomic<bool>
"/**
   * @addtogroup atomics
   * @{
   */"	#if __cplusplus >= 201703L
// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2427.html	#ifndef _GLIBCXX_ATOMIC
// _GLIBCXX_STD_FUNCTION_H	#endif
// C++11	#endif
// namespace std	#endif
// C++17	#endif
// namespace __detail::__variant	#endif
// 2062. Effect contradictions w/o no-throw guarantee of std::function swaps	definition of swap
/// @overload	definition of operator!=
"/**
   *  @brief Compares a polymorphic function object wrapper against 0
   *  (the NULL pointer).
   *  @returns @c false if the wrapper has no target, @c true otherwise
   *
   *  This function will not throw an %exception.
   */"	definition of operator!=
/// @overload	definition of operator==
"/**
   *  @brief Compares a polymorphic function object wrapper against 0
   *  (the NULL pointer).
   *  @returns @c true if the wrapper has no target, @c false otherwise
   *
   *  This function will not throw an %exception.
   */"	definition of operator==
// Out-of-line member definitions.	definition of function
// @}	#endif
"/**
       *  @brief Invokes the function targeted by @c *this.
       *  @returns the result of the target.
       *  @throws bad_function_call when @c !(bool)*this
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */"	#if __cpp_rtti
"/**
   *  @brief Primary class template for std::function.
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */"	definition of function<..(..)>
// Destroying an object located on the heap.	#if __cpp_rtti
/// Base class of all polymorphic function object wrappers.	definition of _Function_base
// when casting between void pointers and pointers-to-pointers.	definition of _Simple_type_wrapper<_Tp>
"/**
   *  Trait identifying ""location-invariant"" types, meaning that the
   *  address of the object (or any of its members) will not escape.
   *  Trivially copyable types are location-invariant and users can
   *  specialize this trait for other types.
   */"	definition of __is_location_invariant<_Tp>
"/**
   *  @brief Exception class thrown when class template function's
   *  operator() is called with an empty target.
   *  @ingroup exceptions
   */"	definition of bad_function_call
"/** @file include/bits/std_function.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{functional}
 */"	#ifndef _GLIBCXX_STD_FUNCTION_H
// _GLIBCXX_FUNCTIONAL	#endif
// C++11	#endif
// namespace std	#endif
// C++14	#endif
// C++17	#endif
// (or std::byte) and uses std::equal_to as the predicate.	#endif
// and deducing the return type and exception-specification.	#if __cplusplus >= 201703L
// instead of the copy/move constructor.	#endif
"/**
   *  @brief Function template for std::bind<R>.
   *  @ingroup binders
   */"	definition of bind
"/**
   *  @brief Function template for std::bind.
   *  @ingroup binders
   */"	definition of bind
// when the first argument might be a socket file descriptor.	definition of _Bind_helper<true, _Func, _BoundArgs...>
// not be a better match than ::bind() from the BSD Sockets API.	definition of __is_socketlike
"/**
   *  @brief Class template _Bind_result is always a bind expression.
   *  @ingroup binders
   */"	definition of is_bind_expression<const volatile _Bind_result<_Result, _Signature>>
"/**
   *  @brief Class template _Bind_result is always a bind expression.
   *  @ingroup binders
   */"	definition of is_bind_expression<volatile _Bind_result<_Result, _Signature>>
"/**
   *  @brief Class template _Bind_result is always a bind expression.
   *  @ingroup binders
   */"	definition of is_bind_expression<const _Bind_result<_Result, _Signature>>
"/**
   *  @brief Class template _Bind_result is always a bind expression.
   *  @ingroup binders
   */"	definition of is_bind_expression<_Bind_result<_Result, _Signature>>
"/**
   *  @brief Class template _Bind is always a bind expression.
   *  @ingroup binders
   */"	definition of is_bind_expression<const volatile _Bind<_Signature>>
"/**
   *  @brief Class template _Bind is always a bind expression.
   *  @ingroup binders
   */"	definition of is_bind_expression<volatile _Bind<_Signature>>
"/**
   *  @brief Class template _Bind is always a bind expression.
   *  @ingroup binders
   */"	definition of is_bind_expression<const _Bind<_Signature>>
"/**
   *  @brief Class template _Bind is always a bind expression.
   *  @ingroup binders
   */"	definition of is_bind_expression<_Bind<_Signature>>
// Call as const volatile	definition of operator()
// Call as volatile	definition of operator()
// Call as const	definition of operator()
// Call unqualified	definition of operator()
// Call as const volatile, return void	definition of __call
// Call as const volatile	definition of __call
// Call as volatile, return void	definition of __call
// Call as volatile	definition of __call
// Call as const, return void	definition of __call
// Call as const	definition of __call
// Call unqualified, return void	definition of __call
// Call unqualified	definition of __call
// sfinae types	definition of __enable_if_void
// Call as const volatile	definition of operator()
// Call as volatile	definition of operator()
// Call as const	#if __cplusplus > 201402L
// std::get<I> for const-volatile-qualified tuples	definition of __volget
// std::get<I> for volatile-qualified tuples	definition of __volget
"/**
   *  If the argument is just a value, returns a reference to that
   *  value. The cv-qualifiers on the reference are determined by the caller.
   *  C++11 [func.bind.bind] p10 bullet 4.
   */"	definition of _Mu<_Arg, false, false>
"/**
   *  If the argument is a placeholder for the Nth argument, returns
   *  a reference to the Nth argument to the bind function object.
   *  C++11 [func.bind.bind] p10 bullet 3.
   */"	definition of _Mu<_Arg, false, true>
// of the arguments in the tuple.	definition of __call
"/**
   *  If the argument is a bind expression, we invoke the underlying
   *  function object with the same cv-qualifiers as we are given and
   *  pass along all of our arguments (unwrapped).
   *  C++11 [func.bind.bind] p10 bullet 2.
   */"	definition of _Mu<_Arg, true, false>
"/* Note: This won't actually work for const volatile
       * reference_wrappers, because reference_wrapper::get() is const
       * but not volatile-qualified. This might be a defect in the TR.
       */"	definition of operator()
"/**
   *  If the argument is reference_wrapper<_Tp>, returns the
   *  underlying reference.
   *  C++11 [func.bind.bind] p10 bullet 1.
   */"	definition of _Mu<reference_wrapper<_Tp>, false, false>
// Like tuple_element_t but SFINAE-friendly.	definition of _Safe_tuple_element_t
"/**
   *  Partial specialization of is_placeholder that provides the placeholder
   *  number for the placeholder objects defined by libstdc++.
   *  @ingroup binders
   */"	definition of is_placeholder<_Placeholder<_Num>>
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _29
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _28
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _27
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _26
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _25
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _24
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _23
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _22
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _21
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _20
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _19
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _18
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _17
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _16
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _15
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _14
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _13
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _12
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _11
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _10
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _9
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _8
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _7
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _6
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _5
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _4
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _3
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _2
"/* Define a large number of placeholders. There is no way to
   * simplify this with variadic templates, because we're introducing
   * unique names for each.
   */"	declaration of _1
"/** @namespace std::placeholders
   *  @brief ISO C++11 entities sub-namespace for functional.
   *  @ingroup binders
   */"	std::placeholders
"/** @brief The type of placeholder objects defined by libstdc++.
   *  @ingroup binders
   */"	definition of _Placeholder<_Num>
// C++17	#endif
"/**
   *  @brief Determines if the given type _Tp is a placeholder in a
   *  bind() expression and, if so, which placeholder it is.
   *
   *  C++11 [func.bind.isplace].
   *  @ingroup binders
   */"	definition of is_placeholder<_Tp>
"/**
   *  @brief Determines if the given type _Tp is a function object that
   *  should be treated as a subexpression when evaluating calls to
   *  function objects returned by bind().
   *
   *  C++11 [func.bind.isbind].
   *  @ingroup binders
   */"	definition of is_bind_expression<_Tp>
"/**
   *  @brief Returns a function object that forwards to the member
   *  pointer @a pm.
   *  @ingroup functors
   */"	definition of mem_fn
// undefined	definition of _Mem_fn<_Res _Class::*>
// Partial specialization for member object pointers.	definition of _Mem_fn_base<_MemObjPtr, false>
/// Invoke a callable object.	#endif
"/** @file include/functional
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_FUNCTIONAL
//_GLIBCXX_RATIO	#endif
// C++11	#endif
// namespace	#endif
/// ratio_subtract	definition of ratio_subtract
/// ratio_add	definition of ratio_add
// True subtraction of nonnegative numbers yielding a nonnegative result.	definition of __ratio_add_impl<_R1, _R2, true, false, false>
// True addition of nonnegative numbers.	definition of __ratio_add_impl<_R1, _R2, true, true, __b>
// C++17	#endif
/// ratio_greater_equal	definition of ratio_greater_equal<_R1, _R2>
/// ratio_greater	definition of ratio_greater<_R1, _R2>
/// ratio_less_equal	definition of ratio_less_equal<_R1, _R2>
/// ratio_less	definition of ratio_less<_R1, _R2>
// Both numbers are positive.	definition of __ratio_less_impl_1<_R1, _R2, _Left, _Right>
/// ratio_not_equal	definition of ratio_not_equal<_R1, _R2>
/// ratio_equal	definition of ratio_equal<_R1, _R2>
/// ratio_divide	definition of ratio_divide
/// ratio_multiply	definition of ratio_multiply
// Note: sign(N) * abs(N) == N	definition of num
"/**
   *  @brief Provides compile-time rational arithmetic.
   *
   *  This class template represents any finite rational number with a
   *  numerator and denominator representable by compile-time constants of
   *  type intmax_t. The ratio is simplified when instantiated.
   *
   *  For example:
   *  @code
   *    std::ratio<7,-21>::num == -1;
   *    std::ratio<7,-21>::den == 3;
   *  @endcode
   *
  */"	definition of ratio<_Num, _Den>
// Matches the input data.	"static_assert(..., ""Internal library error"")"
// Matches the input data.	"static_assert(..., ""Internal library error"")"
// Matches the input data.	"static_assert(..., ""Internal library error"")"
// Matches the input data.	"static_assert(..., ""Internal library error"")"
// No overflow.	"static_assert(..., ""Internal library error"")"
// No overflow.	"static_assert(..., ""Internal library error"")"
// No overflow.	"static_assert(..., ""Internal library error"")"
// No overflow.	"static_assert(..., ""Internal library error"")"
// This version assumes that the high bit of __d is 1.	definition of __big_div_impl<__n1, __n0, __d>
// ... added here	declaration of _Res
// possible carry...	definition of __mix
// Same principle as __safe_multiply.	definition of __big_mul<__x, __y>
// Subtract a number from a bigger one.	definition of __big_sub<__hi1, __lo1, __hi2, __lo2>
// __hi*2^(8*sizeof(uintmax_t)) + __lo.	definition of __big_less<__hi1, __lo1, __hi2, __lo2>
// is representable by intmax_t.	definition of __safe_multiply<_Pn, _Qn>
"/**
   * @defgroup ratio Rational Arithmetic
   * @ingroup utilities
   *
   * Compile time representation of finite rational numbers.
   * @{
   */"	definition of __static_sign<_Pn>
// intmax_t, uintmax_t	std
"/** @file include/ratio
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_RATIO
// namespace std	#endif
// namespace	#if __cplusplus >= 201703L && defined(_GLIBCXX_HAVE_TIMESPEC_GET)
// Get rid of those macros defined in <time.h> in lieu of real functions.	#undef clock
//	#pragma GCC system_header
// _GLIBCXX_PARSE_NUMBERS_H	#endif
// __cplusplus > 201103L	#endif
// namespace std	#endif
// From n3642.pdf except I added binary literals and digit separator '\''.	#if __cplusplus > 201103L
"/** @file bits/parse_numbers.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{chrono}
 */"	#ifndef _GLIBCXX_PARSE_NUMBERS_H
//_GLIBCXX_CHRONO	#endif
// C++11	#endif
// namespace std	#endif
// C++14	#endif
// namespace chrono	#endif
// namespace chrono	#if __cplusplus > 201103L
"/**
     *  @brief Highest-resolution clock
     *
     *  This is the clock ""with the shortest tick period."" Alias to
     *  std::system_clock until higher-than-nanosecond definitions
     *  become feasible.
    */"	declaration of high_resolution_clock
"/**
     *  @brief Monotonic clock
     *
     *  Time returned has the property of only increasing at a uniform rate.
    */"	definition of steady_clock
// Map to C API	definition of to_time_t
"/**
     *  @brief System clock.
     *
     *  Time returned represents wall time from the system-wide clock.
    */"	definition of system_clock
// can be removed.  XXX GLIBCXX_ABI Deprecated	std::chrono::_V2
// C++17	#endif
/// time_point_cast	definition of time_point_cast
// special values	declaration of min
// arithmetic	declaration of operator+=
// observer	definition of time_since_epoch
// conversions	definition of time_point
/// time_point	definition of time_point<_Clock, _Dur>
/// hours	declaration of hours
/// minutes	declaration of minutes
/// seconds	declaration of seconds
/// milliseconds	declaration of milliseconds
/// milliseconds	declaration of milliseconds
/// milliseconds	declaration of milliseconds
/// microseconds	declaration of microseconds
/// microseconds	declaration of microseconds
/// nanoseconds	declaration of nanoseconds
// comparisons	definition of operator==
// DR 934.	definition of operator%
// 3050. Conversion specification problem in chrono::duration constructor	definition of __common_rep_t
// 20.11.5.4 special values	definition of zero
// DR 934.	definition of operator%=
// 20.11.5.3 arithmetic	declaration of operator+
// 20.11.5.2 observer	definition of count
// 3050. Conversion specification problem in chrono::duration	definition of duration
// 20.11.5.1 construction / copy / destroy	declaration of duration
// _Period2 is an exact multiple of _Period	definition of __is_harmonic
/// duration	definition of duration<_Rep, _Period>
/// duration_values	definition of duration_values<_Rep>
// C++17	#endif
// C++17	#endif
/// treat_as_floating_point	definition of treat_as_floating_point<_Rep>
/// duration_cast	definition of duration_cast
// Primary template for duration_cast impl.	definition of __duration_cast_impl<_ToDur, _CF, _CR, _NumIsOne, _DenIsOne>
// 20.11.4.3 specialization of common_type (for time_point, sfinae-friendly)	definition of __timepoint_common_type_wrapper<_CT, _Clock>
// 20.11.4.3 specialization of common_type (for duration, sfinae-friendly)	definition of __duration_common_type_wrapper<_CT, _Period1, _Period2>
"/** @namespace std::chrono
   *  @brief ISO C++ 2011 entities sub-namespace for time and date.
   */"	std::chrono
"/** @file include/chrono
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_CHRONO
// namespace	#endif
"/** @file bits/error_constants.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{system_error}
 */"	#ifndef _GLIBCXX_ERROR_CONSTANTS
// _GLIBCXX_SYSTEM_ERROR	#endif
// C++11	#endif
// namespace	#endif
/// std::hash specialization for error_condition.	#endif
// _GLIBCXX_COMPATIBILITY_CXX0X	#endif
/// std::hash specialization for error_code.	definition of hash<error_code>
"/**
   *  @brief Thrown to indicate error code of underlying system.
   *
   *  @ingroup exceptions
   */"	definition of system_error
// 19.4.4 Comparison operators	definition of operator==
// 19.4.3.6 non-member functions	definition of make_error_condition
// DR 804.	definition of _M_value
// 19.4.3.4 observers	definition of value
// DR 804.	definition of operator=
// Portable error identification	definition of error_condition
// 19.4.2.6 non-member functions	definition of make_error_code
// DR 804.	definition of operator=
// Implementation-specific error identification	definition of error_code
// end inline namespace	declaration of make_error_code
// DR 890.	declaration of generic_category
// DR 890.	declaration of system_category
"// the name ""message()"" finds depends on which ABI the caller is using."	#if _GLIBCXX_USE_CXX11_ABI
/// error_category	definition of error_category
// C++17	#endif
/// is_error_condition_enum	definition of is_error_condition_enum<_Tp>
/// is_error_code_enum	definition of is_error_code_enum<_Tp>
"/** @file include/system_error
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_SYSTEM_ERROR
// _GLIBCXX_MUTEX_H	#endif
// C++11	#endif
// namespace	#endif
// calling thread owns mutex	definition of ~lock_guard
// calling thread owns mutex	declaration of ~lock_guard
"/** @brief A simple scoped lock type.
   *
   * A lock_guard controls mutex ownership within a scope, releasing
   * ownership in the destructor.
   */"	definition of lock_guard<_Mutex>
/// Tag used to make a scoped lock take ownership of a locked mutex.	definition of adopt_lock
/// Tag used to prevent a scoped lock from blocking if a mutex is locked.	definition of try_to_lock
/// Tag used to prevent a scoped lock from acquiring ownership of a mutex.	definition of defer_lock
/// and manage it.	definition of adopt_lock_t
/// Try to acquire ownership of the mutex without blocking.	definition of try_to_lock_t
/// Do not acquire ownership of the mutex.	definition of defer_lock_t
// _GLIBCXX_HAS_GTHREADS	#endif
// XXX EINVAL, EAGAIN, EPERM	ExprStmt
// XXX EINVAL, EAGAIN, EBUSY	return ...
// EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)	if (...) ... 
/// The standard mutex type.	definition of mutex
// XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)	#endif
// Common base class for std::mutex and std::timed_mutex	definition of __mutex_base
"/**
   * @defgroup mutexes Mutexes
   * @ingroup concurrency
   *
   * Classes for mutex support.
   * @{
   */"	#ifdef _GLIBCXX_HAS_GTHREADS
"/** @file bits/std_mutex.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{mutex}
 */"	#ifndef _GLIBCXX_MUTEX_H
// _GLIBCXX_UNIQUE_LOCK_H	#endif
// C++11	#endif
// namespace	#endif
/// Swap overload for unique_lock objects.	definition of swap
// XXX calling thread owns mutex	definition of unique_lock
"/** @brief A movable scoped lock type.
   *
   * A unique_lock controls mutex ownership within a scope. Ownership of the
   * mutex can be delayed until after construction and can be transferred
   * to another unique_lock by move construction or move assignment. If a
   * mutex lock is owned when the destructor runs ownership will be released.
   */"	definition of unique_lock<_Mutex>
// for std::swap	std
"/** @file bits/unique_lock.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{mutex}
 */"	#ifndef _GLIBCXX_UNIQUE_LOCK_H
// _GLIBCXX_MUTEX	#endif
// C++11	#endif
// namespace	#endif
// _GLIBCXX_HAS_GTHREADS	#endif
// PR libstdc++/82481	#endif
// 2442. call_once() shouldn't DECAY_COPY()	#ifdef _GLIBCXX_HAVE_TLS
/// call_once	definition of call_once
/// Deleted assignment operator	definition of operator=
/// Deleted copy constructor	definition of once_flag
/// Constructor	definition of once_flag
/// Constructor	declaration of once_flag
/// once_flag	definition of once_flag
// C++17	#endif
// calling thread owns mutex	#endif
"/** @brief Generic lock.
   *  @param __l1 Meets Lockable requirements (try_lock() may throw).
   *  @param __l2 Meets Lockable requirements (try_lock() may throw).
   *  @param __l3 Meets Lockable requirements (try_lock() may throw).
   *  @throw An exception thrown by an argument's lock() or try_lock() member.
   *  @post All arguments are locked.
   *
   *  All arguments are locked via a sequence of calls to lock(), try_lock()
   *  and unlock().  If the call exits via an exception any locks that were
   *  obtained will be released.
   */"	definition of lock
"/** @brief Generic try_lock.
   *  @param __l1 Meets Lockable requirements (try_lock() may throw).
   *  @param __l2 Meets Lockable requirements (try_lock() may throw).
   *  @param __l3 Meets Lockable requirements (try_lock() may throw).
   *  @return Returns -1 if all try_lock() calls return true. Otherwise returns
   *          a 0-based index corresponding to the argument that returned false.
   *  @post Either all arguments are locked, or none will be.
   *
   *  Sequentially calls try_lock() on each argument.
   */"	definition of try_lock
// _GLIBCXX_HAS_GTHREADS	#endif
// [thread.timedmutex.recursive]/3	#endif
// !_GTHREAD_USE_MUTEX_TIMEDLOCK	#else
// XXX EINVAL, EAGAIN, EBUSY	ExprStmt
// XXX EINVAL, EAGAIN, EBUSY	return ...
// EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)	if (...) ... 
/// recursive_timed_mutex	definition of recursive_timed_mutex
// XXX EINVAL, EAGAIN, EBUSY	ExprStmt
// XXX EINVAL, EAGAIN, EBUSY	return ...
// EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)	if (...) ... 
/// The standard timed mutex type.	definition of timed_mutex
// XXX EINVAL, EAGAIN, EBUSY	ExprStmt
// XXX EINVAL, EAGAIN, EBUSY	return ...
// EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)	if (...) ... 
/// The standard recursive mutex type.	definition of recursive_mutex
// XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)	#endif
// Common base class for std::recursive_mutex and std::recursive_timed_mutex	definition of __recursive_mutex_base
"/**
   * @ingroup mutexes
   * @{
   */"	#ifdef _GLIBCXX_HAS_GTHREADS
"/** @file include/mutex
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_MUTEX
// C++11	#endif
// namespace std	#endif
/// std::hash specialization for vector<bool>.	definition of hash<vector<bool, _Alloc>>
// namespace std	#if __cplusplus >= 201103L
"// 438. Ambiguity in the ""do the right thing"" clause"	definition of _M_insert_dispatch
"// 438. Ambiguity in the ""do the right thing"" clause"	#endif
"// 438. Ambiguity in the ""do the right thing"" clause"	#if __cplusplus < 201103L
// Precondition: __first._M_offset == 0 && __result._M_offset == 0.	#if __cplusplus >= 201103L
// [23.2.5]/1, third-to-last entry in synopsis listing	#if __cplusplus >= 201103L
// or not the type is an integer.	#if __cplusplus >= 201103L
"/**
   *  @brief  A specialization of vector for booleans which offers fixed time
   *  access to individual elements in any order.
   *
   *  @ingroup sequences
   *
   *  @tparam _Alloc  Allocator type.
   *
   *  Note that vector<bool> does not actually meet the requirements for being
   *  a container.  This is because the reference and pointer types are not
   *  really references and pointers to bool.  See DR96 for details.  @see
   *  vector for function documentation.
   *
   *  In some terminology a %vector can be described as a dynamic
   *  C-style array, it offers fast and efficient access to individual
   *  elements in any order and saves the user from worrying about
   *  memory and size allocation.  Subscripting ( @c [] ) access is
   *  also provided as with C-style arrays.
  */"	definition of vector<bool, _Alloc>
"/** @file bits/stl_bvector.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{vector}
 */"	#ifndef _STL_BVECTOR_H
/* _VECTOR_TCC */	#endif
// C++11	#endif
// namespace std	#endif
// namespace std	#if __cplusplus >= 201103L
// vector<bool>	definition of _M_reallocate
// See _M_realloc_insert above.	#if __cplusplus >= 201103L
// [res.on.arguments]).	#if __cplusplus >= 201103L
// need to use it before _M_insert_aux moves elements around.	definition of _M_insert_aux
// replacement allocator cannot free existing storage	#endif
// copy of it before _M_insert_aux moves elements around.	#else
"/** @file bits/vector.tcc
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{vector}
 */"	#ifndef _VECTOR_TCC
/* _GLIBCXX_VECTOR */	#endif
// C++20	#endif
// namespace std	#endif
// C++17	#endif
// namespace std	#endif
// namespace _GLIBCXX_STD_C::pmr	#endif
// namespace pmr	#ifdef _GLIBCXX_DEBUG
// C++20	#endif
// For remove and remove_if	#endif
"/** @file include/vector
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_VECTOR
/* bits/posix_opt.h */	#endif
/* Typed memory objects are not available.  */	#define _POSIX_TYPED_MEMORY_OBJECTS -1
/* trace.h is not available.  */	#define _POSIX_TRACE -1
/* Neither process nor thread sporadic server interfaces is available.  */	#define _POSIX_SPORADIC_SERVER -1
/* We have at least one terminal.  */	#define _POSIX2_CHAR_TERM 200809L
/* Raw socket support is available.  */	#define _POSIX_RAW_SOCKETS 200809L
/* IPv6 support is available.  */	#define _POSIX_IPV6 200809L
/* Advisory information interfaces are available.  */	#define _POSIX_ADVISORY_INFO 200809L
/* The clock selection interfaces are available.  */	#define _POSIX_CLOCK_SELECTION 200809L
/* The monotonic clock might be available.  */	#define _POSIX_MONOTONIC_CLOCK 0
/* Thread process-shared synchronization is supported.  */	#define _POSIX_THREAD_PROCESS_SHARED 200809L
/* POSIX message queues are available.  */	#define _POSIX_MESSAGE_PASSING 200809L
/* The barrier functions are available.  */	#define _POSIX_BARRIERS 200809L
/* We have POSIX timers.  */	#define _POSIX_TIMERS 200809L
/* The `spawn' function family is supported.  */	#define _POSIX_SPAWN 200809L
/* We support spinlocks.  */	#define _POSIX_SPIN_LOCKS 200809L
/* We support the Timeouts option.  */	#define _POSIX_TIMEOUTS 200809L
/* We have a POSIX shell.  */	#define _POSIX_SHELL 1
/* Reader/Writer locks are available.  */	#define _POSIX_READER_WRITER_LOCKS 200809L
/* GNU libc provides regular expression handling.  */	#define _POSIX_REGEXP 1
/* Clock support in threads must be also checked at runtime.  */	#define _POSIX_THREAD_CPUTIME 0
/* CPU-time clocks support needs to be checked at runtime.  */	#define _POSIX_CPUTIME 0
/* POSIX shared memory objects are implemented.  */	#define _POSIX_SHARED_MEMORY_OBJECTS 200809L
/* The rest of the LFS is also available.  */	#define _LFS_LARGEFILE 1
/* The LFS support in asynchronous I/O is also available.  */	#define _LFS64_ASYNCHRONOUS_IO 1
/* Support for prioritization is also available.  */	#define _POSIX_PRIORITIZED_IO 200809L
/* Alternative name for Unix98.  */	#define _LFS_ASYNCHRONOUS_IO 1
/* We support asynchronous I/O.  */	#define _POSIX_ASYNCHRONOUS_IO 200809L
/* Real-time signals are supported.  */	#define _POSIX_REALTIME_SIGNALS 200809L
/* We support POSIX.1b semaphores.  */	#define _POSIX_SEMAPHORES 200809L
/* We do not support priority protection for robust mutexes.  */	#define _POSIX_THREAD_ROBUST_PRIO_PROTECT -1
/* We support priority inheritence for robust mutexes.  */	#define _POSIX_THREAD_ROBUST_PRIO_INHERIT 200809L
"/* We support priority protection, though only for non-robust
   mutexes.  */"	#define _POSIX_THREAD_PRIO_PROTECT 200809L
/* We support priority inheritence.  */	#define _POSIX_THREAD_PRIO_INHERIT 200809L
/* We support user-defined stacks.  */	#define _POSIX_THREAD_ATTR_STACKADDR 200809L
/* We support user-defined stack sizes.  */	#define _POSIX_THREAD_ATTR_STACKSIZE 200809L
/* We provide priority scheduling for threads.  */	#define _POSIX_THREAD_PRIORITY_SCHEDULING 200809L
/* We have the reentrant functions described in POSIX.  */	#define _POSIX_REENTRANT_FUNCTIONS 1
/* Tell we have POSIX threads.  */	#define _POSIX_THREADS 200809L
/* XPG4.2 shared memory is supported.  */	#define _XOPEN_SHM 1
/* X/Open thread realtime support is available.  */	#define _XOPEN_REALTIME_THREADS 1
/* X/Open realtime support is available.  */	#define _XOPEN_REALTIME 1
/* Filenames are not silently truncated.  */	#define _POSIX_NO_TRUNC 1
"/* `c_cc' member of 'struct termios' structure can be disabled by
   using the value _POSIX_VDISABLE.  */"	#define _POSIX_VDISABLE '\0'
/* Some filesystems allow all users to change file ownership.  */	#define _POSIX_CHOWN_RESTRICTED 0
/* Setting of memory protections is supported.  */	#define _POSIX_MEMORY_PROTECTION 200809L
/* Locking of ranges of memory is supported.  */	#define _POSIX_MEMLOCK_RANGE 200809L
/* Locking of all memory is supported.  */	#define _POSIX_MEMLOCK 200809L
/* Mapping of files to memory is supported.  */	#define _POSIX_MAPPED_FILES 200809L
/* The fsync function is present.  */	#define _POSIX_FSYNC 200809L
/* Synchronizing file data is supported.  */	#define _POSIX_SYNCHRONIZED_IO 200809L
"/* Priority scheduling is not supported with the correct semantics,
   but GNU/Linux applications expect that the corresponding interfaces
   are available, even though the semantics do not meet the POSIX
   requirements.  See glibc bug 14829.  */"	#define _POSIX_PRIORITY_SCHEDULING 200809L
/* Processes have a saved set-user-ID and a saved set-group-ID.  */	#define _POSIX_SAVED_IDS 1
/* Job control is supported.  */	#define _POSIX_JOB_CONTROL 1
"/* Define POSIX options for Linux.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of the
   License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; see the file COPYING.LIB.  If
   not, see <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_POSIX_OPT_H
/* __WORDSIZE == 32 */	#endif
"/* Environments with 64-bit wide pointers can be provided,
   so these macros aren't defined:
   # undef _POSIX_V7_LP64_OFF64
   # undef _POSIX_V7_LPBIG_OFFBIG
   # undef _POSIX_V6_LP64_OFF64
   # undef _POSIX_V6_LPBIG_OFFBIG
   # undef _XBS5_LP64_OFF64
   # undef _XBS5_LPBIG_OFFBIG
   and sysconf tests for it at runtime.  */"	#endif
/* -m32 has 32-bit wide `off_t'.  */	#endif
"/* We have 32-bit wide `int', `long int' and pointers and all platforms
   support LFS.  -mx32 has 64-bit wide `off_t'.  */"	#ifndef __x86_64__
/* __WORDSIZE == 32 */	#else
/* By default we have 64-bit wide `long int', pointers and `off_t'.  */	#define _POSIX_V7_LP64_OFF64 1
"/* We also have no use (for now) for an environment with bigger pointers
   and offsets.  */"	#define _POSIX_V7_LPBIG_OFFBIG -1
"/* This header should define the following symbols under the described
   situations.  A value `1' means that the model is always supported,
   `-1' means it is never supported.  Undefined means it cannot be
   statically decided.

   _POSIX_V7_ILP32_OFF32   32bit int, long, pointers, and off_t type
   _POSIX_V7_ILP32_OFFBIG  32bit int, long, and pointers and larger off_t type

   _POSIX_V7_LP64_OFF32	   64bit long and pointers and 32bit off_t type
   _POSIX_V7_LPBIG_OFFBIG  64bit long and pointers and large off_t type

   The macros _POSIX_V6_ILP32_OFF32, _POSIX_V6_ILP32_OFFBIG,
   _POSIX_V6_LP64_OFF32, _POSIX_V6_LPBIG_OFFBIG, _XBS5_ILP32_OFF32,
   _XBS5_ILP32_OFFBIG, _XBS5_LP64_OFF32, and _XBS5_LPBIG_OFFBIG were
   used in previous versions of the Unix standard and are available
   only for compatibility.
*/"	#if __WORDSIZE == 64
"/* Copyright (C) 1999-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _UNISTD_H
/* The default search path.  */	_CS_PATH
/* Values for the NAME argument to `confstr'.  */	definition of (unnamed enum)
/* Leave room here, maybe we need a few more cache levels some day.  */	_SC_IPV6
/* Values according to POSIX 1003.1c (POSIX threads).  */	_SC_THREADS
"/* Values for the argument to `sysconf'
       corresponding to _POSIX2_* symbols.  */"	_SC_BC_BASE_MAX
/* Values for the argument to `sysconf'.  */	definition of (unnamed enum)
/* Values for the NAME argument to `pathconf' and `fpathconf'.  */	definition of (unnamed enum)
"/* `sysconf', `pathconf', and `confstr' NAME values.  Generic version.
   Copyright (C) 1993-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _UNISTD_H
/* getopt_core.h */	#endif
"/* Get definitions and prototypes for functions to process the
   arguments in ARGV (ARGC of them, minus the program name) for
   options given in OPTS.

   Return the option character from OPTS just read.  Return -1 when
   there are no more options.  For unrecognized options, or options
   missing arguments, 'optopt' is set to the option letter, and '?' is
   returned.

   The OPTS string is a list of characters which are recognized option
   letters, optionally followed by colons, specifying that that letter
   takes an argument, to be placed in 'optarg'.

   If a letter in OPTS is followed by two colons, its argument is
   optional.  This behavior is specific to the GNU 'getopt'.

   The argument '--' causes premature termination of argument
   scanning, explicitly telling 'getopt' that there are no more
   options.

   If OPTS begins with '-', then non-option arguments are treated as
   arguments to the option '\1'.  This behavior is specific to the GNU
   'getopt'.  If OPTS begins with '+', or POSIXLY_CORRECT is set in
   the environment, then do not permute arguments.

   For standards compliance, the 'argv' argument has the type
   char *const *, but this is inaccurate; if argument permutation is
   enabled, the argv array (not the strings it points to) must be
   writable.  */"	declaration of getopt
/* Set to an option character which was unrecognized.  */	declaration of optopt
"/* Callers store zero here to inhibit the error message 'getopt' prints
   for unrecognized options.  */"	declaration of opterr
"/* Index in ARGV of the next element to be scanned.
   This is used for communication to and from the caller
   and for communication between successive calls to 'getopt'.

   On entry to 'getopt', zero means this is the first call; initialize.

   When 'getopt' returns -1, this is the index of the first of the
   non-option elements that the caller should itself scan.

   Otherwise, 'optind' communicates from one call to the next
   how much of ARGV has been scanned so far.  */"	declaration of optind
"/* For communication from 'getopt' to the caller.
   When 'getopt' finds an option that takes an argument,
   the argument value is returned here.
   Also, when 'ordering' is RETURN_IN_ORDER,
   each non-option ARGV-element is returned here.  */"	declaration of optarg
"/* Declarations for getopt (basic, portable features only).
   Copyright (C) 1989-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library and is also part of gnulib.
   Patches to this file should be submitted to both projects.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _GETOPT_CORE_H
/* getopt_posix.h */	#endif
"/* GNU getopt has more functionality than POSIX getopt.  When we are
   explicitly conforming to POSIX and not GNU, and getopt.h (which is
   not part of POSIX) has not been included, the extra functionality
   is disabled.  */"	#ifdef __REDIRECT
"/* Declarations for getopt (POSIX compatibility shim).
   Copyright (C) 1989-2019 Free Software Foundation, Inc.
   Unlike the bulk of the getopt implementation, this file is NOT part
   of gnulib.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _GETOPT_POSIX_H
"/* Checking macros for unistd functions.
   Copyright (C) 2005-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _UNISTD_H
"/* Return the kernel thread ID (TID) of the current thread.  The
   returned value is not subject to caching.  Most Linux system calls
   accept a TID in place of a PID.  Using the TID to change properties
   of a thread that has been created using pthread_create can lead to
   undefined behavior (comparable to manipulating file descriptors
   directly that have not been created explicitly).  Note that a TID
   uniquely identifies a thread only while this thread is running; a
   TID can be reused once a thread has exited, even if the thread is
   not detached and has not been joined.  */"	declaration of gettid
"/* System-specific extensions of <unistd.h>, Linux version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _UNISTD_H
/* unistd.h  */	#endif
/* Define some macros helping to catch buffer overflows.  */	#if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
"/* Write LENGTH bytes of randomness starting at BUFFER.  Return 0 on
   success or -1 on error.  */"	declaration of getentropy
"/* Unix98 requires this function to be declared here.  In other
   standards it is in <pthread.h>.  */"	#if defined __USE_UNIX98 && !defined __USE_XOPEN2K
/* Return the name of the current user.  */	#endif
"/* Prior to Issue 6, the Single Unix Specification required these
   prototypes to appear in this header.  They are also found in
   <stdio.h>.  */"	#if defined __USE_XOPEN && !defined __USE_XOPEN2K
"/* Swab pairs bytes in the first N bytes of the area pointed to by
   FROM and copy the result to TO.  The value of TO must not be in the
   range [FROM - N + 1, FROM - 1].  If N is odd the first byte in FROM
   is without partner.  */"	declaration of swab
"/* One-way hash PHRASE, returning a string suitable for storage in the
   user database.  SALT selects the one-way function to use, and
   ensures that no two users' hashes are the same, even if they use
   the same passphrase.  The return value points to static storage
   which will be overwritten by the next call to crypt.  */"	declaration of crypt
/* Use POSIX199309 */	#endif
"/* Synchronize at least the data part of a file with the underlying
   media.  */"	declaration of fdatasync
/* __USE_GNU */	#endif
/* Copy LENGTH bytes from INFD to OUTFD.  */	declaration of copy_file_range
"/* Evaluate EXPRESSION, and repeat as long as it returns -1 with `errno'
   set to EINTR.  */"	#define TEMP_FAILURE_RETRY(expression) (__extension__ ({ long int __result; do __result = (long int) (expression); while (__result == -1L && errno == EINTR); __result; }))
/* Use misc and F_LOCK not already defined.  */	#endif
/* Test a region for other processes locks.  */	#define F_TEST 3
/* Test a region for other processes locks.  */	#ifndef __USE_FILE_OFFSET64
/* Test and lock a region for exclusive use.  */	#define F_TLOCK 2
/* Lock a region for exclusive use.  */	#define F_LOCK 1
/* Unlock a previously locked region.  */	#define F_ULOCK 0
"/* `lockf' is a simpler interface to the locking facilities of `fcntl'.
   LEN is always relative to the current file position.
   The CMD argument is one of the following.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	#define F_ULOCK 0
/* Use misc.  */	#endif
"/* Invoke `system call' number SYSNO, passing it the remaining arguments.
   This is completely system-dependent, and not often useful.

   In Unix, `syscall' sets `errno' for all errors and most calls return -1
   for errors; in many systems you cannot pass arguments or get return
   values for all system calls (`pipe', `fork', and `getppid' typically
   among them).

   In Mach, all system calls take normal arguments and always return an
   error code (zero for success).  */"	declaration of syscall
"/* Increase or decrease the end of accessible data space by DELTA bytes.
   If successful, returns the address the previous end of data space
   (i.e. the beginning of the new space, if DELTA > 0);
   returns (void *) -1 for errors (with errno set).  */"	declaration of sbrk
"/* Increase or decrease the end of accessible data space by DELTA bytes.
   If successful, returns the address the previous end of data space
   (i.e. the beginning of the new space, if DELTA > 0);
   returns (void *) -1 for errors (with errno set).  */"	declaration of sbrk
"/* Set the end of accessible data space (aka ""the break"") to ADDR.
   Returns zero on success and -1 for errors (with errno set).  */"	declaration of brk
/* Use POSIX.1b || X/Open Unix || XPG6.  */	#endif
/* Truncate the file FD is open on to LENGTH bytes.  */	#ifndef __USE_FILE_OFFSET64
/* Use X/Open Unix || POSIX 2008.  */	#endif
/* Truncate FILE to LENGTH bytes.  */	#ifndef __USE_FILE_OFFSET64
/* Use misc || X/Open Unix.  */	#endif
"/* Return the maximum number of file descriptors
   the current process could possibly have.  */"	declaration of getdtablesize
"/* Return the number of bytes in a page.  This is the system's page size,
   which is not necessarily the same as the hardware page size.  */"	declaration of getpagesize
/* Make all changes done to all files actually appear on disk.  */	declaration of sync
/* Return identifier for the current host.  */	declaration of gethostid
"/* Make all changes done to all files on the file system associated
   with FD actually appear on disk.  */"	declaration of syncfs
"/* Make all changes done to FD actually appear on disk.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of fsync
/* Use misc || X/Open.  */	#endif
"/* Prompt with PROMPT and read a string from the terminal without echoing.
   Uses /dev/tty if possible; otherwise stderr and stdin.  */"	declaration of getpass
"/* Make PATH be the root directory (the starting point for absolute paths).
   This call is restricted to the super-user.  */"	declaration of chroot
/* Use misc.  */	#endif
"/* Put the program in the background, and dissociate from the controlling
   terminal.  If NOCHDIR is zero, do `chdir (""/"")'.  If NOCLOSE is zero,
   redirects stdin, stdout, and stderr to /dev/null.  */"	declaration of daemon
/* Rewind and re-read the file.  */	declaration of setusershell
/* Discard cached info.  */	declaration of endusershell
/* Successive calls return the shells listed in `/etc/shells'.  */	declaration of endusershell
/* Successive calls return the shells listed in `/etc/shells'.  */	declaration of getusershell
"/* Turn accounting on if NAME is an existing file.  The system will then write
   a record for each process as it terminates, to this file.  If NAME is NULL,
   turn accounting off.  This call is restricted to the super-user.  */"	declaration of acct
"/* Enable statistical profiling, writing samples of the PC into at most
   SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling
   is enabled, the system examines the user PC and increments
   SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,
   disable profiling.  Returns zero on success, -1 on error.  */"	declaration of profil
/* Revoke the access of all descriptors currently open on FILE.  */	declaration of revoke
"/* Revoke access permissions to all processes currently communicating
   with the control terminal, and then send a SIGHUP signal to the process
   group of the control terminal.  */"	declaration of vhangup
"/* Get and set the NIS (aka YP) domain name, if any.
   Called just like `gethostname' and `sethostname'.
   The NIS domain name is usually the empty string when not using NIS.  */"	declaration of getdomainname
"/* Set the current machine's Internet number to ID.
   This call is restricted to the super-user.  */"	declaration of sethostid
"/* Set the name of the current host to NAME, which is LEN bytes long.
   This call is restricted to the super-user.  */"	declaration of sethostname
"/* Put the name of the current host in no more than LEN bytes of NAME.
   The result is null-terminated if LEN is large enough for the full
   name and the terminator.  */"	declaration of gethostname
/* Set the login name returned by `getlogin'.  */	declaration of setlogin
"/* Return at most NAME_LEN characters of the login name of the user in NAME.
   If it cannot be determined or some other error occurred, return the error
   code.  Otherwise return 0.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of getlogin_r
"/* Return the login name of the user.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of getlogin
/* Set the foreground process group ID of FD set PGRP_ID.  */	declaration of tcsetpgrp
/* Return the foreground process group ID of FD.  */	declaration of tcgetpgrp
/* Remove the directory PATH.  */	declaration of rmdir
/* Remove the link NAME relative to FD.  */	declaration of unlinkat
/* Remove the link NAME.  */	declaration of unlink
/* Like readlink but a relative PATH is interpreted relative to FD.  */	declaration of readlinkat
/* Like symlink but a relative path in TO is interpreted relative to TOFD.  */	declaration of symlinkat
/* Use POSIX.1-2001.  */	#endif
"/* Read the contents of the symbolic link PATH into no more than
   LEN bytes of BUF.  The contents are not null-terminated.
   Returns the number of characters read, or -1 for errors.  */"	declaration of readlink
/* Make a symbolic link to FROM named TO.  */	declaration of symlink
"/* Like link but relative paths in TO and FROM are interpreted relative
   to FROMFD and TOFD respectively.  */"	declaration of linkat
/* Make a link to FROM named TO.  */	declaration of link
"/* Return the index into the active-logins file (utmp) for
   the controlling terminal.  */"	declaration of ttyslot
"/* Return 1 if FD is a valid descriptor associated
   with a terminal, zero if not.  */"	declaration of isatty
"/* Store at most BUFLEN characters of the pathname of the terminal FD is
   open on in BUF.  Return 0 on success, otherwise an error number.  */"	declaration of ttyname_r
"/* Return the pathname of the terminal FD is open on, or NULL on errors.
   The returned storage is good only until the next call to this function.  */"	declaration of ttyname
/* Use misc or XPG < 7. */	#endif
"/* Clone the calling process, but without copying the whole address space.
   The calling process is suspended until the new process exits or is
   replaced by a call to `execve'.  Return -1 for errors, 0 to the new process,
   and the process ID of the new process to the old process.  */"	declaration of vfork
"/* Clone the calling process, creating an exact copy.
   Return -1 for errors, 0 to the new process,
   and the process ID of the new process to the old process.  */"	declaration of fork
"/* Set the real group ID, effective group ID, and saved-set group ID,
   of the calling process to RGID, EGID, and SGID, respectively.  */"	declaration of setresgid
"/* Set the real user ID, effective user ID, and saved-set user ID,
   of the calling process to RUID, EUID, and SUID, respectively.  */"	declaration of setresuid
"/* Fetch the real group ID, effective group ID, and saved-set group ID,
   of the calling process.  */"	declaration of getresgid
"/* Fetch the real user ID, effective user ID, and saved-set user ID,
   of the calling process.  */"	declaration of getresuid
/* Use POSIX.1-2001.  */	#endif
/* Set the effective group ID of the calling process to GID.  */	declaration of setegid
"/* Set the real group ID of the calling process to RGID,
   and the effective group ID of the calling process to EGID.  */"	declaration of setregid
"/* Set the group ID of the calling process to GID.
   If the calling process is the super-user, set the real
   and effective group IDs, and the saved set-group-ID to GID;
   if not, the effective group ID is set to GID.  */"	declaration of setgid
/* Use POSIX.1-2001.  */	#endif
/* Set the effective user ID of the calling process to UID.  */	declaration of seteuid
"/* Set the real user ID of the calling process to RUID,
   and the effective user ID of the calling process to EUID.  */"	declaration of setreuid
"/* Set the user ID of the calling process to UID.
   If the calling process is the super-user, set the real
   and effective user IDs, and the saved set-user-ID to UID;
   if not, the effective user ID is set to UID.  */"	declaration of setuid
/* Return nonzero iff the calling process is in group GID.  */	declaration of group_member
"/* If SIZE is zero, return the number of supplementary groups
   the calling process is in.  Otherwise, fill in the group IDs
   of its supplementary groups in LIST and return the number written.  */"	declaration of getgroups
/* Get the effective group ID of the calling process.  */	declaration of getegid
/* Get the real group ID of the calling process.  */	declaration of getgid
/* Get the effective user ID of the calling process.  */	declaration of geteuid
/* Get the real user ID of the calling process.  */	declaration of getuid
/* Return the session ID of the given process.  */	declaration of getsid
"/* Create a new session with the calling process as its leader.
   The process group IDs of the session and the calling process
   are set to the process ID of the calling process, which is returned.  */"	declaration of setsid
/* Use misc or X/Open.  */	#endif
"/* Set the process group ID of the calling process to its own PID.
   This is exactly the same as `setpgid (0, 0)'.  */"	declaration of setpgrp
"/* Set the process group ID of the process matching PID to PGID.
   If PID is zero, the current process's process group ID is set.
   If PGID is zero, the process ID of the process is used.  */"	declaration of setpgid
/* Get the process group ID of process PID.  */	declaration of __getpgid
/* Get the process group ID of the calling process.  */	declaration of getpgrp
/* Get the process ID of the calling process's parent.  */	declaration of getppid
/* Get the process ID of the calling process.  */	declaration of getpid
/* Get the value of the string-valued system variable NAME.  */	declaration of confstr
/* Get the value of the system variable NAME.  */	declaration of sysconf
/* Get file-specific configuration about descriptor FD.  */	declaration of fpathconf
/* Get file-specific configuration information about PATH.  */	declaration of pathconf
/* Terminate program execution with the low-order 8 bits of STATUS.  */	declaration of _exit
/* Add INC to priority of the current process.  */	declaration of nice
"/* Execute FILE, searching in the `PATH' environment variable if it contains
   no slashes, with arguments ARGV and environment from `environ'.  */"	declaration of execvpe
"/* Execute FILE, searching in the `PATH' environment variable if
   it contains no slashes, with all arguments after FILE until a
   NULL pointer and environment from `environ'.  */"	declaration of execlp
"/* Execute FILE, searching in the `PATH' environment variable if it contains
   no slashes, with arguments ARGV and environment from `environ'.  */"	declaration of execvp
"/* Execute PATH with all arguments after PATH until
   a NULL pointer and environment from `environ'.  */"	declaration of execl
"/* Execute PATH with all arguments after PATH until a NULL pointer,
   and the argument after that for environment.  */"	declaration of execle
/* Execute PATH with arguments ARGV and environment from `environ'.  */	declaration of execv
"/* Execute the file FD refers to, overlaying the running program image.
   ARGV and ENVP are passed to the new program, as for `execve'.  */"	declaration of fexecve
"/* Replace the current process, executing PATH with arguments ARGV and
   environment ENVP.  ARGV and ENVP are terminated by NULL pointers.  */"	declaration of execve
"/* NULL-terminated array of ""NAME=VALUE"" environment variables.  */"	declaration of __environ
"/* Duplicate FD to FD2, closing FD2 and making it open on the same
   file while setting flags according to FLAGS.  */"	declaration of dup3
/* Duplicate FD to FD2, closing FD2 and making it open on the same file.  */	declaration of dup2
/* Duplicate FD, returning a new file descriptor on the same file.  */	declaration of dup
"/* Put the absolute pathname of the current working directory in BUF.
   If successful, return BUF.  If not, put an error message in
   BUF and return NULL.  BUF should be at least PATH_MAX bytes long.  */"	declaration of getwd
"/* Return a malloc'd string containing the current directory name.
   If the environment variable `PWD' is set, and its value is correct,
   that value is used.  */"	declaration of get_current_dir_name
"/* Get the pathname of the current working directory,
   and put it in SIZE bytes of BUF.  Returns NULL if the
   directory couldn't be determined or SIZE was too small.
   If successful, returns BUF.  In GNU, if BUF is NULL,
   an array is allocated with `malloc'; the array is SIZE
   bytes long, unless SIZE == 0, in which case it is as
   big as necessary.  */"	declaration of getcwd
/* Change the process's working directory to the one FD is open on.  */	declaration of fchdir
/* Change the process's working directory to PATH.  */	declaration of chdir
/* Use GNU.  */	#endif
"/* Change the owner and group of FILE relative to the directory FD is open
   on.  */"	declaration of fchownat
/* Use X/Open Unix.  */	#endif
"/* Change owner and group of FILE, if it is a symbolic
   link the ownership of the symbolic link is changed.  */"	declaration of lchown
/* Change the owner and group of the file that FD is open on.  */	declaration of fchown
/* Change the owner and group of FILE.  */	declaration of chown
"/* Suspend the process until a signal arrives.
   This always returns -1 and sets `errno' to EINTR.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of pause
"/* Sleep USECONDS microseconds, or until a signal arrives that is not blocked
   or ignored.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of usleep
"/* Set an alarm to go off (generating a SIGALRM signal) in VALUE
   microseconds.  If INTERVAL is nonzero, when the alarm goes off, the
   timer is reset to go off every INTERVAL microseconds thereafter.
   Returns the number of microseconds remaining before the alarm.  */"	declaration of ualarm
"/* Make the process sleep for SECONDS seconds, or until a signal arrives
   and is not ignored.  The function returns the number of seconds less
   than SECONDS which it actually slept (thus zero if it slept the full time).
   If a signal handler does a `longjmp' or modifies the handling of the
   SIGALRM signal while inside `sleep' call, the handling of the SIGALRM
   signal afterwards is undefined.  There is no return value to indicate
   error, but if `sleep' returns SECONDS, it probably didn't work.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of sleep
"/* Schedule an alarm.  In SECONDS seconds, the process will get a SIGALRM.
   If SECONDS is zero, any currently scheduled alarm will be cancelled.
   The function returns the number of seconds remaining until the last
   alarm scheduled would have signaled, or zero if there wasn't one.
   There is no return value to indicate an error, but you can set `errno'
   to 0 and check its value after calling `alarm', and this might tell you.
   The signal may come late due to processor scheduling.  */"	declaration of alarm
"/* Same as pipe but apply flags passed in FLAGS to the new file
   descriptors.  */"	declaration of pipe2
"/* Create a one-way communication channel (pipe).
   If successful, two file descriptors are stored in PIPEDES;
   bytes written on PIPEDES[1] can be read from PIPEDES[0].
   Returns 0 if successful, -1 if not.  */"	declaration of pipe
"/* Write N bytes of BUF to FD at the given position OFFSET without
   changing the file pointer.  Return the number written, or -1.  */"	declaration of pwrite64
"/* Read NBYTES into BUF from FD at the given position OFFSET without
   changing the file pointer.  Return the number read, -1 for errors
   or 0 for EOF.  */"	declaration of pread64
"/* Write N bytes of BUF to FD at the given position OFFSET without
   changing the file pointer.  Return the number written, or -1.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of pwrite
"/* Read NBYTES into BUF from FD at the given position OFFSET without
   changing the file pointer.  Return the number read, -1 for errors
   or 0 for EOF.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of pread
"/* Write N bytes of BUF to FD.  Return the number written, or -1.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of write
"/* Read NBYTES into BUF from FD.  Return the
   number read, -1 for errors or 0 for EOF.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of read
"/* Close the file descriptor FD.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of close
"/* Move FD's file position to OFFSET bytes from the
   beginning of the file (if WHENCE is SEEK_SET),
   the current position (if WHENCE is SEEK_CUR),
   or the end of the file (if WHENCE is SEEK_END).
   Return the new file position.  */"	#ifndef __USE_FILE_OFFSET64
/* Old BSD names for the same constants; just for compatibility.  */	#define L_SET SEEK_SET
/* Old BSD names for the same constants; just for compatibility.  */	#endif
/* Seek to next hole.  */	#endif
/* Seek to next hole.  */	#define SEEK_HOLE 4
/* Seek to next data.  */	#define SEEK_DATA 3
/* Seek from end of file.  */	#ifdef __USE_GNU
/* Seek from end of file.  */	#define SEEK_END 2
/* Seek from current position.  */	#define SEEK_CUR 1
/* Seek from beginning of file.  */	#define SEEK_SET 0
/* <stdio.h> has the same definitions.  */	#ifndef _STDIO_H
/* Values for the WHENCE argument to lseek.  */	#ifndef _STDIO_H
/* Use GNU.  */	#endif
"/* Test for access to FILE relative to the directory FD is open on.
   If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',
   otherwise use real IDs like `access'.  */"	declaration of faccessat
/* An alias for `euidaccess', used by some other systems.  */	declaration of eaccess
"/* Test for access to NAME using the effective UID and GID
   (as normal file operations use).  */"	declaration of euidaccess
/* Test for access to NAME using the real UID and real GID.  */	declaration of access
/* Test for existence.  */	#define F_OK 0
/* Test for execute permission.  */	#define X_OK 1
/* Test for write permission.  */	#define W_OK 2
/* Test for read permission.  */	#define R_OK 4
"/* Values for the second argument to access.
   These may be OR'd together.  */"	#define R_OK 4
/* X/Open */	#endif
"/* The Single Unix specification says that some more types are
   available here.  */"	#ifndef __gid_t_defined
/* Standard error output.  */	#define STDERR_FILENO 2
/* Standard output.  */	#define STDOUT_FILENO 1
/* Standard input.  */	#define STDIN_FILENO 0
/* Standard file descriptors.  */	#define STDIN_FILENO 0
/* Get the environment definitions from Unix98.  */	#if defined __USE_UNIX98 || defined __USE_XOPEN2K
/* The legacy interfaces are also available.  */	#define _XOPEN_LEGACY 1
"/* The enhanced internationalization capabilities according to XPG4.2
   are present.  */"	#define _XOPEN_ENH_I18N 1
/* The X/Open Unix extensions are available.  */	#define _XOPEN_UNIX 1
/* We are compatible with the old published standards as well.  */	#define _XOPEN_XPG2 1
/* Commands and utilities from XPG4 are available.  */	#define _XOPEN_XCU_VERSION 4
/* X/Open version number to which the library conforms.  It is selectable.  */	#ifdef __USE_XOPEN2K8
"/* If defined, the implementation supports the
   creation of locales with the localedef utility.  */"	#define _POSIX2_LOCALEDEF __POSIX2_THIS_VERSION
"/* If defined, the implementation supports the
   Software Development Utilities Option.  */"	#define _POSIX2_SW_DEV __POSIX2_THIS_VERSION
"/* If defined, the implementation supports the
   C Language Development Utilities Option.  */"	#define _POSIX2_C_DEV __POSIX2_THIS_VERSION
"/* If defined, the implementation supports the
   C Language Bindings Option.  */"	#define _POSIX2_C_BIND __POSIX2_THIS_VERSION
/* This symbol was required until the 2001 edition of POSIX.  */	#define _POSIX2_C_VERSION __POSIX2_THIS_VERSION
/* The utilities on GNU systems also correspond to this version.  */	#define _POSIX2_VERSION __POSIX2_THIS_VERSION
/* The utilities on GNU systems also correspond to this version.  */	#endif
/* The utilities on GNU systems also correspond to this version.  */	#else
/* The utilities on GNU systems also correspond to this version.  */	#elif defined __USE_POSIX199506
/* The utilities on GNU systems also correspond to this version.  */	#elif defined __USE_XOPEN2K
"/* These are not #ifdef __USE_POSIX2 because they are
   in the theoretically application-owned namespace.  */"	#ifdef __USE_XOPEN2K8
/* POSIX Standard approved as ISO/IEC 9945-1 as of September 1990.  */	#endif
/* POSIX Standard approved as ISO/IEC 9945-1 as of September 1993.  */	#else
/* POSIX Standard approved as ISO/IEC 9945-1 as of June 1995.  */	#elif defined __USE_POSIX199309
/* POSIX Standard approved as ISO/IEC 9945-1 as of December 2001.  */	#elif defined __USE_POSIX199506
/* POSIX Standard approved as ISO/IEC 9945-1 as of September 2008.  */	#define _POSIX_VERSION 200809L
"/* These may be used to determine what facilities are present at compile time.
   Their values can be obtained at run time from `sysconf'.  */"	#ifdef __USE_XOPEN2K8
"/*
 *	POSIX Standard: 2.10 Symbolic Constants		<unistd.h>
 */"	#ifndef _UNISTD_H
// duplication.	#endif
// extension is), we can't try to use the fallback.	#if !defined(HAVE_WCSTOD_L) && !defined(__NetBSD__)
// Don't block when locking.	#endif
/// Send specified signal to specified process group.	#endif
/// Cover for textdomain().	declaration of fish_textdomain
/// Cover for bindtextdomain().	declaration of fish_bindtextdomain
/// Cover for gettext().	declaration of fish_gettext
/// change.	declaration of wcslcpy
/// Fallback for wcsndup function. Returns a copy of \c in, truncated to a maximum length of \c c.	declaration of wcsndup
// HAVE_WCSNCASECMP	#endif
// HAVE_STD__WCSNCASECMP	#endif
// HAVE_WCSCASECMP	#endif
// HAVE_STD__WCSCASECMP	#endif
// HAVE_WCSDUP	#endif
// HAVE_STD__WCSDUP	#endif
/// Solaris 11 in the std:: namespace.	#ifndef HAVE_WCSDUP
/// Solaris tparm has a set fixed of parameters in its curses implementation, work around this here.	#endif
/// Number of columns.	#endif
/// expects. Hopefully.	#if defined(NCURSES_VERSION) || defined(__NetBSD__)
/// This _should_ be defined by wchar.h, but e.g. OpenBSD doesn't.	#endif
// !C++11 && !__GNUC__ && !_MSC_VER	#else
/// thread_local support.	#if HAVE_CX11_THREAD_LOCAL
// otherwise it uses mkstemp followed by fcntl	declaration of fish_mkstemp_cloexec
/// the system one is busted.	declaration of fish_wcswidth
/// the system one is busted.	declaration of fish_wcwidth
/// The guessed value of the emoji width based on TERM.	declaration of g_guessed_fish_emoji_width
/// painful this is. A value of 0 means to use the guessed value.	declaration of g_fish_emoji_width
/// The column width of ambiguous East Asian characters.	declaration of g_fish_ambiguous_width
// FISH_NULL_TERMINATED_ARRAY_H	#endif
// null_terminated_array_t<char_t>.	declaration of convert_wide_array_to_narrow
/// Instance method.	declaration of to_list
/// Instance method.	definition of to_list
/// Convert from a null terminated list to a vector of strings.	declaration of to_list
/// Convert from a null terminated list to a vector of strings.	definition of to_list
// No assignment or copying.	definition of operator=
// Helper class for managing a null-terminated array of null-terminated strings (of some char type).	definition of null_terminated_array_t<CharT>
// Support for null-terminated arrays like char**.	#ifndef FISH_NULL_TERMINATED_ARRAY_H
/// slightly safer.	declaration of unsetenv_lock
/// slightly safer.	declaration of setenv_lock
/// Gets a path appropriate for runtime storage	declaration of env_get_runtime_path
/// Returns true if we think the terminal supports setting its title.	declaration of term_supports_setting_title
/// \return true if any value changed.	declaration of env_universal_barrier
"// does the terminal have the ""eat_newline_glitch"""	declaration of term_has_xn
// Do not push or pop from this.	declaration of globals
"// Compatibility hack; access the ""environment stack"" from back when there was just one."	declaration of principal_ref
/// Slightly optimized implementation.	declaration of get_pwd_slash
/// Sets up argv as the given list of strings.	declaration of set_argv
/// These correspond to $status and $pipestatus.	declaration of set_last_statuses
/// These correspond to $status and $pipestatus.	declaration of get_last_status
/// These correspond to $status and $pipestatus.	declaration of get_last_statuses
/// you want to read from another thread.	declaration of snapshot
/// Returns an array containing all exported variables in a format suitable for execv.	declaration of export_arr
/// \return true if something changed, false otherwise.	declaration of universal_barrier
/// Pop the variable stack. Used for implementing local variables for functions and for-loops.	declaration of pop
/// Push the variable stack. Used for implementing local variables for functions and for-loops.	declaration of push
/// \return zero if the variable existed, and non-zero if the variable did not exist	declaration of remove
/// Update the PWD variable based on the result of getcwd.	declaration of set_pwd_from_getcwd
/// Sets the variable with the specified name to no values.	declaration of set_empty
/// Sets the variable with the specified name to a single value.	declaration of set_one
/// variable.	declaration of set
/// Implementation of environment_t.	declaration of get_names
/// Implementation of environment_t.	declaration of get
/// \return whether we are the principal stack.	definition of is_principal
/// All environment stacks are guarded by a global lock.	declaration of acquire_impl
/// All environment stacks are guarded by a global lock.	declaration of acquire_impl
/// The implementation. Do not access this directly.	definition of impl_
/// The implementation. Do not access this directly.	definition of impl_
/// A mutable environment which allows scopes to be pushed and popped.	declaration of env_stack_impl_t
/// A mutable environment which allows scopes to be pushed and popped.	declaration of env_stack_impl_t
/// The null environment contains nothing.	definition of null_environment_t
/// Returns the PWD with a terminating slash.	declaration of get_pwd_slash
/// An environment is read-only access to variable values.	definition of environment_t
/// \return a copy of this variable with new values.	definition of setting_vals
/// \return the character used when delimiting quoted expansion.	declaration of get_delimiter
// Constructors that infer the flags from a name.	definition of env_var_t
// Constructors.	declaration of env_var_t
// Constructors.	definition of env_var_t
// whether the variable is a path variable	flag_pathvar
// whether the variable is read only	flag_read_only
// whether the variable is exported	flag_export
/// Flag in this variable.	definition of flags_
/// shared_ptr allows for cheap copying.	definition of vals_
/// variable.	definition of env_var_t
/// routines.	declaration of misc_init
/// Initialize environment variable data.	declaration of env_init
/// Return a statuses for a single process status.	definition of just
/// Pipestatus value.	definition of pipestatus
/// 0 if all processes exited normally.	definition of kill_signal
/// Status of the last job to exit.	definition of status
/// A collection of status and pipestatus.	definition of statuses_t
// e.g., /usr/local/bin	definition of bin
// e.g., /usr/local/share/doc/fish	definition of doc
// e.g., /usr/local/etc	definition of sysconf
// e.g., /usr/local/share	definition of data
/// env_init.	definition of config_paths_t
/// Return values for `env_stack_t::set()`.	definition of (unnamed enum)
/// to modify a var that should not be modified by direct user action; e.g., a read-only var.	ENV_USER
/// Flag to unmark a variable as a path variable.	ENV_UNPATHVAR
/// Flag to mark a variable as a path variable.	ENV_PATHVAR
/// Flag for unexported variable.	ENV_UNEXPORT
/// Flag for exported (to commands) variable.	ENV_EXPORT
/// Flag for universal variable.	ENV_UNIVERSAL
/// Flag for global variable.	ENV_GLOBAL
/// Flag for local (to the current block) variable.	ENV_LOCAL
/// the var is in or whether it is exported or unexported.	ENV_DEFAULT
// Flags that may be passed as the 'mode' in env_stack_t::set() / environment_t::get().	definition of (unnamed enum)
// Prototypes for functions for manipulating fish script variables.	#ifndef FISH_ENV_H
/* Inform libc code that these two types are effectively identical.  */	#define _DIRENT_MATCHES_DIRENT64 1
/* Backwards compatibility.  */	#define d_fileno d_ino
/* We must not include limits.h! */	definition of d_name
/* We must not include limits.h! */	definition of d_name
"/* Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _DIRENT_H
"/* Read from the directory descriptor FD into LENGTH bytes at BUFFER.
   Return the number of bytes read on success (0 for end of
   directory), and -1 for failure.  */"	declaration of getdents64
"/* System-specific extensions of <dirent.h>.  Linux version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _DIRENT_H
/* dirent.h  */	#endif
/* Use GNU.  */	#endif
/* Function to compare two `struct dirent's by name & version.  */	#ifndef __USE_FILE_OFFSET64
/* Use misc.  */	#endif
"/* Read directory entries from FD into BUF, reading at most NBYTES.
   Reading starts at offset *BASEP, and *BASEP is updated with the new
   position after reading.  Returns the number of bytes read; zero when at
   end of directory; or -1 for errors.  */"	#ifndef __USE_FILE_OFFSET64
/* Use XPG7.  */	#endif
/* Function to compare two `struct dirent's alphabetically.  */	#ifndef __USE_FILE_OFFSET64
"/* This function is like `scandir' but it uses the 64bit dirent structure.
   Please note that the CMP function must now work with struct dirent64 **.  */"	declaration of scandirat64
"/* Similar to `scandir' but a relative DIR name is interpreted relative
   to the directory for which DFD is a descriptor.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* This function is like `scandir' but it uses the 64bit dirent structure.
   Please note that the CMP function must now work with struct dirent64 **.  */"	declaration of scandir64
"/* Scan the directory DIR, calling SELECTOR on each directory entry.
   Entries for which SELECT returns nonzero are individually malloc'd,
   sorted using qsort with CMP, and collected in a malloc'd array in
   *NAMELIST.  Returns the number of entries selected, or -1 on error.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	#ifndef __USE_FILE_OFFSET64
/* `MAXNAMLEN' is the BSD name for what POSIX calls `NAME_MAX'.  */	#ifdef NAME_MAX
/* Return the file descriptor used by DIRP.  */	declaration of dirfd
/* Return the current position of DIRP.  */	declaration of telldir
/* Seek to position POS on DIRP.  */	declaration of seekdir
/* Rewind DIRP to the beginning of the directory.  */	declaration of rewinddir
/* POSIX or misc */	#endif
"/* Reentrant version of `readdir'.  Return in RESULT a pointer to the
   next entry.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Read a directory entry from DIRP.  Return a pointer to a `struct
   dirent' describing the entry, or NULL for EOF or error.  The
   storage returned may be overwritten by a later readdir call on the
   same DIR stream.

   If the Large File Support API is selected we have to use the
   appropriate interface.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Close the directory stream DIRP.
   Return 0 if successful, -1 if not.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of closedir
"/* Same as opendir, but open the stream on the file descriptor FD.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fdopendir
"/* Open a directory stream on NAME.
   Return a DIR stream on the directory, or NULL if it could not be opened.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of opendir
"/* This is the data type of directory stream objects.
   The actual structure is opaque to users.  */"	declaration of __dirstream
/* Convert between stat structure types and directory types.  */	#define IFTODT(mode) (((mode) & 0170000) >> 12)
/* File types for `d_type'.  */	definition of (unnamed enum)
"/* These macros extract size information from a `struct dirent *'.
   They may evaluate their argument multiple times, so it must not
   have side effects.  Each of these may involve a relatively costly
   call to `strlen' on some systems, so these values should be cached.

   _D_EXACT_NAMLEN (DP)	returns the length of DP->d_name, not including
   its terminating null character.

   _D_ALLOC_NAMLEN (DP)	returns a size at least (_D_EXACT_NAMLEN (DP) + 1);
   that is, the allocation size needed to hold the DP->d_name string.
   Use this macro when you don't need the exact length, just an upper bound.
   This macro is less likely to require calling `strlen' than _D_EXACT_NAMLEN.
   */"	#ifdef _DIRENT_HAVE_D_NAMLEN
/* Backward compatibility.  */	#endif
"/*
 *	POSIX Standard: 5.1.2 Directory Operations	<dirent.h>
 */"	#ifndef _DIRENT_H
/* bits/wctype-wchar.h.  */	#endif
/* Converts an lowercase letter to the corresponding uppercase letter.  */	declaration of towupper
/* Converts an uppercase letter to the corresponding lowercase letter.  */	declaration of towlower
"/* Determine whether the wide-character WC has the property described by
   DESC.  */"	declaration of iswctype
"/* Construct value that describes a class of wide characters identified
   by the string argument PROPERTY.  */"	declaration of wctype
"/* Test for any wide character that corresponds to a standard blank
   wide character or a locale-specific set of wide characters for
   which `iswalnum' is false.  */"	#ifdef __USE_ISOC99
"/* Test for any wide character that corresponds to a hexadecimal-digit
   character equivalent to that performed be the functions described
   in the previous subclause.  */"	declaration of iswxdigit
"/* Test for any wide character that corresponds to an uppercase letter
   or is one of a locale-specific set of wide character for which none
   of `iswcntrl', `iswdigit', `iswpunct', or `iswspace' is true.  */"	declaration of iswupper
"/* Test for any wide character that corresponds to a locale-specific
   set of wide characters for which none of `iswalnum', `iswgraph', or
   `iswpunct' is true.  */"	declaration of iswspace
"/* Test for any printing wide character that is one of a
   locale-specific et of wide characters for which neither `iswspace'
   nor `iswalnum' is true.  */"	declaration of iswpunct
/* Test for any printing wide character.  */	declaration of iswprint
"/* Test for any wide character that corresponds to a lowercase letter
   or is one of a locale-specific set of wide characters for which
   none of `iswcntrl', `iswdigit', `iswpunct', or `iswspace' is true.  */"	declaration of iswlower
"/* Test for any wide character for which `iswprint' is true and
   `iswspace' is false.  */"	declaration of iswgraph
"/* Test for any wide character that corresponds to a decimal-digit
   character.  */"	declaration of iswdigit
/* Test for any control wide character.  */	declaration of iswcntrl
"/* Test for any wide character for which `iswupper' or 'iswlower' is
   true, or any wide character that is one of a locale-specific set of
   wide-characters for which none of `iswcntrl', `iswdigit',
   `iswpunct', or `iswspace' is true.  */"	declaration of iswalpha
"/* Test for any wide character for which `iswalpha' or `iswdigit' is
   true.  */"	declaration of iswalnum
/* Not _ISwbit  */	#endif
/* Alphanumeric.  */	_ISwalnum
/* Punctuation.  */	_ISwpunct
/* Control character.  */	_ISwcntrl
/* Blank (usually SPC and TAB).  */	_ISwblank
/* Graphical.  */	_ISwgraph
/* Printing.  */	_ISwprint
/* Whitespace.  */	_ISwspace
/* Hexadecimal numeric.  */	_ISwxdigit
/* Numeric.  */	_ISwdigit
/* Alphabetic.  */	_ISwalpha
/* lowercase.  */	_ISwlower
/* UPPERCASE.  */	_ISwupper
/* Alphanumeric.  */	__ISwalnum
/* Punctuation.  */	__ISwpunct
/* Control character.  */	__ISwcntrl
/* Blank (usually SPC and TAB).  */	__ISwblank
/* Graphical.  */	__ISwgraph
/* Printing.  */	__ISwprint
/* Whitespace.  */	__ISwspace
/* Hexadecimal numeric.  */	__ISwxdigit
/* Numeric.  */	__ISwdigit
/* Alphabetic.  */	__ISwalpha
/* lowercase.  */	__ISwlower
/* UPPERCASE.  */	__ISwupper
/* __BYTE_ORDER == __LITTLE_ENDIAN */	#else
"/* Scalar type that can hold values which represent locale-specific
   character classifications.  */"	declaration of wctype_t
"/*
 *	ISO C99 Standard: 7.25
 *	Wide character classification and mapping utilities  <wctype.h>
 */"	#ifndef _BITS_WCTYPE_WCHAR_H
/* wctype.h  */	#endif
/* Use POSIX 2008.  */	#endif
/* Map the wide character WC using the mapping described by DESC.  */	declaration of towctrans_l
"/* Construct value that describes a mapping between wide characters
   identified by the string argument PROPERTY.  */"	declaration of wctrans_l
/* Converts an lowercase letter to the corresponding uppercase letter.  */	declaration of towupper_l
/* Converts an uppercase letter to the corresponding lowercase letter.  */	declaration of towlower_l
"/* Determine whether the wide-character WC has the property described by
   DESC.  */"	declaration of iswctype_l
"/* Construct value that describes a class of wide characters identified
   by the string argument PROPERTY.  */"	declaration of wctype_l
"/* Test for any wide character that corresponds to a standard blank
   wide character or a locale-specific set of wide characters for
   which `iswalnum' is false.  */"	declaration of iswblank_l
"/* Test for any wide character that corresponds to a hexadecimal-digit
   character equivalent to that performed be the functions described
   in the previous subclause.  */"	declaration of iswxdigit_l
"/* Test for any wide character that corresponds to an uppercase letter
   or is one of a locale-specific set of wide character for which none
   of `iswcntrl', `iswdigit', `iswpunct', or `iswspace' is true.  */"	declaration of iswupper_l
"/* Test for any wide character that corresponds to a locale-specific
   set of wide characters for which none of `iswalnum', `iswgraph', or
   `iswpunct' is true.  */"	declaration of iswspace_l
"/* Test for any printing wide character that is one of a
   locale-specific et of wide characters for which neither `iswspace'
   nor `iswalnum' is true.  */"	declaration of iswpunct_l
/* Test for any printing wide character.  */	declaration of iswprint_l
"/* Test for any wide character that corresponds to a lowercase letter
   or is one of a locale-specific set of wide characters for which
   none of `iswcntrl', `iswdigit', `iswpunct', or `iswspace' is true.  */"	declaration of iswlower_l
"/* Test for any wide character for which `iswprint' is true and
   `iswspace' is false.  */"	declaration of iswgraph_l
"/* Test for any wide character that corresponds to a decimal-digit
   character.  */"	declaration of iswdigit_l
/* Test for any control wide character.  */	declaration of iswcntrl_l
"/* Test for any wide character for which `iswupper' or 'iswlower' is
   true, or any wide character that is one of a locale-specific set of
   wide-characters for which none of `iswcntrl', `iswdigit',
   `iswpunct', or `iswspace' is true.  */"	declaration of iswalpha_l
"/* Test for any wide character for which `iswalpha' or `iswdigit' is
   true.  */"	declaration of iswalnum_l
/* Map the wide character WC using the mapping described by DESC.  */	declaration of towctrans
"/* Construct value that describes a mapping between wide characters
   identified by the string argument PROPERTY.  */"	declaration of wctrans
"/* Scalar type that can hold values which represent locale-specific
   character mappings.  */"	declaration of wctrans_t
"/* Constant expression of type `wint_t' whose value does not correspond
   to any member of the extended character set.  */"	#ifndef WEOF
"/*
 *	ISO C99 Standard: 7.25
 *	Wide character classification and mapping utilities  <wctype.h>
 */"	#ifndef _WCTYPE_H
// namespace std	#endif
/// RAII wrapper for DIR*	definition of dir_t
// Used to permit these as keys in std::map.	declaration of operator<
/// problem). Therefore we include richer information.	definition of file_id_t
// returns an immortal locale_t corresponding to the C locale.	declaration of fish_c_locale
// some code points. See issue #3050.	#ifndef FISH_NO_ISW_WRAPPERS
/// Wide character version of rename.	declaration of wrename
/// Wide character version of mkdir.	declaration of wmkdir
/// will be nothing more than a wrapper around gettext, like all other functions in this file.	declaration of wgettext
/// Wide character version of basename().	declaration of wbasename
/// Wide character version of dirname().	declaration of wdirname
/// directories anyways.	declaration of wreaddir_for_dirs
/// Wide character version of readdir().	declaration of wreaddir_resolving
/// Wide character version of readdir().	declaration of wreaddir
/// allowing 'cd' into a directory that may not exist; see #5341.	declaration of path_normalize_for_cd
/// 3. Remove /./ in the middle.	declaration of normalize_path
/// \returns the canonicalized path, or none if the path is invalid.	declaration of wrealpath
/// Wide character version of getcwd().	declaration of wgetcwd
/// Async-safe version of std::strerror().	declaration of safe_strerror
/// Async-safe version of perror().	declaration of safe_perror
/// Wide character version of perror().	declaration of wperror
/// Wide character version of unlink().	declaration of wunlink
/// Wide character version of access().	declaration of waccess
/// Wide character version of lstat().	declaration of lwstat
/// Wide character version of stat().	declaration of wstat
/// POSIX (hooray).	declaration of wopendir
/// Return 1 if remote, 0 if local, -1 on error or if not implemented on this platform.	declaration of fd_check_is_remote
/// Mark an fd as blocking; returns errno or 0 on success.	declaration of make_fd_blocking
/// Mark an fd as nonblocking; returns errno or 0 on success.	declaration of make_fd_nonblocking
/// Narrow versions of wopen_cloexec.	declaration of open_cloexec
/// Narrow versions of wopen_cloexec.	declaration of open_cloexec
/// possible).	declaration of wopen_cloexec
/// Sets CLO_EXEC on a given fd according to the value of \p should_set.	declaration of set_cloexec
// Prototypes for wide character equivalents of various standard unix functions.	#ifndef FISH_WUTIL_H
// Note there is no reason to invalidate the cache here.	ExprStmt
/// Future calls to path_to_autoload() will return previously-returned paths.	definition of clear
/// commands.	declaration of get_autoloaded_commands
/// This does not actually mark the command as being autoloaded.	declaration of can_autoload
/// \return whether a command is currently being autoloaded.	definition of autoload_in_progress
/// Mark that a command previously returned from path_to_autoload is finished autoloading.	definition of mark_autoload_finished
/// holding any particular locks.	declaration of perform_autoload
/// code; it is the caller's responsibility to load the file.	declaration of resolve_command
/// Construct an autoloader that loads from the paths given by \p env_var_name.	declaration of autoload_t
/// This is exposed for testing.	declaration of resolve_command
/// This is exposed for testing.	declaration of invalidate_cache
/// changes. This is never null (but it may be a cache with no paths).	definition of cache_
/// changes. This is never null (but it may be a cache with no paths).	definition of cache_
/// The list of commands that we are currently autoloading.	definition of current_autoloading_
/// A map from command to the files we have autoloaded.	definition of autoloaded_files_
/// The environment variable whose paths we observe.	definition of env_var_name_
/// it.	definition of autoload_t
// The classes responsible for autoloading functions and completions.	#ifndef FISH_AUTOLOAD_H
/* bits/signum-generic.h.  */	#endif
/* Biggest signal number + 1 (including real-time signals).  */	#define _NSIG (__SIGRTMAX + 1)
"/* Not all systems support real-time signals.  bits/signum.h indicates
   that they are supported by overriding __SIGRTMAX to a value greater
   than __SIGRTMIN.  These constants give the kernel-level hard limits,
   but some real-time signals may be used internally by glibc.  Do not
   use these constants in application code; use SIGRTMIN and SIGRTMAX
   (defined in signal.h) instead.  */"	#define __SIGRTMIN 32
/* Old System V name */	#define SIGCLD SIGCHLD
/* IOT instruction, abort() on a PDP-11.  */	#define SIGIOT SIGABRT
/* I/O now possible (4.2 BSD).  */	#define SIGIO SIGPOLL
/* Archaic names for compatibility.  */	#define SIGIO SIGPOLL
/* Window size change (4.3 BSD, Sun).  */	#define SIGWINCH 28
"/* Nonstandard signals found in all modern POSIX systems
   (including both BSD and Linux).  */"	#define SIGWINCH 28
/* User-defined signal 2.  */	#define SIGUSR2 31
/* User-defined signal 1.  */	#define SIGUSR1 30
/* Profiling timer expired.  */	#define SIGPROF 27
/* Virtual timer expired.  */	#define SIGVTALRM 26
/* File size limit exceeded.  */	#define SIGXFSZ 25
/* CPU time limit exceeded.  */	#define SIGXCPU 24
/* Pollable event occurred (System V).  */	#define SIGPOLL 23
/* Background write to control terminal.  */	#define SIGTTOU 22
/* Background read from control terminal.  */	#define SIGTTIN 21
/* Child terminated or stopped.  */	#define SIGCHLD 20
/* Continue.  */	#define SIGCONT 19
/* Keyboard stop.  */	#define SIGTSTP 18
/* Stop, unblockable.  */	#define SIGSTOP 17
/* Urgent data is available at a socket.  */	#define SIGURG 16
/* New(er) POSIX signals (1003.1-2008, 1003.1-2013).  */	#define SIGURG 16
/* Alarm clock.  */	#define SIGALRM 14
/* Broken pipe.  */	#define SIGPIPE 13
/* Bad system call.  */	#define SIGSYS 12
/* Bus error.  */	#define SIGBUS 10
/* Killed.  */	#define SIGKILL 9
/* Trace/breakpoint trap.  */	#define SIGTRAP 5
/* Quit.  */	#define SIGQUIT 3
/* Hangup.  */	#define SIGHUP 1
/* Historical signals specified by POSIX. */	#define SIGHUP 1
/* Termination request.  */	#define SIGTERM 15
/* Invalid access to storage.  */	#define SIGSEGV 11
/* Erroneous arithmetic operation.  */	#define SIGFPE 8
/* Abnormal termination.  */	#define SIGABRT 6
/* Illegal instruction.  */	#define SIGILL 4
/* Interactive attention signal.  */	#define SIGINT 2
/* ISO C99 signals.  */	#define SIGINT 2
/* Add signal to hold mask.  */	#define SIG_HOLD ((__sighandler_t) 2)
/* Ignore signal.  */	#define SIG_IGN ((__sighandler_t) 1)
/* Default action.  */	#define SIG_DFL ((__sighandler_t) 0)
/* Error return.  */	#define SIG_ERR ((__sighandler_t) -1)
/* Fake signal functions.  */	#define SIG_ERR ((__sighandler_t) -1)
"/* Signal number constants.  Generic template.
   Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SIGNUM_GENERIC_H
/* <signal.h> included.  */	#endif
/* Power failure imminent.  */	#define SIGPWR 30
/* Stack fault (obsolete).  */	#define SIGSTKFLT 16
"/* Adjustments and additions to the signal number constants for
   most Linux systems.  */"	#define SIGSTKFLT 16
"/* Signal number definitions.  Linux version.
   Copyright (C) 1995-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SIGNUM_H
"/* An integral type that can be modified atomically, without the
   possibility of a signal arriving in the middle of the operation.  */"	declaration of sig_atomic_t
/* Type for data associated with a signal.  */	#ifdef __USE_POSIX199309
"/* Define __sigval_t.
   Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef ____sigval_t_defined
"/* si_utime and si_stime must be 4 byte aligned for x32 to match the
   kernel.  We align siginfo_t to 8 bytes so that si_utime and
   si_stime are actually aligned to 8 bytes since their offsets are
   multiple of 8 bytes.  Note: with some compilers, the alignment
   attribute would be ignored if it were put in __SI_CLOCK_T instead
   of encapsulated in a typedef.  */"	#endif
/* Architecture-specific adjustments to siginfo_t.  x86 version.  */	#ifndef _BITS_SIGINFO_ARCH_H
/* X/Open requires some more fields with fixed names.  */	#define si_pid _sifields._kill.si_pid
/* AUDIT_ARCH_* of syscall.  */	definition of _arch
/* Triggering system call number.  */	definition of _syscall
/* Calling user insn.  */	definition of _call_addr
/* SIGSYS.  */	#if __SI_HAVE_SIGSYS
/* Band event for SIGPOLL.  */	definition of si_band
/* SIGPOLL.  */	definition of struct <unnamed>
/* used when si_code=SEGV_PKUERR */	definition of _pkey
/* used when si_code=SEGV_BNDERR */	definition of struct <unnamed>
/* Valid LSB of the reported address.  */	definition of si_addr_lsb
/* Faulting insn/memory ref.  */	definition of si_addr
/* SIGILL, SIGFPE, SIGSEGV, SIGBUS.  */	definition of struct <unnamed>
/* Exit value or signal.  */	definition of si_status
/* Real user ID of sending process.  */	definition of si_uid
"/* Which child.	 */"	definition of si_pid
/* SIGCHLD.  */	definition of struct <unnamed>
/* Signal value.  */	definition of si_sigval
/* Real user ID of sending process.  */	definition of si_uid
/* Sending process ID.  */	definition of si_pid
/* POSIX.1b signals.  */	definition of struct <unnamed>
/* Signal value.  */	definition of si_sigval
/* Overrun count.  */	definition of si_overrun
/* Timer ID.  */	definition of si_tid
/* POSIX.1b timers.  */	definition of struct <unnamed>
/* Real user ID of sending process.  */	definition of si_uid
/* Sending process ID.  */	definition of si_pid
/* kill().  */	definition of struct <unnamed>
/* Explicit padding.  */	definition of __pad0
/* Signal code.  */	definition of si_code
"/* If non-zero, an errno value associated with
				   this signal, as defined in <errno.h>.  */"	definition of si_errno
/* Signal number.  */	definition of si_signo
/* nothing */	#define __SI_SIGFAULT_ADDL
/* nothing */	#define __SI_ALIGNMENT
/* This architecture has no additional siginfo constants.  */	#endif
/* Architecture-specific additional siginfo constants.  */	#ifndef _BITS_SIGINFO_CONSTS_ARCH_H
"/* Architectures might also add architecture-specific constants.
   These are all considered GNU extensions.  */"	#ifdef __USE_GNU
/* Device disconnected.  */	POLL_HUP
/* High priority input available.  */	POLL_PRI
/* I/O error.  */	POLL_ERR
/* Input message available.   */	POLL_MSG
/* Output buffers available.  */	POLL_OUT
/* Data input available.  */	POLL_IN
/* `si_code' values for SIGPOLL signal.  */	definition of (unnamed enum)
/* Stopped child has continued.  */	CLD_CONTINUED
/* Child has stopped.  */	CLD_STOPPED
/* Traced child has trapped.  */	CLD_TRAPPED
/* Child terminated abnormally.  */	CLD_DUMPED
/* Child was killed.  */	CLD_KILLED
/* Child has exited.  */	CLD_EXITED
/* `si_code' values for SIGCHLD signal.  */	definition of (unnamed enum)
/* Undiagnosed trap.  */	TRAP_UNK
/* Hardware breakpoint/watchpoint.  */	TRAP_HWBKPT
/* Process taken branch trap.  */	TRAP_BRANCH
/* Process trace trap.  */	TRAP_TRACE
/* Process breakpoint.  */	TRAP_BRKPT
/* `si_code' values for SIGTRAP signal.  */	definition of (unnamed enum)
/* Hardware memory error: action optional.  */	BUS_MCEERR_AO
/* Hardware memory error: action required.  */	BUS_MCEERR_AR
/* Object specific hardware error.  */	BUS_OBJERR
/* Non-existant physical address.  */	BUS_ADRERR
/* Invalid address alignment.  */	BUS_ADRALN
/* `si_code' values for SIGBUS signal.  */	definition of (unnamed enum)
/* Precise MCD exception.  */	SEGV_ADIPERR
/* Disrupting MCD error.  */	SEGV_ADIDERR
/* ADI not enabled for mapped object.  */	SEGV_ACCADI
/* Protection key checking failure.  */	SEGV_PKUERR
/* Bounds checking failure.  */	SEGV_BNDERR
/* Invalid permissions for mapped object.  */	SEGV_ACCERR
/* Address not mapped to object.  */	SEGV_MAPERR
/* `si_code' values for SIGSEGV signal.  */	definition of (unnamed enum)
/* Trap on condition.  */	FPE_CONDTRAP
/* Undiagnosed floating-point exception.  */	FPE_FLTUNK
/* Subscript out of range.  */	FPE_FLTSUB
/* Floating point invalid operation.  */	FPE_FLTINV
/* Floating point inexact result.  */	FPE_FLTRES
/* Floating point underflow.  */	FPE_FLTUND
/* Floating point overflow.  */	FPE_FLTOVF
/* Floating point divide by zero.  */	FPE_FLTDIV
/* Integer overflow.  */	FPE_INTOVF
/* Integer divide by zero.  */	FPE_INTDIV
/* `si_code' values for SIGFPE signal.  */	definition of (unnamed enum)
/* Unimplemented instruction address.  */	ILL_BADIADDR
/* Internal stack error.  */	ILL_BADSTK
/* Coprocessor error.  */	ILL_COPROC
/* Privileged register.  */	ILL_PRVREG
/* Privileged opcode.  */	ILL_PRVOPC
/* Illegal trap. */	ILL_ILLTRP
/* Illegal addressing mode.  */	ILL_ILLADR
/* Illegal operand.  */	ILL_ILLOPN
/* Illegal opcode.  */	ILL_ILLOPC
/* `si_code' values for SIGILL signal.  */	definition of (unnamed enum)
/* Send by kernel.  */	SI_KERNEL
/* Sent by kill, sigsend.  */	SI_USER
/* Sent by sigqueue.  */	SI_QUEUE
/* Sent by timer expiration.  */	SI_TIMER
/* Sent by real time mesq state change.  */	SI_MESGQ
/* Sent by AIO completion.  */	SI_ASYNCIO
/* Sent by queued SIGIO. */	SI_SIGIO
/* Sent by tkill.  */	SI_TKILL
"/* Sent by execve killing subsidiary
				   threads.  */"	SI_DETHREAD
/* Sent by asynch name lookup completion.  */	SI_ASYNCNL
"/* Values for `si_code'.  Positive values are reserved for kernel-generated
   signals.  */"	definition of (unnamed enum)
"/* siginfo constants.  Linux version.
   Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SIGINFO_CONSTS_H
"/* To avoid sigval_t (not a standard type name) having C++ name
   mangling depending on whether the selected standard includes union
   sigval, it should not be defined at all when using a standard for
   which the sigval name is not reserved; in that case, headers should
   not include <bits/types/sigval_t.h> and should use only the
   internal __sigval_t name.  */"	#ifndef __USE_POSIX199309
/* POSIX names to access some of the members.  */	#define sigev_notify_function _sigev_un._sigev_thread._function
/* Thread attributes.  */	definition of _attribute
/* Function to start.  */	definition of _function
"/* When SIGEV_SIGNAL and SIGEV_THREAD_ID set, LWP ID of the
	   thread to receive the signal.  */"	definition of _tid
/* Structure to transport application-defined values with signals.  */	definition of sigevent
/* Forward declaration.  */	#ifndef __have_pthread_attr_t
"/* Send signal to specific thread.
				   This is a Linux extension.  */"	SIGEV_THREAD_ID
/* Deliver via thread creation.  */	SIGEV_THREAD
/* Other notification: meaningless.  */	SIGEV_NONE
/* Notify via signal.  */	SIGEV_SIGNAL
/* `sigev_notify' values.  */	definition of (unnamed enum)
"/* sigevent constants.  Linux version.
   Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SIGEVENT_CONSTS_H
/* Set the set of blocked signals.  */	#define SIG_SETMASK 2
/* Unblock signals.  */	#define SIG_UNBLOCK 1
/* Block signals.  */	#define SIG_BLOCK 0
/* Values for the HOW argument to `sigprocmask'.  */	#define SIG_BLOCK 0
/* Some aliases for the SA_ constants.  */	#define SA_NOMASK SA_NODEFER
/* Historical no-op.  */	#define SA_INTERRUPT 0x20000000
/* Reset to SIG_DFL on entry to handler.  */	#define SA_RESETHAND 0x80000000
"/* Don't automatically block the signal when
				    its handler is being executed.  */"	#define SA_NODEFER 0x40000000
/* Restart syscall on signal return.  */	#define SA_RESTART 0x10000000
/* Use signal stack by using `sa_restorer'. */	#define SA_ONSTACK 0x08000000
"/* Invoke signal-catching function with
				    three arguments instead of one.  */"	#define SA_SIGINFO 4
/* Don't create zombie on child death.  */	#define SA_NOCLDWAIT 2
/* Don't send SIGCHLD when children stop.  */	#define SA_NOCLDSTOP 1
/* Bits in `sa_flags'.  */	#define SA_NOCLDSTOP 1
/* Restore handler.  */	definition of sa_restorer
/* Special flags.  */	definition of sa_flags
/* Additional set of signals to be blocked.  */	definition of sa_mask
/* Used if SA_SIGINFO is set.  */	definition of sa_sigaction
/* Used if SA_SIGINFO is not set.  */	definition of sa_handler
/* Signal handler.  */	#if defined __USE_POSIX199309 || defined __USE_XOPEN_EXTENDED
/* Structure describing the action to be taken when a signal arrives.  */	definition of sigaction
"/* The proper definitions for Linux's sigaction.
   Copyright (C) 1993-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SIGACTION_H
/* _BITS_SIGCONTEXT_H */	#endif
/* __x86_64__ */	#endif
/* FPU environment matching the 64-bit FXSAVE layout.  */	definition of cwd
/* __x86_64__ */	#else
"/* Kernel headers before 2.1.1 define a struct sigcontext_struct, but
   we need sigcontext.  Some packages have come to rely on
   sigcontext_struct being defined on 32-bit x86, so define this for
   their benefit.  */"	#endif
/* FXSR FPU environment.  */	#ifndef sigcontext_struct
"/* Copyright (C) 2002-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SIGCONTEXT_H
/* Structure describing a signal stack.  */	definition of stack_t
"/* Define stack_t.  Linux version.
   Copyright (C) 1998-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef __stack_t_defined
/* sys/ucontext.h */	#endif
/* !__x86_64__ */	#endif
/* Userlevel context.  */	#endif
/* Number of each register is the `gregset_t' array.  */	#endif
/* Container for all general registers.  */	#ifdef __USE_GNU
/* Number of general registers.  */	#ifdef __USE_MISC
/* !__x86_64__ */	#else
/* Userlevel context.  */	definition of ucontext_t
/* Note that fpregs is a pointer.  */	definition of fpregs
/* Context to describe whole processor state.  */	definition of mcontext_t
/* Structure to describe FPU registers.  */	declaration of fpregset_t
/* 64-bit FXSAVE format.  */	definition of cwd
/* Actually short cs, gs, fs, __pad0.  */	REG_CSGSFS
/* Number of each register in the `gregset_t' array.  */	definition of (unnamed enum)
/* Container for all general registers.  */	declaration of gregset_t
/* Number of general registers.  */	#define __NGREG 23
/* Type for general register.  */	declaration of greg_t
"/* Copyright (C) 2001-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_UCONTEXT_H
/* bits/sigstack.h */	#endif
/* System default stack size.  */	#define SIGSTKSZ 8192
/* Minimum stack size for a signal handler.  */	#define MINSIGSTKSZ 2048
"/* sigstack, sigaltstack definitions.
   Copyright (C) 1998-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SIGSTACK_H
/* bits/ss_flags.h */	#endif
/* Possible values for `ss_flags'.  */	definition of (unnamed enum)
"/* ss_flags values for stack_t.  Linux version.
   Copyright (C) 1998-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SS_FLAGS_H
/* Nonzero if executing on this stack.  */	definition of ss_onstack
/* Signal stack pointer.  */	definition of ss_sp
/* Structure describing a signal stack (obsolete).  */	definition of sigstack
"/* Define struct sigstack.
   Copyright (C) 1998-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef __sigstack_defined
/* bits/sigthread.h */	#endif
/* Queue signal and data to a thread.  */	declaration of pthread_sigqueue
/* Send signal SIGNO to the given thread. */	declaration of pthread_kill
"/* Modify the signal mask for the calling thread.  The arguments have
   the same meaning as for sigprocmask(2). */"	declaration of pthread_sigmask
"/* Signal handling function for threaded programs.
   Copyright (C) 1998-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of the
   License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; see the file COPYING.LIB.  If
   not, see <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SIGTHREAD_H
/* __USE_GNU */	#endif
"/* Send SIGNAL to the thread TID in the thread group (process)
   identified by TGID.  This function behaves like kill, but also
   fails with ESRCH if the specified TID does not belong to the
   specified thread group.  */"	declaration of tgkill
"/* System-specific extensions of <signal.h>, Linux version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SIGNAL_H
/* not signal.h */	#endif
/* Return number of available real-time signal with lowest priority.  */	declaration of __libc_current_sigrtmax
/* Return number of available real-time signal with highest priority.  */	declaration of __libc_current_sigrtmin
/* use Unix98 */	#endif
/* Set the disposition of SIG.  */	declaration of sigset
/* Set the disposition of SIG to SIG_IGN.  */	declaration of sigignore
/* Remove SIG from the calling process' signal mask.  */	declaration of sigrelse
/* Add SIG to the calling process' signal mask.  */	declaration of sighold
"/* Run signals handlers on the stack specified by SS (if not NULL).
   If OSS is not NULL, it is filled in with the old signal stack status.
   This interface is obsolete and on many platform not implemented.  */"	declaration of sigstack
/* __USE_XOPEN_EXTENDED || __USE_MISC */	#endif
"/* Alternate signal handler stack interface.
   This interface should always be preferred over `sigstack'.  */"	declaration of sigaltstack
"/* If INTERRUPT is nonzero, make signal SIG interrupt system calls
   (causing them to fail with EINTR); if INTERRUPT is zero, make system
   calls be restarted after signal SIG.  */"	declaration of siginterrupt
/* Use POSIX.1-2008 or X/Open Unix.  */	#endif
/* Use misc.  */	#endif
/* Restore the state saved in SCP.  */	declaration of sigreturn
"/* Names of the signals.  This variable exists only for compatibility.
   Use `strsignal' instead (see <string.h>).  */"	declaration of sys_siglist
"/* Names of the signals.  This variable exists only for compatibility.
   Use `strsignal' instead (see <string.h>).  */"	declaration of _sys_siglist
/* Use POSIX.  */	#endif
/* Use POSIX 199306.  */	#endif
"/* Send signal SIG to the process PID.  Associate data in VAL with the
   signal.  */"	declaration of sigqueue
"/* Select any of pending signals from SET and place information in INFO.
   Wait the time specified by TIMEOUT if no signal is pending.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of sigtimedwait
"/* Select any of pending signals from SET and place information in INFO.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of sigwaitinfo
/* Use POSIX 1995.  */	#endif
"/* Select any of pending signals from SET or wait for any to arrive.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of sigwait
/* Put in SET all signals that are blocked and waiting to be delivered.  */	declaration of sigpending
/* Get and/or set the action for signal SIG.  */	declaration of sigaction
"/* Change the set of blocked signals to SET,
   wait until a signal arrives, and restore the set of blocked signals.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of sigsuspend
/* Get and/or change the set of blocked signals.  */	declaration of sigprocmask
/* GNU */	#endif
/* Build new signal set by combining the two inputs set using logical OR.  */	declaration of sigorset
/* Build new signal set by combining the two inputs set using logical AND.  */	declaration of sigandset
/* Return non-empty value is SET is not empty.  */	declaration of sigisemptyset
/* Return 1 if SIGNO is in SET, 0 if not.  */	declaration of sigismember
/* Remove SIGNO from SET.  */	declaration of sigdelset
/* Add SIGNO to SET.  */	declaration of sigaddset
/* Set all signals in SET.  */	declaration of sigfillset
/* Clear all signals from SET.  */	declaration of sigemptyset
/* 4.4 BSD uses the name `sig_t' for this.  */	#ifdef __USE_MISC
/* Use misc.  */	#endif
/* Return currently selected signal mask.  */	declaration of siggetmask
/* Set the mask of blocked signals to MASK, returning the old mask.  */	declaration of sigsetmask
/* Block signals in MASK, returning the old mask.  */	declaration of sigblock
/* Compute mask for signal SIG.  */	#define sigmask(sig) ((int)(1u << ((sig) - 1)))
/* Remove a signal from the signal mask and suspend the process.  */	#endif
"/* The `sigpause' function in X/Open defines the argument as the
   signal number.  This requires redirecting to another function
   because the default version in glibc uses an old BSD interface.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	#ifdef __USE_XOPEN_EXTENDED
/* POSIX 2008.  */	#endif
/* Print a message describing the meaning of the given signal information.  */	declaration of psiginfo
/* Print a message describing the meaning of the given signal number.  */	declaration of psignal
/* Use misc.  */	#endif
/* SVID names for the same things.  */	declaration of ssignal
/* Raise signal SIG, i.e., send SIG to yourself.  */	declaration of raise
/* Use misc || X/Open Unix.  */	#endif
"/* Send SIG to all processes in process group PGRP.
   If PGRP is zero, send SIG to all processes in
   the current process's process group.  */"	declaration of killpg
/* Use POSIX.  */	#endif
"/* Send signal SIG to process number PID.  If PID is zero,
   send SIG to all processes in the current process's process group.
   If PID is < -1, send SIG to all processes in process group - PID.  */"	#ifdef __USE_POSIX
"/* The X/Open definition of `signal' conflicts with the BSD version.
   So they defined another function `bsd_signal'.  */"	#endif
/* Make sure the used `signal' implementation is the SVID version. */	#ifdef __REDIRECT_NTH
"/* Set the handler for the signal SIG to HANDLER, returning the old
   handler, or SIG_ERR on error.
   By default `signal' has the BSD semantic.  */"	#ifdef __USE_MISC
"/* The X/Open definition of `signal' specifies the SVID semantic.  Use
   the additional function `sysv_signal' when X/Open compatibility is
   requested.  */"	declaration of __sysv_signal
/* Type of a signal handler.  */	declaration of __sighandler_t
/* Unix98 */	#endif
"/*
 *	ISO C99 Standard: 7.14 Signal handling <signal.h>
 */"	#ifndef _SIGNAL_H
/* sys/time.h */	#endif
/* Misc.  */	#endif
"/* Convenience macros for operations on timevals.
   NOTE: `timercmp' does not work for >= or <=.  */"	#define timerisset(tvp) ((tvp)->tv_sec || (tvp)->tv_usec)
"/* Change the access time of FILE relative to FD to TVP[0] and the
   modification time of FILE to TVP[1].  If TVP is a null pointer, use
   the current time instead.  Returns 0 on success, -1 on errors.  */"	declaration of futimesat
/* Same as `utimes', but takes an open file descriptor instead of a name.  */	declaration of futimes
/* Same as `utimes', but does not follow symbolic links.  */	declaration of lutimes
"/* Change the access time of FILE to TVP[0] and the modification time of
   FILE to TVP[1].  If TVP is a null pointer, use the current time instead.
   Returns 0 on success, -1 on errors.  */"	declaration of utimes
"/* Set the timer WHICH to *NEW.  If OLD is not NULL,
   set *OLD to the old value of timer WHICH.
   Returns 0 on success, -1 on errors.  */"	declaration of setitimer
"/* Set *VALUE to the current setting of timer WHICH.
   Return 0 on success, -1 on errors.  */"	declaration of getitimer
"/* Use the nicer parameter type only in GNU mode and not for C++ since the
   strict C++ rules prevent the automatic promotion.  */"	#else
/* Time to the next timer expiration.  */	definition of it_value
/* Value to put into `it_value' when the timer expires.  */	definition of it_interval
"/* Type of the second argument to `getitimer' and
   the second and third arguments `setitimer'.  */"	definition of itimerval
"/* Timers run when the process is executing and when
       the system is executing on behalf of the process.  */"	ITIMER_PROF
/* Timers run only when the process is executing.  */	ITIMER_VIRTUAL
/* Timers run in real time.  */	ITIMER_REAL
/* Values for the first argument to `getitimer' and `setitimer'.  */	definition of __itimer_which
"/* Adjust the current time of day by the amount in DELTA.
   If OLDDELTA is not NULL, it is filled in with the amount
   of time adjustment remaining to be done from the last `adjtime' call.
   This call is restricted to the super-user.  */"	declaration of adjtime
"/* Set the current time of day and timezone information.
   This call is restricted to the super-user.  */"	declaration of settimeofday
"/* Get the current time of day and timezone information,
   putting it into *TV and *TZ.  If TZ is NULL, *TZ is not filled.
   Returns 0 on success, -1 on errors.
   NOTE: This form of timezone information is obsolete.
   Use the functions and variables declared in <time.h> instead.  */"	declaration of gettimeofday
/* Nonzero if DST is ever in effect.  */	definition of tz_dsttime
/* Minutes west of GMT.  */	definition of tz_minuteswest
"/* Structure crudely representing a timezone.
   This is obsolete and should never be used.  */"	definition of timezone
/* Macros for converting between `struct timeval' and `struct timespec'.  */	#define TIMEVAL_TO_TIMESPEC(tv,ts) { (ts)->tv_sec = (tv)->tv_sec; (ts)->tv_nsec = (tv)->tv_usec * 1000; }
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_TIME_H
/* sys/wait.h  */	#endif
/* Use misc.  */	#endif
/* PID is like waitpid.  Other args are like wait3.  */	declaration of wait4
"/* Wait for a child to exit.  When one does, put its status in *STAT_LOC and
   return its process ID.  For errors return (pid_t) -1.  If USAGE is not
   nil, store information about the child's resource usage there.  If the
   WUNTRACED bit is set in OPTIONS, return status for stopped children;
   otherwise don't.  */"	declaration of wait3
"/* This being here makes the prototypes valid whether or not
   we have already included <sys/resource.h> to define `struct rusage'.  */"	declaration of rusage
"/* This being here makes the prototypes valid whether or not
   we have already included <sys/resource.h> to define `struct rusage'.  */"	declaration of rusage
"/* Wait for a childing matching IDTYPE and ID to change the status and
   place appropriate information in *INFOP.
   If IDTYPE is P_PID, match any process whose process ID is ID.
   If IDTYPE is P_PGID, match any process whose process group is ID.
   If IDTYPE is P_ALL, match any process.
   If the WNOHANG bit is set in OPTIONS, and that child
   is not already dead, clear *INFOP and return 0.  If successful, store
   exit code and status in *INFOP.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of waitid
"/* Wait for a child matching PID to die.
   If PID is greater than 0, match any process whose process ID is PID.
   If PID is (pid_t) -1, match any process.
   If PID is (pid_t) 0, match any process with the
   same process group as the current process.
   If PID is less than -1, match any process whose
   process group is the absolute value of PID.
   If the WNOHANG bit is set in OPTIONS, and that child
   is not already dead, return (pid_t) 0.  If successful,
   return PID and store the dead child's status in STAT_LOC.
   Return (pid_t) -1 for errors.  If the WUNTRACED bit is
   set in OPTIONS, return status for stopped children; otherwise don't.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of waitpid
/* Any process in my process group.  */	#define WAIT_MYPGRP 0
/* Any process.  */	#define WAIT_ANY (-1)
/* Special values for the PID argument to `waitpid' and `wait4'.  */	#define WAIT_ANY (-1)
"/* Wait for a child to die.  When one does, put its status in *STAT_LOC
   and return its process ID.  For errors, return (pid_t) -1.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of wait
/* <stdlib.h> not included.  */	#endif
/* This will define all the `__W*' macros.  */	#ifdef __WIFCONTINUED
/* These macros could also be defined in <stdlib.h>.  */	#if !defined _STDLIB_H || (!defined __USE_XOPEN && !defined __USE_XOPEN2K8)
"/* Some older standards require the contents of struct rusage to be
   defined here.  */"	#endif
"/*
 *	POSIX Standard: 3.2.1 Wait for Process Termination	<sys/wait.h>
 */"	#ifndef _SYS_WAIT_H
/* output speed */	definition of c_ospeed
/* input speed */	definition of c_ispeed
/* control characters */	definition of c_cc
/* line discipline */	definition of c_line
/* local mode flags */	definition of c_lflag
/* control mode flags */	definition of c_cflag
/* output mode flags */	definition of c_oflag
/* input mode flags */	definition of c_iflag
"/* struct termios definition.  Linux/generic version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
/* c_cc characters */	#define VINTR 0
"/* termios c_cc symbolic constant definitions.  Linux/generic version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
/* Input is UTF8 (not in POSIX).  */	#define IUTF8 0040000
"/* Ring bell when input queue is full
			    (not in POSIX).  */"	#define IMAXBEL 0020000
/* Enable start/stop input control.  */	#define IXOFF 0010000
/* Enable any character to restart output.  */	#define IXANY 0004000
/* Enable start/stop output control.  */	#define IXON 0002000
"/* Map uppercase characters to lowercase on input
			    (not in POSIX).  */"	#define IUCLC 0001000
/* Map CR to NL on input.  */	#define ICRNL 0000400
/* Ignore CR.  */	#define IGNCR 0000200
/* Map NL to CR on input.  */	#define INLCR 0000100
/* Strip 8th bit off characters.  */	#define ISTRIP 0000040
/* Enable input parity check.  */	#define INPCK 0000020
/* Mark parity and framing errors.  */	#define PARMRK 0000010
/* Ignore characters with parity errors.  */	#define IGNPAR 0000004
/* Signal interrupt on break.  */	#define BRKINT 0000002
/* Ignore break condition.  */	#define IGNBRK 0000001
/* c_iflag bits */	#define IGNBRK 0000001
"/* termios input mode definitions.  Linux/generic version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
/* Vertical-tab delay type 1.  */	#define VT1 0040000
/* Vertical-tab delay type 0.  */	#define VT0 0000000
/* Select vertical-tab delays:  */	#define VTDLY 0040000
/* Form-feed delay type 1.  */	#define FF1 0100000
/* Form-feed delay type 0.  */	#define FF0 0000000
/* Select form-feed delays:  */	#define FFDLY 0100000
/* Backspace-delay type 1.  */	#define BS1 0020000
/* Backspace-delay type 0.  */	#define BS0 0000000
/* Select backspace delays:  */	#define BSDLY 0020000
/* Expand tabs to spaces.  */	#define TAB3 0014000
/* Horizontal-tab delay type 2.  */	#define TAB2 0010000
/* Horizontal-tab delay type 1.  */	#define TAB1 0004000
/* Horizontal-tab delay type 0.  */	#define TAB0 0000000
/* Select horizontal-tab delays:  */	#define TABDLY 0014000
/* Carriage-return delay type 3.  */	#define CR3 0003000
/* Carriage-return delay type 2.  */	#define CR2 0002000
/* Carriage-return delay type 1.  */	#define CR1 0001000
/* Carriage-return delay type 0.  */	#define CR0 0000000
/* Select carriage-return delays:  */	#define CRDLY 0003000
/* Newline type 1.  */	#define NL1 0000400
/* Newline type 0.  */	#define NL0 0000000
/* Select newline delays:  */	#define NLDLY 0000400
/* Fill is DEL.  */	#define OFDEL 0000200
/* Use fill characters for delay.  */	#define OFILL 0000100
/* NL performs CR function.  */	#define ONLRET 0000040
/* No CR output at column 0.  */	#define ONOCR 0000020
/* Map CR to NL on output.  */	#define OCRNL 0000010
/* Map NL to CR-NL on output.  */	#define ONLCR 0000004
"/* Map lowercase characters to uppercase on output.
			    (not in POSIX).  */"	#define OLCUC 0000002
/* Post-process output.  */	#define OPOST 0000001
/* c_oflag bits */	#define OPOST 0000001
"/* termios output mode definitions.  Linux/generic version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
/* Extra output baud rates (not in POSIX).  */	#define B57600 0010001
/* Flow control.  */	#define CRTSCTS 020000000000
/* Mark or space (stick) parity.  */	#define CMSPAR 010000000000
/* Input baud rate (not used).  */	#define CIBAUD 002003600000
"/* Extra baud speed mask, included in CBAUD.
				 (not in POSIX).  */"	#define CBAUDEX 000000010000
/* Baud speed mask (not in POSIX).  */	#define CBAUD 000000010017
"/* termios baud rate selection definitions.  Linux/generic version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
/* c_cflag bits.  */	#define CSIZE 0000060
"/* termios control mode definitions.  Linux/generic version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
"/* Enable implementation-defined input
			     processing.  */"	#define IEXTEN 0100000
"/* All characters in the input queue are reprinted
			     when the next character is read
			     (not in POSIX).  */"	#define PENDIN 0040000
"/* Output is being flushed.  This flag is toggled by
			     typing the DISCARD character (not in POSIX).  */"	#define FLUSHO 0010000
"/* If ICANON is also set, KILL is echoed by erasing
			     each character on the line, as specified by ECHOE
			     and ECHOPRT (not in POSIX).  */"	#define ECHOKE 0004000
"/* If ICANON and ECHO are also set, characters are
			     printed as they are being erased
			     (not in POSIX).  */"	#define ECHOPRT 0002000
"/* If ECHO is also set, terminal special characters
			     other than TAB, NL, START, and STOP are echoed as
			     ^X, where X is the character with ASCII code 0x40
			     greater than the special character
			     (not in POSIX).  */"	#define ECHOCTL 0001000
/* Send SIGTTOU for background output.  */	#define TOSTOP 0000400
/* Disable flush after interrupt or quit.  */	#define NOFLSH 0000200
/* Echo NL.  */	#define ECHONL 0000100
/* Echo KILL.  */	#define ECHOK 0000040
"/* Echo erase character as error-correcting
			     backspace.  */"	#define ECHOE 0000020
/* Enable echo.  */	#define ECHO 0000010
/* Canonical input (erase and kill processing).  */	#define ICANON 0000002
/* Enable signals.  */	#define ISIG 0000001
/* c_lflag bits */	#define ISIG 0000001
"/* termios local mode definitions.  Linux/generic version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
/* tcsetattr uses these.  */	#define TCSANOW 0
"/* termios tcflag symbolic contants definitions.  Linux/generic version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
"/* termios baud platform specific definitions.  Linux/generic version.
   Copyright (C) 2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
/* tcflush() and TCFLSH use these */	#define TCIFLUSH 0
/* tcflow() and TCXONC use these */	#define TCOOFF 0
/* Transmitter physically empty */	#define TIOCSER_TEMT 0x01
/* ioctl (fd, TIOCSERGETLSR, &result) where result may be as below */	#define TIOCSER_TEMT 0x01
/* hang up */	#define B0 0000000
/* c_cflag bit meaning */	#define B0 0000000
"/* termios type and macro definitions.  Linux version.
   Copyright (C) 1993-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _TERMIOS_H
/* termios.h  */	#endif
/* Get process group ID for session leader for controlling terminal FD.  */	declaration of tcgetsid
"/* Suspend or restart transmission on FD.
   Values for ACTION (TC[IO]{OFF,ON}) are in <bits/termios.h>.  */"	declaration of tcflow
"/* Flush pending data on FD.
   Values for QUEUE_SELECTOR (TC{I,O,IO}FLUSH) are in <bits/termios.h>.  */"	declaration of tcflush
"/* Wait for pending output to be written on FD.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of tcdrain
/* Send zero bits on FD.  */	declaration of tcsendbreak
/* Set *TERMIOS_P to indicate raw mode.  */	declaration of cfmakeraw
"/* Set the state of FD to *TERMIOS_P.
   Values for OPTIONAL_ACTIONS (TCSA*) are in <bits/termios.h>.  */"	declaration of tcsetattr
/* Put the state of FD into *TERMIOS_P.  */	declaration of tcgetattr
/* Set both the input and output baud rates in *TERMIOS_OP to SPEED.  */	declaration of cfsetspeed
/* Set the input baud rate stored in *TERMIOS_P to SPEED.  */	declaration of cfsetispeed
/* Set the output baud rate stored in *TERMIOS_P to SPEED.  */	declaration of cfsetospeed
/* Return the input baud rate stored in *TERMIOS_P.  */	declaration of cfgetispeed
/* Return the output baud rate stored in *TERMIOS_P.  */	declaration of cfgetospeed
"/* Compare a character C to a value VAL from the `c_cc' array in a
   `struct termios'.  If VAL is _POSIX_VDISABLE, no character can match it.  */"	#define CCEQ(val,c) ((c) == (val) && (val) != _POSIX_VDISABLE)
"/*
 *	POSIX Standard: 7.1-2 General Terminal Interface	<termios.h>
 */"	#ifndef _TERMIOS_H
/* _STL_DEQUE_H */	#endif
// namespace std	#endif
// for which this is valid.	definition of __is_bitwise_relocatable<deque<_Tp, allocator<_Tp>>, void>
/// See std::deque::swap().	definition of swap
/// Based on operator<	definition of operator>=
/// Based on operator<	definition of operator<=
/// Based on operator<	definition of operator>
/// Based on operator==	definition of operator!=
"/**
   *  @brief  Deque ordering relation.
   *  @param  __x  A %deque.
   *  @param  __y  A %deque of the same type as @a __x.
   *  @return  True iff @a x is lexicographically less than @a __y.
   *
   *  This is a total ordering relation.  It is linear in the size of the
   *  deques.  The elements must be comparable with @c <.
   *
   *  See std::lexicographical_compare() for how the determination is made.
  */"	definition of operator<
"/**
   *  @brief  Deque equality comparison.
   *  @param  __x  A %deque.
   *  @param  __y  A %deque of the same type as @a __x.
   *  @return  True iff the size and elements of the deques are equal.
   *
   *  This is an equivalence relation.  It is linear in the size of the
   *  deques.  Deques are considered equivalent if their sizes are equal,
   *  and if corresponding elements compare equal.
  */"	definition of operator==
// so we need to individually move each element.	#endif
//@}	#if __cplusplus >= 201103L
// Called by resize(sz).	#endif
// _M_fill_assign, operator=.	#if __cplusplus >= 201103L
// called by insert(p,x)	#if __cplusplus < 201103L
/// Helper functions for push_* and pop_*.	#if __cplusplus < 201103L
// called by deque(n).	#endif
"/**
       *  @brief Fills the %deque with copies of value.
       *  @param  __value  Initial value.
       *  @return   Nothing.
       *  @pre _M_start and _M_finish have already been initialized,
       *  but none of the %deque's elements have yet been constructed.
       *
       *  This function is called only when the user provides an explicit size
       *  (with or without an explicit exemplar value).
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Swaps data with another %deque.
       *  @param  __x  A %deque of the same element and allocator types.
       *
       *  This exchanges the elements between two deques in constant time.
       *  (Four pointers, so it should be quite fast.)
       *  Note that the global std::swap() function is specialized such that
       *  std::swap(d1,d2) will feed to this function.
       *
       *  Whether the allocators are swapped depends on the allocator traits.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Remove a range of elements.
       *  @param  __first  Iterator pointing to the first element to be erased.
       *  @param  __last  Iterator pointing to one past the last element to be
       *                erased.
       *  @return  An iterator pointing to the element pointed to by @a last
       *           prior to erasing (or end()).
       *
       *  This function will erase the elements in the range
       *  [__first,__last) and shorten the %deque accordingly.
       *
       *  The user is cautioned that
       *  this function only erases the elements, and that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Remove element at given position.
       *  @param  __position  Iterator pointing to element to be erased.
       *  @return  An iterator pointing to the next element (or end()).
       *
       *  This function will erase the element at the given position and thus
       *  shorten the %deque by one.
       *
       *  The user is cautioned that
       *  this function only erases the element, and that if the element is
       *  itself a pointer, the pointed-to memory is not touched in any way.
       *  Managing the pointer is the user's responsibility.
       */"	#if __cplusplus >= 201103L
// Check whether it's an integral type.  If so, it's not an iterator.	#endif
"/**
       *  @brief  Inserts a range into the %deque.
       *  @param  __position  A const_iterator into the %deque.
       *  @param  __first  An input iterator.
       *  @param  __last   An input iterator.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert copies of the data in the range
       *  [__first,__last) into the %deque before the location specified
       *  by @a __position.  This is known as <em>range insert</em>.
       */"	#else
"/**
       *  @brief  Inserts a number of copies of given data into the %deque.
       *  @param  __position  An iterator into the %deque.
       *  @param  __n  Number of elements to be inserted.
       *  @param  __x  Data to be inserted.
       *
       *  This function will insert a specified number of copies of the given
       *  data before the location specified by @a __position.
       */"	#endif
"/**
       *  @brief  Inserts a number of copies of given data into the %deque.
       *  @param  __position  A const_iterator into the %deque.
       *  @param  __n  Number of elements to be inserted.
       *  @param  __x  Data to be inserted.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert a specified number of copies of the given
       *  data before the location specified by @a __position.
       */"	#else
"/**
       *  @brief  Inserts an initializer list into the %deque.
       *  @param  __p  An iterator into the %deque.
       *  @param  __l  An initializer_list.
       *
       *  This function will insert copies of the data in the
       *  initializer_list @a __l into the %deque before the location
       *  specified by @a __p.  This is known as <em>list insert</em>.
       */"	#endif
"/**
       *  @brief  Inserts given value into %deque before specified iterator.
       *  @param  __position  An iterator into the %deque.
       *  @param  __x  Data to be inserted.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert a copy of the given value before the
       *  specified location.
       */"	#endif
"/**
       *  @brief  Inserts given value into %deque before specified iterator.
       *  @param  __position  A const_iterator into the %deque.
       *  @param  __x  Data to be inserted.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert a copy of the given value before the
       *  specified location.
       */"	#else
"/**
       *  @brief  Removes last element.
       *
       *  This is a typical stack operation.  It shrinks the %deque by one.
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Add data to the end of the %deque.
       *  @param  __x  Data to be added.
       *
       *  This is a typical stack operation.  The function creates an
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Add data to the front of the %deque.
       *  @param  __x  Data to be added.
       *
       *  This is a typical stack operation.  The function creates an
       *  element at the front of the %deque and assigns the given
       *  data to it.  Due to the nature of a %deque this operation
       *  can be done in constant time.
       */"	#if __cplusplus >= 201103L
/**  A non-binding request to reduce memory use.  */	#endif
"/**
       *  @brief  Resizes the %deque to the specified number of elements.
       *  @param  __new_size  Number of elements the %deque should contain.
       *  @param  __x  Data with which new elements should be populated.
       *
       *  This function will %resize the %deque to the specified
       *  number of elements.  If the number is smaller than the
       *  %deque's current size the %deque is truncated, otherwise the
       *  %deque is extended and new elements are populated with given
       *  data.
       */"	#endif
"/**
       *  @brief  Resizes the %deque to the specified number of elements.
       *  @param  __new_size  Number of elements the %deque should contain.
       *  @param  __x  Data with which new elements should be populated.
       *
       *  This function will %resize the %deque to the specified
       *  number of elements.  If the number is smaller than the
       *  %deque's current size the %deque is truncated, otherwise the
       *  %deque is extended and new elements are populated with given
       *  data.
       */"	#else
/**  Returns the size() of the largest possible %deque.  */	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reverse iterator that points
       *  to one before the first element in the %deque.  Iteration is
       *  done in reverse element order.
       */"	#endif
"/**
       *  Returns a read-only (constant) reverse iterator that points
       *  to one before the first element in the %deque.  Iteration is
       *  done in reverse element order.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Assigns an initializer list to a %deque.
       *  @param  __l  An initializer_list.
       *
       *  This function fills a %deque with copies of the elements in the
       *  initializer_list @a __l.
       *
       *  Note that the assignment completely changes the %deque and that the
       *  resulting %deque's size is the same as the number of elements
       *  assigned.
       */"	#endif
"/**
       *  @brief  Assigns a range to a %deque.
       *  @param  __first  An input iterator.
       *  @param  __last   An input iterator.
       *
       *  This function fills a %deque with copies of the elements in the
       *  range [__first,__last).
       *
       *  Note that the assignment completely changes the %deque and that the
       *  resulting %deque's size is the same as the number of elements
       *  assigned.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Assigns an initializer list to a %deque.
       *  @param  __l  An initializer_list.
       *
       *  This function fills a %deque with copies of the elements in the
       *  initializer_list @a __l.
       *
       *  Note that the assignment completely changes the %deque and that the
       *  resulting %deque's size is the same as the number of elements
       *  assigned.
       */"	#endif
"/**
       *  @brief  %Deque assignment operator.
       *  @param  __x  A %deque of identical element and allocator types.
       *
       *  All the elements of @a x are copied.
       *
       *  The newly-created %deque uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */"	#if __cplusplus >= 201103L
// Check whether it's an integral type.  If so, it's not an iterator.	#endif
"/**
       *  @brief  Builds a %deque from a range.
       *  @param  __first  An input iterator.
       *  @param  __last  An input iterator.
       *  @param  __a  An allocator object.
       *
       *  Create a %deque consisting of copies of the elements from [__first,
       *  __last).
       *
       *  If the iterators are forward, bidirectional, or random-access, then
       *  this will call the elements' copy constructor N times (where N is
       *  distance(__first,__last)) and do no memory reallocation.  But if only
       *  input iterators are used, then this will do at most 2N calls to the
       *  copy constructor, and logN memory reallocations.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Builds a %deque from an initializer list.
       *  @param  __l  An initializer_list.
       *  @param  __a  An allocator object.
       *
       *  Create a %deque consisting of copies of the elements in the
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is __l.size()) and do no memory reallocation.
       */"	#endif
"/**
       *  @brief  %Deque copy constructor.
       *  @param  __x  A %deque of identical element and allocator types.
       *
       *  The newly-created %deque uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Creates a %deque with copies of an exemplar element.
       *  @param  __n  The number of elements to initially create.
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator.
       *
       *  This constructor fills the %deque with @a __n copies of @a __value.
       */"	#endif
"/**
       *  @brief  Creates a %deque with copies of an exemplar element.
       *  @param  __n  The number of elements to initially create.
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator.
       *
       *  This constructor fills the %deque with @a __n copies of @a __value.
       */"	#else
"/**
       *  @brief  Creates a %deque with no elements.
       *  @param  __a  An allocator object.
       */"	#if __cplusplus >= 201103L
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief  A standard container using fixed-size memory allocation and
   *  constant-time manipulation of elements at either end.
   *
   *  @ingroup sequences
   *
   *  @tparam _Tp  Type of element.
   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, a
   *  <a href=""tables.html#66"">reversible container</a>, and a
   *  <a href=""tables.html#67"">sequence</a>, including the
   *  <a href=""tables.html#68"">optional sequence requirements</a>.
   *
   *  In previous HP/SGI versions of deque, there was an extra template
   *  parameter so users could control the node size.  This extension turned
   *  out to violate the C++ standard (it can be detected using template
   *  template parameters), and it was removed.
   *
   *  Here's how a deque<Tp> manages memory.  Each deque has 4 members:
   *
   *  - Tp**        _M_map
   *  - size_t      _M_map_size
   *  - iterator    _M_start, _M_finish
   *
   *  map_size is at least 8.  %map is an array of map_size
   *  pointers-to-@a nodes.  (The name %map has nothing to do with the
   *  std::map class, and @b nodes should not be confused with
   *  std::list's usage of @a node.)
   *
   *  A @a node has no specific type name as such, but it is referred
   *  to as @a node in this file.  It is a simple array-of-Tp.  If Tp
   *  is very large, there will be one Tp element per node (i.e., an
   *  @a array of one).  For non-huge Tp's, node size is inversely
   *  related to Tp size: the larger the Tp, the fewer Tp's will fit
   *  in a node.  The goal here is to keep the total size of a node
   *  relatively small and constant over different Tp's, to improve
   *  allocator efficiency.
   *
   *  Not every pointer in the %map array will point to a node.  If
   *  the initial number of elements in the deque is small, the
   *  /middle/ %map pointers will be valid, and the ones at the edges
   *  will be unused.  This same situation will arise as the %map
   *  grows: available %map pointers, if any, will be on the ends.  As
   *  new nodes are created, only a subset of the %map's pointers need
   *  to be copied @a outward.
   *
   *  Class invariants:
   * - For any nonsingular iterator i:
   *    - i.node points to a member of the %map array.  (Yes, you read that
   *      correctly:  i.node does not actually point to a node.)  The member of
   *      the %map array is what actually points to the node.
   *    - i.first == *(i.node)    (This points to the node (first Tp element).)
   *    - i.last  == i.first + node_size
   *    - i.cur is a pointer in the range [i.first, i.last).  NOTE:
   *      the implication of this is that i.cur is always a dereferenceable
   *      pointer, even if i is a past-the-end iterator.
   * - Start and Finish are always nonsingular iterators.  NOTE: this
   * means that an empty deque must have one node, a deque with <N
   * elements (where N is the node buffer size) must have one node, a
   * deque with N through (2N-1) elements must have two nodes, etc.
   * - For every node other than start.node and finish.node, every
   * element in the node is an initialized object.  If start.node ==
   * finish.node, then [start.cur, finish.cur) are initialized
   * objects, and the elements outside that range are uninitialized
   * storage.  Otherwise, [start.cur, start.last) and [finish.first,
   * finish.cur) are initialized objects, and [start.first, start.cur)
   * and [finish.cur, finish.last) are uninitialized storage.
   * - [%map, %map + map_size) is a valid, non-empty range.
   * - [start.node, finish.node] is a valid range contained within
   *   [%map, %map + map_size).
   * - A pointer in the range [%map, %map + map_size) points to an allocated
   *   node if and only if the pointer is in the range
   *   [start.node, finish.node].
   *
   *  Here's the magic:  nothing in deque is @b aware of the discontiguous
   *  storage!
   *
   *  The memory setup and layout occurs in the parent, _Base, and the iterator
   *  class is entirely responsible for @a leaping from one node to the next.
   *  All the implementation routines for deque itself work only through the
   *  start and finish iterators.  This keeps the routines simple and sane,
   *  and we can use other standard algorithms as well.
  */"	definition of deque<_Tp, _Alloc>
// _M_map+3.	definition of _M_create_nodes
"/**
   *  @brief Layout storage.
   *  @param  __num_elements  The count of T's for which to allocate space
   *                          at first.
   *  @return   Nothing.
   *
   *  The initial underlying memory layout is a bit complicated...
  */"	definition of _M_initialize_map
// Now safe to modify current allocator and perform non-throwing swaps.	#endif
//for empty allocators.	#if __cplusplus >= 201103L
/* Caller must initialize map. */	#if __cplusplus >= 201103L
"/**
   *  Deque base class.  This class provides the unified face for %deque's
   *  allocation.  This class's constructor and destructor allocate and
   *  deallocate (but do not initialize) storage.  This makes %exception
   *  safety easier.
   *
   *  Nothing in this class ever constructs or destroys an actual Tp element.
   *  (Deque handles that itself.)  Only/All memory management is performed
   *  here.
  */"	definition of _Deque_base<_Tp, _Alloc>
// parameters.	definition of operator-
// are in scope (for additional details, see libstdc++/3628)	definition of operator==
"/**
       *  Prepares to traverse new_node.  Sets everything except
       *  _M_cur, which should therefore be set by the caller
       *  immediately afterwards, based on _M_first and _M_last.
       */"	declaration of _M_set_node
"/**
       *  Prepares to traverse new_node.  Sets everything except
       *  _M_cur, which should therefore be set by the caller
       *  immediately afterwards, based on _M_first and _M_last.
       */"	definition of _M_set_node
// Conversion from iterator to const_iterator.	#endif
// Conversion from iterator to const_iterator.	#else
"/**
   *  @brief A deque::iterator.
   *
   *  Quite a bit of intelligence here.  Much of the functionality of
   *  deque is actually passed off to this class.  A deque holds two
   *  of these internally, marking its valid range.  Access to
   *  elements is done as offsets of either of those two, relying on
   *  operator overloading in this class.
   *
   *  All the functions are op overloads except for _M_set_node.
  */"	definition of _Deque_iterator<_Tp, _Ref, _Ptr>
"/**
   *  @brief This function controls the size of memory nodes.
   *  @param  __size  The size of an element.
   *  @return   The number (not byte size) of elements per node.
   *
   *  This function started off as a compiler kludge from SGI, but
   *  seems to be a useful wrapper around a repeated constant
   *  expression.  The @b 512 is tunable (and no other code needs to
   *  change), but no investigation has been done since inheriting the
   *  SGI code.  Touch _GLIBCXX_DEQUE_BUF_SIZE only if you know what
   *  you are doing, however: changing it breaks the binary
   *  compatibility!!
  */"	#ifndef _GLIBCXX_DEQUE_BUF_SIZE
// for __is_bitwise_relocatable	#endif
"/** @file bits/stl_deque.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{deque}
 */"	#ifndef _STL_DEQUE_H
// namespace std	#endif
"// optimization""."	definition of fill
// XXX copy	#endif
// XXX copy	#else
// then the deque must have at least two nodes.	definition of _M_pop_front_aux
// Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.	definition of _M_pop_back_aux
// Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.	definition of _M_push_front_aux
// Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.	definition of _M_push_back_aux
// so deallocate everything and take copy of __x's data.	#endif
"/** @file bits/deque.tcc
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{deque}
 */"	#ifndef _DEQUE_TCC
/* _GLIBCXX_DEQUE */	#endif
// C++20	#endif
// namespace std	#endif
// C++17	#endif
// namespace std	#endif
// C++20	#endif
// For remove and remove_if	#endif
"/** @file include/deque
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_DEQUE
// namespace	#endif
// C++17	#endif
// Allow access to internals of compatible _Rb_tree specializations.	#endif
// ... then try after.	definition of _M_insert_equal_
// Equivalent keys.	definition of _M_insert_unique_
// No need to swap header's color as it does not change.	definition of _M_get_insert_unique_pos
// Erase without rebalancing.	definition of _M_lower_bound
// Structural copy. __x and __p must be non-null.	definition of _M_erase
// to erase nodes first.	#endif
// Note that _Key may be a constant type.	#if __cplusplus >= 201103L
// structure.	definition of operator=
// C++17	definition of operator==
/// Merge from a compatible container into one with equivalent keys.	#endif
// which might result in a copy not a move.	#endif
// Debugging.	#if __cplusplus >= 201103L
// Set operations.	#if __cplusplus >= 201402L
// DR 130. Associative erase should return an iterator.	#else
// LWG 2059.	#else
// Insert/erase.	#if __cplusplus >= 201103L
// allocation/deallocation	#if __cplusplus < 201103L
// 233. Insertion hints in associative containers.	#endif
// C++11	#endif
// C++17	#endif
// 2542. Missing const requirements for associative containers	#endif
// object, and so this is a good place to sanity check it.	#if __cplusplus >= 201703L
/* _Is_pod_comparator */	#endif
// recycle.	#if __cplusplus < 201103L
// is empty.	#if __cplusplus >= 201103L
// Keeps track of size of tree.	definition of _M_node_count
// Helper type to manage default initialization of node count and header.	definition of _Rb_tree_header
// Copy constructor added for consistency with C++98 mode.	#endif
// Helper type offering value initialization guarantee on the compare functor.	definition of _Rb_tree_key_compare<_Key_compare>
// iterators invalidated are those referring to the deleted node.	definition of _Rb_tree_color
"/** @file bits/stl_tree.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{map,set}
 */"	#ifndef _STL_TREE_H
/* _STL_MAP_H */	#endif
// namespace std	#endif
// C++17	#endif
// Allow std::map access to internals of compatible maps.	#endif
/// See std::map::swap().	definition of swap
/// Based on operator<	definition of operator>=
/// Based on operator<	definition of operator<=
/// Based on operator<	definition of operator>
/// Based on operator==	definition of operator!=
"/**
   *  @brief  Map ordering relation.
   *  @param  __x  A %map.
   *  @param  __y  A %map of the same type as @a x.
   *  @return  True iff @a x is lexicographically less than @a y.
   *
   *  This is a total ordering relation.  It is linear in the size of the
   *  maps.  The elements must be comparable with @c <.
   *
   *  See std::lexicographical_compare() for how the determination is made.
  */"	definition of operator<
"/**
   *  @brief  Map equality comparison.
   *  @param  __x  A %map.
   *  @param  __y  A %map of the same type as @a x.
   *  @return  True iff the size and elements of the maps are equal.
   *
   *  This is an equivalence relation.  It is linear in the size of the
   *  maps.  Maps are considered equivalent if their sizes are equal,
   *  and if corresponding elements compare equal.
  */"	definition of operator==
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  Pair of read-only (constant) iterators that possibly points
       *           to the subsequence matching given key.
       *
       *  This function is equivalent to
       *  @code
       *    std::make_pair(c.lower_bound(val),
       *                   c.upper_bound(val))
       *  @endcode
       *  (but is faster than making the calls separately).
       *
       *  This function probably only makes sense for multimaps.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  Pair of iterators that possibly points to the subsequence
       *           matching given key.
       *
       *  This function is equivalent to
       *  @code
       *    std::make_pair(c.lower_bound(val),
       *                   c.upper_bound(val))
       *  @endcode
       *  (but is faster than making the calls separately).
       *
       *  This function probably only makes sense for multimaps.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the end of a subsequence matching given key.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return  Read-only (constant) iterator pointing to first iterator
       *           greater than key, or end().
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the end of a subsequence matching given key.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return Iterator pointing to the first element
       *          greater than key, or end().
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the beginning of a subsequence matching given key.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return  Read-only (constant) iterator pointing to first element
       *           equal to or greater than key, or end().
       *
       *  This function returns the first element of a subsequence of elements
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the beginning of a subsequence matching given key.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return  Iterator pointing to first element equal to or greater
       *           than key, or end().
       *
       *  This function returns the first element of a subsequence of elements
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */"	#if __cplusplus > 201103L
//@}	#endif
//@}	#if __cplusplus > 201703L
"/**
       *  @brief  Finds the number of elements with given key.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  Number of elements with specified key.
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Tries to locate an element in a %map.
       *  @param  __x  Key of (key, value) %pair to be located.
       *  @return  Read-only (constant) iterator pointing to sought-after
       *           element, or end() if not found.
       *
       *  This function takes a key and tries to locate the element with which
       *  the key matches.  If successful the function returns a constant
       *  iterator pointing to the sought after %pair. If unsuccessful it
       *  returns the past-the-end ( @c end() ) iterator.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Tries to locate an element in a %map.
       *  @param  __x  Key of (key, value) %pair to be located.
       *  @return  Iterator pointing to sought-after element, or end() if not
       *           found.
       *
       *  This function takes a key and tries to locate the element with which
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Erases a [__first,__last) range of elements from a %map.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                   erased.
       *  @param __last Iterator pointing to the end of the range to
       *                be erased.
       *
       *  This function erases a sequence of elements from a %map.
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */"	#endif
"/**
       *  @brief Erases a [first,last) range of elements from a %map.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                   erased.
       *  @param __last Iterator pointing to the end of the range to
       *                be erased.
       *  @return The iterator @a __last.
       *
       *  This function erases a sequence of elements from a %map.
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */"	#else
"/**
       *  @brief Erases elements according to the provided key.
       *  @param  __x  Key of element to be erased.
       *  @return  The number of elements erased.
       *
       *  This function erases all the elements located by the given key from
       *  a %map.
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Erases an element from a %map.
       *  @param  __position  An iterator pointing to the element to be erased.
       *
       *  This function erases an element, pointed to by the given
       *  iterator, from a %map.  Note that this function only erases
       *  the element, and that if the element is itself a pointer,
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */"	#endif
// @}	#else
// move-capable overload	#endif
"/**
       *  @brief Template function that attempts to insert a range of elements.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                   inserted.
       *  @param  __last  Iterator pointing to the end of the range.
       *
       *  Complexity similar to that of the range constructor.
       */"	#if __cplusplus > 201402L
// 2354. Unnecessary copying when inserting into maps with braced-init	#endif
"/**
       *  @brief Attempts to insert a std::pair into the %map.
       *  @param  __position  An iterator that serves as a hint as to where the
       *                    pair should be inserted.
       *  @param  __x  Pair to be inserted (see std::make_pair for easy creation
       *               of pairs).
       *  @return An iterator that points to the element with key of
       *           @a __x (may or may not be the %pair passed in).
       *

       *  This function is not concerned about whether the insertion
       *  took place, and thus does not return a boolean like the
       *  single-argument insert() does.  Note that the first
       *  parameter is only a hint and can potentially improve the
       *  performance of the insertion process.  A bad hint would
       *  cause no gains in efficiency.
       *
       *  See
       *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       *  for more on @a hinting.
       *
       *  Insertion requires logarithmic time (if the hint is not taken).
       *  @{
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Attempts to insert a list of std::pairs into the %map.
       *  @param  __list  A std::initializer_list<value_type> of pairs to be
       *                  inserted.
       *
       *  Complexity similar to that of the range constructor.
       */"	#endif
// @}	#if __cplusplus >= 201103L
// 2354. Unnecessary copying when inserting into maps with braced-init	#endif
"/**
       *  @brief Attempts to insert a std::pair into the %map.
       *  @param __x Pair to be inserted (see std::make_pair for easy
       *	     creation of pairs).
       *
       *  @return  A pair, of which the first element is an iterator that
       *           points to the possibly inserted pair, and the second is
       *           a bool that is true if the pair was actually inserted.
       *
       *  This function attempts to insert a (key, value) %pair into the %map.
       *  A %map relies on unique keys and thus a %pair is only inserted if its
       *  first element (the key) is not already present in the %map.
       *
       *  Insertion requires logarithmic time.
       *  @{
       */"	#if __cplusplus >= 201103L
// move-capable overload	#endif
// C++17	#endif
/// Re-insert an extracted node.	#endif
"/**
       *  @brief Attempts to build and insert a std::pair into the %map.
       *
       *  @param  __pos  An iterator that serves as a hint as to where the pair
       *                should be inserted.
       *  @param  __args  Arguments used to generate a new pair instance (see
       *	         std::piecewise_contruct for passing arguments to each
       *	         part of the pair constructor).
       *  @return An iterator that points to the element with key of the
       *          std::pair built from @a __args (may or may not be that
       *          std::pair).
       *
       *  This function is not concerned about whether the insertion took place,
       *  and thus does not return a boolean like the single-argument emplace()
       *  does.
       *  Note that the first parameter is only a hint and can potentially
       *  improve the performance of the insertion process. A bad hint would
       *  cause no gains in efficiency.
       *
       *  See
       *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       *  for more on @a hinting.
       *
       *  Insertion requires logarithmic time (if the hint is not taken).
       */"	#endif
// modifiers	#if __cplusplus >= 201103L
// __i->first is greater than or equivalent to __k.	#endif
// __i->first is greater than or equivalent to __k.	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reverse iterator that points to one
       *  before the first pair in the %map.  Iteration is done in descending
       *  order according to the keys.
       */"	#endif
"/**
       *  Returns a read-only (constant) reverse iterator that points to one
       *  before the first pair in the %map.  Iteration is done in descending
       *  order according to the keys.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  %Map list assignment operator.
       *  @param  __l  An initializer_list.
       *
       *  This function fills a %map with copies of the elements in the
       *  initializer list @a __l.
       *
       *  Note that the assignment completely changes the %map and
       *  that the resulting %map's size is the same as the number
       *  of elements assigned.
       */"	#endif
"/**
       *  @brief  %Map assignment operator.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus < 201103L
"/**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */"	#endif
"/**
       *  @brief  Builds a %map from a range.
       *  @param  __first  An input iterator.
       *  @param  __last  An input iterator.
       *  @param  __comp  A comparison functor.
       *  @param  __a  An allocator object.
       *
       *  Create a %map consisting of copies of the elements from
       *  [__first,__last).  This is linear in N if the range is
       *  already sorted, and NlogN otherwise (where N is
       *  distance(__first,__last)).
       */"	#if __cplusplus >= 201103L
/// Allocator-extended range constructor.	#endif
"/**
       *  @brief  %Map copy constructor.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus < 201103L
"/**
       *  @brief  Default constructor creates no elements.
       */"	#if __cplusplus < 201103L
"// ""functionally equivalent"""	#if __cplusplus > 201402L
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief A standard container made up of (key,value) pairs, which can be
   *  retrieved based on a key, in logarithmic time.
   *
   *  @ingroup associative_containers
   *
   *  @tparam _Key  Type of key objects.
   *  @tparam  _Tp  Type of mapped objects.
   *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.
   *  @tparam _Alloc  Allocator type, defaults to
   *                  allocator<pair<const _Key, _Tp>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, a
   *  <a href=""tables.html#66"">reversible container</a>, and an
   *  <a href=""tables.html#69"">associative container</a> (using unique keys).
   *  For a @c map<Key,T> the key_type is Key, the mapped_type is T, and the
   *  value_type is std::pair<const Key,T>.
   *
   *  Maps support bidirectional iterators.
   *
   *  The private tree data is declared exactly the same way for map and
   *  multimap; the distinction is made entirely in how the tree functions are
   *  called (*_unique versus *_equal, same as the standard).
  */"	definition of map<_Key, _Tp, _Compare, _Alloc>
"/** @file bits/stl_map.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{map}
 */"	#ifndef _STL_MAP_H
/* _STL_MULTIMAP_H */	#endif
// namespace std	#endif
// C++17	#endif
// Allow std::multimap access to internals of compatible maps.	#endif
/// See std::multimap::swap().	definition of swap
/// Based on operator<	definition of operator>=
/// Based on operator<	definition of operator<=
/// Based on operator<	definition of operator>
/// Based on operator==	definition of operator!=
"/**
   *  @brief  Multimap ordering relation.
   *  @param  __x  A %multimap.
   *  @param  __y  A %multimap of the same type as @a __x.
   *  @return  True iff @a x is lexicographically less than @a y.
   *
   *  This is a total ordering relation.  It is linear in the size of the
   *  multimaps.  The elements must be comparable with @c <.
   *
   *  See std::lexicographical_compare() for how the determination is made.
  */"	definition of operator<
"/**
   *  @brief  Multimap equality comparison.
   *  @param  __x  A %multimap.
   *  @param  __y  A %multimap of the same type as @a __x.
   *  @return  True iff the size and elements of the maps are equal.
   *
   *  This is an equivalence relation.  It is linear in the size of the
   *  multimaps.  Multimaps are considered equivalent if their sizes are equal,
   *  and if corresponding elements compare equal.
  */"	definition of operator==
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  Pair of read-only (constant) iterators that possibly points
       *           to the subsequence matching given key.
       *
       *  This function is equivalent to
       *  @code
       *    std::make_pair(c.lower_bound(val),
       *                   c.upper_bound(val))
       *  @endcode
       *  (but is faster than making the calls separately).
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  Pair of iterators that possibly points to the subsequence
       *           matching given key.
       *
       *  This function is equivalent to
       *  @code
       *    std::make_pair(c.lower_bound(val),
       *                   c.upper_bound(val))
       *  @endcode
       *  (but is faster than making the calls separately).
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the end of a subsequence matching given key.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return  Read-only (constant) iterator pointing to first iterator
       *           greater than key, or end().
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the end of a subsequence matching given key.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return Iterator pointing to the first element
       *          greater than key, or end().
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the beginning of a subsequence matching given key.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return  Read-only (constant) iterator pointing to first element
       *           equal to or greater than key, or end().
       *
       *  This function returns the first element of a subsequence of
       *  elements that matches the given key.  If unsuccessful the
       *  iterator will point to the next greatest element or, if no
       *  such greater element exists, to end().
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the beginning of a subsequence matching given key.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return  Iterator pointing to first element equal to or greater
       *           than key, or end().
       *
       *  This function returns the first element of a subsequence of elements
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */"	#if __cplusplus > 201103L
//@}	#endif
//@}	#if __cplusplus > 201703L
"/**
       *  @brief Finds the number of elements with given key.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return Number of elements with specified key.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Tries to locate an element in a %multimap.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return  Read-only (constant) iterator pointing to sought-after
       *           element, or end() if not found.
       *
       *  This function takes a key and tries to locate the element with which
       *  the key matches.  If successful the function returns a constant
       *  iterator pointing to the sought after %pair.  If unsuccessful it
       *  returns the past-the-end ( @c end() ) iterator.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Tries to locate an element in a %multimap.
       *  @param  __x  Key of (key, value) pair to be located.
       *  @return  Iterator pointing to sought-after element,
       *           or end() if not found.
       *
       *  This function takes a key and tries to locate the element with which
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Erases a [first,last) range of elements from a %multimap.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                 erased.
       *  @param __last Iterator pointing to the end of the range to
       *                be erased.
       *
       *  This function erases a sequence of elements from a %multimap.
       *  Note that this function only erases the elements, and that if
       *  the elements themselves are pointers, the pointed-to memory is not
       *  touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */"	#endif
"/**
       *  @brief Erases a [first,last) range of elements from a %multimap.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                   erased.
       *  @param __last Iterator pointing to the end of the range to be
       *                erased .
       *  @return The iterator @a __last.
       *
       *  This function erases a sequence of elements from a %multimap.
       *  Note that this function only erases the elements, and that if
       *  the elements themselves are pointers, the pointed-to memory is not
       *  touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */"	#else
"/**
       *  @brief Erases elements according to the provided key.
       *  @param  __x  Key of element to be erased.
       *  @return  The number of elements erased.
       *
       *  This function erases all elements located by the given key from a
       *  %multimap.
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Erases an element from a %multimap.
       *  @param  __position  An iterator pointing to the element to be erased.
       *
       *  This function erases an element, pointed to by the given iterator,
       *  from a %multimap.  Note that this function only erases the element,
       *  and that if the element is itself a pointer, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */"	#endif
// @}	#else
// C++17	#endif
/// Re-insert an extracted node.	#endif
"/**
       *  @brief Attempts to insert a list of std::pairs into the %multimap.
       *  @param  __l  A std::initializer_list<value_type> of pairs to be
       *               inserted.
       *
       *  Complexity similar to that of the range constructor.
       */"	#endif
"/**
       *  @brief A template function that attempts to insert a range
       *  of elements.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                   inserted.
       *  @param  __last  Iterator pointing to the end of the range.
       *
       *  Complexity similar to that of the range constructor.
       */"	#if __cplusplus >= 201103L
// 2354. Unnecessary copying when inserting into maps with braced-init	#endif
"/**
       *  @brief Inserts a std::pair into the %multimap.
       *  @param  __position  An iterator that serves as a hint as to where the
       *                      pair should be inserted.
       *  @param  __x  Pair to be inserted (see std::make_pair for easy creation
       *               of pairs).
       *  @return An iterator that points to the inserted (key,value) pair.
       *
       *  This function inserts a (key, value) pair into the %multimap.
       *  Contrary to a std::map the %multimap does not rely on unique keys and
       *  thus multiple pairs with the same key can be inserted.
       *  Note that the first parameter is only a hint and can potentially
       *  improve the performance of the insertion process.  A bad hint would
       *  cause no gains in efficiency.
       *
       *  For more on @a hinting, see:
       *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       *
       *  Insertion requires logarithmic time (if the hint is not taken).
       * @{
       */"	#if __cplusplus >= 201103L
// 2354. Unnecessary copying when inserting into maps with braced-init	#endif
"/**
       *  @brief Inserts a std::pair into the %multimap.
       *  @param  __x  Pair to be inserted (see std::make_pair for easy creation
       *             of pairs).
       *  @return An iterator that points to the inserted (key,value) pair.
       *
       *  This function inserts a (key, value) pair into the %multimap.
       *  Contrary to a std::map the %multimap does not rely on unique keys and
       *  thus multiple pairs with the same key can be inserted.
       *
       *  Insertion requires logarithmic time.
       *  @{
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Builds and inserts a std::pair into the %multimap.
       *
       *  @param  __pos  An iterator that serves as a hint as to where the pair
       *                should be inserted.
       *  @param  __args  Arguments used to generate a new pair instance (see
       *	         std::piecewise_contruct for passing arguments to each
       *	         part of the pair constructor).
       *  @return An iterator that points to the inserted (key,value) pair.
       *
       *  This function inserts a (key, value) pair into the %multimap.
       *  Contrary to a std::map the %multimap does not rely on unique keys and
       *  thus multiple pairs with the same key can be inserted.
       *  Note that the first parameter is only a hint and can potentially
       *  improve the performance of the insertion process.  A bad hint would
       *  cause no gains in efficiency.
       *
       *  For more on @a hinting, see:
       *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       *
       *  Insertion requires logarithmic time (if the hint is not taken).
       */"	#endif
// modifiers	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reverse iterator that points to one
       *  before the first pair in the %multimap.  Iteration is done in
       *  descending order according to the keys.
       */"	#endif
"/**
       *  Returns a read-only (constant) reverse iterator that points to one
       *  before the first pair in the %multimap.  Iteration is done in
       *  descending order according to the keys.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  %Multimap list assignment operator.
       *  @param  __l  An initializer_list.
       *
       *  This function fills a %multimap with copies of the elements
       *  in the initializer list @a __l.
       *
       *  Note that the assignment completely changes the %multimap and
       *  that the resulting %multimap's size is the same as the number
       *  of elements assigned.
       */"	#endif
"/**
       *  @brief  %Multimap assignment operator.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus < 201103L
"/**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way. Managing the pointer is the user's responsibility.
       */"	#endif
"/**
       *  @brief  Builds a %multimap from a range.
       *  @param  __first  An input iterator.
       *  @param  __last  An input iterator.
       *  @param  __comp  A comparison functor.
       *  @param  __a  An allocator object.
       *
       *  Create a %multimap consisting of copies of the elements from
       *  [__first,__last).  This is linear in N if the range is already sorted,
       *  and NlogN otherwise (where N is distance(__first,__last)).
       */"	#if __cplusplus >= 201103L
/// Allocator-extended range constructor.	#endif
"/**
       *  @brief  %Multimap copy constructor.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus < 201103L
"/**
       *  @brief  Default constructor creates no elements.
       */"	#if __cplusplus < 201103L
"// ""functionally equivalent"""	#if __cplusplus > 201402L
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief A standard container made up of (key,value) pairs, which can be
   *  retrieved based on a key, in logarithmic time.
   *
   *  @ingroup associative_containers
   *
   *  @tparam _Key  Type of key objects.
   *  @tparam  _Tp  Type of mapped objects.
   *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.
   *  @tparam _Alloc  Allocator type, defaults to
   *                  allocator<pair<const _Key, _Tp>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, a
   *  <a href=""tables.html#66"">reversible container</a>, and an
   *  <a href=""tables.html#69"">associative container</a> (using equivalent
   *  keys).  For a @c multimap<Key,T> the key_type is Key, the mapped_type
   *  is T, and the value_type is std::pair<const Key,T>.
   *
   *  Multimaps support bidirectional iterators.
   *
   *  The private tree data is declared exactly the same way for map and
   *  multimap; the distinction is made entirely in how the tree functions are
   *  called (*_unique versus *_equal, same as the standard).
  */"	definition of multimap<_Key, _Tp, _Compare, _Alloc>
"/** @file bits/stl_multimap.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{map}
 */"	#ifndef _STL_MULTIMAP_H
/* _GLIBCXX_MAP */	#endif
// C++20	#endif
// namespace std	#endif
// C++17	#endif
// namespace std	#endif
"/** @file include/map
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_MAP
// __cplusplus	#endif
// _GLIBCXX_STDLIB_H	#endif
// _GLIBCXX_USE_WCHAR_T	#endif
// _GLIBCXX_HAVE_MBSTATE_T	#endif
"/** @file stdlib.h
 *  This is a Standard C++ Library header.
 */"	#if !defined __cplusplus || defined _GLIBCXX_INCLUDE_NEXT_C_HEADERS
// _GLIBCXX_THREAD	#endif
// C++11	#endif
// _GLIBCXX_HAS_GTHREADS	#endif
// namespace	#endif
/// sleep_until	definition of sleep_until
/// sleep_for	definition of sleep_for
/// yield	definition of yield
// We know that pthread_t is an integral type in the GNU C library.	if (...) ... 
/// get_id	definition of get_id
"/** @namespace std::this_thread
   *  @brief ISO C++ 2011 entities sub-namespace for thread.
   *  30.3.2 Namespace this_thread.
   */"	std::this_thread
/// std::hash specialization for thread::id.	definition of hash<id>
// assume native_handle_type is LessThanComparable.	return ...
// single-threaded programs using GNU libc). Assume EqualityComparable.	return ...
// tuple{DECAY_COPY(__callable), DECAY_COPY(__args)...}.	definition of __make_invoker
// A call wrapper that does INVOKE(forwarded tuple elements...)	definition of _Invoker<_Tuple>
// Returns a value that hints at the number of hardware thread contexts.	declaration of hardware_concurrency
"/** @pre thread is joinable
     */"	definition of native_handle
// Create a reference to pthread_create, not just the gthr weak symbol.	#else
// 3039. Unnecessary decay in thread and packaged_task	definition of __not_same
/// thread::id	definition of id
// invoked in the new thread of execution.	definition of _State
/// thread	definition of thread
"/** @file include/thread
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_THREAD
// _GLIBCXX_CONDITION_VARIABLE	#endif
// C++11	#endif
// _GLIBCXX_HAS_GTHREADS	#endif
// namespace	#endif
// ownership of *__mutex lock to an object with shorter lifetime.	definition of wait_until
// ownership of *__mutex lock to an object with shorter lifetime.	definition of wait
// scoped unlock - unlocks in ctor, re-locks in dtor	definition of _Unlock<_Lock>
// Like above, but mutex is not required to have try_lock.	definition of condition_variable_any
// to tell whether we should return a timeout.	definition of wait_until
/// condition_variable	definition of condition_variable
/// cv_status	definition of cv_status
"/** @file include/condition_variable
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_CONDITION_VARIABLE
// namespace std	#endif
// _GLIBCXX_HAS_GTHREADS	#endif
// _GLIBCXX_HAVE_LINUX_FUTEX && ATOMIC_INT_LOCK_FREE > 1	#endif
// are sequentially consistent; thus, we satisfy any provided memory_order.	#endif
// ! (_GLIBCXX_HAVE_LINUX_FUTEX && ATOMIC_INT_LOCK_FREE > 1)	#else
// TODO Spin-wait first.  Ignore effect on timeout.	definition of _M_store_notify_all
// Returns false iff a timeout occurred.	definition of _M_load_when_equal_until
// Returns false iff a timeout occurred.	definition of _M_load_when_equal_until
// Returns false iff a timeout occurred.	definition of _M_load_when_equal_for
// TODO Spin-wait first.	definition of _M_load_when_equal
// XXX correct?	declaration of _M_load_when_not_equal
// when making the call.	definition of _M_load_and_test_until_impl
// when making the call.	definition of _M_load_and_test
// Fetch the current value after waiting (clears _Waiter_bit).	ExprStmt
// and the futex syscalls synchronize between themselves.	ExprStmt
// when making the call.	definition of _M_load_and_test_until
// This must be lock-free and at offset 0.	definition of _M_data
// This can be executed after the object has been destroyed.	declaration of _M_futex_notify_all
// Returns false iff a timeout occurred.	declaration of _M_futex_wait_until
"/** @file bits/atomic_futex.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly.
 */"	#ifndef _GLIBCXX_ATOMIC_FUTEX_H
// _GLIBCXX_FUTURE	#endif
// C++11	#endif
// namespace	#endif
// _GLIBCXX_HAS_GTHREADS	#endif
// _GLIBCXX_ASYNC_ABI_COMPAT	#endif
/// async, potential overload	definition of async
/// async	definition of async
// thread can be referring to this state if it is being destroyed.	declaration of ~_Async_state_impl
// Starts a new thread that runs a function and makes the shared state ready.	definition of _Async_state_impl<_BoundFn, _Res>
// the shared state, whichever happens first.	definition of _M_complete_async
// Common functionality hoisted out of the _Async_state_impl template.	definition of _Async_state_commonV2
// function will return true even after the deferred function has run.	declaration of _M_is_deferred_future
// Run the deferred function.	declaration of _M_complete_async
// Holds a deferred function and storage for its result.	definition of _Deferred_state<_BoundFn, _Res>
/// swap	definition of swap
// Execution	declaration of operator()
// Result retrieval	declaration of get_future
// Move support	declaration of packaged_task
// No copy	definition of packaged_task
// 2407. [this constructor should not be] explicit	definition of packaged_task
// 2095.  missing constructors needed for uses-allocator construction	definition of packaged_task
// Construction and destruction	declaration of packaged_task
// 3039. Unnecessary decay in thread and packaged_task	definition of __not_same
/// packaged_task	definition of packaged_task<..(..)>
// Holds a packaged_task's stored task.	definition of _Task_state<_Fn, _Alloc, ..(..)>
// Invoke the stored task and make the state ready at thread exit.	declaration of _M_run_delayed
// Invoke the stored task and make the state ready.	declaration of _M_run
// Holds storage for a packaged_task's result.	definition of _Task_state_base<..(..)>
// will cause broken_promise	definition of _M_result
// will cause broken_promise	definition of _M_result
// Invoke the function and provide the result to the caller.	declaration of operator()
// Setting the result	definition of set_value
// Retrieving the result	definition of get_future
// Assignment	definition of operator=
// 2095.  missing constructors needed for uses-allocator construction	definition of promise
/// Explicit specialization for promise<void>	definition of promise<void>
// Setting the result	declaration of set_value
// Retrieving the result	declaration of get_future
// Assignment	declaration of operator=
/// Partial specialization for promise<R&>	definition of promise<_Res &>
// Setting the result	declaration of set_value
// Retrieving the result	declaration of get_future
// Assignment	declaration of operator=
/// Primary template for promise	definition of promise<_Res>
// 2556. Wide contract for future::share()	definition of share
// Now we can define the protected __basic_future constructors.	definition of __basic_future
// Retrieving the value	definition of get
/// Construct from a shared_future rvalue	definition of shared_future
/// Construct from a future rvalue	definition of shared_future
/// Copy constructor	definition of shared_future
/// Explicit specialization for shared_future<void>	definition of shared_future<void>
/// Retrieving the value	declaration of get
/// Construct from a shared_future rvalue	declaration of shared_future
/// Construct from a future rvalue	declaration of shared_future
/// Copy constructor	declaration of shared_future
/// Partial specialization for shared_future<R&>	definition of shared_future<_Res &>
/// Retrieving the value	declaration of get
/// Construct from a shared_future rvalue	declaration of shared_future
/// Construct from a future rvalue	declaration of shared_future
/// Copy constructor	declaration of shared_future
/// Primary template for shared_future.	definition of shared_future<_Res>
/// Retrieving the value	definition of get
// Disable copying	definition of future
/// Move constructor	definition of future
/// Explicit specialization for future<void>	definition of future<void>
/// Retrieving the value	declaration of get
// Disable copying	definition of future
/// Move constructor	declaration of future
/// Partial specialization for future<R&>	definition of future<_Res &>
/// Retrieving the value	declaration of get
// Disable copying	definition of future
/// Move constructor	declaration of future
/// Primary template for future.	definition of future<_Res>
// Move construction from a future	declaration of __basic_future
// Move construction from a shared_future	declaration of __basic_future
// Copy construction from a shared_future	declaration of __basic_future
// Construction of a future by promise::get_future()	definition of __basic_future
/// Wait for the state to be ready and rethrow any stored exception	definition of _M_get_result
// Disable copying.	definition of __basic_future
/// Common implementation for future and shared_future.	definition of __basic_future<_Res>
// Allow _Task_setter objects to be stored locally in std::function	definition of __is_location_invariant<_Task_setter<_Res_ptr, _Fn, _Res>>
// Allow _Setter objects to be stored locally in std::function	definition of __is_location_invariant<_Setter<_Res, _Arg>>
/// Explicit specialization for void.	definition of _Result<void>
/// Partial specialization for reference types.	definition of _Result<_Res &>
// Return true if state corresponds to a deferred function.	definition of _M_is_deferred_future
// Wait for completion of async function.	definition of _M_complete_async
// nothrow	ExprStmt
// _M_set_result).	ExprStmt
// The function invoked with std::call_once(_M_once, ...).	definition of _M_do_set
// Used by std::promise to store an exception as the result.	definition of operator()
// set exceptions	definition of _Setter<_Res, __exception_ptr_tag>
// set void	definition of _Setter<_Res, void>
// Used by std::promise to move construct the result.	declaration of operator()
// set rvalues	definition of _Setter<_Res, _Res &&>
// Used by std::promise to copy construct the result.	declaration of operator()
// promise<R&>	"static_assert(..., ""Invalid specialisation"")"
// promise<R&>	"static_assert(..., ""Invalid specialisation"")"
// or promise<R&>::set_value(R&)	"static_assert(..., ""Invalid specialisation"")"
// or promise<R&>::set_value(R&)	"static_assert(..., ""Invalid specialisation"")"
// set lvalues	definition of _Setter<_Res, _Arg &>
// Called when this object is first passed to a future.	definition of _M_set_retrieved_flag
// Use release MO to synchronize with observers of the ready state.	ExprStmt
// we can access _M_result directly instead of through call_once.	ExprStmt
// Abandon this shared state.	definition of _M_break_promise
// side-effects of invoking __res only happen once	ExprStmt
// Calls at most once: _M_result = __res();	definition of _M_set_delayed_result
// Use release MO to synchronize with observers of the ready state.	ExprStmt
// side-effects of invoking __res only happen once	ExprStmt
// Calls at most once: _M_result = __res();	definition of _M_set_result
// no further synchronization here.	definition of wait_until
// the future ready.	ExprStmt
// Run any deferred function or join any asynchronous thread:	ExprStmt
// or more associated futures.	definition of _State_baseV2
// Keep it simple for std::allocator.	definition of _S_allocate_result
// Create a result object that uses an allocator.	definition of _S_allocate_result
/// A result object that uses an allocator.	definition of _Result_alloc<_Res, _Alloc>
// Return lvalue, future will add const or rvalue-reference	declaration of _M_value
/// A result object that has storage for an object of type _Res.	definition of _Result<_Res>
/// A unique_ptr for result objects.	definition of _Ptr
// _M_destroy() allows derived classes to control deallocation	declaration of _M_destroy
/// Base class for results.	definition of _Result_base
/// Base class and enclosing scope.	definition of __future_base
// 2021. Further incorrect usages of result_of	definition of __async_result_of
/// Status code for futures	definition of future_status
/// Launch code for futures	definition of launch
"/**
   *  @brief Exception type thrown by futures.
   *  @ingroup exceptions
   */"	definition of future_error
/// Overload for make_error_condition.	definition of make_error_condition
/// Overload for make_error_code.	definition of make_error_code
/// Points to a statically-allocated object derived from error_category.	declaration of future_category
/// Specialization.	definition of is_error_code_enum<future_errc>
/// Error code for futures	definition of future_errc
"/** @file include/future
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_FUTURE
// Skip the newline.	if (...) ... 
/// Advances to the next line. \return true on success, false if we have exhausted the string.	declaration of next
/// Advances to the next line. \return true on success, false if we have exhausted the string.	definition of next
/// Access the storage in which the last line was stored.	declaration of line
/// Access the storage in which the last line was stored.	definition of line
/// Construct from a collection (presumably std::string or std::wcstring).	declaration of line_iterator_t
/// Construct from a collection (presumably std::string or std::wcstring).	definition of line_iterator_t
// The current location in the iteration.	definition of current
// The collection we're iterating. Note we hold this by reference.	definition of coll
// Storage for each line.	definition of storage
/// Support for iterating over a newline-separated string.	definition of line_iterator_t<Collection>
/// Converts a string to lowercase.	declaration of wcstolower
// Make every character count ($ instead of ...)	Shortest
// Prefer niceness over minimalness	Prettiest
// Trailing component, possibly empty.	definition of ellipsis_type
/// Max output entries will be max + 1 (after max splits)	definition of split_about
/// @note The final token may not necessarily return (pos, npos).	declaration of wcstring_tok
/// The first element is the location, the second is the count.	declaration of wcstring_range
/// Join a list of strings by a separator character.	declaration of join_strings
/// Split a string by a separator character.	declaration of split_string
/// `haystack`, or `string::npos()` if no results were found.	declaration of ifind
/// `haystack`, or `string::npos()` if no results were found.	declaration of ifind
/// Test if a string prefixes another without regard to case. Returns true if a is a prefix of b.	declaration of string_prefixes_string_case_insensitive
/// Test if a string is a suffix of another.	declaration of string_suffixes_string_case_insensitive
/// Test if a string is a suffix of another.	declaration of string_suffixes_string
/// Test if a string is a suffix of another.	declaration of string_suffixes_string
/// Test if a string prefixes another. Returns true if a is a prefix of b.	declaration of string_prefixes_string
/// Test if a string prefixes another. Returns true if a is a prefix of b.	declaration of string_prefixes_string
/// Test if a string prefixes another. Returns true if a is a prefix of b.	declaration of string_prefixes_string
/// Test if a string prefixes another. Returns true if a is a prefix of b.	declaration of string_prefixes_string
/// Test if a string prefixes another. Returns true if a is a prefix of b.	declaration of string_prefixes_string
// Helper functions for working with wcstring.	#ifndef FISH_WCSTRINGUTIL_H
/// Output to the fish log a printf-style formatted string.	#define FLOGF(wht,__VA_ARGS__...) do { if (flog_details::category_list_t::g_instance->wht.enabled) { auto old_errno = errno; flog_details::g_logger.acquire()->log_fmt( flog_details::category_list_t::g_instance->wht, __VA_ARGS__); errno = old_errno; } } while (0)
/// Output to the fish log a printf-style formatted string.	#endif
/// We save and restore errno because we don't want this to affect other code.	#define FLOG(wht,__VA_ARGS__...) do { if (flog_details::category_list_t::g_instance->wht.enabled) { auto old_errno = errno; flog_details::g_logger.acquire()->log_args( flog_details::category_list_t::g_instance->wht, __VA_ARGS__); errno = old_errno; } } while (0)
/// This is used by the tracing machinery.	declaration of log_extra_to_flog_file
/// \return a list of all categories, sorted by name.	declaration of get_flog_categories
/// flog does not close this file.	declaration of set_flog_output_file
/// Set the active flog categories according to the given wildcard \p wc.	declaration of activate_flog_categories_by_pattern
// Log outside of the usual flog usage.	definition of log_extra
/// This is protected by a lock.	definition of logger_t
/// To add a new category simply define a new field, following the pattern.	definition of error
/// The singleton global category list instance.	declaration of g_instance
/// Whether the category is enabled.	definition of enabled
/// A (non-localized) description of the category.	definition of description
/// The name of this category.	definition of name
/// The flogger: debug logging support for fish.	#ifndef FISH_FLOG_H
/// return 5. If the target is not referenced in the chain, returns target.	declaration of fd_for_target_fd
/// of fds opened.	declaration of resolve_chain
/// \return the list of dup2 actions.	definition of get_actions
/// Disable copying.	definition of dup2_list_t
/// Append a close action.	definition of add_close
// This is a note that we must clear the CLO_EXEC bit.	ExprStmt
// This is a note that we must clear the CLO_EXEC bit.	ExprStmt
/// Append a dup2 action.	definition of add_dup2
/// The list of actions.	definition of actions_
/// Note none of the fds here are considered 'owned'.	definition of action_t
/// A class representing a sequence of basic redirections.	definition of dup2_list_t
/// \return the open flags for this redirection.	declaration of oflags
/// Attempt to parse target as an fd. Return the fd, or none() if none.	declaration of get_target_as_fd
/// \return if this is a close-type redirection.	definition of is_close
"/// In ""< file.txt"" this will be ""file.txt""."	definition of target
/// The redirection mode.	definition of mode
"/// For example, in the case of ""3>&1"" this will be 3."	definition of fd
/// Here the file descriptors don't represent open files - it's purely textual.	definition of redirection_spec_t
// noclobber redirection: >? file.txt	noclob
// fd redirection: 2>&1	fd
// input redirection: < file.txt	input
// appending redirection: >> file.txt	append
// normal redirection: > file.txt	overwrite
/// This file supports specifying and applying redirections.	definition of redirection_mode_t
// io_streams_t cannot be copied.	definition of io_streams_t
// FIXME: this is awkwardly placed.	definition of job_group
// FIXME: this is awkwardly placed.	definition of job_group
// Actual IO redirections. This is only used by the source builtin. Unowned.	definition of io_chain
// Indicates whether stdout and stderr are at all redirected (e.g. to a file or piped).	definition of out_is_redirected
// If this is set, then the is_redirected flags must also be set.	definition of out_is_piped
// < foo.txt	definition of stdin_is_directly_redirected
// fd representing stdin. This is not closed by the destructor.	definition of stdin_fd
// Append data from a narrow buffer, widening it.	declaration of append_narrow_buffer
// No copying.	definition of output_stream_t
/// Storage for our data.	definition of buffer_
/// Class representing the output that a builtin can generate.	definition of output_stream_t
/// cloexec. \returns invalid fd on failure (in which case the given fd is still closed).	declaration of move_fd_to_unused
/// \return pipes on success, none() on error.	declaration of make_autoclose_pipes
/// Write end of the pipe.	definition of write
/// Read end of the pipe.	definition of read
/// Helper type returned from making autoclose pipes.	definition of autoclose_pipes_t
/// \return the set of redirected FDs.	declaration of fd_set
/// Output debugging information to stderr.	declaration of print
/// \return true on success, false on error, in which case an error will have been printed.	declaration of append_from_specs
/// if none.	declaration of io_for_fd
// user-declared ctor to allow const init. Do not default this, it will break the build.	definition of io_chain_t
/// Marks the receiver as discarded if the stream was discarded.	declaration of append_from_stream
/// Function to append to the buffer.	definition of append
/// This requires that the background fillthread be none.	definition of buffer
/// Helper to return whether the fillthread is running.	definition of fillthread_running
/// End the background fillthread operation.	declaration of complete_background_fillthread
/// Begin the fill operation, reading from the given fd in the background.	declaration of begin_filling
/// \return positive on success, 0 if closed, -1 on error (in which case errno will be set).	declaration of read_once
/// Lock for appending.	definition of append_lock_
/// running. The fillthread fulfills the corresponding promise when it exits.	definition of fillthread_waiter_
/// Atomic flag indicating our fillthread should shut down.	definition of shutdown_fillthread_
/// Buffer storing what we have read.	definition of buffer_
/// It is not an io_data_t.	definition of io_buffer_t
/// of the buffer. \return the buffer.	declaration of finish
/// not conflict with an fd redirection in this list.	declaration of create
// Do not invoke this directly.	definition of io_bufferfill_t
/// The receiving buffer.	definition of buffer_
/// Write end. The other end is connected to an io_buffer_t.	definition of write_fd_
/// Represents filling an io_buffer_t. Very similar to io_pipe_t.	definition of io_bufferfill_t
/// Whether this is an input pipe. This is used only for informational purposes.	definition of is_input_
// The pipe's fd. Conceptually this is dup2'd to io_data_t::fd.	definition of pipe_fd_
/// Represents (one end) of a pipe.	definition of io_pipe_t
// The fd for the file which we are writing to or reading from.	definition of file_fd_
/// Represents a redirection to or from an opened file.	definition of io_file_t
/// is 2.	definition of io_fd_t
/// That is, we call dup2(source_fd, fd).	definition of source_fd
/// FD to redirect.	definition of fd
/// Type of redirect.	definition of io_mode
// No assignment or copying allowed.	definition of io_data_t
/// Represents an FD redirection.	definition of io_data_t
/// Describes what type of IO operation an io_data_t represents.	definition of io_mode_t
// it.	definition of append_wide_buffer
/// Append a string \p str with the given separation type \p sep.	declaration of append
/// Append a string \p str with the given separation type \p sep.	definition of append
/// Append an element with range [begin, end) and the given separation type \p sep.	definition of append
/// \return the list of elements.	declaration of elements
/// \return the list of elements.	definition of elements
/// newline appended.	definition of newline_serialized
/// Mark the contents as discarded.	definition of set_discard
/// \return whether the output has been discarded.	declaration of discarded
/// \return whether the output has been discarded.	definition of discarded
/// \return the contents size.	definition of size
/// \return the buffer limit size, or 0 for no limit.	declaration of limit
/// Construct a separated_buffer_t with the given buffer limit \p limit, or 0 for no limit.	definition of separated_buffer_t
/// separated_buffer_t may not be copied.	definition of separated_buffer_t
// Overflow!	ExprStmt
/// succeed, false if we exceed buffer_limit.	definition of try_add_size
/// True if we're discarding input because our buffer_limit has been exceeded.	definition of discard
/// List of buffer elements.	definition of elements_
/// Current size of all contents.	definition of contents_size_
/// Limit on how much data we'll buffer. Zero means no limit.	definition of buffer_limit_
/// others which must be separated further by the user (e.g. via IFS).	definition of separated_buffer_t<StringType>
/// This element was explicitly separated and should not be separated further.	explicitly
/// This element's separation should be inferred, e.g. through IFS.	inferred
/// tracks the type.	definition of separation_type_t
/// A simple set of FDs.	definition of fd_set_t
/// Return the event type for a given name, or none.	declaration of event_type_for_name
/// Fire a generic event with the specified name.	declaration of event_fire_generic
/// Returns a string describing the specified event.	declaration of event_get_desc
/// Print all events. If type_filter is not none(), only output events with that type.	declaration of event_print
/// Enqueue a signal event. Invoked from a signal handler.	declaration of event_enqueue_signal
/// Fire all delayed events attached to the given parser.	declaration of event_fire_delayed
/// Fire the specified event \p event, executing it on \p parser.	declaration of event_fire
/// a signal handler.	declaration of event_is_signal_observed
/// Return all event handlers for the given function.	declaration of event_get_function_handlers
/// Remove all events for the given function name.	declaration of event_remove_function_handlers
/// Add an event handler.	declaration of event_add_handler
/// Arguments to any handler.	definition of arguments
/// Properties of the event.	definition of desc
/// Represents a event that is fired, or capable of being fired.	definition of event_t
/// Name of the function to invoke.	definition of function_name
/// Properties of the event to match.	definition of desc
/// Represents a handler for an event.	definition of event_handler_t
/// param: The parameter describing this generic event.	definition of str_param1
/// caller_id: Internal job id for caller_exit type events	definition of union <unnamed>
/// The event type.	definition of type
/// Properties of an event.	definition of event_description_t
/// A generic event.	generic
/// An event triggered by a job exit, triggering the 'caller'-style events only.	caller_exit
/// An event triggered by a job or process exit.	exit
/// An event triggered by a variable update.	variable
/// An event triggered by a signal.	signal
/// well.	any
/// Enumeration of event types.	definition of event_type_t
/// The process id that is used to match any process id.	#define EVENT_ANY_PID 0
// may not be safely called by signal handlers.	#ifndef FISH_EVENT_H
/// Error message for a command like `time foo &`.	"#define ERROR_TIME_BACKGROUND _(L""'time' is not supported for background jobs. Consider using 'command time'."")"
/// Error message for Posix-style assignment: foo=bar.	"#define ERROR_BAD_COMMAND_ASSIGN_ERR_MSG _(L""Unsupported use of '='. In fish, please use 'set %ls %ls'."")"
/// Error issued on $.	"#define ERROR_NO_VAR_NAME _(L""Expected a variable name after this $."")"
/// Error issued on $*.	"#define ERROR_NOT_ARGV_STAR _(L""$* is not supported. In fish, please use $argv."")"
/// Error issued on $(...).	"#define ERROR_BAD_VAR_SUBCOMMAND1 _(L""$(...) is not supported. In fish, please use '(%ls)'."")"
/// Error issued on $@.	"#define ERROR_NOT_ARGV_AT _(L""$@ is not supported. In fish, please use $argv."")"
/// Error issued on $#.	"#define ERROR_NOT_ARGV_COUNT _(L""$# is not supported. In fish, please use 'count $argv'."")"
/// Error issued on $$.	"#define ERROR_NOT_PID _(L""$$ is not the pid. In fish, please use $fish_pid."")"
/// Error issued on $?.	"#define ERROR_NOT_STATUS _(L""$? is not the exit status. In fish, please use $status."")"
"/// Error for ""${a}""."	"#define ERROR_BRACKETED_VARIABLE_QUOTED1 _(L""Variables cannot be bracketed. In fish, please use \""$%ls\""."")"
/// Error for ${a}.	"#define ERROR_BRACKETED_VARIABLE1 _(L""Variables cannot be bracketed. In fish, please use {$%ls}."")"
/// Error for $^.	"#define ERROR_BAD_VAR_CHAR1 _(L""$%lc is not a valid variable in fish."")"
/// Error when using return builtin outside of function definition.	"#define INVALID_RETURN_ERR_MSG _(L""'return' outside of function definition"")"
/// Error when using continue outside of loop.	"#define INVALID_CONTINUE_ERR_MSG _(L""'continue' while not inside of loop"")"
/// Error when using break outside of loop.	"#define INVALID_BREAK_ERR_MSG _(L""'break' while not inside of loop"")"
/// Error message for wildcards with no matches.	"#define WILDCARD_ERR_MSG _(L""No matches for wildcard '%ls'. See `help expand`."")"
/// Error message when encountering an illegal file descriptor.	"#define ILLEGAL_FD_ERR_MSG _(L""Illegal file descriptor in redirection '%ls'"")"
/// Error message when encountering a failed expansion, e.g. for the variable name in for loops.	"#define FAILED_EXPANSION_VARIABLE_NAME_ERR_MSG _(L""Unable to expand variable name '%ls'"")"
/// Error message when encountering an unknown builtin name.	"#define UNKNOWN_BUILTIN_ERR_MSG _(L""Unknown builtin '%ls'"")"
/// Error message when encountering an illegal command name.	"#define ILLEGAL_CMD_ERR_MSG _(L""Illegal command name '%ls'"")"
/// Error message on reaching maximum call stack depth.	"#define CALL_STACK_LIMIT_EXCEEDED_ERR_MSG _(L""The function call stack limit has been exceeded. Do you have an accidental infinite "" L""loop?"")"
/// Error message on a function that calls itself immediately.	"#define INFINITE_FUNC_RECURSION_ERR_MSG _(L""The function '%ls' calls itself immediately, which would result in an infinite loop."")"
/// Maximum number of function calls.	#define FISH_MAX_STACK_DEPTH 128
// second or further command in a pipeline	subsequent
// first command in a pipeline	first
// not part of a pipeline	none
// The location of a pipeline.	definition of pipeline_position_t
/// errors in a substring of a larger source buffer.	declaration of parse_error_offset_source_start
// Special source_start value that means unknown.	#define SOURCE_LOCATION_UNKNOWN (static_cast<size_t>(-1))
/// prefix. If skip_caret is false, the offending line with a caret is printed as well.	declaration of describe_with_prefix
/// is_interactive is true, the offending line with a caret is printed as well.	declaration of describe
/// Offset and length of the token in the source code that triggered this error.	definition of source_start
/// Code for the error.	definition of code
/// Text of the error.	definition of text
/// Indicate that extra semis should be generated.	parse_flag_show_extra_semis
/// Indicate that the parser should generate job_list entries for blank lines.	parse_flag_show_blank_lines
/// tree where some nodes may have no productions.	parse_flag_leave_unterminated
/// Indicate that the tokenizer should accept incomplete tokens */	parse_flag_accept_incomplete_tokens
/// Include comment tokens.	parse_flag_include_comments
/// disconnected trees. This is intended to be used by syntax highlighting.	parse_flag_continue_after_error
"// ""and"" or ""or"" after a pipe"	parse_error_andor_in_pipeline
// a=b without command	parse_error_bare_variable_assignment
// case outside of switch	parse_error_unbalancing_case
// else outside of if	parse_error_unbalancing_else
// end outside of block	parse_error_unbalancing_end
// Tokenizer errors.	parse_error_tokenizer_unterminated_quote
// unclassified error types	parse_error_generic
// Matching values from enum parser_error.	parse_error_syntax
// Parse error code list.	definition of parse_error_code_t
// Statement decorations like 'command' or 'exec'.	definition of statement_decoration_t
// 'none' is not a keyword, it is a sentinel indicating nothing.	none
// IMPORTANT: These enums must start at zero.	definition of parse_keyword_t
// Very special terminal types that don't appear in the production list.	error
// Special terminal type that means no more tokens forthcoming.	terminate
// Terminal types.	string
// IMPORTANT: If the following enum table is modified you must also update token_enum_map below.	definition of parse_token_type_t
// A range of source code.	definition of source_range_t
// Constants used in the programmatic representation of fish code.	#ifndef FISH_PARSE_CONSTANTS_H
/// The position of the equal sign in a variable assignment like foo=bar.	declaration of variable_assignment_equals_pos
"/// Our state machine that implements ""one word"" movement or erasure."	definition of move_word_state_machine_t
// stops at whitespace	move_word_style_whitespace
// stops at path components	move_word_style_path_components
// stop at punctuation	move_word_style_punctuation
// \return the token type for this redirection.	definition of token_type
// For example 99999999999> is invalid.	definition of is_valid
// \return the oflags (as in open(2)) for this redirection.	declaration of oflags
// Construct from a string.	declaration of from_string
// Number of characters consumed when parsing the string.	definition of consumed
// For example &| or &>	definition of stderr_merge
// Ignored for pipes.	definition of mode
// Whether we are a pipe (true) or redirection (false).	definition of is_pipe
"// For example, in the case of ""3>&1"" this will be 3."	definition of fd
/// Struct wrapping up a parsed pipe or redirection.	definition of pipe_or_redir_t
/// Like to tok_first, but skip variable assignments like A=B.	declaration of tok_command
/// returns the empty string.	declaration of tok_first
/// Returns a reference to the string.	definition of copy_text_of
/// Returns the text of a token, as a string.	definition of text_of
/// Returns the next token, or none() if we are at the end.	declaration of next
/// token. Setting TOK_SHOW_COMMENTS will return comments as tokens	declaration of tokenizer_t
/// Whether to continue the previous line after the comment.	definition of continue_line_after_comment
/// Whether to attempt to continue after an error.	definition of continue_after_error
/// Whether all blank lines are returned.	definition of show_blank_lines
/// Whether comments should be returned.	definition of show_comments
/// Whether incomplete tokens are accepted.	definition of accept_unfinished
/// Whether we have additional tokens.	definition of has_next
/// The start of the original string.	definition of start
/// A pointer into the original string, showing where the next token begins.	definition of token_cursor
// No copying, etc.	definition of tokenizer_t
/// The tokenizer struct.	definition of tokenizer_t
/// Gets source for the token, or the empty string if it has no source.	definition of get_source
/// Returns whether the given location is within the source range or at its end.	definition of location_in_or_at_end_of_source_range
// Construct from a token type.	declaration of tok_t
// at 'offset'.	definition of error_offset_within_token
// If an error, this is the error code.	definition of error
// Length of the token.	definition of length
// Offset of the token.	definition of offset
// The type of the token.	definition of type
/// Get the error message for an error \p err.	declaration of tokenizer_get_error_message
/// Make an effort to continue after an error.	#define TOK_CONTINUE_AFTER_ERROR 8
/// the tokenizer to return each of them as a separate END.	#define TOK_SHOW_BLANK_LINES 4
/// Flag telling the tokenizer not to remove comments. Useful for syntax highlighting.	#define TOK_SHOW_COMMENTS 2
/// parenthesis, etc. This is useful for tab-completion.	#define TOK_ACCEPT_UNFINISHED 1
/// comment token	comment
/// send job to bg token	background
/// redirection token	redirect
/// End token (semicolon or newline, not literal end)	end
/// || token	oror
/// && token	andand
/// Pipe token	pipe
/// String token	string
/// Error reading token	error
/// Token types.	definition of token_type_t
// extended to support marks, tokenizing multiple strings and disposing of unused string segments.	#ifndef FISH_TOKENIZER_H
/// Error message for improper use of the exec builtin.	"#define EXEC_ERR_MSG _(L""The '%ls' command can not be used in a pipeline"")"
/// If parse_flag_continue_after_error is not set, this will return null on any error.	declaration of parsed_source_ref_t
/// If parse_flag_continue_after_error is not set, this will return null on any error.	declaration of parsed_source_ref_t
/// A type wrapping up a parse tree and the original source behind it.	definition of parsed_source_t
/// \return whether we are a string with the dash prefix set.	definition of is_dash_prefix_string
/// Note the start may be invalid.	definition of range
// If this is a tokenizer error, that error.	definition of source_start
// Hackish: whether this token is a string like FOO=bar	definition of may_be_variable_assignment
// Hackish: if TOK_END, whether the source is a newline.	definition of is_newline
// Hackish: whether the source looks like '-h' or '--help'	definition of is_help_argument
// Hackish: whether the source contains a dash prefix	definition of has_dash_prefix
// Any keyword represented by this token	definition of has_dash_prefix
// The type of the token as represented by the parser	definition of type
/// A struct representing the token type that we use internally.	definition of parse_token_t
// Programmatic representation of fish code.	#ifndef FISH_PARSE_PRODUCTIONS_H
/* _GLIBCXX_BITSET */	#endif
// C++11	#endif
// namespace	#endif
/// std::hash specialization for bitset.	definition of hash<bitset<_Nb>>
// namespace std	#undef _GLIBCXX_BITSET_WORDS
// 303. Bitset input operator underspecified	definition of operator<<
"/**
   *  @brief Global I/O operators for bitsets.
   *
   *  Direct I/O between streams and bitsets is supported.  Output is
   *  straightforward.  Input will skip whitespace, only accept @a 0 and @a 1
   *  characters, and will only extract as many digits as the %bitset will
   *  hold.
  */"	definition of operator>>
"/**
   *  @brief  Global bitwise operations on bitsets.
   *  @param  __x  A bitset.
   *  @param  __y  A bitset of the same size as @a __x.
   *  @return  A new bitset.
   *
   *  These should be self-explanatory.
  */"	definition of operator&
// Definitions of non-inline member functions.	definition of _M_copy_from_ptr
"/**
       *  @brief  Finds the index of the next ""on"" bit after prev.
       *  @return  The index of the next bit set, or size() if not found.
       *  @param  __prev  Where to start searching.
       *  @ingroup SGIextensions
       *  @sa  _Find_first
       */"	declaration of _Find_next
"/**
       *  @brief  Finds the index of the first ""on"" bit.
       *  @return  The index of the first bit set, or size() if not found.
       *  @ingroup SGIextensions
       *  @sa  _Find_next
       */"	declaration of _Find_first
/// Self-explanatory.	declaration of operator<<
"/**
       *  @brief Tests whether any of the bits are on.
       *  @return  True if none of the bits are set.
       */"	declaration of none
"/**
       *  @brief Tests whether any of the bits are on.
       *  @return  True if none of the bits are set.
       */"	definition of none
"/**
       *  @brief Tests whether any of the bits are on.
       *  @return  True if at least one bit is set.
       */"	declaration of any
"/**
       *  @brief Tests whether any of the bits are on.
       *  @return  True if at least one bit is set.
       */"	definition of any
"/**
       *  @brief Tests whether all the bits are on.
       *  @return  True if all the bits are set.
       */"	declaration of all
"/**
       *  @brief Tests the value of a bit.
       *  @param  __position  The index of a bit.
       *  @return  The value at @a pos.
       *  @throw  std::out_of_range  If @a pos is bigger the size of the %set.
       */"	declaration of test
"/**
       *  @brief Tests the value of a bit.
       *  @param  __position  The index of a bit.
       *  @return  The value at @a pos.
       *  @throw  std::out_of_range  If @a pos is bigger the size of the %set.
       */"	definition of test
/// These comparisons for equality/inequality are, well, @e bitwise.	declaration of operator==
/// Returns the total number of bits.	declaration of size
/// Returns the total number of bits.	definition of size
/// Returns the number of bits which are set.	declaration of count
// NB: Backward compat.	definition of _M_copy_from_string
// 853. to_string needs updating with zero and one.	definition of to_string
// 434. bitset::to_string() hard to use.	definition of to_string
// 396. what are characters zero and one.	definition of to_string
"/**
       *  @brief Returns a character interpretation of the %bitset.
       *  @return  The string equivalent of the bits.
       *
       *  Note the ordering of the bits:  decreasing character positions
       *  correspond to increasing bit positions (see the main class notes for
       *  an example).
       */"	definition of to_string
"/**
       *  @brief Returns a numerical interpretation of the %bitset.
       *  @return  The integral equivalent of the bits.
       *  @throw  std::overflow_error  If there are too many bits to be
       *                               represented in an @c unsigned @c long.
       */"	#if __cplusplus >= 201103L
"/**
       *  Construct from a character %array.
       *  @param  __str  An %array of characters @a zero and @a one.
       *  @param  __n    The number of characters to use.
       *  @param  __zero The character corresponding to the value 0.
       *  @param  __one  The character corresponding to the value 1.
       *  @throw  std::invalid_argument If a character appears in the string
       *                                which is neither @a __zero nor @a __one.
       */"	#endif
// 396. what are characters zero and one.	#if __cplusplus >= 201103L
/// Initial bits bitwise-copied from a single word (others set to zero).	#if __cplusplus >= 201103L
// left undefined	#if __cplusplus >= 201103L
"/**
   *  @brief The %bitset class represents a @e fixed-size sequence of bits.
   *  @ingroup utilities
   *
   *  (Note that %bitset does @e not meet the formal requirements of a
   *  <a href=""tables.html#65"">container</a>.  Mainly, it lacks iterators.)
   *
   *  The template argument, @a Nb, may be any non-negative number,
   *  specifying the number of bits (e.g., ""0"", ""12"", ""1024*1024"").
   *
   *  In the general unoptimized case, storage is allocated in word-sized
   *  blocks.  Let B be the number of bits in a word, then (Nb+(B-1))/B
   *  words will be used for storage.  B - Nb%B bits are unused.  (They are
   *  the high-order bits in the highest word.)  It is a class invariant
   *  that those unused bits are always zero.
   *
   *  If you think of %bitset as <em>a simple array of bits</em>, be
   *  aware that your mental picture is reversed: a %bitset behaves
   *  the same way as bits in integers do, with the bit at index 0 in
   *  the <em>least significant / right-hand</em> position, and the bit at
   *  index Nb-1 in the <em>most significant / left-hand</em> position.
   *  Thus, unlike other containers, a %bitset's index <em>counts from
   *  right to left</em>, to put it very loosely.
   *
   *  This behavior is preserved when translating to and from strings.  For
   *  example, the first line of the following program probably prints
   *  <em>b(&apos;a&apos;) is 0001100001</em> on a modern ASCII system.
   *
   *  @code
   *     #include <bitset>
   *     #include <iostream>
   *     #include <sstream>
   *
   *     using namespace std;
   *
   *     int main()
   *     {
   *         long         a = 'a';
   *         bitset<10>   b(a);
   *
   *         cout << ""b('a') is "" << b << endl;
   *
   *         ostringstream s;
   *         s << b;
   *         string  str = s.str();
   *         cout << ""index 3 in the string is "" << str[3] << "" but\n""
   *              << ""index 3 in the bitset is "" << b[3] << endl;
   *     }
   *  @endcode
   *
   *  Also see:
   *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_containers.html
   *  for a description of extensions.
   *
   *  Most of the actual code isn't contained in %bitset<> itself, but in the
   *  base class _Base_bitset.  The base class works with whole words, not with
   *  individual bits.  This allows us to specialize _Base_bitset for the
   *  important special case where the %bitset is only a single word.
   *
   *  Extra confusion can result due to the fact that the storage for
   *  _Base_bitset @e is a regular array, and is indexed as such.  This is
   *  carefully encapsulated.
  */"	definition of bitset<_Nb>
// Helper class to zero out the unused high-order bits in the highest word.	definition of _Sanitize<_Extrabits>
// misinterpreted as an index in this corner case.  Oh well.	definition of _M_do_find_first
// the sound of one zero-length bitset clapping?	definition of _M_is_equal
// localized to this single should-never-get-this-far function.	definition of _M_getword
"/**
   *  Base class, specialization for no storage (zero-length %bitset).
   *
   *  See documentation for bitset.
  */"	definition of _Base_bitset<0UL>
"// find the next ""on"" bit that follows ""prev"""	definition of _M_do_find_next
"/**
   *  Base class, specialization for a single word.
   *
   *  See documentation for bitset.
  */"	definition of _Base_bitset<1UL>
// not found, so return an indication of failure.	definition of _M_do_find_next
// Definitions of non-inline functions from _Base_bitset.	definition of _M_do_left_shift
"// find the next ""on"" bit that follows ""prev"""	declaration of _M_do_find_next
"// find first ""on"" bit"	declaration of _M_do_find_first
/// 0 is the least significant word.	#if __cplusplus >= 201103L
"/**
   *  Base class, general case.  It is a class invariant that _Nw will be
   *  nonnegative.
   *
   *  See documentation for bitset.
  */"	definition of _Base_bitset<_Nw>
"/** @file include/bitset
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_BITSET
/* _STL_NUMERIC_H */	#endif
// namespace std	#endif
// @} group numeric_ops	#undef _GLIBCXX_MOVE_IF_20
"/**
   *  @brief  Return differences between adjacent values.
   *
   *  Computes the difference between adjacent values in the range
   *  [__first,__last) using the function object @p __binary_op and writes the
   *  result to @p __result.
   *
   *  @param  __first  Start of input range.
   *  @param  __last  End of input range.
   *  @param  __result  Output sum.
   *  @param  __binary_op Function object.
   *  @return  Iterator pointing just beyond the values written to result.
   *
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 539. partial_sum and adjacent_difference should mention requirements
   */"	definition of adjacent_difference
"/**
   *  @brief  Return differences between adjacent values.
   *
   *  Computes the difference between adjacent values in the range
   *  [first,last) using operator-() and writes the result to @p __result.
   *
   *  @param  __first  Start of input range.
   *  @param  __last  End of input range.
   *  @param  __result  Output sums.
   *  @return  Iterator pointing just beyond the values written to result.
   *
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 539. partial_sum and adjacent_difference should mention requirements
   */"	definition of adjacent_difference
"/**
   *  @brief  Return list of partial sums
   *
   *  Accumulates the values in the range [first,last) using @p __binary_op.
   *  As each successive input value is added into the total, that partial sum
   *  is written to @p __result.  Therefore, the first value in @p __result is
   *  the first value of the input, the second value in @p __result is the sum
   *  of the first and second input values, and so on.
   *
   *  @param  __first  Start of input range.
   *  @param  __last  End of input range.
   *  @param  __result  Output sum.
   *  @param  __binary_op  Function object.
   *  @return  Iterator pointing just beyond the values written to __result.
   */"	definition of partial_sum
"/**
   *  @brief  Return list of partial sums
   *
   *  Accumulates the values in the range [first,last) using the @c + operator.
   *  As each successive input value is added into the total, that partial sum
   *  is written to @p __result.  Therefore, the first value in @p __result is
   *  the first value of the input, the second value in @p __result is the sum
   *  of the first and second input values, and so on.
   *
   *  @param  __first  Start of input range.
   *  @param  __last  End of input range.
   *  @param  __result  Output sum.
   *  @return  Iterator pointing just beyond the values written to __result.
   */"	definition of partial_sum
"/**
   *  @brief  Compute inner product of two ranges.
   *
   *  Starting with an initial value of @p __init, applies @p __binary_op2 to
   *  successive elements from the two ranges and accumulates each result into
   *  the accumulated value using @p __binary_op1.  The values in the ranges are
   *  processed in order.
   *
   *  @param  __first1  Start of range 1.
   *  @param  __last1  End of range 1.
   *  @param  __first2  Start of range 2.
   *  @param  __init  Starting value to add other values to.
   *  @param  __binary_op1  Function object to accumulate with.
   *  @param  __binary_op2  Function object to apply to pairs of input values.
   *  @return  The final inner product.
   */"	definition of inner_product
"/**
   *  @brief  Compute inner product of two ranges.
   *
   *  Starting with an initial value of @p __init, multiplies successive
   *  elements from the two ranges and adds each product into the accumulated
   *  value using operator+().  The values in the ranges are processed in
   *  order.
   *
   *  @param  __first1  Start of range 1.
   *  @param  __last1  End of range 1.
   *  @param  __first2  Start of range 2.
   *  @param  __init  Starting value to add other values to.
   *  @return  The final inner product.
   */"	definition of inner_product
"/**
   *  @brief  Accumulate values in a range with operation.
   *
   *  Accumulates the values in the range `[first,last)` using the function
   *  object `__binary_op`.  The initial value is `__init`.  The values are
   *  processed in order.
   *
   *  @param  __first  Start of range.
   *  @param  __last  End of range.
   *  @param  __init  Starting value to add other values to.
   *  @param  __binary_op  Function object to accumulate with.
   *  @return  The final sum.
   */"	definition of accumulate
"/**
   *  @brief  Accumulate values in a range.
   *
   *  Accumulates the values in the range [first,last) using operator+().  The
   *  initial value is @a init.  The values are processed in order.
   *
   *  @param  __first  Start of range.
   *  @param  __last  End of range.
   *  @param  __init  Starting value to add other values to.
   *  @return  The final sum.
   */"	definition of accumulate
// DR 2055. std::move in std::accumulate and other algorithms	#else
// concept requirements	#endif
"/**
   *  @brief  Create a range of sequentially increasing values.
   *
   *  For each element in the range @p [first,last) assigns @p value and
   *  increments @p value as if by @p ++value.
   *
   *  @param  __first  Start of range.
   *  @param  __last  End of range.
   *  @param  __value  Starting value.
   *  @return  Nothing.
   *  @ingroup numeric_ops
   */"	definition of iota
"/** @defgroup numeric_ops Generalized Numeric operations
   *  @ingroup algorithms
   */"	#if __cplusplus >= 201103L
// For _GLIBCXX_MOVE	std
"/** @file bits/stl_numeric.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{numeric}
 */"	#ifndef _STL_NUMERIC_H
/* _GLIBCXX_NUMERIC */	#endif
// C++17	#endif
// Feature test macro for parallel algorithms	#endif
// Otherwise just pull in forward declarations	#endif
// If <execution> has already been included, pull in implementations	#else
// Parallel STL algorithms	#if __PSTL_EXECUTION_POLICIES_DEFINED
// C++20	#endif
// namespace std	#endif
// C++14	#endif
// namespace std	#endif
// C++17	#endif
/// Least common multiple	#endif
// namespace __detail	#if __cplusplus >= 201703L
"/**
 * @defgroup numerics Numerics
 *
 * Components for performing numeric operations. Includes support for
 * complex number types, random number generation, numeric (n-at-a-time)
 * arrays, generalized numeric algorithms, and mathematical special functions.
 */"	#if __cplusplus >= 201402L
"/** @file include/numeric
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_NUMERIC
// namespace std	#endif
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// correct size.	definition of do_hash
// to strcoll.	definition of do_transform
// Generic version does nothing.	definition of _M_transform
// Generic version does nothing.	definition of _M_compare
"/**
   *  @brief  Return a facet.
   *  @ingroup locales
   *
   *  use_facet looks for and returns a reference to a facet of type Facet
   *  where Facet is the template parameter.  If has_facet(locale) is true,
   *  there is a suitable facet to return.  It throws std::bad_cast if the
   *  locale doesn't contain a facet of type Facet.
   *
   *  @tparam  _Facet  The facet type to access.
   *  @param  __loc  The locale to use.
   *  @return  Reference to facet of type Facet.
   *  @throw  std::bad_cast if @p __loc doesn't contain a facet of type _Facet.
  */"	definition of use_facet
"/**
   *  @brief  Test for the presence of a facet.
   *  @ingroup locales
   *
   *  has_facet tests the locale argument for the presence of the facet type
   *  provided as the template parameter.  Facets derived from the facet
   *  parameter will also return true.
   *
   *  @tparam  _Facet  The facet type to test the presence of.
   *  @param  __loc  The locale to test.
   *  @return  true if @p __loc contains a facet of type _Facet, else false.
  */"	definition of has_facet
// Unnamed.	definition of combine
//	#ifndef _LOCALE_CLASSES_TCC
//@}	#if __cplusplus >= 201103L
/// class collate_byname [22.2.4.2].	definition of collate_byname<_CharT>
// Specializations.	declaration of _M_compare
"/**
       *  @brief  Return hash of a string.
       *
       *  This function computes and returns a hash on the input string.  This
       *  function is a hook for derived classes to change the value returned.
       *
       *  @param __lo  Start of string.
       *  @param __hi  End of string.
       *  @return  Hash value.
      */"	declaration of do_hash
"/**
       *  @brief  Transform string to comparable form.
       *
       *  This function is a hook for derived classes to change the value
       *  returned.
       *
       *  @param __lo  Start.
       *  @param __hi  End.
       *  @return  transformed string.
      */"	declaration of do_transform
"/**
       *  @brief  Compare two strings.
       *
       *  This function is a hook for derived classes to change the value
       *  returned.  @see compare().
       *
       *  @param __lo1  Start of string 1.
       *  @param __hi1  End of string 1.
       *  @param __lo2  Start of string 2.
       *  @param __hi2  End of string 2.
       *  @return  1 if string1 > string2, -1 if string1 < string2, else 0.
      */"	declaration of do_compare
/// Destructor.	declaration of ~collate
// Used to abstract out _CharT bits in virtual member functions, below.	declaration of _M_compare
"/**
       *  @brief  Return hash of a string.
       *
       *  This function computes and returns a hash on the input string.  It
       *  does so by returning collate::do_hash().
       *
       *  @param __lo  Start of string.
       *  @param __hi  End of string.
       *  @return  Hash value.
      */"	declaration of hash
"/**
       *  @brief  Transform string to comparable form.
       *
       *  This function is a wrapper for strxfrm functionality.  It takes the
       *  input string and returns a modified string that can be directly
       *  compared to other transformed strings.  In the C locale, this
       *  function just returns a copy of the input string.  In some other
       *  locales, it may replace two chars with one, change a char for
       *  another, etc.  It does so by returning collate::do_transform().
       *
       *  @param __lo  Start of string.
       *  @param __hi  End of string.
       *  @return  Transformed string_type.
      */"	declaration of transform
"/**
       *  @brief  Compare two strings.
       *
       *  This function compares two strings and returns the result by calling
       *  collate::do_compare().
       *
       *  @param __lo1  Start of string 1.
       *  @param __hi1  End of string 1.
       *  @param __lo2  Start of string 2.
       *  @param __hi2  End of string 2.
       *  @return  1 if string1 > string2, -1 if string1 < string2, else 0.
      */"	declaration of compare
"/**
       *  @brief  Internal constructor. Not for general use.
       *
       *  This is a constructor for use by the library itself to set up new
       *  locales.
       *
       *  @param __cloc  The C locale.
       *  @param __refs  Passed to the base facet class.
      */"	declaration of collate
"/**
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param __refs  Passed to the base facet class.
      */"	declaration of collate
/// Numpunct facet id.	declaration of id
// initialization, needed by collate_byname as well.	definition of _M_c_locale_collate
/// Public typedefs	declaration of char_type
"/**
   *  @brief  Facet for localized string comparison.
   *
   *  This facet encapsulates the code to compare strings in a localized
   *  manner.
   *
   *  The collate template uses protected virtual functions to provide
   *  the actual results.  The public accessors forward the call to
   *  the virtual functions.  These virtual functions are hooks for
   *  developers to implement the behavior they require from the
   *  collate facet.
  */"	definition of collate<_CharT>
// We must actually compare all the _M_names: can be all equal!	for(...;...;...) ...
// Not defined.	declaration of operator=
// Not defined.	declaration of _Impl
// Be race-detector-friendly.  For more info see bits/c++config.	;
// Data Members.	definition of _M_refcount
// Implementation object for locale.	definition of _Impl
/// Constructor.	definition of id
// Not defined.	declaration of id
// Not defined.	declaration of operator=
// Last id number assigned.	declaration of _S_refcount
// function (even an inline) would be undefined.	definition of _M_index
"/**
   *  @brief  Facet ID class.
   *  @ingroup locales
   *
   *  The ID class provides facets with an index used to identify them.
   *  Every facet class must define a public static member locale::id, or be
   *  derived from a facet that provides this member, otherwise the facet
   *  cannot be used in a locale.  The locale::id ensures that each class
   *  type gets a unique identifier.
  */"	definition of id
// For internal use only.	declaration of __shim
// Be race-detector-friendly.  For more info see bits/c++config.	;
// Not defined.	#else
// classic locale.	declaration of _S_get_c_locale
/// Facet destructor.	declaration of ~facet
"/**
     *  @brief  Facet constructor.
     *
     *  This is the constructor provided by the standard.  If refs is 0, the
     *  facet is destroyed when the last referencing locale is destroyed.
     *  Otherwise the facet will never be destroyed.
     *
     *  @param __refs  The initial value for reference count.
    */"	definition of facet
// String literal for the name of the classic locale.	declaration of _S_c_name
"// Contains data from the underlying ""C"" library for the classic locale."	declaration of _S_c_locale
"/**
   *  @brief  Localization functionality base class.
   *  @ingroup locales
   *
   *  The facet class is the base class for a localization feature, such as
   *  money, time, and number printing.  It provides common support for facets
   *  and reference management.
   *
   *  Facets may not be copied or assigned.
  */"	definition of facet
// and LC_IDENTIFICATION.	definition of (unnamed enum)
// standard.	declaration of _S_categories
// Current global locale	declaration of _S_global
"// The ""C"" reference locale"	declaration of _S_classic
// The (shared) implementation	definition of _M_impl
"/**
     *  @brief  Return reference to the C locale.
    */"	declaration of classic
"/**
     *  @brief  Set global locale
     *
     *  This function sets the global locale to the argument and returns a
     *  copy of the previous global locale.  If the argument has a name, it
     *  will also call std::setlocale(LC_ALL, loc.name()).
     *
     *  @param  __loc  The new locale to make global.
     *  @return  Copy of the old global locale.
    */"	declaration of global
"/**
     *  @brief  Locale inequality.
     *
     *  @param  __other  The locale to compare against.
     *  @return  ! (*this == __other)
    */"	definition of operator!=
"/**
     *  @brief  Locale equality.
     *
     *  @param  __other  The locale to compare against.
     *  @return  True if other and this refer to the same locale instance, are
     *		 copies, or have the same name.  False otherwise.
    */"	declaration of operator==
"/**
     *  @brief  Return locale name.
     *  @return  Locale name or ""*"" if unnamed.
    */"	declaration of name
"/**
     *  @brief  Return locale name.
     *  @return  Locale name or ""*"" if unnamed.
    */"	declaration of name
"/**
     *  @brief  Assignment operator.
     *
     *  Set this locale to be a copy of @a other.
     *
     *  @param  __other  The locale to copy.
     *  @return  A reference to this locale.
    */"	declaration of operator=
/// Locale destructor.	declaration of ~locale
"/**
     *  @brief  Construct locale with facets from another locale.
     *
     *  Constructs a copy of the locale @a base.  The facets specified by @a
     *  cat are replaced with those from the locale @a add.  If @a base and @a
     *  add are named, this locale instance will also be named.
     *
     *  @param  __base  The locale to copy.
     *  @param  __add  The locale to use facets from.
     *  @param  __cat  Set of categories defining the facets to use from add.
    */"	declaration of locale
"/**
     *  @brief  Construct locale with facets from another locale.
     *
     *  Constructs a copy of the locale @a base.  The facets specified by @a
     *  cat are replaced with those from the locale named by @a s.  If base is
     *  named, this locale instance will also be named.
     *
     *  @param  __base  The locale to copy.
     *  @param  __s  Name of the locale to use facets from.
     *  @param  __cat  Set of categories defining the facets to use from __s.
     *  @throw  std::runtime_error if __s is an undefined locale.
    */"	definition of locale
"/**
     *  @brief  Construct locale with facets from another locale.
     *
     *  Constructs a copy of the locale @a base.  The facets specified by @a
     *  cat are replaced with those from the locale named by @a s.  If base is
     *  named, this locale instance will also be named.
     *
     *  @param  __base  The locale to copy.
     *  @param  __s  Name of the locale to use facets from.
     *  @param  __cat  Set of categories defining the facets to use from __s.
     *  @throw  std::runtime_error if __s is an undefined locale.
    */"	definition of locale
"/**
     *  @brief  Named locale constructor.
     *
     *  Constructs a copy of the named C library locale.
     *
     *  @param  __s  Name of the locale to construct.
     *  @throw  std::runtime_error if __s is an undefined locale.
    */"	definition of locale
"/**
     *  @brief  Named locale constructor.
     *
     *  Constructs a copy of the named C library locale.
     *
     *  @param  __s  Name of the locale to construct.
     *  @throw  std::runtime_error if __s is an undefined locale.
    */"	definition of locale
"/**
     *  @brief  Construct locale with facets from another locale.
     *
     *  Constructs a copy of the locale @a base.  The facets specified by @a
     *  cat are replaced with those from the locale named by @a s.  If base is
     *  named, this locale instance will also be named.
     *
     *  @param  __base  The locale to copy.
     *  @param  __s  Name of the locale to use facets from.
     *  @param  __cat  Set of categories defining the facets to use from __s.
     *  @throw  std::runtime_error if __s is null or an undefined locale.
    */"	declaration of locale
"/**
     *  @brief  Named locale constructor.
     *
     *  Constructs a copy of the named C library locale.
     *
     *  @param  __s  Name of the locale to construct.
     *  @throw  std::runtime_error if __s is null or an undefined locale.
    */"	declaration of locale
"/**
     *  @brief  Copy constructor.
     *
     *  Constructs a copy of @a other.
     *
     *  @param  __other  The locale to copy.
    */"	declaration of locale
"/**
     *  @brief  Default constructor.
     *
     *  Constructs a copy of the global locale.  If no locale has been
     *  explicitly set, this is the C locale.
    */"	declaration of locale
"/**
     *  @brief  Category values.
     *
     *  The standard category values are none, ctype, numeric, collate, time,
     *  monetary, and messages.  They form a bitmask that supports union and
     *  intersection.  The category all is the union of these values.
     *
     *  NB: Order must match _S_facet_categories definition in locale.cc
    */"	definition of none
// Forward decls and friends:	declaration of _Impl
// Forward decls and friends:	declaration of id
// Forward decls and friends:	declaration of facet
/// Definition of locale::category.	declaration of category
"/**
   *  @brief  Container class for localization functionality.
   *  @ingroup locales
   *
   *  The locale class is first a class wrapper for C library locales.  It is
   *  also an extensible container for user-defined localization.  A locale is
   *  a collection of facets that implement various localization features such
   *  as money, time, and number printing.
   *
   *  Constructing C++ locales does not change the C library locale.
   *
   *  This library supports efficient construction and copying of locales
   *  through a reference counting implementation of the locale class.
  */"	definition of locale
//	#ifndef _LOCALE_CLASSES_H
/* _IOS_BASE_H */	#endif
// namespace	#endif
/// Calls @c base.unsetf(ios_base::floatfield)	definition of defaultfloat
/// base.setf(ios_base::fixed|ios_base::scientific, ios_base::floatfield)	definition of hexfloat
/// Calls base.setf(ios_base::scientific, ios_base::floatfield).	definition of scientific
/// Calls base.setf(ios_base::fixed, ios_base::floatfield).	definition of fixed
/// Calls base.setf(ios_base::oct, ios_base::basefield).	definition of oct
/// Calls base.setf(ios_base::hex, ios_base::basefield).	definition of hex
/// Calls base.setf(ios_base::dec, ios_base::basefield).	definition of dec
/// Calls base.setf(ios_base::right, ios_base::adjustfield).	definition of right
/// Calls base.setf(ios_base::left, ios_base::adjustfield).	definition of left
/// Calls base.setf(ios_base::internal, ios_base::adjustfield).	definition of internal
/// Calls base.unsetf(ios_base::unitbuf).	definition of nounitbuf
/// Calls base.setf(ios_base::unitbuf).	definition of unitbuf
/// Calls base.unsetf(ios_base::uppercase).	definition of nouppercase
/// Calls base.setf(ios_base::uppercase).	definition of uppercase
/// Calls base.unsetf(ios_base::skipws).	definition of noskipws
/// Calls base.setf(ios_base::skipws).	definition of skipws
/// Calls base.unsetf(ios_base::showpos).	definition of noshowpos
/// Calls base.setf(ios_base::showpos).	definition of showpos
/// Calls base.unsetf(ios_base::showpoint).	definition of noshowpoint
/// Calls base.setf(ios_base::showpoint).	definition of showpoint
/// Calls base.unsetf(ios_base::showbase).	definition of noshowbase
/// Calls base.setf(ios_base::showbase).	definition of showbase
/// Calls base.unsetf(ios_base::boolalpha).	definition of noboolalpha
/// Calls base.setf(ios_base::boolalpha).	definition of boolalpha
// 50.  Copy constructor and assignment operator of ios_base	#else
"/**
     *  Invokes each callback with erase_event.  Destroys local storage.
     *
     *  Note that the ios_base object for the standard streams never gets
     *  destroyed.  As a result, any callbacks registered with the standard
     *  streams will not get invoked with erase_event (unless copyfmt is
     *  used).
    */"	declaration of ~ios_base
"/**
     *  @brief  Access to void pointer array.
     *  @param  __ix  Index into the array.
     *  @return  A reference to a void* associated with the index.
     *
     *  The pword function provides access to an array of pointers that can be
     *  used for any purpose.  The array grows as required to hold the
     *  supplied index.  All pointers in the array are initialized to 0.
     *
     *  The implementation reserves several indices.  You should use xalloc to
     *  obtain an index that is safe to use.  Also note that since the array
     *  can grow dynamically, it is not safe to hold onto the reference.
    */"	definition of pword
"/**
     *  @brief  Access to integer array.
     *  @param  __ix  Index into the array.
     *  @return  A reference to an integer associated with the index.
     *
     *  The iword function provides access to an array of integers that can be
     *  used for any purpose.  The array grows as required to hold the
     *  supplied index.  All integers in the array are initialized to 0.
     *
     *  The implementation reserves several indices.  You should use xalloc to
     *  obtain an index that is safe to use.  Also note that since the array
     *  can grow dynamically, it is not safe to hold onto the reference.
    */"	definition of iword
"/**
     *  @brief  Access to unique indices.
     *  @return  An integer different from all previous calls.
     *
     *  This function returns a unique integer every time it is called.  It
     *  can be used for any purpose, but is primarily intended to be a unique
     *  index for the iword and pword functions.  The expectation is that an
     *  application calls xalloc in order to obtain an index in the iword and
     *  pword arrays that can be used without fear of conflict.
     *
     *  The implementation maintains a static variable that is incremented and
     *  returned on each invocation.  xalloc is guaranteed to return an index
     *  that is safe to use in the iword and pword arrays.
    */"	declaration of xalloc
"/**
     *  @brief  Locale access
     *  @return  A reference to the current locale.
     *
     *  Like getloc above, but returns a reference instead of
     *  generating a copy.
    */"	definition of _M_getloc
"/**
     *  @brief  Locale access
     *  @return  A copy of the current locale.
     *
     *  If @c imbue(loc) has previously been called, then this function
     *  returns @c loc.  Otherwise, it returns a copy of @c std::locale(),
     *  the global C++ locale.
    */"	definition of getloc
"/**
     *  @brief  Setting a new locale.
     *  @param  __loc  The new locale.
     *  @return  The previous locale.
     *
     *  Sets the new locale for this stream, and then invokes each callback
     *  with imbue_event.
    */"	declaration of imbue
"/**
     *  @brief  Interaction with the standard C I/O objects.
     *  @param  __sync  Whether to synchronize or not.
     *  @return  True if the standard streams were previously synchronized.
     *
     *  The synchronization referred to is @e only that between the standard
     *  C facilities (e.g., stdout) and the standard C++ objects (e.g.,
     *  cout).  User-declared streams are unaffected.  See
     *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/fstreams.html#std.io.filestreams.binary
    */"	declaration of sync_with_stdio
"/**
     *  @brief  Changing flags.
     *  @param  __wide  The new width value.
     *  @return  The previous value of width().
    */"	definition of width
"/**
     *  @brief  Flags access.
     *  @return  The minimum field width to generate on output operations.
     *
     *  <em>Minimum field width</em> refers to the number of characters.
    */"	definition of width
"/**
     *  @brief  Changing flags.
     *  @param  __prec  The new precision value.
     *  @return  The previous value of precision().
    */"	definition of precision
"/**
     *  @brief  Flags access.
     *  @return  The precision to generate on certain output operations.
     *
     *  Be careful if you try to give a definition of @a precision here; see
     *  DR 189.
    */"	definition of precision
"/**
     *  @brief  Clearing format flags.
     *  @param  __mask  The flags to unset.
     *
     *  This function clears @a __mask in the format flags.
    */"	definition of unsetf
"/**
     *  @brief  Setting new format flags.
     *  @param  __fmtfl  Additional flags to set.
     *  @param  __mask  The flags mask for @a fmtfl.
     *  @return  The previous format control flags.
     *
     *  This function clears @a mask in the format flags, then sets
     *  @a fmtfl @c & @a mask.  An example mask is @c ios_base::adjustfield.
    */"	definition of setf
"/**
     *  @brief  Setting new format flags.
     *  @param  __fmtfl  Additional flags to set.
     *  @return  The previous format control flags.
     *
     *  This function sets additional flags in format control.  Flags that
     *  were previously set remain set.
    */"	definition of setf
"/**
     *  @brief  Setting new format flags all at once.
     *  @param  __fmtfl  The new flags to set.
     *  @return  The previous format control flags.
     *
     *  This function overwrites all the format flags with @a __fmtfl.
    */"	definition of flags
"/**
     *  @brief  Access to format flags.
     *  @return  The format control flags for both input and output.
    */"	definition of flags
// through these machinations.	definition of Init
// Members for locale and locale caching.	definition of _M_ios_locale
// Allocated storage.	definition of _M_word_size
// The first 5 iword and pword slots are reserved for internal use.	definition of (unnamed enum)
// Only for failed iword/pword calls.	definition of _M_word_zero
// 27.4.2.5  Members for iword/pword storage	definition of _Words
// Be race-detector-friendly.  For more info see bits/c++config.	;
// 0 => OK to delete.	definition of _M_remove_reference
// 0 means one reference.	definition of _M_refcount
// Data Members	definition of _M_next
// 27.4.2.6  ios_base callbacks	definition of _Callback_list
"/**
     *  @brief  Add the callback __fn with parameter __index.
     *  @param  __fn  The function to add.
     *  @param  __index  The integer to pass to the function when invoked.
     *
     *  Registers a function as an event callback with an integer parameter to
     *  be passed to the function when invoked.  Multiple copies of the
     *  function are allowed.  If there are multiple callbacks, they are
     *  invoked in the order they were registered.
    */"	declaration of register_callback
"/**
     *  @brief  The type of an event callback function.
     *  @param  __e  One of the members of the event enum.
     *  @param  __b  Reference to the ios_base object.
     *  @param  __i  The integer provided when the callback was registered.
     *
     *  Event callbacks are user defined functions that get called during
     *  several ios_base and basic_ios functions, specifically imbue(),
     *  copyfmt(), and ~ios().
    */"	declaration of event_callback
"/**
     *  @brief  The set of events that may be passed to an event callback.
     *
     *  erase_event is used during ~ios() and copyfmt().  imbue_event is used
     *  during imbue().  copyfmt_event is used during copyfmt().
    */"	definition of event
// Annex D.6 (removed in C++17)	declaration of io_state
/// Request a seek relative to the current end of the sequence.	definition of end
/// Request a seek relative to the current position within the sequence.	definition of cur
/// Request a seek relative to the beginning of the stream.	definition of beg
"/**
     *  @brief This is an enumerated type.
     *
     *  @c @a _Ios_Seekdir is implementation-defined.  Defined values
     *  of type seekdir are:
     *  - beg
     *  - cur, equivalent to @c SEEK_CUR in the C standard library.
     *  - end, equivalent to @c SEEK_END in the C standard library.
    */"	declaration of seekdir
/// Open for input.  Default for @c ofstream.	definition of trunc
/// Open for output.  Default for @c ofstream and fstream.	definition of out
/// Open for input.  Default for @c ifstream and fstream.	definition of in
/// https://gcc.gnu.org/onlinedocs/libstdc++/manual/fstreams.html#std.io.filestreams.binary	definition of binary
/// Open and seek to end immediately after opening.	definition of ate
/// Seek to end before each write.	definition of app
"/**
     *  @brief This is a bitmask type.
     *
     *  @c @a _Ios_Openmode is implementation-defined, but it is valid to
     *  perform bitwise operations on these values and expect the Right
     *  Thing to happen.  Defined objects of type openmode are:
     *  - app
     *  - ate
     *  - binary
     *  - in
     *  - out
     *  - trunc
    */"	declaration of openmode
/// Indicates all is well.	definition of goodbit
/// desired characters.	definition of failbit
/// Indicates that an input operation reached the end of an input sequence.	definition of eofbit
/// as an irrecoverable read error from a file).	definition of badbit
"/**
     *  @brief This is a bitmask type.
     *
     *  @c @a _Ios_Iostate is implementation-defined, but it is valid to
     *  perform bitwise operations on these values and expect the Right
     *  Thing to happen.  Defined objects of type iostate are:
     *  - badbit
     *  - eofbit
     *  - failbit
     *  - goodbit
    */"	declaration of iostate
/// A mask of scientific|fixed.  Useful for the 2-arg form of @c setf.	definition of floatfield
/// A mask of dec|oct|hex.  Useful for the 2-arg form of @c setf.	definition of basefield
/// A mask of left|right|internal.  Useful for the 2-arg form of @c setf.	definition of adjustfield
/// in generated output.	definition of uppercase
/// Flushes output after each output operation.	definition of unitbuf
/// Skips leading white space before certain input operations.	definition of skipws
/// Generates a + sign in non-negative generated numeric output.	definition of showpos
/// floating-point output.	definition of showpoint
/// output.	definition of showbase
/// Generates floating-point output in scientific notation.	definition of scientific
/// generated output.  (I.e., the thing you print is flush right.)	definition of right
/// Converts integer input or generates integer output in octal base.	definition of oct
/// generated output.  (I.e., the thing you print is flush left.)	definition of left
/// designated.	definition of internal
/// Converts integer input or generates integer output in hexadecimal base.	definition of hex
/// Generate floating-point output in fixed-point notation.	definition of fixed
/// Converts integer input or generates integer output in decimal base.	definition of dec
/// Insert/extract @c bool in alphabetic rather than numeric format.	definition of boolalpha
"/**
     *  @brief This is a bitmask type.
     *
     *  @c @a _Ios_Fmtflags is implementation-defined, but it is valid to
     *  perform bitwise operations on these values and expect the Right
     *  Thing to happen.  Defined objects of type fmtflags are:
     *  - boolalpha
     *  - dec
     *  - fixed
     *  - hex
     *  - internal
     *  - left
     *  - oct
     *  - right
     *  - scientific
     *  - showbase
     *  - showpoint
     *  - showpos
     *  - skipws
     *  - unitbuf
     *  - uppercase
     *  - adjustfield
     *  - basefield
     *  - floatfield
    */"	declaration of fmtflags
// http://gcc.gnu.org/onlinedocs/gcc-4.3.2/gcc/Vague-Linkage.html	#endif
"/** 
     *  @brief These are thrown to indicate problems with io.
     *  @ingroup exceptions
     *
     *  27.4.2.1.1  Class ios_base::failure
     */"	#if _GLIBCXX_USE_CXX11_ABI
// Type that is layout-compatible with std::error_code	#endif
"/**
   *  @brief  The base of the I/O class hierarchy.
   *  @ingroup io
   *
   *  This class defines everything that can be defined about I/O that does
   *  not depend on the type of characters being input or output.  Most
   *  people will only see @c ios_base when they need to specify the full
   *  name of the various I/O flags (e.g., the openmodes).
  */"	definition of ios_base
/// I/O error code	definition of io_errc
// expressions involving them are not compile-time constants.	definition of _Ios_Fmtflags
//	#ifndef _IOS_BASE_H
// namespace std	#endif
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// standard.	definition of __copy_streambufs_eof
//	#ifndef _STREAMBUF_TCC
/* _GLIBCXX_STREAMBUF */	#endif
// Explicit specialization declarations, defined in src/streambuf.cc.	declaration of __copy_streambufs_eof
// Also used by specializations for char and wchar_t in src.	#if __cplusplus < 201103L
"/**
       *  @brief  Tosses a character.
       *
       *  Advances the read pointer, ignoring the character that would have
       *  been read.
       *
       *  See http://gcc.gnu.org/ml/libstdc++/2002-05/msg00168.html
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Consumes data from the buffer; writes to the
       *          controlled sequence.
       *  @param  __c  An additional character to consume.
       *  @return  eof() to indicate failure, something else (usually
       *           @a __c, or not_eof())
       *
       *  Informally, this function is called when the output buffer
       *  is full (or does not exist, as buffering need not actually
       *  be done).  If a buffer exists, it is @a consumed, with
       *  <em>some effect</em> on the controlled sequence.
       *  (Typically, the buffer is written out to the sequence
       *  verbatim.)  In either case, the character @a c is also
       *  written out, if @a __c is not @c eof().
       *
       *  For a formal definition of this function, see a good text
       *  such as Langer & Kreft, or [27.5.2.4.5]/3-7.
       *
       *  A functioning output streambuf can be created by overriding only
       *  this function (no buffer area will be used).
       *
       *  @note  Base class version does nothing, returns eof().
      */"	#if _GLIBCXX_USE_DEPRECATED && __cplusplus <= 201402L
"/**
   *  @brief  The actual work of input and output (interface).
   *  @ingroup io
   *
   *  @tparam _CharT  Type of character stream.
   *  @tparam _Traits  Traits for character type, defaults to
   *                   char_traits<_CharT>.
   *
   *  This is a base class.  Derived stream buffers each control a
   *  pair of character sequences:  one for input, and one for output.
   *
   *  Section [27.5.1] of the standard describes the requirements and
   *  behavior of stream buffer classes.  That section (three paragraphs)
   *  is reproduced here, for simplicity and accuracy.
   *
   *  -# Stream buffers can impose various constraints on the sequences
   *     they control.  Some constraints are:
   *     - The controlled input sequence can be not readable.
   *     - The controlled output sequence can be not writable.
   *     - The controlled sequences can be associated with the contents of
   *       other representations for character sequences, such as external
   *       files.
   *     - The controlled sequences can support operations @e directly to or
   *       from associated sequences.
   *     - The controlled sequences can impose limitations on how the
   *       program can read characters from a sequence, write characters to
   *       a sequence, put characters back into an input sequence, or alter
   *       the stream position.
   *     .
   *  -# Each sequence is characterized by three pointers which, if non-null,
   *     all point into the same @c charT array object.  The array object
   *     represents, at any moment, a (sub)sequence of characters from the
   *     sequence.  Operations performed on a sequence alter the values
   *     stored in these pointers, perform reads and writes directly to or
   *     from associated sequences, and alter <em>the stream position</em> and
   *     conversion state as needed to maintain this subsequence relationship.
   *     The three pointers are:
   *     - the <em>beginning pointer</em>, or lowest element address in the
   *       array (called @e xbeg here);
   *     - the <em>next pointer</em>, or next element address that is a
   *       current candidate for reading or writing (called @e xnext here);
   *     - the <em>end pointer</em>, or first element address beyond the
   *       end of the array (called @e xend here).
   *     .
   *  -# The following semantic constraints shall always apply for any set
   *     of three pointers for a sequence, using the pointer names given
   *     immediately above:
   *     - If @e xnext is not a null pointer, then @e xbeg and @e xend shall
   *       also be non-null pointers into the same @c charT array, as
   *       described above; otherwise, @e xbeg and @e xend shall also be null.
   *     - If @e xnext is not a null pointer and @e xnext < @e xend for an
   *       output sequence, then a <em>write position</em> is available.
   *       In this case, @e *xnext shall be assignable as the next element
   *       to write (to put, or to store a character value, into the sequence).
   *     - If @e xnext is not a null pointer and @e xbeg < @e xnext for an
   *       input sequence, then a <em>putback position</em> is available.
   *       In this case, @e xnext[-1] shall have a defined value and is the
   *       next (preceding) element to store a character that is put back
   *       into the input sequence.
   *     - If @e xnext is not a null pointer and @e xnext< @e xend for an
   *       input sequence, then a <em>read position</em> is available.
   *       In this case, @e *xnext shall have a defined value and is the
   *       next element to read (to get, or to obtain a character value,
   *       from the sequence).
  */"	definition of basic_streambuf<_CharT, _Traits>
//	#ifndef _GLIBXX_STREAMBUF
// _GLIBCXX_CWCTYPE	#endif
//_GLIBCXX_USE_WCHAR_T	#endif
// namespace	#endif
// Get rid of those macros defined in <wctype.h> in lieu of real functions.	#undef iswalnum
// Get rid of those macros defined in <wctype.h> in lieu of real functions.	#if _GLIBCXX_HAVE_ISWBLANK
// _GLIBCXX_HAVE_WCTYPE_H	#endif
// Work around glibc BZ 9694	#endif
//	#pragma GCC system_header
// on the mask type. Because of this, we don't use an enum.	declaration of mask
// Non-standard typedefs.	declaration of __to_type
/// @brief  Base class for ctype.	definition of ctype_base
// Information as gleaned from /usr/include/ctype.h	std
// namespace	#endif
// Overloads for streambuf iterators.	definition of copy
/// Return true if previous operator=() failed.	declaration of failed
/// Return *this.	declaration of operator++
/// Return *this.	declaration of operator++
/// Return *this.	declaration of operator*
///  Write character to streambuf.  Calls streambuf.sputc().	declaration of operator=
///  Construct output iterator from streambuf.	declaration of ostreambuf_iterator
///  Construct output iterator from ostream.	declaration of ostreambuf_iterator
/// Public typedefs	declaration of char_type
/// Provides output iterator semantics for streambufs.	definition of ostreambuf_iterator<_CharT, _Traits>
/// Return true both iterators are end or both are not end.	declaration of equal
/// Advance the iterator.  Calls streambuf.sbumpc().	declaration of operator++
/// Advance the iterator.  Calls streambuf.sbumpc().	declaration of operator++
// libstdc++ extension	#endif
///  operator*() on an end of stream is undefined.	#ifdef _GLIBCXX_DEBUG_PEDANTIC
///  Construct start of streambuf iterator.	#if __cplusplus >= 201103L
///  Construct end of input stream iterator.	#if __cplusplus >= 201103L
// LWG 445.	#else
/// Provides input iterator semantics for streambufs.	definition of istreambuf_iterator<_CharT, _Traits>
"/** @file bits/streambuf_iterator.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iterator}
 */"	#ifndef _STREAMBUF_ITERATOR_H
// functions go in ctype.cc	std
// namespace	#endif
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// else Padding first.	definition of __add_grouping
// function arguments. The other (_Traits) has to be explicitly specified.	definition of _S_pad
// Write resulting, fully-formatted string to output iterator.	definition of do_put
// largely sufficient.	#endif
// If the buffer was not large enough, try again with the correct size.	#else
// Long enough for the max format spec.	#if _GLIBCXX_USE_C99_STDIO && !_GLIBCXX_HAVE_BROKEN_VSNPRINTF
// outlined in 22.2.2.2 [lib.locale.num.put]	definition of _M_insert_float
// Write resulting, fully-formatted string to output iterator.	definition of _M_group_float
// Hex.	definition of _M_group_int
// If necessary, pad.	definition of __int_to_char
// converted into a char_type string.	definition of _M_pad
// 23. Num_get overflow result.	definition of do_get
// 17.  Bad bool parsing	definition of do_get
// Add the ending grouping if a decimal or 'e'/'E' wasn't found.	definition of _M_extract_int
"// 1,222,444 == __grouping of ""\3"" == ""\3\3\3"""	declaration of __verify_grouping
"// 1,222,444 == __grouping of ""\3"" == ""\3\3\3"""	declaration of __verify_grouping
// Specializations.	definition of __use_cache<__numpunct_cache<_CharT>>
// exist before, it gets constructed on the fly.	definition of __use_cache<_Facet>
"/** @file bits/locale_facets.tcc
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{locale}
 */"	#ifndef _LOCALE_FACETS_TCC
/// Convenience interface to ctype.tolower(__c).	definition of tolower
/// Convenience interface to ctype.toupper(__c).	definition of toupper
/// Convenience interface to ctype.toupper(__c).	definition of toupper
/// Convenience interface to ctype.is(ctype_base::blank, __c).	definition of isblank
/// Convenience interface to ctype.is(ctype_base::graph, __c).	definition of isgraph
/// Convenience interface to ctype.is(ctype_base::alnum, __c).	definition of isalnum
/// Convenience interface to ctype.is(ctype_base::xdigit, __c).	definition of isxdigit
/// Convenience interface to ctype.is(ctype_base::punct, __c).	definition of ispunct
/// Convenience interface to ctype.is(ctype_base::digit, __c).	definition of isdigit
/// Convenience interface to ctype.is(ctype_base::alpha, __c).	definition of isalpha
/// Convenience interface to ctype.is(ctype_base::lower, __c).	definition of islower
/// Convenience interface to ctype.is(ctype_base::upper, __c).	definition of isupper
/// Convenience interface to ctype.is(ctype_base::cntrl, __c).	definition of iscntrl
/// Convenience interface to ctype.is(ctype_base::print, __c).	definition of isprint
/// Convenience interface to ctype.is(ctype_base::space, __c).	definition of isspace
// XXX GLIBCXX_ABI Deprecated	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__
// XXX GLIBCXX_ABI Deprecated	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__
"/**
       *  @brief  Numeric formatting.
       *
       *  These functions do the work of formatting numeric values and
       *  inserting them into a stream. This function is a hook for derived
       *  classes to change the value returned.
       *
       *  @param  __s  Stream to write to.
       *  @param  __io  Source of locale and flags.
       *  @param  __fill  Char_type to use for filling.
       *  @param  __v  Value to format and insert.
       *  @return  Iterator after writing.
      */"	#ifdef _GLIBCXX_USE_LONG_LONG
"/**
       *  @brief  Numeric formatting.
       *
       *  Formats the integral value @a v and inserts it into a
       *  stream.  It does so by calling num_put::do_put().
       *
       *  Formatting is affected by the flag settings in @a io.
       *
       *  The basic format is affected by the value of io.flags() &
       *  ios_base::basefield.  If equal to ios_base::oct, formats like the
       *  printf %o specifier.  Else if equal to ios_base::hex, formats like
       *  %x or %X with ios_base::uppercase unset or set respectively.
       *  Otherwise, formats like %d, %ld, %lld for signed and %u, %lu, %llu
       *  for unsigned values.  Note that if both oct and hex are set, neither
       *  will take effect.
       *
       *  If ios_base::showpos is set, '+' is output before positive values.
       *  If ios_base::showbase is set, '0' precedes octal values (except 0)
       *  and '0[xX]' precedes hex values.
       *
       *  The decimal point character used is numpunct::decimal_point().
       *  Thousands separators are inserted according to
       *  numpunct::grouping() and numpunct::thousands_sep().
       *
       *  If io.width() is non-zero, enough @a fill characters are inserted to
       *  make the result at least that wide.  If
       *  (io.flags() & ios_base::adjustfield) == ios_base::left, result is
       *  padded at the end.  If ios_base::internal, then padding occurs
       *  immediately after either a '+' or '-' or after '0x' or '0X'.
       *  Otherwise, padding occurs at the beginning.
       *
       *  @param  __s  Stream to write to.
       *  @param  __io  Source of locale and flags.
       *  @param  __fill  Char_type to use for filling.
       *  @param  __v  Value to format and insert.
       *  @return  Iterator after writing.
      */"	#ifdef _GLIBCXX_USE_LONG_LONG
"/**
   *  @brief  Primary class template num_put.
   *  @ingroup locales
   *
   *  This facet encapsulates the code to convert a number to a string.  It is
   *  used by the ostream numeric insertion operators.
   *
   *  The num_put template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from the num_put facet.
  */"	definition of num_put<_CharT, _OutIter>
// XXX GLIBCXX_ABI Deprecated	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__
// XXX GLIBCXX_ABI Deprecated	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__
"/**
       *  @brief  Numeric parsing.
       *
       *  Parses the input stream into the variable @a v.  This function is a
       *  hook for derived classes to change the value returned.  @see get()
       *  for more details.
       *
       *  @param  __beg  Start of input stream.
       *  @param  __end  End of input stream.
       *  @param  __io  Source of locale and flags.
       *  @param  __err  Error flags to set.
       *  @param  __v  Value to format and insert.
       *  @return  Iterator after reading.
      */"	#ifdef _GLIBCXX_USE_LONG_LONG
"/**
       *  @brief  Numeric parsing.
       *
       *  Parses the input stream into the integral variable @a v.  It does so
       *  by calling num_get::do_get().
       *
       *  Parsing is affected by the flag settings in @a io.
       *
       *  The basic parse is affected by the value of io.flags() &
       *  ios_base::basefield.  If equal to ios_base::oct, parses like the
       *  scanf %o specifier.  Else if equal to ios_base::hex, parses like %X
       *  specifier.  Else if basefield equal to 0, parses like the %i
       *  specifier.  Otherwise, parses like %d for signed and %u for unsigned
       *  types.  The matching type length modifier is also used.
       *
       *  Digit grouping is interpreted according to
       *  numpunct::grouping() and numpunct::thousands_sep().  If the
       *  pattern of digit groups isn't consistent, sets err to
       *  ios_base::failbit.
       *
       *  If parsing the string yields a valid value for @a v, @a v is set.
       *  Otherwise, sets err to ios_base::failbit and leaves @a v unaltered.
       *  Sets err to ios_base::eofbit if the stream is emptied.
       *
       *  @param  __in  Start of input stream.
       *  @param  __end  End of input stream.
       *  @param  __io  Source of locale and flags.
       *  @param  __err  Error flags to set.
       *  @param  __v  Value to format and insert.
       *  @return  Iterator after reading.
      */"	#ifdef _GLIBCXX_USE_LONG_LONG
"/**
   *  @brief  Primary class template num_get.
   *  @ingroup locales
   *
   *  This facet encapsulates the code to parse and return a number
   *  from a string.  It is used by the istream numeric extraction
   *  operators.
   *
   *  The num_get template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from the num_get facet.
  */"	definition of num_get<_CharT, _InIter>
/// class numpunct_byname [22.2.3.2].	definition of numpunct_byname<_CharT>
// For use at construction time only.	declaration of _M_initialize_numpunct
"/**
       *  @brief  Return string representation of bool false.
       *
       *  Returns a string_type containing the text representation for false
       *  bool variables.  This function is a hook for derived classes to
       *  change the value returned.
       *
       *  @return  string_type representing printed form of false.
      */"	declaration of do_falsename
"/**
       *  @brief  Return string representation of bool true.
       *
       *  Returns a string_type containing the text representation for true
       *  bool variables.  This function is a hook for derived classes to
       *  change the value returned.
       *
       *  @return  string_type representing printed form of true.
      */"	declaration of do_truename
"/**
       *  @brief  Return grouping specification.
       *
       *  Returns a string representing groupings for the integer part of a
       *  number.  This function is a hook for derived classes to change the
       *  value returned.  @see grouping() for details.
       *
       *  @return  String representing grouping specification.
      */"	declaration of do_grouping
"/**
       *  @brief  Return grouping specification.
       *
       *  Returns a string representing groupings for the integer part of a
       *  number.  This function is a hook for derived classes to change the
       *  value returned.  @see grouping() for details.
       *
       *  @return  String representing grouping specification.
      */"	declaration of do_grouping
"/**
       *  @brief  Return thousands separator character.
       *
       *  Returns a char_type to use as a thousands separator.  This function
       *  is a hook for derived classes to change the value returned.
       *
       *  @return  @a char_type representing a thousands separator.
      */"	declaration of do_thousands_sep
"/**
       *  @brief  Return decimal point character.
       *
       *  Returns a char_type to use as a decimal point.  This function is a
       *  hook for derived classes to change the value returned.
       *
       *  @return  @a char_type representing a decimal point.
      */"	declaration of do_decimal_point
/// Destructor.	declaration of ~numpunct
"/**
       *  @brief  Return string representation of bool false.
       *
       *  This function returns a string_type containing the text
       *  representation for false bool variables.  It does so by calling
       *  numpunct<char_type>::do_falsename().
       *
       *  @return  string_type representing printed form of false.
      */"	declaration of falsename
"/**
       *  @brief  Return string representation of bool true.
       *
       *  This function returns a string_type containing the text
       *  representation for true bool variables.  It does so by calling
       *  numpunct<char_type>::do_truename().
       *
       *  @return  string_type representing printed form of true.
      */"	declaration of truename
"/**
       *  @brief  Return grouping specification.
       *
       *  This function returns a string representing groupings for the
       *  integer part of a number.  Groupings indicate where thousands
       *  separators should be inserted in the integer part of a number.
       *
       *  Each char in the return string is interpret as an integer
       *  rather than a character.  These numbers represent the number
       *  of digits in a group.  The first char in the string
       *  represents the number of digits in the least significant
       *  group.  If a char is negative, it indicates an unlimited
       *  number of digits for the group.  If more chars from the
       *  string are required to group a number, the last char is used
       *  repeatedly.
       *
       *  For example, if the grouping() returns ""\003\002"" and is
       *  applied to the number 123456789, this corresponds to
       *  12,34,56,789.  Note that if the string was ""32"", this would
       *  put more than 50 digits into the least significant group if
       *  the character set is ASCII.
       *
       *  The string is returned by calling
       *  numpunct<char_type>::do_grouping().
       *
       *  @return  string representing grouping specification.
      */"	declaration of grouping
"/**
       *  @brief  Return grouping specification.
       *
       *  This function returns a string representing groupings for the
       *  integer part of a number.  Groupings indicate where thousands
       *  separators should be inserted in the integer part of a number.
       *
       *  Each char in the return string is interpret as an integer
       *  rather than a character.  These numbers represent the number
       *  of digits in a group.  The first char in the string
       *  represents the number of digits in the least significant
       *  group.  If a char is negative, it indicates an unlimited
       *  number of digits for the group.  If more chars from the
       *  string are required to group a number, the last char is used
       *  repeatedly.
       *
       *  For example, if the grouping() returns ""\003\002"" and is
       *  applied to the number 123456789, this corresponds to
       *  12,34,56,789.  Note that if the string was ""32"", this would
       *  put more than 50 digits into the least significant group if
       *  the character set is ASCII.
       *
       *  The string is returned by calling
       *  numpunct<char_type>::do_grouping().
       *
       *  @return  string representing grouping specification.
      */"	declaration of grouping
"/**
       *  @brief  Return thousands separator character.
       *
       *  This function returns a char_type to use as a thousands
       *  separator.  It does so by returning returning
       *  numpunct<char_type>::do_thousands_sep().
       *
       *  @return  char_type representing a thousands separator.
      */"	declaration of thousands_sep
"/**
       *  @brief  Return decimal point character.
       *
       *  This function returns a char_type to use as a decimal point.  It
       *  does so by returning returning
       *  numpunct<char_type>::do_decimal_point().
       *
       *  @return  @a char_type representing a decimal point.
      */"	declaration of decimal_point
"/**
       *  @brief  Internal constructor.  Not for general use.
       *
       *  This is a constructor for use by the library itself to set up new
       *  locales.
       *
       *  @param  __cloc  The C locale.
       *  @param  __refs  Refcount to pass to the base class.
       */"	declaration of numpunct
"/**
       *  @brief  Internal constructor.  Not for general use.
       *
       *  This is a constructor for use by the library itself to set up the
       *  predefined locale facets.
       *
       *  @param  __cache  __numpunct_cache object.
       *  @param  __refs  Refcount to pass to the base class.
       */"	declaration of numpunct
"/**
       *  @brief  Numpunct constructor.
       *
       *  @param  __refs  Refcount to pass to the base class.
       */"	declaration of numpunct
/// Numpunct facet id.	declaration of id
//@}	declaration of __cache_type
/// Public typedefs	declaration of char_type
"/**
   *  @brief  Primary class template numpunct.
   *  @ingroup locales
   *
   *  This facet stores several pieces of information related to printing and
   *  scanning numbers, such as the decimal point character.  It takes a
   *  template parameter specifying the char type.  The numpunct facet is
   *  used by streams for many I/O operations involving numbers.
   *
   *  The numpunct template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from a numpunct facet.
  */"	definition of numpunct<_CharT>
// through the current locale's ctype<_CharT>.widen().	definition of _M_atoms_in
// through the current locale's ctype<_CharT>.widen().	definition of _M_atoms_out
// Construct and return valid scanf format for floating point types.	declaration of _S_format_float
"// ""-+xX0123456789abcdefABCDEF"""	declaration of _S_atoms_in
"// ""-+xX0123456789abcdef0123456789ABCDEF""."	declaration of _S_atoms_out
// For scientific notation, 'E'	_S_oE
// For scientific notation, 'e'	_S_oe
// Below are the indices into _S_atoms_out.	definition of (unnamed enum)
// 22.2.2  The numeric category.	definition of __num_base
/// 22.2.1.4  Class ctype_byname specializations.	definition of ctype_byname<char>
/// class ctype_byname [22.2.1.2].	definition of ctype_byname<_CharT>
//_GLIBCXX_USE_WCHAR_T	#endif
// For use at construction time only.	declaration of _M_initialize_ctype
"/**
       *  @brief  Narrow wchar_t array to char array
       *
       *  This virtual function converts each wchar_t in the range [lo,hi) to
       *  char using the simplest reasonable transformation and writes the
       *  results to the destination array.  For any wchar_t in the input that
       *  cannot be converted, @a dfault is used instead.  For an underived
       *  ctype<wchar_t> facet, the argument will be copied, casting each
       *  element to char.
       *
       *  do_narrow() is a hook for a derived facet to change the behavior of
       *  narrowing.  do_narrow() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __dfault  Char to use if conversion fails.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	declaration of do_narrow
"/**
       *  @brief  Narrow wchar_t to char
       *
       *  This virtual function converts the argument to char using
       *  the simplest reasonable transformation.  If the conversion
       *  fails, dfault is returned instead.  For an underived
       *  ctype<wchar_t> facet, @a c will be cast to char and
       *  returned.
       *
       *  do_narrow() is a hook for a derived facet to change the
       *  behavior of narrowing.  do_narrow() must always return the
       *  same result for the same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The wchar_t to convert.
       *  @param __dfault  Char to return if conversion fails.
       *  @return  The converted char.
      */"	declaration of do_narrow
"/**
       *  @brief  Widen char array to wchar_t array
       *
       *  This function converts each char in the input to wchar_t using the
       *  simplest reasonable transformation.  For an underived ctype<wchar_t>
       *  facet, the argument will be copied, casting each element to wchar_t.
       *
       *  do_widen() is a hook for a derived facet to change the behavior of
       *  widening.  do_widen() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to start range.
       *  @param __hi  Pointer to end of range.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	declaration of do_widen
"/**
       *  @brief  Widen char to wchar_t
       *
       *  This virtual function converts the char to wchar_t using the
       *  simplest reasonable transformation.  For an underived ctype<wchar_t>
       *  facet, the argument will be cast to wchar_t.
       *
       *  do_widen() is a hook for a derived facet to change the behavior of
       *  widening.  do_widen() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The char to convert.
       *  @return  The converted wchar_t.
      */"	declaration of do_widen
"/**
       *  @brief  Convert array to lowercase.
       *
       *  This virtual function converts each wchar_t in the range [lo,hi) to
       *  lowercase if possible.  Other elements remain untouched.
       *
       *  do_tolower() is a hook for a derived facet to change the behavior of
       *  lowercasing.  do_tolower() must always return the same result for
       *  the same input.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	declaration of do_tolower
"/**
       *  @brief  Convert to lowercase.
       *
       *  This virtual function converts the argument to lowercase if
       *  possible.  If not possible (for example, '2'), returns the argument.
       *
       *  do_tolower() is a hook for a derived facet to change the behavior of
       *  lowercasing.  do_tolower() must always return the same result for
       *  the same input.
       *
       *  @param __c  The wchar_t to convert.
       *  @return  The lowercase wchar_t if convertible, else @a __c.
      */"	declaration of do_tolower
"/**
       *  @brief  Convert array to uppercase.
       *
       *  This virtual function converts each wchar_t in the range [lo,hi) to
       *  uppercase if possible.  Other elements remain untouched.
       *
       *  do_toupper() is a hook for a derived facet to change the behavior of
       *  uppercasing.  do_toupper() must always return the same result for
       *  the same input.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	declaration of do_toupper
"/**
       *  @brief  Convert to uppercase.
       *
       *  This virtual function converts the wchar_t argument to uppercase if
       *  possible.  If not possible (for example, '2'), returns the argument.
       *
       *  do_toupper() is a hook for a derived facet to change the behavior of
       *  uppercasing.  do_toupper() must always return the same result for
       *  the same input.
       *
       *  @param __c  The wchar_t to convert.
       *  @return  The uppercase wchar_t if convertible, else @a __c.
      */"	declaration of do_toupper
"/**
       *  @brief  Find wchar_t not matching mask
       *
       *  This function searches for and returns a pointer to the first
       *  wchar_t c of [__lo,__hi) for which is(__m,c) is false.
       *
       *  do_scan_is() is a hook for a derived facet to change the behavior of
       *  match searching.  do_is() must always return the same result for the
       *  same input.
       *
       *  @param __m  The mask to compare against.
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  Pointer to a non-matching wchar_t if found, else @a __hi.
      */"	declaration of do_scan_not
"/**
       *  @brief  Find wchar_t matching mask
       *
       *  This function searches for and returns the first wchar_t c in
       *  [__lo,__hi) for which is(__m,c) is true.
       *
       *  do_scan_is() is a hook for a derived facet to change the behavior of
       *  match searching.  do_is() must always return the same result for the
       *  same input.
       *
       *  @param __m  The mask to compare against.
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  Pointer to a matching wchar_t if found, else @a __hi.
      */"	declaration of do_scan_is
"/**
       *  @brief  Return a mask array.
       *
       *  This function finds the mask for each wchar_t in the range [lo,hi)
       *  and successively writes it to vec.  vec must have as many elements
       *  as the input.
       *
       *  do_is() is a hook for a derived facet to change the behavior of
       *  classifying.  do_is() must always return the same result for the
       *  same input.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __vec  Pointer to an array of mask storage.
       *  @return  @a __hi.
      */"	declaration of do_is
"/**
       *  @brief  Test wchar_t classification.
       *
       *  This function finds a mask M for @a c and compares it to mask @a m.
       *
       *  do_is() is a hook for a derived facet to change the behavior of
       *  classifying.  do_is() must always return the same result for the
       *  same input.
       *
       *  @param __c  The wchar_t to find the mask of.
       *  @param __m  The mask to compare against.
       *  @return  (M & __m) != 0.
      */"	declaration of do_is
/// Destructor	declaration of ~ctype
"/**
       *  @brief  Constructor performs static initialization.
       *
       *  This constructor is used to construct the initial C locale facet.
       *
       *  @param __cloc  Handle to C locale data.
       *  @param __refs  Passed to the base facet class.
      */"	declaration of ctype
"/**
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param __refs  Passed to the base facet class.
      */"	declaration of ctype
/// The facet id for ctype<wchar_t>	declaration of id
// Pre-computed elements for do_is.	definition of _M_bit
// Pre-computed narrowed and widened chars.	definition of _M_narrow_ok
/// Typedef for the template parameter wchar_t.	declaration of char_type
"/**
   *  @brief  The ctype<wchar_t> specialization.
   *  @ingroup locales
   *
   *  This class defines classification and conversion functions for the
   *  wchar_t type.  It gets used by wchar_t streams for many I/O operations.
   *  The wchar_t specialization provides a number of optimizations as well.
   *
   *  ctype<wchar_t> inherits its public methods from
   *  __ctype_abstract_base<wchar_t>.
  */"	definition of ctype<wchar_t>
"/**
       *  @brief  Narrow char array to char array
       *
       *  This virtual function converts each char in the range [lo,hi) to
       *  char using the simplest reasonable transformation and writes the
       *  results to the destination array.  For any char in the input that
       *  cannot be converted, @a dfault is used instead.  For an underived
       *  ctype<char> facet, the argument will be copied unchanged.
       *
       *  do_narrow() is a hook for a derived facet to change the behavior of
       *  narrowing.  do_narrow() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __dfault  Char to use if conversion fails.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	definition of do_narrow
"/**
       *  @brief  Narrow char
       *
       *  This virtual function converts the char to char using the simplest
       *  reasonable transformation.  If the conversion fails, dfault is
       *  returned instead.  For an underived ctype<char> facet, @a c will be
       *  returned unchanged.
       *
       *  do_narrow() is a hook for a derived facet to change the behavior of
       *  narrowing.  do_narrow() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The char to convert.
       *  @param __dfault  Char to return if conversion fails.
       *  @return  The converted char.
      */"	definition of do_narrow
"/**
       *  @brief  Widen char array
       *
       *  This function converts each char in the range [lo,hi) to char using
       *  the simplest reasonable transformation.  For an underived
       *  ctype<char> facet, the argument will be copied unchanged.
       *
       *  do_widen() is a hook for a derived facet to change the behavior of
       *  widening.  do_widen() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	definition of do_widen
"/**
       *  @brief  Widen char
       *
       *  This virtual function converts the char to char using the simplest
       *  reasonable transformation.  For an underived ctype<char> facet, the
       *  argument will be returned unchanged.
       *
       *  do_widen() is a hook for a derived facet to change the behavior of
       *  widening.  do_widen() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The char to convert.
       *  @return  The converted character.
      */"	definition of do_widen
"/**
       *  @brief  Convert array to lowercase.
       *
       *  This virtual function converts each char in the range [lo,hi) to
       *  lowercase if possible.  Other chars remain untouched.
       *
       *  do_tolower() is a hook for a derived facet to change the behavior of
       *  lowercasing.  do_tolower() must always return the same result for
       *  the same input.
       *
       *  @param __lo  Pointer to first char in range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	declaration of do_tolower
"/**
       *  @brief  Convert to lowercase.
       *
       *  This virtual function converts the char argument to lowercase if
       *  possible.  If not possible (for example, '2'), returns the argument.
       *
       *  do_tolower() is a hook for a derived facet to change the behavior of
       *  lowercasing.  do_tolower() must always return the same result for
       *  the same input.
       *
       *  @param __c  The char to convert.
       *  @return  The lowercase char if convertible, else @a __c.
      */"	declaration of do_tolower
"/**
       *  @brief  Convert array to uppercase.
       *
       *  This virtual function converts each char in the range [lo,hi) to
       *  uppercase if possible.  Other chars remain untouched.
       *
       *  do_toupper() is a hook for a derived facet to change the behavior of
       *  uppercasing.  do_toupper() must always return the same result for
       *  the same input.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	declaration of do_toupper
"/**
       *  @brief  Convert to uppercase.
       *
       *  This virtual function converts the char argument to uppercase if
       *  possible.  If not possible (for example, '2'), returns the argument.
       *
       *  do_toupper() is a hook for a derived facet to change the behavior of
       *  uppercasing.  do_toupper() must always return the same result for
       *  the same input.
       *
       *  @param __c  The char to convert.
       *  @return  The uppercase char if convertible, else @a __c.
      */"	declaration of do_toupper
"/**
       *  @brief  Destructor.
       *
       *  This function deletes table() if @a del was true in the
       *  constructor.
      */"	declaration of ~ctype
/// Returns a pointer to the C locale mask table.	declaration of classic_table
/// the default from classic_table() if none was provided.	definition of table
"/**
       *  @brief  Narrow char array
       *
       *  This function converts each char in the input to char using the
       *  simplest reasonable transformation and writes the results to the
       *  destination array.  For any char in the input that cannot be
       *  converted, @a dfault is used instead.  For an underived ctype<char>
       *  facet, the argument will be copied unchanged.
       *
       *  This function works as if it returns ctype<char>::do_narrow(lo, hi,
       *  dfault, to).  do_narrow() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __dfault  Char to use if conversion fails.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	definition of narrow
"/**
       *  @brief  Narrow char
       *
       *  This function converts the char to char using the simplest
       *  reasonable transformation.  If the conversion fails, dfault is
       *  returned instead.  For an underived ctype<char> facet, @a c
       *  will be returned unchanged.
       *
       *  This function works as if it returns ctype<char>::do_narrow(c).
       *  do_narrow() must always return the same result for the same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The char to convert.
       *  @param __dfault  Char to return if conversion fails.
       *  @return  The converted character.
      */"	definition of narrow
"/**
       *  @brief  Widen char array
       *
       *  This function converts each char in the input to char using the
       *  simplest reasonable transformation.  For an underived ctype<char>
       *  facet, the argument will be copied unchanged.
       *
       *  This function works as if it returns ctype<char>::do_widen(c).
       *  do_widen() must always return the same result for the same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to first char in range.
       *  @param __hi  Pointer to end of range.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	definition of widen
"/**
       *  @brief  Widen char
       *
       *  This function converts the char to char_type using the simplest
       *  reasonable transformation.  For an underived ctype<char> facet, the
       *  argument will be returned unchanged.
       *
       *  This function works as if it returns ctype<char>::do_widen(c).
       *  do_widen() must always return the same result for the same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The char to convert.
       *  @return  The converted character.
      */"	definition of widen
"/**
       *  @brief  Convert array to lowercase.
       *
       *  This function converts each char in the range [lo,hi) to lowercase
       *  if possible.  Other chars remain untouched.
       *
       *  tolower() acts as if it returns ctype<char>:: do_tolower(__lo, __hi).
       *  do_tolower() must always return the same result for the same input.
       *
       *  @param __lo  Pointer to first char in range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	definition of tolower
"/**
       *  @brief  Convert to lowercase.
       *
       *  This function converts the char argument to lowercase if possible.
       *  If not possible (for example, '2'), returns the argument.
       *
       *  tolower() acts as if it returns ctype<char>::do_tolower(__c).
       *  do_tolower() must always return the same result for the same input.
       *
       *  @param __c  The char to convert.
       *  @return  The lowercase char if convertible, else @a __c.
      */"	definition of tolower
"/**
       *  @brief  Convert array to uppercase.
       *
       *  This function converts each char in the range [__lo,__hi) to uppercase
       *  if possible.  Other chars remain untouched.
       *
       *  toupper() acts as if it returns ctype<char>:: do_toupper(__lo, __hi).
       *  do_toupper() must always return the same result for the same input.
       *
       *  @param __lo  Pointer to first char in range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	definition of toupper
"/**
       *  @brief  Convert to uppercase.
       *
       *  This function converts the char argument to uppercase if possible.
       *  If not possible (for example, '2'), returns the argument.
       *
       *  toupper() acts as if it returns ctype<char>::do_toupper(c).
       *  do_toupper() must always return the same result for the same input.
       *
       *  @param __c  The char to convert.
       *  @return  The uppercase char if convertible, else @a __c.
      */"	definition of toupper
"/**
       *  @brief  Find char not matching a mask
       *
       *  This function searches for and returns a pointer to the first char
       *  in [__lo,__hi) for which is(m,char) is false.
       *
       *  @param __m  The mask to compare against.
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  Pointer to a non-matching char if found, else @a __hi.
      */"	declaration of scan_not
"/**
       *  @brief  Find char matching a mask
       *
       *  This function searches for and returns the first char in [lo,hi) for
       *  which is(m,char) is true.
       *
       *  @param __m  The mask to compare against.
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  Pointer to a matching char if found, else @a __hi.
      */"	declaration of scan_is
"/**
       *  @brief  Return a mask array.
       *
       *  This function finds the mask for each char in the range [lo, hi) and
       *  successively writes it to vec.  vec must have as many elements as
       *  the char array.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __vec  Pointer to an array of mask storage.
       *  @return  @a __hi.
      */"	declaration of is
"/**
       *  @brief  Test char classification.
       *
       *  This function compares the mask table[c] to @a __m.
       *
       *  @param __c  The char to compare the mask of.
       *  @param __m  The mask to compare against.
       *  @return  True if __m & table[__c] is true, false otherwise.
      */"	declaration of is
"/**
       *  @brief  Constructor performs static initialization.
       *
       *  This constructor is used to construct the initial C locale facet.
       *
       *  @param __cloc  Handle to C locale data.
       *  @param __table If non-zero, table is used as the per-char mask.
       *  @param __del   If true, passes ownership of table to this facet.
       *  @param __refs  Passed to the base facet class.
      */"	declaration of ctype
"/**
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param __table If non-zero, table is used as the per-char mask.
       *               Else classic_table() is used.
       *  @param __del   If true, passes ownership of table to this facet.
       *  @param __refs  Passed to the base facet class.
      */"	declaration of ctype
/// The size of the mask table.  It is SCHAR_MAX + 1.	definition of table_size
/// The facet id for ctype<char>	declaration of id
// 0 uninitialized, 1 init,	definition of _M_narrow_ok
// Data Members:	definition of _M_c_locale_ctype
/// Typedef for the template parameter char.	declaration of char_type
"/**
   *  @brief  The ctype<char> specialization.
   *  @ingroup locales
   *
   *  This class defines classification and conversion functions for
   *  the char type.  It gets used by char streams for many I/O
   *  operations.  The char specialization provides a number of
   *  optimizations as well.
  */"	definition of ctype<char>
/// The facet id for ctype<char_type>	declaration of id
// Types:	declaration of char_type
"/**
   *  @brief  Primary class template ctype facet.
   *  @ingroup locales
   *
   *  This template class defines classification and conversion functions for
   *  character sets.  It wraps cctype functionality.  Ctype gets used by
   *  streams for many I/O operations.
   *
   *  This template provides the protected virtual functions the developer
   *  will have to replace in a derived class or specialization to make a
   *  working facet.  The public functions that access them are defined in
   *  __ctype_abstract_base, to allow for implementation flexibility.  See
   *  ctype<wchar_t> for an example.  The functions are documented in
   *  __ctype_abstract_base.
   *
   *  Note: implementations are provided for all the protected virtual
   *  functions, but will likely not be useful.
  */"	definition of ctype<_CharT>
"/**
       *  @brief  Narrow char_type array to char
       *
       *  This virtual function converts each char_type in the range
       *  [__lo,__hi) to char using the simplest reasonable
       *  transformation and writes the results to the destination
       *  array.  For any element in the input that cannot be
       *  converted, @a __dfault is used instead.
       *
       *  do_narrow() is a hook for a derived facet to change the behavior of
       *  narrowing.  do_narrow() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __dfault  Char to use if conversion fails.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	declaration of do_narrow
"/**
       *  @brief  Narrow char_type to char
       *
       *  This virtual function converts the argument to char using the
       *  simplest reasonable transformation.  If the conversion fails, dfault
       *  is returned instead.
       *
       *  do_narrow() is a hook for a derived facet to change the behavior of
       *  narrowing.  do_narrow() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The char_type to convert.
       *  @param __dfault  Char to return if conversion fails.
       *  @return  The converted char.
      */"	declaration of do_narrow
"/**
       *  @brief  Widen char array
       *
       *  This function converts each char in the input to char_type using the
       *  simplest reasonable transformation.
       *
       *  do_widen() is a hook for a derived facet to change the behavior of
       *  widening.  do_widen() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to start range.
       *  @param __hi  Pointer to end of range.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	declaration of do_widen
"/**
       *  @brief  Widen char
       *
       *  This virtual function converts the char to char_type using the
       *  simplest reasonable transformation.
       *
       *  do_widen() is a hook for a derived facet to change the behavior of
       *  widening.  do_widen() must always return the same result for the
       *  same input.
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The char to convert.
       *  @return  The converted char_type
      */"	declaration of do_widen
"/**
       *  @brief  Convert array to lowercase.
       *
       *  This virtual function converts each char_type in the range [__lo,__hi)
       *  to lowercase if possible.  Other elements remain untouched.
       *
       *  do_tolower() is a hook for a derived facet to change the behavior of
       *  lowercasing.  do_tolower() must always return the same result for
       *  the same input.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	declaration of do_tolower
"/**
       *  @brief  Convert to lowercase.
       *
       *  This virtual function converts the argument to lowercase if
       *  possible.  If not possible (for example, '2'), returns the argument.
       *
       *  do_tolower() is a hook for a derived facet to change the behavior of
       *  lowercasing.  do_tolower() must always return the same result for
       *  the same input.
       *
       *  @param __c  The char_type to convert.
       *  @return  The lowercase char_type if convertible, else @a __c.
      */"	declaration of do_tolower
"/**
       *  @brief  Convert array to uppercase.
       *
       *  This virtual function converts each char_type in the range [__lo,__hi)
       *  to uppercase if possible.  Other elements remain untouched.
       *
       *  do_toupper() is a hook for a derived facet to change the behavior of
       *  uppercasing.  do_toupper() must always return the same result for
       *  the same input.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	declaration of do_toupper
"/**
       *  @brief  Convert to uppercase.
       *
       *  This virtual function converts the char_type argument to uppercase
       *  if possible.  If not possible (for example, '2'), returns the
       *  argument.
       *
       *  do_toupper() is a hook for a derived facet to change the behavior of
       *  uppercasing.  do_toupper() must always return the same result for
       *  the same input.
       *
       *  @param __c  The char_type to convert.
       *  @return  The uppercase char_type if convertible, else @a __c.
      */"	declaration of do_toupper
"/**
       *  @brief  Find char_type not matching mask
       *
       *  This function searches for and returns a pointer to the first
       *  char_type c of [lo,hi) for which is(m,c) is false.
       *
       *  do_scan_is() is a hook for a derived facet to change the behavior of
       *  match searching.  do_is() must always return the same result for the
       *  same input.
       *
       *  @param __m  The mask to compare against.
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  Pointer to a non-matching char_type if found, else @a __hi.
      */"	declaration of do_scan_not
"/**
       *  @brief  Find char_type matching mask
       *
       *  This function searches for and returns the first char_type c in
       *  [__lo,__hi) for which is(__m,c) is true.
       *
       *  do_scan_is() is a hook for a derived facet to change the behavior of
       *  match searching.  do_is() must always return the same result for the
       *  same input.
       *
       *  @param __m  The mask to compare against.
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  Pointer to a matching char_type if found, else @a __hi.
      */"	declaration of do_scan_is
"/**
       *  @brief  Return a mask array.
       *
       *  This function finds the mask for each char_type in the range [lo,hi)
       *  and successively writes it to vec.  vec must have as many elements
       *  as the input.
       *
       *  do_is() is a hook for a derived facet to change the behavior of
       *  classifying.  do_is() must always return the same result for the
       *  same input.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __vec  Pointer to an array of mask storage.
       *  @return  @a __hi.
      */"	declaration of do_is
"/**
       *  @brief  Test char_type classification.
       *
       *  This function finds a mask M for @a c and compares it to mask @a m.
       *
       *  do_is() is a hook for a derived facet to change the behavior of
       *  classifying.  do_is() must always return the same result for the
       *  same input.
       *
       *  @param __c  The char_type to find the mask of.
       *  @param __m  The mask to compare against.
       *  @return  (M & __m) != 0.
      */"	declaration of do_is
"/**
       *  @brief  Narrow array to char array
       *
       *  This function converts each char_type in the input to char using the
       *  simplest reasonable transformation and writes the results to the
       *  destination array.  For any char_type in the input that cannot be
       *  converted, @a dfault is used instead.  It does so by returning
       *  ctype<char_type>::do_narrow(__lo, __hi, __dfault, __to).
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __dfault  Char to use if conversion fails.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	declaration of narrow
"/**
       *  @brief  Narrow char_type to char
       *
       *  This function converts the char_type to char using the simplest
       *  reasonable transformation.  If the conversion fails, dfault is
       *  returned instead.  It does so by returning
       *  ctype<char_type>::do_narrow(__c).
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The char_type to convert.
       *  @param __dfault  Char to return if conversion fails.
       *  @return  The converted char.
      */"	declaration of narrow
"/**
       *  @brief  Widen array to char_type
       *
       *  This function converts each char in the input to char_type using the
       *  simplest reasonable transformation.  It does so by returning
       *  ctype<char_type>::do_widen(c).
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __to  Pointer to the destination array.
       *  @return  @a __hi.
      */"	declaration of widen
"/**
       *  @brief  Widen char to char_type
       *
       *  This function converts the char argument to char_type using the
       *  simplest reasonable transformation.  It does so by returning
       *  ctype<char_type>::do_widen(c).
       *
       *  Note: this is not what you want for codepage conversions.  See
       *  codecvt for that.
       *
       *  @param __c  The char to convert.
       *  @return  The converted char_type.
      */"	declaration of widen
"/**
       *  @brief  Convert array to lowercase.
       *
       *  This function converts each char_type in the range [__lo,__hi) to
       *  lowercase if possible.  Other elements remain untouched.  It does so
       *  by returning ctype<char_type>:: do_tolower(__lo, __hi).
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	declaration of tolower
"/**
       *  @brief  Convert to lowercase.
       *
       *  This function converts the argument to lowercase if possible.  If
       *  not possible (for example, '2'), returns the argument.  It does so
       *  by returning ctype<char_type>::do_tolower(c).
       *
       *  @param __c  The char_type to convert.
       *  @return  The lowercase char_type if convertible, else @a __c.
      */"	declaration of tolower
"/**
       *  @brief  Convert array to uppercase.
       *
       *  This function converts each char_type in the range [lo,hi) to
       *  uppercase if possible.  Other elements remain untouched.  It does so
       *  by returning ctype<char_type>:: do_toupper(lo, hi).
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  @a __hi.
      */"	declaration of toupper
"/**
       *  @brief  Convert to uppercase.
       *
       *  This function converts the argument to uppercase if possible.
       *  If not possible (for example, '2'), returns the argument.  It does
       *  so by returning ctype<char_type>::do_toupper().
       *
       *  @param __c  The char_type to convert.
       *  @return  The uppercase char_type if convertible, else @a __c.
      */"	declaration of toupper
"/**
       *  @brief  Convert to uppercase.
       *
       *  This function converts the argument to uppercase if possible.
       *  If not possible (for example, '2'), returns the argument.  It does
       *  so by returning ctype<char_type>::do_toupper().
       *
       *  @param __c  The char_type to convert.
       *  @return  The uppercase char_type if convertible, else @a __c.
      */"	declaration of toupper
"/**
       *  @brief  Convert to uppercase.
       *
       *  This function converts the argument to uppercase if possible.
       *  If not possible (for example, '2'), returns the argument.  It does
       *  so by returning ctype<char_type>::do_toupper().
       *
       *  @param __c  The char_type to convert.
       *  @return  The uppercase char_type if convertible, else @a __c.
      */"	definition of toupper
"/**
       *  @brief  Find char_type not matching a mask
       *
       *  This function searches for and returns the first char_type c in
       *  [lo,hi) for which is(m,c) is false.  It does so by returning
       *  ctype<char_type>::do_scan_not().
       *
       *  @param __m  The mask to compare against.
       *  @param __lo  Pointer to first char in range.
       *  @param __hi  Pointer to end of range.
       *  @return  Pointer to non-matching char if found, else @a __hi.
      */"	declaration of scan_not
"/**
       *  @brief  Find char_type matching a mask
       *
       *  This function searches for and returns the first char_type c in
       *  [lo,hi) for which is(m,c) is true.  It does so by returning
       *  ctype<char_type>::do_scan_is().
       *
       *  @param __m  The mask to compare against.
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @return  Pointer to matching char_type if found, else @a __hi.
      */"	declaration of scan_is
"/**
       *  @brief  Return a mask array.
       *
       *  This function finds the mask for each char_type in the range [lo,hi)
       *  and successively writes it to vec.  vec must have as many elements
       *  as the char array.  It does so by returning the value of
       *  ctype<char_type>::do_is().
       *
       *  @param __lo  Pointer to start of range.
       *  @param __hi  Pointer to end of range.
       *  @param __vec  Pointer to an array of mask storage.
       *  @return  @a __hi.
      */"	declaration of is
"/**
       *  @brief  Test char_type classification.
       *
       *  This function finds a mask M for @a __c and compares it to
       *  mask @a __m.  It does so by returning the value of
       *  ctype<char_type>::do_is().
       *
       *  @param __c  The char_type to compare the mask of.
       *  @param __m  The mask to compare against.
       *  @return  (M & __m) != 0.
      */"	declaration of is
/// Typedef for the template parameter	declaration of char_type
"/**
   *  @brief  Common base for ctype facet
   *
   *  This template class provides implementations of the public functions
   *  that forward to the protected virtual functions.
   *
   *  This template also provides abstract stubs for the protected virtual
   *  functions.
  */"	definition of __ctype_abstract_base<_CharT>
// This is the unspecialized form of the template.	definition of __write
// significantly more efficient than incrementing iterators.	definition of __write
// partially-specialized.	definition of __pad<_CharT, _Traits>
// Explicit specializations for required types.	declaration of __convert_to_v
// NB: Don't instantiate required wchar_t facets if no wchar_t support.	#ifdef _GLIBCXX_USE_WCHAR_T
//	#ifndef _LOCALE_FACETS_H
// namespace std	#endif
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// ctype<char_type> facet.	definition of _M_cache_locale
// Locales:	definition of imbue
"/** @file bits/basic_ios.tcc
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{ios}
 */"	#ifndef _BASIC_IOS_TCC
/* _BASIC_IOS_H */	#endif
"/**
       *  @brief  All setup is performed here.
       *
       *  This is called from the public constructor.  It is not virtual and
       *  cannot be redefined.
      */"	#if __cplusplus >= 201103L
"/**
       *  @brief  The quick-and-easy status check.
       *
       *  This allows you to write constructs such as
       *  <code>if (!a_stream) ...</code> and <code>while (a_stream) ...</code>
      */"	#if __cplusplus >= 201103L
"/**
   *  @brief Template class basic_ios, virtual base class for all
   *  stream classes. 
   *  @ingroup io
   *
   *  @tparam _CharT  Type of character stream.
   *  @tparam _Traits  Traits for character type, defaults to
   *                   char_traits<_CharT>.
   *
   *  Most of the member functions called dispatched on stream objects
   *  (e.g., @c std::cout.foo(bar);) are consolidated in this class.
  */"	definition of basic_ios<_CharT, _Traits>
"/** @file bits/basic_ios.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{ios}
 */"	#ifndef _BASIC_IOS_H
/* _GLIBCXX_IOS */	#endif
//	#ifndef _GLIBCXX_IOS
// namespace std	#endif
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// 129. Need error indication from seekp() and seekg()	definition of operator<<
// 129. Need error indication from seekp() and seekg()	definition of seekp
// basic_ostream::flush() is *not* an unformatted output function.	definition of tellp
// from streambuf members.	definition of flush
// from streambuf members.	definition of write
// 117. basic_ostream uses nonexistent num_put member functions.	definition of operator<<
// 117. basic_ostream uses nonexistent num_put member functions.	definition of operator<<
// XXX MT	definition of _M_insert
//	#ifndef _OSTREAM_TCC
/* _GLIBCXX_OSTREAM */	#endif
// C++11	#endif
"/**
   *  @brief  Generic inserter for rvalue stream
   *  @param  __os  An input stream.
   *  @param  __x  A reference to the object being inserted.
   *  @return  os
   *
   *  This is just a forwarding function to allow insertion to
   *  rvalue streams since they won't bind to the inserter functions
   *  that take an lvalue reference.
  */"	definition of operator<<
"/**
   *  @brief  Flushes the output stream.
   *
   *  This manipulator simply calls the stream's @c flush() member function.
  */"	definition of flush
"/**
   *  @brief  Write a null character into the output sequence.
   *
   *  <em>Null character</em> is @c CharT() by definition.  For CharT
   *  of @c char, this correctly writes the ASCII @c NUL character
   *  string terminator.
  */"	definition of ends
"/**
   *  @brief  Write a newline and flush the stream.
   *
   *  This manipulator is often mistakenly used when a simple newline is
   *  desired, leading to poor buffering performance.  See
   *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
   *  for more on this subject.
  */"	definition of endl
// Signed and unsigned	definition of operator<<
// Partial specializations	definition of operator<<
"/**
   *  @brief  String inserters
   *  @param  __out  An output stream.
   *  @param  __s  A character string.
   *  @return  out
   *  @pre  @p __s must be a non-NULL pointer
   *
   *  Behaves like one of the formatted arithmetic inserters described in
   *  std::basic_ostream.  After constructing a sentry object with good
   *  status, this function inserts @c traits::length(__s) characters starting
   *  at @p __s, widened if necessary, followed by any required padding (as
   *  determined by [22.2.2.2.2]).  @c __out.width(0) is then called.
  */"	definition of operator<<
// Signed and unsigned	definition of operator<<
// Specialization	definition of operator<<
"/**
   *  @brief  Character inserters
   *  @param  __out  An output stream.
   *  @param  __c  A character.
   *  @return  out
   *
   *  Behaves like one of the formatted arithmetic inserters described in
   *  std::basic_ostream.  After constructing a sentry object with good
   *  status, this function inserts a single character and any required
   *  padding (as determined by [22.2.2.2.2]).  @c __out.width(0) is then
   *  called.
   *
   *  If @p __c is of type @c char and the character type of the stream is not
   *  @c char, the character is widened before insertion.
  */"	definition of operator<<
"/**
       *  @brief  Quick status checking.
       *  @return  The sentry state.
       *
       *  For ease of use, sentries may be converted to booleans.  The
       *  return value is that of the sentry state (true == okay).
      */"	#if __cplusplus >= 201103L
// Can't call flush directly or else will get into recursive lock.	#pragma GCC diagnostic pop
"/**
       *  @brief  The constructor performs preparatory work.
       *  @param  __os  The output stream to guard.
       *
       *  If the stream state is good (@a __os.good() is true), then if the
       *  stream is tied to another output stream, @c is.tie()->flush()
       *  is called to synchronize the output sequences.
       *
       *  If the stream state is still good, then the sentry state becomes
       *  true (@a okay).
      */"	#pragma GCC diagnostic push
"/**
   *  @brief  Performs setup work for output streams.
   *
   *  Objects of this class are created before all of the standard
   *  inserters are run.  It is responsible for <em>exception-safe prefix and
   *  suffix operations</em>.
  */"	definition of sentry
// 27.7.3.3 Assign/swap	#endif
"/**
       *  @brief  Changing the current write position.
       *  @param  __off  A file offset object.
       *  @param  __dir  The direction in which to seek.
       *  @return  *this
       *
       *  If @c fail() is not true, calls @c rdbuf()->pubseekoff(off,dir).
       *  If that function fails, sets failbit.
      */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Pointer arithmetic inserters
       *  @param  __p A variable of pointer type.
       *  @return  @c *this if successful
       *
       *  These functions use the stream's current locale (specifically, the
       *  @c num_get facet) to perform numeric formatting.
      */"	#if __cplusplus >= 201703L
// 117. basic_ostream uses nonexistent num_put member functions.	#ifdef _GLIBCXX_USE_LONG_LONG
"/**
   *  @brief  Template class basic_ostream.
   *  @ingroup io
   *
   *  @tparam _CharT  Type of character stream.
   *  @tparam _Traits  Traits for character type, defaults to
   *                   char_traits<_CharT>.
   *
   *  This is the base class for all output streams.  It provides text
   *  formatting of all builtin types, and communicates with any class
   *  derived from basic_streambuf to do the actual output.
  */"	definition of basic_ostream<_CharT, _Traits>
//	#ifndef _GLIBCXX_OSTREAM
// namespace std	#endif
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// 27.6.1.4 Standard basic_istream manipulators	definition of ws
// 27.6.1.2.3 Character extraction templates	definition of operator>>
// 129.  Need error indication from seekp() and seekg()	definition of seekg
// DR60.  Do not change _M_gcount.	definition of seekg
// DR60.  Do not change _M_gcount.	definition of tellg
// Clear eofbit per N3168.	definition of sync
// Clear eofbit per N3168.	definition of unget
// Cannot compare int_type with streamsize generically.	definition of putback
// See comment above.	definition of peek
// really correct, being unavoidably too small.	definition of ignore
"// same ""batchy"" strategy used by getline above."	definition of ignore
// 243. get and getline when sentry reports failure.	definition of get
// 27.6.1.1 paragraph 3	definition of get
// 27.6.1.1 paragraph 3	definition of get
// 696. istream::operator>>(int&) broken.	definition of operator>>
// 696. istream::operator>>(int&) broken.	definition of operator>>
// set eofbit?	definition of _M_extract
//	#ifndef _ISTREAM_TCC
/* _GLIBCXX_ISTREAM */	#endif
// C++11	#endif
"/**
   *  @brief  Generic extractor for rvalue stream
   *  @param  __is  An input stream.
   *  @param  __x  A reference to the extraction target.
   *  @return  is
   *
   *  This is just a forwarding function to allow extraction from
   *  rvalue streams since they won't bind to the extractor functions
   *  that take an lvalue reference.
  */"	definition of operator>>
// 27.7.3.3 Assign/swap	#endif
"/**
       *  @brief  Destructor does nothing.
      */"	#if __cplusplus >= 201103L
"/**
   *  @brief  Template class basic_iostream
   *  @ingroup io
   *
   *  @tparam _CharT  Type of character stream.
   *  @tparam _Traits  Traits for character type, defaults to
   *                   char_traits<_CharT>.
   *
   *  This class multiply inherits from the input and output stream classes
   *  simply to provide a single interface.
  */"	definition of basic_iostream<_CharT, _Traits>
// Explicit specialization declaration, defined in src/istream.cc.	declaration of operator>>
"/**
       *  @brief  Quick status checking.
       *  @return  The sentry state.
       *
       *  For ease of use, sentries may be converted to booleans.  The
       *  return value is that of the sentry state (true == okay).
      */"	#if __cplusplus >= 201103L
"/**
   *  @brief  Performs setup work for input streams.
   *
   *  Objects of this class are created before all of the standard
   *  extractors are run.  It is responsible for <em>exception-safe
   *  prefix and suffix operations,</em> although only prefix actions
   *  are currently required by the standard.
  */"	definition of sentry
/// Explicit specialization declarations, defined in src/istream.cc.	declaration of getline
// 27.7.3.3 Assign/swap	#endif
//@}	#if __cplusplus >= 201103L
"/**
       *  @brief  Integer arithmetic extractors
       *  @param  __n A variable of builtin integral type.
       *  @return  @c *this if successful
       *
       *  These functions use the stream's current locale (specifically, the
       *  @c num_get facet) to parse the input data.
      */"	#ifdef _GLIBCXX_USE_LONG_LONG
"/**
   *  @brief  Template class basic_istream.
   *  @ingroup io
   *
   *  @tparam _CharT  Type of character stream.
   *  @tparam _Traits  Traits for character type, defaults to
   *                   char_traits<_CharT>.
   *
   *  This is the base class for all input streams.  It provides text
   *  formatting of all builtin types, and communicates with any class
   *  derived from basic_streambuf to do the actual input.
  */"	definition of basic_istream<_CharT, _Traits>
"/** @file include/istream
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_ISTREAM
// namespace	#endif
/// constructed with delimiter string, writes delimiter to ostream.	declaration of operator=
/// Copy constructor.	#if __cplusplus >= 201103L
"/**
   *  @brief  Provides output iterator semantics for streams.
   *
   *  This class provides an iterator to write to an ostream.  The type Tp is
   *  the only type written by this iterator and there must be an
   *  operator<<(Tp) defined.
   *
   *  @tparam  _Tp  The type to write to the ostream.
   *  @tparam  _CharT  The ostream char_type.
   *  @tparam  _Traits  The ostream char_traits.
  */"	definition of ostream_iterator<_Tp, _CharT, _Traits>
///  Return false if x and y are both end or not end, or x and y are the same.	definition of operator!=
///  Return true if x and y are both end or not end, or x and y are the same.	definition of operator==
///  Construct start of input stream iterator.	#if __cplusplus >= 201103L
/// Provides input iterator semantics for streams.	definition of istream_iterator<_Tp, _CharT, _Traits, _Dist>
"/** @file bits/stream_iterator.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iterator}
 */"	#ifndef _STREAM_ITERATOR_H
/* _GLIBCXX_ITERATOR */	#endif
// PR libstdc++/70303	#if __cplusplus >= 201402L && ! defined _GLIBCXX_DEBUG
"/** @file include/iterator
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_ITERATOR
///   for (auto v : enum_iter_t<MyEnum>) {...}	definition of enum_iter_t<T>
/// An array of Elem indexed by an enum class.	definition of enum_array_t<Elem, T>
/// boolean conversion. This simply makes flags work more naturally as bit masks.	declaration of operator&
/// boolean conversion. This simply makes flags work more naturally as bit masks.	definition of operator&
/// Set this to the union of two sets.	declaration of operator|=
/// Set this to the union of two sets.	definition of operator|=
/// OR in a single flag, modifying the set in place.	declaration of operator|=
/// OR in a single flag, modifying the set in place.	definition of operator|=
/// Compute the union of two sets.	declaration of operator|
/// Compute the union of two sets.	definition of operator|
/// OR in a single flag, returning a new set.	declaration of operator|
/// OR in a single flag, returning a new set.	definition of operator|
/*implicit*/	declaration of enum_set_t
/*implicit*/	definition of enum_set_t
/*implicit*/	declaration of enum_set_t
/*implicit*/	definition of enum_set_t
/// A bit set indexed by an enum type.	definition of enum_set_t<T>
/// \return the count of an enum.	definition of enum_count
///   { static constexpr auto count = MyEnum::COUNT; };	definition of enum_info_t<T>
/// \return the set of topics that changed, updating the generation list \p gens.	declaration of check
/// Access the generation for a topic.	definition of generation_for_topic
/// Access the current generations.	definition of current_generations
/// Post to a topic, potentially from a signal handler.	declaration of post
/// The principal topic_monitor. This may be fetched from a signal handler.	declaration of principal
/// topic_monitors should not be copied, and there should be no reason to move one.	definition of operator=
/// \return the current generation list, opportunistically applying any pending updates.	declaration of updated_gens
/// \return the new gens.	declaration of await_gens
/// and try again.	declaration of try_update_gens_maybe_becoming_reader
/// \return the updated generation list.	declaration of updated_gens_in_data
/// reader at a given time.	definition of pipes_
/// This is managed via atomics.	definition of pending_updates_
/// This is associated with data_'s mutex.	definition of data_notifier_
/// Whether there is a thread currently reading from the notifier pipe.	definition of has_reader
/// The current generation list.	definition of current_gens
// Some stuff that needs to be protected by the same lock.	definition of data_t
/// optionally blocking until they increase.	definition of topic_monitor_t
/// The initial value of a generation is always 0.	declaration of generation_list_t
/// A generation value which is guaranteed to never be set and be larger than any valid generation.	definition of invalid_generation
/// It is 64 bit so it will never wrap.	declaration of generation_t
/// Counting iterator for topics.	declaration of topic_iter_t
/// Counting iterator for topics.	declaration of topic_iter_t
/// Set of topics.	declaration of topic_set_t
/// Set of topics.	declaration of topic_set_t
/// Allow enum_iter to be used.	definition of enum_info_t<topic_t>
// Corresponds to an internal process exit.	internal_exit
// Corresponds to both SIGHUP and SIGINT signals.	sighupint
// Corresponds to SIGCHLD signal.	sigchld
/// The list of topics that may be observed.	definition of topic_t
/// Used to avoid zombie processes after disown.	declaration of add_disowned_pgid
/// \return 1 if transferred, 0 if no transfer was necessary, -1 on error.	declaration of terminal_maybe_give_to_job_group
/// Send SIGHUP to the list \p jobs, excepting those which are in fish's pgroup.	declaration of hup_jobs
// know whether it's run during initialization or not.	declaration of is_within_fish_initialization
// know whether it's run during initialization or not.	declaration of set_is_within_fish_initialization
/// Wait for any process finishing, or receipt of a signal.	declaration of proc_wait_any
/// Initializations.	declaration of proc_init
/// Create a process/job exit event notification.	declaration of proc_create_event
/// job is in the foreground, that every process is in a valid state, etc.	declaration of proc_sanity_check
/// process of every job.	declaration of proc_update_jiffies
/// function is only available on systems with the procfs file entry 'stat', i.e. Linux.	declaration of proc_get_jiffies
/// Mark a process as failed to execute (and therefore completed).	declaration of job_mark_process_as_failed
/// jobs_requiring_warning_on_exit().	declaration of print_exit_warning_for_jobs
/// exit. An empty result (common) means no such jobs.	declaration of jobs_requiring_warning_on_exit
/// \return whether text was printed to stdout.	declaration of parser_t
/// \return whether text was printed to stdout.	declaration of parser_t
/// Must be one of job_control_t::all, job_control_t::interactive and job_control_t::none.	declaration of set_job_control_mode
/// Must be one of job_control_t::all, job_control_t::interactive and job_control_t::none.	declaration of get_job_control_mode
// List of jobs.	declaration of job_list_t
// List of jobs.	declaration of job_list_t
// List of jobs.	declaration of job_list_t
/// anything.	declaration of mark_no_exec
/// anything.	declaration of no_exec
/// Whether we are a login shell.	declaration of mark_login
/// Whether we are a login shell.	declaration of get_login
/// Whether this shell is attached to the keyboard at all.	definition of session_interactivity_t
/// \returns the statuses for this job.	declaration of get_statuses
/// \return true on success, false on failure.	declaration of signal
/// job if it is in the foreground.	declaration of continue_job
/// \return whether this job and its parent chain are fully constructed.	declaration of job_chain_is_fully_constructed
/// This implements some historical behavior which has not been justified.	declaration of should_report_process_exits
/// \return whether this job's group is in the foreground.	definition of is_foreground
/// The job is OK to be externally visible, e.g. to the user via `jobs`	definition of is_visible
/// The job is in a stopped state	declaration of is_stopped
/// The job is complete, i.e. all its member processes have been reaped	declaration of is_completed
/// The job has been fully constructed, i.e. all its member processes have been launched	definition of is_constructed
/// External procs include exec and external.	declaration of has_external_proc
/// External procs include exec and external.	declaration of has_internal_proc
/// Mark this job as constructed. The job must not have previously been marked as constructed.	declaration of mark_constructed
/// specified.	definition of is_initially_background
/// \return if we want job control.	definition of wants_job_control
/// Access mutable job flags.	definition of mut_flags
/// Access the job flags.	definition of flags
"// Indicates that we are the ""group root."" Any other jobs using this tree are nested."	definition of is_group_root
/// Whether to print timing for this job.	definition of has_time_prefix
/// This job is disowned, and should be removed from the active jobs list.	definition of disown_requested
/// Whether the exit status should be negated. This flag can only be set by the not builtin.	definition of negate
/// Whether the user has been told about stopped job.	definition of notified
/// forked, etc.	definition of constructed
/// Flags associated with the job.	definition of flags_t
/// A non-user-visible, never-recycled job ID.	definition of internal_job_id
/// This is user-visible, is recycled, and may be -1.	definition of job_id
/// This may also be fish itself.	definition of get_pgid
// This is never null and not changed after construction.	definition of group
/// All the processes in this job.	definition of processes
/// running jobs it is.	definition of preview
/// none returns means don't reap, or perhaps defer reaping.	definition of reap_topic_for_process
// p is the the group leader in an under-construction job.	return ...
// Can't reap without a pid.	return ...
// Internal processes can always be reaped.	if (...) ... 
/// also reap the process group and then we cannot add new processes to the group.	definition of can_reap
/// Returns the command.	definition of command
/// Returns the command as a wchar_t *. */	definition of command_wcstr
// No copying.	definition of job_t
/// messages about job status on the terminal.	definition of command_str
/// Set of immutable job properties.	definition of properties
/// Whether the job is under job control, i.e. has its own pgrp.	definition of job_control
/// Whether this job was created as part of an event handler.	definition of from_event_handler
/// initial state should be.	definition of initial_background
/// special job that should not be reported.	definition of skip_notification
/// job.	definition of properties_t
/// A struct representing a job. A job is a pipeline of one or more processes.	definition of job_t
/// The user-visible, optional, recycled job ID.	declaration of job_id_t
/// Every job has a unique positive value for this.	declaration of internal_job_id_t
/// Number of jiffies spent in process at last cpu time check.	definition of last_jiffies
/// Last time of cpu time check.	definition of last_time
/// Reported status value.	definition of status
/// True if process has stopped.	definition of stopped
/// True if process has completed.	definition of completed
/// File descriptor that pipe output should bind to.	definition of pipe_write_fd
"/// If we are an ""internal process,"" that process."	definition of internal_proc_
/// Process ID	definition of pid
/// Generation counts for reaping.	definition of gens_
/// Actual command to pass to exec in case of process_type_t::external or process_type_t::exec.	definition of actual_cmd
/// \return whether this process type is internal (block, function, or builtin).	declaration of is_internal
/// launch. This helps us avoid spurious waitpid calls.	declaration of check_generations_before_launch
/// Redirection list getter and setter.	definition of redirection_specs
/// Returns argv[0], or NULL.	definition of argv0
/// Returns argv[idx].	definition of argv
/// Returns argv.	definition of get_argv
/// Sets argv.	definition of set_argv
/// The expanded variable assignments for this process, as specified by the `a=b cmd` syntax.	definition of variable_assignments
/// This is always either block, ifs, or switchs, never boolean or decorated.	definition of block_node_source
/// Type of process.	definition of type
/// Note whether we are the first and/or last in the job	definition of is_first_in_job
// No copying.	definition of process_t
/// the name of the shellscript function.	declaration of parser_t
/// the name of the shellscript function.	declaration of parser_t
// If not zero, a signal indicating cancellation.	definition of cancel_signal_
// Whether the root job is constructed. If not, we cannot reap it yet.	definition of root_constructed_
// Whether we are in the foreground, meaning that the user is waiting for this.	definition of is_foreground_
// The original command which produced this job tree.	definition of command_
// The job ID of this group.	definition of job_id
// Whether we are an internal job group.	definition of is_internal
// TODO: this is effectively the same as job control, rationalize this.	definition of wants_terminal
// Whether jobs in this group should have job control.	definition of job_control
// Set of properties, which are constant.	definition of properties_t
// The pgid to assign to jobs, or none if not yet set.	definition of pgid_
/// stops.	definition of tmodes
/// The proposed group is the group from the parent job, or null if this is a root.	declaration of populate_group_for_job
/// want to enter its group.	definition of mark_root_constructed
/// Mark that a process in this group got a signal, and so should cancel.	definition of set_cancel_signal
/// \return the command which produced this job tree.	definition of get_command
/// Get the cancel signal, or 0 if none.	definition of get_cancel_signal
/// \return the job ID, or -1 if none.	definition of get_id
/// This is true for non-internal trees that don't already have a pgid.	definition of needs_pgid_assignment
/// \return if this job group should own the terminal when it runs.	definition of should_claim_terminal
/// Mark whether we are in the foreground.	definition of set_is_foreground
/// \return whether we are currently the foreground group.	definition of is_foreground
/// \return whether this is an internal group.	definition of is_internal
/// \return whether we want job control	definition of wants_job_control
/// Get the pgid, or none() if it has not been set.	declaration of get_pgid
/// An internal job group does not have a pgid and it is an error to set it.	declaration of set_pgid
/// shared between threads, and so must be thread safe.	declaration of job_group_t
/// shared between threads, and so must be thread safe.	declaration of job_t
/// 1 is the first valid job ID.	declaration of job_id_t
///   function	definition of (unnamed enum)
/// Mark this process as exited, with the given status.	declaration of mark_exited
/// \return if this process has exited.	definition of exited
/// If the process has exited, its status code.	definition of status_
/// Whether the process has exited.	definition of exited_
/// This is used for logging purposes only.	definition of internal_proc_id_
/// separate process.	definition of internal_proc_t
/// \return the value appropriate to populate $status.	definition of status_value
/// \return if this status represents success.	definition of is_success
/// \return the exit code, given that we normal exited.	definition of exit_code
/// \return the signal code, given that we signal exited.	definition of signal_code
/// \return if we exited because of a signal.	definition of signal_exited
/// \return if we exited normally (not a signal).	definition of normal_exited
/// \return if we are continued (as in SIGCONT).	definition of continued
/// \return if we are stopped (as in SIGSTOP).	definition of stopped
/* ret */	return ...
/// Construct directly from a signal.	definition of from_signal
/* sig */	return ...
/* sig */	return ...
// Some paranoia.	declaration
// Some paranoia.	declaration
/// Construct directly from an exit code.	definition of from_exit_code
/// Construct from a status returned from a waitpid call.	definition of from_waitpid
/// Encode a return value \p ret and signal \p sig into a status value like waitpid() does.	definition of w_exitcode
/// etc.	definition of proc_status_t
/// The exec builtin.	exec
/// A block of commands, represented as a node.	block_node
/// A shellscript function.	function
/// A builtin command.	builtin
/// A regular external command.	external
/// Types of processes.	definition of process_type_t
// the exec library will call proc to create representations of the running jobs as needed.	#ifndef FISH_PROC_H
/// Add signals that should be masked for external processes in this job.	declaration of blocked_signals_for_job
/// Loops over close until the syscall was run without being interrupted.	declaration of exec_close
/// pgroup.	declaration of exec_subshell_for_expand
/// \return a value appropriate for populating $status.	declaration of exec_subshell
/// \return a value appropriate for populating $status.	declaration of exec_subshell
/// Execute the processes specified by \p j in the parser \p.	declaration of exec_job
/// Pipe redirection error message.	"#define PIPE_ERROR _(L""An error occurred while setting up pipe"")"
// Prototypes for functions for executing a program.	#ifndef FISH_EXEC_H
// Iterator for walking nodes, from least recently used to most.	definition of iterator
// make the list circular	declaration of evict_all_nodes
// order.	definition of stable_sort
// Number of entries	declaration of size
// Number of entries	definition of size
// Tell the node where it is in the map	declaration
// already present - so promote it	ExprStmt
// Try inserting; return false if it was already in the set.	declaration
// added, false if the node was not because a node with that key is already in the set.	definition of insert_no_eviction
// not because a node with that key is already in the set.	definition of insert
// Evicts the node for a given key, returning true if a node was evicted.	definition of evict_node
// Evicts the node for a given key, returning true if a node was evicted.	declaration of evict_node
// not found	return ...
"// This counts as a ""use"" and so promotes the node"	definition of get
// Constructor. Note our linked list is always circular.	definition of lru_cache_t
// This only sets the next pointers, not the prev ones	definition of mergesort
// the list in sorted order	definition of merge
// Clients can implement this	definition of entry_was_evicted
// Evicts the last node	definition of evict_last_node
// Tell ourselves what we did	declaration
// Remove us from the map. This deallocates node!	ExprStmt
// Note we copy the key in case the map needs it to erase the node	declaration
// Remove it from the linked list.	ExprStmt
// We should never evict the mouth.	ExprStmt
// Remove the node	definition of evict_node
// Put us after the mouth	ExprStmt
// First unhook us	ExprStmt
// Take a node and move it to the front of the list	definition of promote_node
"// If ""empty"" the mouth just points at itself."	definition of mouth
// We are dependent on the iterator-noninvalidation guarantees of std::map	definition of node_map
// used from background threads.	definition of max_node_count
// The value from the client	definition of value
// Our key in the map. This is owned by the map itself.	definition of key
// No copying	definition of lru_node_t
// The node type in our LRU cache	definition of lru_node_t
// The base class is used for the mouth only	definition of prev
// allows us to avoid duplicating the key in the node.	definition of lru_cache_t<Derived, Contents>
// Least-recently-used cache implementation.	#ifndef FISH_LRU_H
// namespace std	#endif
// Get rid of those macros defined in <signal.h> in lieu of real functions.	#undef raise
//	#pragma GCC system_header
/* _STL_LIST_H */	#endif
// namespace std	#endif
// Detect when distance is used to compute the size of the whole list.	definition of __distance
/// See std::list::swap().	definition of swap
/// Based on operator<	definition of operator>=
/// Based on operator<	definition of operator<=
/// Based on operator<	definition of operator>
/// Based on operator==	definition of operator!=
"/**
   *  @brief  List ordering relation.
   *  @param  __x  A %list.
   *  @param  __y  A %list of the same type as @a __x.
   *  @return  True iff @a __x is lexicographically less than @a __y.
   *
   *  This is a total ordering relation.  It is linear in the size of the
   *  lists.  The elements must be comparable with @c <.
   *
   *  See std::lexicographical_compare() for how the determination is made.
  */"	definition of operator<
"/**
   *  @brief  List equality comparison.
   *  @param  __x  A %list.
   *  @param  __y  A %list of the same type as @a __x.
   *  @return  True iff the size and elements of the lists are equal.
   *
   *  This is an equivalence relation.  It is linear in the size of
   *  the lists.  Lists are considered equivalent if their sizes are
   *  equal, and if corresponding elements compare equal.
  */"	definition of operator==
// so we need to individually move each element.	#endif
// Used to implement resize.	#if __cplusplus >= 201103L
// Erases element at position given.	#if __cplusplus >= 201103L
// Inserts new element at position given and with value given.	#if __cplusplus < 201103L
// Called by resize(sz).	#endif
// to be the same thing.	#if __cplusplus >= 201103L
// Called by the range constructor to implement [23.1.1]/9	#if __cplusplus >= 201103L
"/**
       *  @brief  Merge sorted lists according to comparison function.
       *  @tparam _StrictWeakOrdering Comparison function defining
       *  sort order.
       *  @param  __x  Sorted list to merge.
       *  @param  __comp  Comparison functor.
       *
       *  Assumes that both @a __x and this list are sorted according to
       *  StrictWeakOrdering.  Merges elements of @a __x into this list
       *  in sorted order, leaving @a __x empty when complete.  Elements
       *  in this list precede elements in @a __x that are equivalent
       *  according to StrictWeakOrdering().
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Merge sorted lists.
       *  @param  __x  Sorted list to merge.
       *
       *  Assumes that both @a __x and this list are sorted according to
       *  operator<().  Merges elements of @a __x into this list in
       *  sorted order, leaving @a __x empty when complete.  Elements in
       *  this list precede elements in @a __x that are equal.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Insert range from another %list.
       *  @param  __position  Const_iterator referencing the element to
       *                      insert before.
       *  @param  __x  Source list.
       *  @param  __first  Const_iterator referencing the start of range in x.
       *  @param  __last  Const_iterator referencing the end of range in x.
       *
       *  Removes elements in the range [__first,__last) and inserts them
       *  before @a __position in constant time.
       *
       *  Undefined if @a __position is in [__first,__last).
       */"	#endif
"/**
       *  @brief  Insert range from another %list.
       *  @param  __position  Iterator referencing the element to insert before.
       *  @param  __x  Source list.
       *  @param  __first  Iterator referencing the start of range in x.
       *  @param  __last  Iterator referencing the end of range in x.
       *
       *  Removes elements in the range [__first,__last) and inserts them
       *  before @a __position in constant time.
       *
       *  Undefined if @a __position is in [__first,__last).
       */"	#endif
"/**
       *  @brief  Insert range from another %list.
       *  @param  __position  Const_iterator referencing the element to
       *                      insert before.
       *  @param  __x  Source list.
       *  @param  __first  Const_iterator referencing the start of range in x.
       *  @param  __last  Const_iterator referencing the end of range in x.
       *
       *  Removes elements in the range [__first,__last) and inserts them
       *  before @a __position in constant time.
       *
       *  Undefined if @a __position is in [__first,__last).
       */"	#else
"/**
       *  @brief  Insert element from another %list.
       *  @param  __position  Const_iterator referencing the element to
       *                      insert before.
       *  @param  __x  Source list.
       *  @param  __i  Const_iterator referencing the element to move.
       *
       *  Removes the element in list @a __x referenced by @a __i and
       *  inserts it into the current list before @a __position.
       */"	#endif
"/**
       *  @brief  Insert element from another %list.
       *  @param  __position  Iterator referencing the element to insert before.
       *  @param  __x  Source list.
       *  @param  __i  Iterator referencing the element to move.
       *
       *  Removes the element in list @a __x referenced by @a __i and
       *  inserts it into the current list before @a __position.
       */"	#endif
"/**
       *  @brief  Insert element from another %list.
       *  @param  __position  Const_iterator referencing the element to
       *                      insert before.
       *  @param  __x  Source list.
       *  @param  __i  Const_iterator referencing the element to move.
       *
       *  Removes the element in list @a __x referenced by @a __i and
       *  inserts it into the current list before @a __position.
       */"	#else
"/**
       *  @brief  Insert contents of another %list.
       *  @param  __position  Iterator referencing the element to insert before.
       *  @param  __x  Source list.
       *
       *  The elements of @a __x are inserted in constant time in front of
       *  the element referenced by @a __position.  @a __x becomes an empty
       *  list.
       *
       *  Requires this != @a __x.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Remove a range of elements.
       *  @param  __first  Iterator pointing to the first element to be erased.
       *  @param  __last  Iterator pointing to one past the last element to be
       *                erased.
       *  @return  An iterator pointing to the element pointed to by @a last
       *           prior to erasing (or end()).
       *
       *  This function will erase the elements in the range @a
       *  [first,last) and shorten the %list accordingly.
       *
       *  This operation is linear time in the size of the range and only
       *  invalidates iterators/references to the element being removed.
       *  The user is also cautioned that this function only erases the
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer
       *  is the user's responsibility.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Remove element at given position.
       *  @param  __position  Iterator pointing to element to be erased.
       *  @return  An iterator pointing to the next element (or end()).
       *
       *  This function will erase the element at the given position and thus
       *  shorten the %list by one.
       *
       *  Due to the nature of a %list this operation can be done in
       *  constant time, and only invalidates iterators/references to
       *  the element being removed.  The user is also cautioned that
       *  this function only erases the element, and that if the element
       *  is itself a pointer, the pointed-to memory is not touched in
       *  any way.  Managing the pointer is the user's responsibility.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Inserts a range into the %list.
       *  @param  __position  An iterator into the %list.
       *  @param  __first  An input iterator.
       *  @param  __last   An input iterator.
       *
       *  This function will insert copies of the data in the range [@a
       *  first,@a last) into the %list before the location specified by
       *  @a position.
       *
       *  This operation is linear in the number of elements inserted and
       *  does not invalidate iterators and references.
       */"	#endif
"/**
       *  @brief  Inserts a range into the %list.
       *  @param  __position  A const_iterator into the %list.
       *  @param  __first  An input iterator.
       *  @param  __last   An input iterator.
       *  @return  An iterator pointing to the first element inserted
       *           (or __position).
       *
       *  This function will insert copies of the data in the range [@a
       *  first,@a last) into the %list before the location specified by
       *  @a position.
       *
       *  This operation is linear in the number of elements inserted and
       *  does not invalidate iterators and references.
       */"	#else
"/**
       *  @brief  Inserts a number of copies of given data into the %list.
       *  @param  __position  An iterator into the %list.
       *  @param  __n  Number of elements to be inserted.
       *  @param  __x  Data to be inserted.
       *
       *  This function will insert a specified number of copies of the
       *  given data before the location specified by @a position.
       *
       *  This operation is linear in the number of elements inserted and
       *  does not invalidate iterators and references.
       */"	#endif
"/**
       *  @brief  Inserts a number of copies of given data into the %list.
       *  @param  __position  A const_iterator into the %list.
       *  @param  __n  Number of elements to be inserted.
       *  @param  __x  Data to be inserted.
       *  @return  An iterator pointing to the first element inserted
       *           (or __position).
       *
       *  This function will insert a specified number of copies of the
       *  given data before the location specified by @a position.
       *
       *  This operation is linear in the number of elements inserted and
       *  does not invalidate iterators and references.
       */"	#else
"/**
       *  @brief  Inserts the contents of an initializer_list into %list
       *          before specified const_iterator.
       *  @param  __p  A const_iterator into the %list.
       *  @param  __l  An initializer_list of value_type.
       *  @return  An iterator pointing to the first element inserted
       *           (or __position).
       *
       *  This function will insert copies of the data in the
       *  initializer_list @a l into the %list before the location
       *  specified by @a p.
       *
       *  This operation is linear in the number of elements inserted and
       *  does not invalidate iterators and references.
       */"	#endif
"/**
       *  @brief  Inserts given value into %list before specified iterator.
       *  @param  __position  An iterator into the %list.
       *  @param  __x  Data to be inserted.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert a copy of the given value before
       *  the specified location.  Due to the nature of a %list this
       *  operation can be done in constant time, and does not
       *  invalidate iterators and references.
       */"	#endif
"/**
       *  @brief  Inserts given value into %list before specified iterator.
       *  @param  __position  A const_iterator into the %list.
       *  @param  __x  Data to be inserted.
       *  @return  An iterator that points to the inserted data.
       *
       *  This function will insert a copy of the given value before
       *  the specified location.  Due to the nature of a %list this
       *  operation can be done in constant time, and does not
       *  invalidate iterators and references.
       */"	#else
"/**
       *  @brief  Removes last element.
       *
       *  This is a typical stack operation.  It shrinks the %list by
       *  one.  Due to the nature of a %list this operation can be done
       *  in constant time, and only invalidates iterators/references to
       *  the element being removed.
       *
       *  Note that no data is returned, and if the last element's data
       *  is needed, it should be retrieved before pop_back() is called.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Add data to the end of the %list.
       *  @param  __x  Data to be added.
       *
       *  This is a typical stack operation.  The function creates an
       *  element at the end of the %list and assigns the given data to
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Add data to the front of the %list.
       *  @param  __x  Data to be added.
       *
       *  This is a typical stack operation.  The function creates an
       *  element at the front of the %list and assigns the given data
       *  to it.  Due to the nature of a %list this operation can be
       *  done in constant time, and does not invalidate iterators and
       *  references.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Resizes the %list to the specified number of elements.
       *  @param __new_size Number of elements the %list should contain.
       *  @param __x Data with which new elements should be populated.
       *
       *  This function will %resize the %list to the specified number
       *  of elements.  If the number is smaller than the %list's
       *  current size the %list is truncated, otherwise the %list is
       *  extended and new elements are populated with given data.
       */"	#endif
"/**
       *  @brief Resizes the %list to the specified number of elements.
       *  @param __new_size Number of elements the %list should contain.
       *  @param __x Data with which new elements should be populated.
       *
       *  This function will %resize the %list to the specified number
       *  of elements.  If the number is smaller than the %list's
       *  current size the %list is truncated, otherwise the %list is
       *  extended and new elements are populated with given data.
       */"	#else
/**  Returns the size() of the largest possible %list.  */	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reverse iterator that points to one
       *  before the first element in the %list.  Iteration is done in reverse
       *  element order.
       */"	#endif
"/**
       *  Returns a read-only (constant) reverse iterator that points to one
       *  before the first element in the %list.  Iteration is done in reverse
       *  element order.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Assigns an initializer_list to a %list.
       *  @param  __l  An initializer_list of value_type.
       *
       *  Replace the contents of the %list with copies of the elements
       *  in the initializer_list @a __l.  This is linear in __l.size().
       */"	#endif
// Check whether it's an integral type.  If so, it's not an iterator.	#endif
"/**
       *  @brief  Assigns a range to a %list.
       *  @param  __first  An input iterator.
       *  @param  __last   An input iterator.
       *
       *  This function fills a %list with copies of the elements in the
       *  range [@a __first,@a __last).
       *
       *  Note that the assignment completely changes the %list and
       *  that the resulting %list's size is the same as the number of
       *  elements assigned.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  %List initializer list assignment operator.
       *  @param  __l  An initializer_list of value_type.
       *
       *  Replace the contents of the %list with copies of the elements
       *  in the initializer_list @a __l.  This is linear in l.size().
       */"	#endif
"/**
       *  @brief  %List assignment operator.
       *  @param  __x  A %list of identical element and allocator types.
       *
       *  All the elements of @a __x are copied.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus >= 201103L
"/**
       *  No explicit dtor needed as the _Base dtor takes care of
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */"	#endif
// Check whether it's an integral type.  If so, it's not an iterator.	#endif
"/**
       *  @brief  Builds a %list from a range.
       *  @param  __first  An input iterator.
       *  @param  __last  An input iterator.
       *  @param  __a  An allocator object.
       *
       *  Create a %list consisting of copies of the elements from
       *  [@a __first,@a __last).  This is linear in N (where N is
       *  distance(@a __first,@a __last)).
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Builds a %list from an initializer_list
       *  @param  __l  An initializer_list of value_type.
       *  @param  __a  An allocator object.
       *
       *  Create a %list consisting of copies of the elements in the
       *  initializer_list @a __l.  This is linear in __l.size().
       */"	#endif
"/**
       *  @brief  %List copy constructor.
       *  @param  __x  A %list of identical element and allocator types.
       *
       *  The newly-created %list uses a copy of the allocation object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Creates a %list with copies of an exemplar element.
       *  @param  __n  The number of elements to initially create.
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator object.
       *
       *  This constructor fills the %list with @a __n copies of @a __value.
       */"	#endif
"/**
       *  @brief  Creates a %list with copies of an exemplar element.
       *  @param  __n  The number of elements to initially create.
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator object.
       *
       *  This constructor fills the %list with @a __n copies of @a __value.
       */"	#else
"/**
       *  @brief  Creates a %list with no elements.
       *  @param  __a  An allocator object.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Creates a %list with no elements.
       */"	#if __cplusplus >= 201103L
// count the number of nodes	#endif
// return the stored size	#else
"/**
       *  @param  __args  An instance of user data.
       *
       *  Allocates space for a new node and constructs a copy of
       *  @a __args in it.
       */"	#if __cplusplus < 201103L
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief A standard container with linear time access to elements,
   *  and fixed time insertion/deletion at any point in the sequence.
   *
   *  @ingroup sequences
   *
   *  @tparam _Tp  Type of element.
   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, a
   *  <a href=""tables.html#66"">reversible container</a>, and a
   *  <a href=""tables.html#67"">sequence</a>, including the
   *  <a href=""tables.html#68"">optional sequence requirements</a> with the
   *  %exception of @c at and @c operator[].
   *
   *  This is a @e doubly @e linked %list.  Traversal up and down the
   *  %list requires linear time, but adding and removing elements (or
   *  @e nodes) is done in constant time, regardless of where the
   *  change takes place.  Unlike std::vector and std::deque,
   *  random-access iterators are not provided, so subscripting ( @c
   *  [] ) access is not allowed.  For algorithms which only need
   *  sequential access, this lack makes no difference.
   *
   *  Also unlike the other standard containers, std::list provides
   *  specialized algorithms %unique to linked lists, such as
   *  splicing, sorting, and in-place reversal.
   *
   *  A couple points on memory allocation for list<Tp>:
   *
   *  First, we never actually allocate a Tp, we allocate
   *  List_node<Tp>'s and trust [20.1.5]/4 to DTRT.  This is to ensure
   *  that after elements from %list<X,Alloc1> are spliced into
   *  %list<X,Alloc2>, destroying the memory of the second %list is a
   *  valid operation, i.e., Alloc1 giveth and Alloc2 taketh away.
   *
   *  Second, a %list conceptually represented as
   *  @code
   *    A <---> B <---> C <---> D
   *  @endcode
   *  is actually circular; a link exists between A and D.  The %list
   *  class holds (as its only data member) a private list::iterator
   *  pointing to @e D, not to @e A!  To get to the head of the %list,
   *  we start at the tail and move forward by one.  When this member
   *  iterator's next/previous pointers refer to itself, the %list is
   *  %empty.
  */"	definition of list<_Tp, _Alloc>
// This is what actually destroys the list.	declaration of ~_List_base
// This is what actually destroys the list.	definition of ~_List_base
// Used when allocator !is_always_equal.	#endif
// else caller must move individual elements.	#endif
// count the number of nodes	#endif
// dummy implementations used when the size is not stored	#if !_GLIBCXX_INLINE_VERSION
// return the stored size	#endif
/// See bits/stl_deque.h's _Deque_base for an explanation.	definition of _List_base<_Tp, _Alloc>
// The only member points to the %list element.	definition of _M_node
// Must downcast from List_node_base to _List_node to get to value.	declaration of operator*
// Must downcast from List_node_base to _List_node to get to value.	definition of operator*
"/**
   *  @brief A list::const_iterator.
   *
   *  All the functions are op overloads.
  */"	definition of _List_const_iterator<_Tp>
// The only member points to the %list element.	definition of _M_node
// Must downcast from _List_node_base to _List_node to get to value.	declaration of operator*
// Must downcast from _List_node_base to _List_node to get to value.	definition of operator*
"/**
   *  @brief A list::iterator.
   *
   *  All the functions are op overloads.
  */"	definition of _List_iterator<_Tp>
/// An actual node in the %list.	definition of _List_node<_Tp>
/// The %list node header.	definition of _List_node_header
/// Common part of a node in the %list.	definition of _List_node_base
"/** @file bits/stl_list.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{list}
 */"	#ifndef _STL_LIST_H
/* _LIST_TCC */	#endif
// namespace std	#endif
// Do nothing if the list has length 0 or 1.	definition of remove_if
// 300. list::merge() specification incomplete	definition of sort
// 300. list::merge() specification incomplete	definition of merge
// in parameters?	definition of unique
// replacement allocator cannot free existing storage	#endif
// }	definition of _M_resize_pos
"/** @file bits/list.tcc
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{list}
 */"	#ifndef _LIST_TCC
/* _GLIBCXX_LIST */	#endif
// C++20	#endif
// namespace std	#endif
// C++17	#endif
// namespace std	#endif
"/** @file include/list
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_LIST
// Terrible hacks	declaration of fish_xdm_login_hack_hack_hack_hack
/// The abbreviations are unescaped, i.e. they may not be valid variable identifiers (#6166).	declaration of get_abbreviations
/// none() if not.	declaration of expand_abbreviation
/// Perform the opposite of tilde expansion on the string, which is modified in place.	declaration of replace_home_directory_with_tilde
/// \param input the string to tilde expand	declaration of expand_tilde
/// Suitable for pretty-printing.	declaration of expand_escape_string
/// Suitable for pretty-printing.	declaration of expand_escape_variable
// \return an expand error.	declaration of expand_to_command_and_args
/// \return Whether expansion succeeded.	declaration of expand_one
/// strings containing wildcards to tell if the wildcard produced any matches.	declaration of expand_string
/// The string represented by PROCESS_EXPAND_SELF	"#define PROCESS_EXPAND_SELF_STR L""%self"""
/// Make an error value with the given status.	definition of make_error
/// operator== allows for comparison against result_t values.	definition of operator==
/* implicit */	definition of expand_result_t
/// $status.	definition of status
/// The result of expansion.	definition of result
/// so the output is empty.	wildcard_no_match
/// Expansion was cancelled (e.g. control-C).	cancel
/// Expansion succeeded.	ok
/// There was an error, for example, unmatched braces.	error
/// These are the possible return values for expand_string.	definition of expand_result_t
/// characters so we can sanity check the enum range.	EXPAND_SENTINEL
/// variables.	VARIABLE_EXPAND_EMPTY
/// Separate subtokens in a token with this character.	INTERNAL_SEPARATOR
/// Character that takes the place of any whitespace within non-quoted text in braces	BRACE_SPACE
/// Character representing separation between two bracket elements.	BRACE_SEP
/// Character representing the end of a bracket expansion.	BRACE_END
/// Character representing the start of a bracket expansion.	BRACE_BEGIN
/// Character representing variable expansion into a single element.	VARIABLE_EXPAND_SINGLE
/// Character representing variable expansion.	VARIABLE_EXPAND
/// Character representing process expansion for %self.	PROCESS_EXPAND_SELF
/// Character representing a home directory.	HOME_DIRECTORY
/// a list of potential working directories.	special_for_command
/// completions and cd autosuggestions.	special_for_cd_autosuggestion
/// working directories, and to use logical instead of physical paths.	special_for_cd
/// fuzzy_match is set.	no_fuzzy_directories
/// Allow fuzzy matching.	fuzzy_match
/// Don't expand home directories.	skip_home_directories
/// Don't expand jobs (but still expand processes).	skip_jobs
/// Don't generate descriptions.	no_descriptions
/// Only match directories.	directories_only
/// Only match files that are executable by the current user.	executables_only
/// wildcard as a prefix instead of a match.	for_completions
/// Skip wildcard expansion.	skip_wildcards
/// Skip variable expansion.	skip_variables
/// Skip command substitutions.	skip_cmdsubst
/// Set of flags controlling expansions.	definition of expand_flag
// talloc, string buffers and reference counting.	#ifndef FISH_EXPAND_H
/// Construct from vars alone.	definition of operation_context_t
/// Construct from the full triple of a parser, vars, and cancel checker.	declaration of operation_context_t
// cancels.	declaration of globals
"// \return an ""empty"" context which contains no variables, no parser, and never cancels."	declaration of empty
// Invoke the cancel checker. \return if we should cancel.	definition of check_cancel
// A function which may be used to poll for cancellation.	definition of cancel_checker
/// the command substitions should use this tree.	definition of job_group
/// the command substitions should use this tree.	definition of job_group
// context itself.	definition of vars
// nullptr.	definition of parser
// nullptr.	definition of parser
///   is no longer necessary and should be cancelled.	definition of operation_context_t
/// A common helper which always returns false.	declaration of no_cancel
/// error.	declaration of eval_node
/// Return the parsed ast.	definition of ast
/// Returns the source string.	definition of get_source
/// Returns the source offset, or -1.	declaration of get_current_source_offset
/// cached_lineno_offset.	declaration of get_current_line_number
/// The execution context may access the parser and group through ctx.	declaration of parse_execution_context_t
// Returns the line number of the node. Not const since it touches cached_lineno_offset.	declaration of line_offset_of_character_at_offset
// Returns the line number of the node. Not const since it touches cached_lineno_offset.	declaration of line_offset_of_node
// Determines the list of redirections for a node.	declaration of determine_redirections
// These encapsulate the actual logic of various (block) statements.	declaration of run_block_statement
// These create process_t structures from statements.	declaration of populate_job_process
/// Indicates whether a job is a simple block (one block, no redirections).	declaration of job_is_simple_block
// arguments. Prints an error message on error.	declaration of expand_command
// Utilities	declaration of infinite_recursive_statement_in_job_list
// Utilities	declaration of get_source
/// Command not found support.	declaration of handle_command_not_found
// 'end_execution_reason_t::error'.	declaration of report_error
// This will never return end_execution_reason_t::ok.	declaration of check_end_execution
// No copying allowed.	definition of parse_execution_context_t
/// For example, in `begin; foo ; end < file.txt` this would have the 'file.txt' IO.	definition of block_io
// Cached line number information.	definition of cached_lineno_offset
// The currently executing job node, used to indicate the line number.	definition of executing_job_node
/// A parse error or failed expansion (but not an error exit status from a command).	error
/// Evaluation was cancelled, e.g. because of a signal or exit.	cancelled
/// Evaluation was skipped due to control flow (break or return).	control_flow
/// Evaluation was successfull.	ok
/// cancellation. Note it does not track the exit status of commands.	definition of end_execution_reason_t
"// Provides the ""linkage"" between an ast and actual execution structures (job_t, etc.)."	#ifndef FISH_PARSE_EXECUTION_H
/// \return the operation context for this parser.	declaration of context
/// \return a cancel poller for checking if this parser has been signalled.	declaration of cancel_checker
/// \return a shared pointer reference to this parser.	declaration of shared
/// \return whether the number of functions in the stack exceeds our stack depth limit.	declaration of function_stack_is_overflowing
/// Return a string representing the current stack trace.	declaration of stack_trace
/// (and not, say, a prompt).	definition of is_interactive
/// than the one curently read.	declaration of current_filename
/// Output profiling data to the given filename.	declaration of emit_profiling
/// parser_t will clean it up.	declaration of create_profile_item
/// Returns the job with the given pid.	declaration of job_get_from_pid
/// Return the job with the specified job id. If id is 0 or less, return the last job used.	declaration of job_get
/// Return the job with the specified job id. If id is 0 or less, return the last job used.	declaration of job_get
/// Promotes a job to the front of the list.	declaration of job_promote
/// Return the function name for the specified stack frame. Default is one (current frame).	declaration of get_function_name
/// Return a description of the given blocktype.	declaration of get_block_desc
/// Remove the outermost block, asserting it's the given one.	declaration of pop_block
/// valid until the call to pop_block()	declaration of push_block
/// \return a value like ENV_OK.	declaration of set_empty_var_and_fire
/// \return a value like ENV_OK.	declaration of set_var_and_fire
/// \return a value like ENV_OK.	declaration of set_var_and_fire
/// Get and set the last proc statuses.	definition of get_last_status
/// Get the library data.	definition of libdata
/// Get the variables.	definition of vars
/// Get the list of jobs.	definition of jobs
/// Returns the current (innermost) block.	declaration of current_block
/// Return the list of blocks. The first block is at the top.	definition of blocks
/// when idx is at or equal to the number of blocks.	declaration of block_at_index
/// when idx is at or equal to the number of blocks.	declaration of block_at_index
/// Returns the current line number.	declaration of get_lineno
/// init.fish (line 127): ls|grep pancake	declaration of current_line
/// for command substitution expansion.	declaration of expand_argument_list
/// Because the source has been parsed, a syntax error is impossible.	declaration of eval
/// \return the result of evaluation.	declaration of eval
/// Global event blocks.	definition of global_event_blocks
"/// Get the ""principal"" parser, whatever that is."	declaration of principal_parser
/// The main parser.	declaration of principal
/// Create a parser.	declaration of parser_t
/// Create a parser.	declaration of parser_t
/// every block if it is of type FUNCTION_CALL.	declaration of is_function
/// Adds a job to the beginning of the job list.	declaration of job_add
// No copying allowed.	declaration of operator=
// No copying allowed.	declaration of parser_t
/// to profile_items)	definition of profile_items
/// to profile_items)	definition of profile_items
/// Miscellaneous library data.	definition of library_data
/// Set of variables for the parser.	definition of variables
/// The 'depth' of the fish call stack.	definition of eval_level
/// top down using range-based for loops.	definition of block_list
/// The jobs associated with this parser.	definition of job_list
/// The jobs associated with this parser.	definition of job_list
/// The current execution context.	definition of execution_context
/* implicit */	definition of eval_res_t
/// If set, no commands were executed and there we no errors.	definition of was_empty
/// command-not-found will mark break_expand.	definition of break_expand
/// The value for $status.	definition of status
/// The result of parser_t::eval family.	definition of eval_res_t
/// This is never null and never invalid.	definition of cwd_fd
/// the command line.	definition of transient_commandlines
/// List of events that have been sent but have not yet been delivered because they are blocked.	definition of blocked_events
/// List of events that have been sent but have not yet been delivered because they are blocked.	definition of blocked_events
/// This is an intern'd string.	definition of current_filename
/// The read limit to apply to captured subshell output, or 0 for none.	definition of read_limit
/// Whether we should return from the current function.	definition of returning
/// Whether we should break or continue the current loop.	definition of loop_status
/// bindings.	definition of suppress_fish_trace
/// Whether we are currently interactive.	definition of is_interactive
/// event nesting level.	definition of is_event
/// Whether we are running due to a `breakpoint` command.	definition of is_breakpoint
/// Whether we are running a block of commands.	definition of is_block
/// Whether we are running a subshell command.	definition of is_subshell
/// This supports the '--on-job-exit caller' feature.	definition of caller_id
/// Whether we are currently cleaning processes.	definition of is_cleaning_procs
/// Whether we called builtin_complete -C without parameter.	definition of builtin_complete_current_commandline
/// Number of recursive calls to builtin_complete().	definition of builtin_complete_recursion_level
/// Last reader run count.	definition of last_exec_run_counter
/// A counter incremented every time a command executes.	definition of exec_count
/// Miscellaneous data used to avoid recursion and others.	definition of library_data_t
/// The command string.	definition of cmd
/// If the execution of this command was skipped.	definition of skipped
/// increase the block level.	definition of level
/// substitutions.	definition of parse
/// Time spent executing the specified command, including parse time for nested blocks.	definition of exec
/// Entry points for creating blocks.	declaration of variable_assignment_block
/// Entry points for creating blocks.	declaration of breakpoint_block
/// Entry points for creating blocks.	declaration of scope_block
/// Entry points for creating blocks.	declaration of switch_block
/// Entry points for creating blocks.	declaration of while_block
/// Entry points for creating blocks.	declaration of for_block
/// Entry points for creating blocks.	declaration of source_block
/// Entry points for creating blocks.	declaration of function_block
/// Entry points for creating blocks.	declaration of event_block
/// Entry points for creating blocks.	declaration of if_block
/// \return if we are a function call (with or without shadowing).	definition of is_function_call
/// Description of the block, for debugging.	declaration of description
// If this is an event block, the event. Otherwise ignored.	definition of event
// Otherwise nothing.	definition of sourced_file
// Otherwise empty.	definition of function_name
/// List of event blocks.	definition of event_blocks
/// stack.	definition of wants_pop_env
/// Line number where this block was created.	definition of src_lineno
/// Name of file that created this block. This string is intern'd.	definition of src_filename
/// Type of block.	definition of block_type
/// Construct from a block type.	declaration of block_t
/// block_t represents a block of commands.	definition of block_t
/// current loop block should be skipped	continues
/// current loop block should be removed	breaks
/// current loop block executed as normal	normals
/// Possible states for a loop.	definition of loop_status_t
/// Variable assignment before a command	variable_assignment
/// Breakpoint block	breakpoint
/// Block created on event notifier invocation	event
/// Block created by the . (source) builtin	source
/// Unconditional block	begin
/// Outermost block	top
/// Command substitution scope	subst
/// Switch block	switch_block
/// Function invocation block with no variable shadowing	function_call_no_shadow
/// Function invocation block	function_call
/// If block	if_block
/// For loop block	for_block
/// While loop block	while_block
/// Types of blocks.	definition of block_type_t
/// event_blockage_t represents a block on events.	definition of event_blockage_t
// The fish parser.	#ifndef FISH_PARSER_H
/* do not apply exit status */	ExprStmt
// We're going to (tell our caller to) autoload this command.	ExprStmt
// The file has been autoloaded and is unchanged.	return ...
// Do we have an entry to load?	declaration
// Are we currently in the process of autoloading this?	if (...) ... 
// Sort the output to make it easier to test.	ExprStmt
/* allow stale */	return ...
// Don't re-use 'now', the disk access could have taken a long time.	declaration
// The miss is stale, remove it.	ExprStmt
// Re-use this cached miss.	return ...
// Check misses.	if (...) ... 
// The file is stale, remove it.	ExprStmt
// Re-use this cached hit.	return ...
// Check hits.	declaration
// Found it.	declaration
// Construct the path as dir/cmd.fish	ExprStmt
// Re-use the storage for path.	declaration
/// This returns an autoloadable file, or none() if there is no such file.	declaration of check
/// \return the directories.	definition of dirs
/// Initialize with empty directories.	definition of autoload_file_cache_t
/// Initialize with a set of directories.	definition of autoload_file_cache_t
/// \return the file, or none() if none.	declaration of locate_file
/// \return whether a timestamp is fresh enough to use.	declaration of is_fresh
/// \return the current timestamp.	definition of current_timestamp
/// The key is the command (not the path).	definition of known_file_t
/// The key is the command, the  value is the time of the check.	definition of misses_lru_cache_t
/// The directories from which to load.	definition of dirs_
/// A timestamp is a monotonic point in time.	declaration of timestamp_t
/// This is responsible for performing cached accesses to a set of paths.	definition of autoload_file_cache_t
/// The metadata for the file.	definition of file_id
/// The path to the file.	definition of path
/// Represents a file that we might want to autoload.	definition of autoloadable_file_t
/// The time before we'll recheck an autoloaded file.	definition of kAutoloadStalenessInterval
/// The send stuff to foreground message.	"#define FG_MSG _(L""Send job %d, '%ls' to foreground\n"")"
/// Command that requires a subcommand was invoked without a recognized subcommand.	"#define BUILTIN_ERR_MISSING_SUBCMD _(L""%ls: Expected a subcommand to follow the command\n"")"
/// Error message when integer expected	"#define BUILTIN_ERR_NOT_NUMBER _(L""%ls: Argument '%ls' is not a valid integer\n"")"
/// Error message when too many arguments are supplied to a builtin.	"#define BUILTIN_ERR_TOO_MANY_ARGUMENTS _(L""%ls: Too many arguments\n"")"
/// Error message for invalid bind mode name.	"#define BUILTIN_ERR_BIND_MODE _(L""%ls: mode name '%ls' is not valid. See `help identifiers`.\n"")"
/// Error message for invalid variable name.	"#define BUILTIN_ERR_VARNAME _(L""%ls: Variable name '%ls' is not valid. See `help identifiers`.\n"")"
/// Error message for unexpected args.	"#define BUILTIN_ERR_ARG_COUNT0 _(L""%ls: Expected an argument\n"")"
/// Error message for unknown switch.	"#define BUILTIN_ERR_UNKNOWN _(L""%ls: Unknown option '%ls'\n"")"
/// Error message for specifying both export and unexport to set/read.	"#define BUILTIN_ERR_EXPUNEXP _(L""%ls: Variable can't be both exported and unexported\n"")"
/// Error message on multiple scope levels for variables.	"#define BUILTIN_ERR_GLOCAL _(L""%ls: Variable scope can only be one of universal, global and local\n"")"
/// Error message on invalid combination of options.	"#define BUILTIN_ERR_COMBO2 _(L""%ls: Invalid combination of options,\n%ls\n"")"
/// Error message on invalid combination of options.	"#define BUILTIN_ERR_COMBO _(L""%ls: Invalid combination of options\n"")"
/// Error message on missing argument.	"#define BUILTIN_ERR_MISSING _(L""%ls: Expected argument for option %ls\n"")"
/// The default prompt for the read command.	"#define DEFAULT_READ_PROMPT L""set_color green; echo -n read; set_color normal; echo -n \""> \"""""
// Description of what the builtin does.	definition of desc
// Function pointer to the builtin implementation.	definition of func
// Function pointer to the builtin implementation.	definition of func
// Name of the builtin.	definition of name
/// Data structure to describe a builtin.	definition of builtin_data_t
// Prototypes for functions for executing builtin functions.	#ifndef FISH_BUILTIN_H
"/* Fortify macros for strings.h functions.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef __STRINGS_FORTIFIED
/* strings.h  */	#endif
/* Functions with security checks.  */	#if defined __USE_MISC || !defined __USE_XOPEN2K8
"/* Compare no more than N chars of S1 and S2, ignoring case, using
   collation rules from LOC.  */"	declaration of strncasecmp_l
/* Compare S1 and S2, ignoring case, using collation rules from LOC.  */	declaration of strcasecmp_l
/* Compare no more than N chars of S1 and S2, ignoring case.  */	declaration of strncasecmp
/* Compare S1 and S2, ignoring case.  */	declaration of strcasecmp
"/* The following two functions are non-standard but necessary for non-32 bit
   platforms.  */"	#ifdef __USE_MISC
"/* Return the position of the first bit set in I, or 0 if none are set.
   The least-significant bit is position 1, the most-significant 32.  */"	declaration of ffs
/* Find the last occurrence of C in S (same as strrchr).  */	#ifdef __CORRECT_ISO_CPP_STRINGS_H_PROTO
/* Find the first occurrence of C in S (same as strchr).  */	#ifdef __CORRECT_ISO_CPP_STRINGS_H_PROTO
/* Set N bytes of S to 0.  */	declaration of bzero
/* Copy N bytes of SRC to DEST (like memmove, but args reversed).  */	declaration of bcopy
/* Compare N bytes of S1 and S2 (same as memcmp).  */	declaration of bcmp
/* Tell the caller that we provide correct C++ prototypes.  */	#if defined __cplusplus && __GNUC_PREREQ (4, 4)
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _STRINGS_H
/* bits/string_fortified.h */	#endif
/* XXX We have no corresponding builtin yet.  */	declaration of __stpncpy_chk
"/* GCC-5.0 and newer implements these checks in the compiler, so we don't
     need them here.  */"	#if !__GNUC_PREREQ (5,0)
"/* The first two tests here help to catch a somewhat common problem
   where the second and third parameter are transposed.  This is
   especially problematic if the intended fill value is zero.  In this
   case no work is done at all.  We detect these problems by referring
   non-existing functions.  */"	definition of memset
"/* Copyright (C) 2004-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_STRING_FORTIFIED_H
/* string.h  */	#endif
"/* Return the file name within directory of FILENAME.  We don't
   declare the function if the `basename' macro is available (defined
   in <libgen.h>) which makes the XPG version of this function
   available.  */"	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
/* Frobnicate N bytes of S.  */	declaration of memfrob
/* Sautee STRING briskly.  */	declaration of strfry
/* Compare S1 and S2 as strings holding name & indices/version numbers.  */	declaration of strverscmp
"/* Copy no more than N characters of SRC to DEST, returning the address of
   the last character written into DEST.  */"	declaration of __stpncpy
/* Copy SRC to DEST, returning the address of the terminating '\0' in DEST.  */	declaration of __stpcpy
/* Return a string describing the meaning of the signal number in SIG.  */	declaration of strsignal
"/* Return the next DELIM-delimited token from *STRINGP,
   terminating it with a '\0', and update *STRINGP to point past it.  */"	declaration of strsep
"/* Set N bytes of S to 0.  The compiler will not delete a call to this
   function, even if S is dead after the call.  */"	declaration of explicit_bzero
/* Translate error number to string according to the locale L.  */	declaration of strerror_l
"/* If a temporary buffer is required, at most BUFLEN bytes of BUF will be
   used.  */"	declaration of strerror_r
"/* Fill BUF with a string describing the meaning of the `errno' code in
   ERRNUM.  */"	#ifdef __REDIRECT_NTH
"/* Reentrant version of `strerror'.
   There are 2 flavors of `strerror_r', GNU which returns the string
   and may or may not use the supplied temporary buffer and POSIX one
   which fills the string into the buffer.
   To use the POSIX version, -D_XOPEN_SOURCE=600 or -D_POSIX_C_SOURCE=200112L
   without -D_GNU_SOURCE is needed, otherwise the GNU version is
   preferred.  */"	#if defined __USE_XOPEN2K && !defined __USE_GNU
/* Return a string describing the meaning of the `errno' code in ERRNUM.  */	declaration of strerror
"/* Find the length of STRING, but scan at most MAXLEN characters.
   If no '\0' terminator is found in that many characters, return MAXLEN.  */"	declaration of strnlen
/* Return the length of S.  */	declaration of strlen
"/* Copy N bytes of SRC to DEST, return pointer to bytes after the
   last written byte.  */"	declaration of __mempcpy
"/* Find the first occurrence of NEEDLE in HAYSTACK.
   NEEDLE is NEEDLELEN bytes long;
   HAYSTACK is HAYSTACKLEN bytes long.  */"	declaration of memmem
/* Similar to `strstr' but this function ignores the case of both strings.  */	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
"/* Divide S into tokens separated by characters in DELIM.  Information
   passed between calls are stored in SAVE_PTR.  */"	declaration of __strtok_r
/* Divide S into tokens separated by characters in DELIM.  */	declaration of strtok
/* Find the first occurrence of NEEDLE in HAYSTACK.  */	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
/* Find the first occurrence in S of any character in ACCEPT.  */	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
"/* Return the length of the initial segment of S which
   consists entirely of characters in ACCEPT.  */"	declaration of strspn
"/* Return the length of the initial segment of S which
   consists entirely of characters not in REJECT.  */"	declaration of strcspn
"/* This function is similar to `strchr'.  But it returns a pointer to
   the closing NUL byte in case C is not found in S.  */"	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
/* Find the last occurrence of C in S.  */	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
/* Find the first occurrence of C in S.  */	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
/* Return an alloca'd copy of at most N bytes of string.  */	#define strndupa(s,n) (__extension__ ({ const char *__old = (s); size_t __len = strnlen (__old, (n)); char *__new = (char *) __builtin_alloca (__len + 1); __new[__len] = '\0'; (char *) memcpy (__new, __old, __len); }))
/* Duplicate S, returning an identical alloca'd string.  */	#define strdupa(s) (__extension__ ({ const char *__old = (s); size_t __len = strlen (__old) + 1; char *__new = (char *) __builtin_alloca (__len); (char *) memcpy (__new, __old, __len); }))
"/* Return a malloc'd copy of at most N bytes of STRING.  The
   resultant string is terminated even if no null terminator
   appears before STRING[N].  */"	#if defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)
/* Duplicate S, returning an identical malloc'd string.  */	declaration of strdup
"/* Put a transformation of SRC into no more than N bytes of DEST,
   using sorting rules from L.  */"	declaration of strxfrm_l
/* Compare the collated forms of S1 and S2, using sorting rules from L.  */	declaration of strcoll_l
/* Put a transformation of SRC into no more than N bytes of DEST.  */	declaration of strxfrm
/* Compare the collated forms of S1 and S2.  */	declaration of strcoll
/* Compare N characters of S1 and S2.  */	declaration of strncmp
/* Compare S1 and S2.  */	declaration of strcmp
/* Append no more than N characters from SRC onto DEST.  */	declaration of strncat
/* Append SRC onto DEST.  */	declaration of strcat
/* Copy no more than N characters of SRC to DEST.  */	declaration of strncpy
/* Copy SRC to DEST.  */	declaration of strcpy
/* Search N bytes of S for the final occurrence of C.  */	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
"/* Search in S for C.  This is similar to `memchr' but there is no
   length limit.  */"	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
/* Search N bytes of S for C.  */	#ifdef __CORRECT_ISO_CPP_STRING_H_PROTO
/* Compare N bytes of S1 and S2.  */	declaration of memcmp
/* Set N bytes of S to C.  */	declaration of memset
/* Misc || X/Open.  */	#endif
"/* Copy no more than N bytes of SRC to DEST, stopping when C is found.
   Return the position in DEST one byte past where C was copied,
   or NULL if C was not found in the first N bytes of SRC.  */"	#if defined __USE_MISC || defined __USE_XOPEN
"/* Copy N bytes of SRC to DEST, guaranteeing
   correct behavior for overlapping strings.  */"	declaration of memmove
/* Copy N bytes of SRC to DEST.  */	declaration of memcpy
/* Tell the caller that we provide correct C++ prototypes.  */	#if defined __cplusplus && __GNUC_PREREQ (4, 4)
/* Get size_t and NULL from <stddef.h>.  */	#define __need_size_t
"/*
 *	ISO C99 Standard: 7.21 String handling	<string.h>
 */"	#ifndef _STRING_H
"// extern ""C++"""	#endif
// Get rid of those macros defined in <string.h> in lieu of real functions.	#undef memchr
// Get rid of those macros defined in <string.h> in lieu of real functions.	#ifndef __CORRECT_ISO_CPP_STRING_H_PROTO
//	#pragma GCC system_header
// Prototypes for executing builtin_getopt function.	#ifndef FISH_BUILTIN_ARGPARSE_H
// Prototypes for executing builtin_bg function.	#ifndef FISH_BUILTIN_BG_H
/* _STL_QUEUE_H */	#endif
// namespace	#endif
// __cplusplus >= 201103L	#endif
// Constrained free swap overload, see p0185r1	#else
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
// No equality/comparison operators are provided for priority_queue.	#if __cplusplus >= 201103L
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
"/**
       *  @brief  Removes first element.
       *
       *  This is a typical %queue operation.  It shrinks the %queue
       *  by one.  The time complexity of the operation depends on the
       *  underlying sequence.
       *
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Add data to the %queue.
       *  @param  __x  Data to be added.
       *
       *  This is a typical %queue operation.
       *  The time complexity of the operation depends on the underlying
       *  sequence.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Builds a %queue from a range.
       *  @param  __first  An input iterator.
       *  @param  __last  An input iterator.
       *  @param  __x  A comparison functor describing a strict weak ordering.
       *  @param  __s  An initial sequence with which to start.
       *
       *  Begins by copying @a __s, inserting a copy of the elements
       *  from @a [first,last) into the copy of @a __s, then ordering
       *  the copy according to @a __x.
       *
       *  For more information on function objects, see the
       *  documentation on @link functors functor base
       *  classes@endlink.
       */"	#if __cplusplus < 201103L
// 2537. Constructors [...] taking allocators should call make_heap	#endif
"/**
       *  @brief  Default constructor creates no elements.
       */"	#if __cplusplus < 201103L
// C++11	#endif
// C++17	#endif
// adaptors	#endif
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief  A standard container automatically sorting its contents.
   *
   *  @ingroup sequences
   *
   *  @tparam _Tp  Type of element.
   *  @tparam _Sequence  Type of underlying sequence, defaults to vector<_Tp>.
   *  @tparam _Compare  Comparison function object type, defaults to
   *                    less<_Sequence::value_type>.
   *
   *  This is not a true container, but an @e adaptor.  It holds
   *  another container, and provides a wrapper interface to that
   *  container.  The wrapper is what enforces priority-based sorting
   *  and %queue behavior.  Very few of the standard container/sequence
   *  interface requirements are met (e.g., iterators).
   *
   *  The second template parameter defines the type of the underlying
   *  sequence/container.  It defaults to std::vector, but it can be
   *  any type that supports @c front(), @c push_back, @c pop_back,
   *  and random-access iterators, such as std::deque or an
   *  appropriate user-defined type.
   *
   *  The third template parameter supplies the means of making
   *  priority comparisons.  It defaults to @c less<value_type> but
   *  can be anything defining a strict weak ordering.
   *
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c
   *  push, @c pop, and @c top, which are standard %queue operations.
   *
   *  @note No equality/comparison operators are provided for
   *  %priority_queue.
   *
   *  @note Sorting of the elements takes place as they are added to,
   *  and removed from, the %priority_queue using the
   *  %priority_queue's member functions.  If you access the elements
   *  by other means, and change their data such that the sorting
   *  order would be different, the %priority_queue will not re-sort
   *  the elements for you.  (How could it know to do so?)
  */"	definition of priority_queue<_Tp, _Sequence, _Compare>
// __cplusplus >= 201103L	#endif
// Constrained free swap overload, see p0185r1	#else
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
/// Based on operator<	definition of operator>=
/// Based on operator<	definition of operator<=
/// Based on operator<	definition of operator>
/// Based on operator==	definition of operator!=
"/**
   *  @brief  Queue ordering relation.
   *  @param  __x  A %queue.
   *  @param  __y  A %queue of the same type as @a x.
   *  @return  True iff @a __x is lexicographically less than @a __y.
   *
   *  This is an total ordering relation.  Complexity and semantics
   *  depend on the underlying sequence type, but the expected rules
   *  are: this relation is linear in the size of the sequences, the
   *  elements must be comparable with @c <, and
   *  std::lexicographical_compare() is usually used to make the
   *  determination.
  */"	definition of operator<
"/**
   *  @brief  Queue equality comparison.
   *  @param  __x  A %queue.
   *  @param  __y  A %queue of the same type as @a __x.
   *  @return  True iff the size and elements of the queues are equal.
   *
   *  This is an equivalence relation.  Complexity and semantics depend on the
   *  underlying sequence type, but the expected rules are:  this relation is
   *  linear in the size of the sequences, and queues are considered equivalent
   *  if their sequences compare equal.
  */"	definition of operator==
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
"/**
       *  @brief  Removes first element.
       *
       *  This is a typical %queue operation.  It shrinks the %queue by one.
       *  The time complexity of the operation depends on the underlying
       *  sequence.
       *
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Add data to the end of the %queue.
       *  @param  __x  Data to be added.
       *
       *  This is a typical %queue operation.  The function creates an
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Default constructor creates no elements.
       */"	#if __cplusplus < 201103L
// C++11	#endif
// C++17	#endif
// adaptors	#endif
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief  A standard container giving FIFO behavior.
   *
   *  @ingroup sequences
   *
   *  @tparam _Tp  Type of element.
   *  @tparam _Sequence  Type of underlying sequence, defaults to deque<_Tp>.
   *
   *  Meets many of the requirements of a
   *  <a href=""tables.html#65"">container</a>,
   *  but does not define anything to do with iterators.  Very few of the
   *  other standard container interfaces are defined.
   *
   *  This is not a true container, but an @e adaptor.  It holds another
   *  container, and provides a wrapper interface to that container.  The
   *  wrapper is what enforces strict first-in-first-out %queue behavior.
   *
   *  The second template parameter defines the type of the underlying
   *  sequence/container.  It defaults to std::deque, but it can be any type
   *  that supports @c front, @c back, @c push_back, and @c pop_front,
   *  such as std::list or an appropriate user-defined type.
   *
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */"	definition of queue<_Tp, _Sequence>
"/** @file bits/stl_queue.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{queue}
 */"	#ifndef _STL_QUEUE_H
/* _GLIBCXX_QUEUE */	#endif
"/** @file include/queue
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_QUEUE
/// will be the next character returned by readch.	declaration of push_front
/// readch will return before actually reading from fd 0.	declaration of push_back
/// If \p dequeue_timeouts is set, remove any timeout from the queue; otherwise retain them.	declaration of readch_timed
/// function never returns a timeout.	declaration of readch
/// \return the next event in the queue, discarding timeouts.	declaration of pop_discard_timeouts
/// \return the next event in the queue.	declaration of pop
/// \return if we have any lookahead.	definition of has_lookahead
/// A class which knows how to produce a stream of input events.	definition of input_event_queue_t
/// Adjust the escape timeout.	declaration of environment_t
/// Init the library with an interrupt function.	declaration of input_common_init
/// \return the event which is to be returned to the reader loop, or none if VINTR is 0.	declaration of interrupt_func_t
/// \return the event which is to be returned to the reader loop, or none if VINTR is 0.	declaration of interrupt_func_t
/* implicit */	definition of char_event_t
/* implicit */	definition of char_event_t
/* implicit */	definition of char_event_t
/// Note that the generic self-insert case does not have any characters, so this would be empty.	definition of seq
/// The style to use when inserting characters into the command line.	definition of input_style
/// The type of event.	definition of type
/// Set if the type is readline.	definition of rl
/// Set if the type is charc.	definition of c
// Insert characters only if the cursor is not at the beginning. Otherwise, discard them.	notfirst
// Insert characters normally.	normal
/// line. Note this is set only after applying bindings; it is not set from readb().	definition of char_input_style_t
/// loop should exit.	check_exit
/// end-of-file was reached.	eof
/// A timeout was hit.	timeout
/// A readline event.	readline
/// A character was entered.	charc
/// Represents an event on the character input stream.	definition of char_event_type_t
// The range of key codes for inputrc-style keyboard functions.	definition of (unnamed enum)
// NOTE: This one has to be last.	reverse_repeat_jump
// Header file for the low level input library.	#ifndef INPUT_COMMON_H
/// Returns a list of all existing input function names.	declaration of input_function_get_names
/// Returns the input function code for the given input function name.	declaration of input_function_get_code
/// Return a list of all known terminfo names.	declaration of input_terminfo_get_names
/// if found, false if not found.	declaration of input_terminfo_get_name
/// ENOENT. If the terminfo variable does not have a value, return false and set errno to EILSEQ.	declaration of input_terminfo_get_sequence
/// Access the singleton input mapping set.	declaration of input_mappings
/// \return a snapshot of the list of input mappings.	declaration of all_mappings
/// \param command an input function that will be run whenever the key sequence occurs	declaration of add
/// Returns all mapping names and modes.	declaration of get_names
/// it exists, false if not.	declaration of get
/// Erase binding for specified key sequence.	declaration of erase
/// Erase all bindings.	declaration of clear
/// The input mapping set is the set of mappings from character sequences to commands.	definition of input_mapping_set_t
/// Pop an argument from the function argument stack.	declaration of function_pop_arg
/// Sets the return status of the most recently executed input function.	definition of function_set_status
/// Enqueue a char event to the front of the queue; this will be the next event returned.	declaration of push_front
/// actually reading from fd 0.	declaration of queue_ch
/// char_event_type_t::check_exit is returned.	declaration of readch
// We need a parser to evaluate bindings.	definition of parser_
// We need a parser to evaluate bindings.	definition of parser_
/// initializations for our input subsystem.	declaration of init_input
// bindings.	#ifndef FISH_INPUT_H
/// lock again.	definition of input_mappings_
// Prototypes for executing builtin_bind function.	#ifndef FISH_BUILTIN_BIND_H
// Prototypes for executing builtin_block function.	#ifndef FISH_BUILTIN_BLOCK_H
// Prototypes for executing builtin_builtin function.	#ifndef FISH_BUILTIN_BUILTIN_H
// Prototypes for executing builtin_cd function.	#ifndef FISH_BUILTIN_CD_H
// Prototypes for executing builtin_command function.	#ifndef FISH_BUILTIN_COMMAND_H
// Prototypes for functions for executing builtin_commandline functions.	#ifndef FISH_BUILTIN_COMMANDLINE_H
// Prototypes for functions for executing builtin_complete functions.	#ifndef FISH_BUILTIN_COMPLETE_H
// Prototypes for executing builtin_contains function.	#ifndef FISH_BUILTIN_CONTAINS_H
// Prototypes for executing builtin_disown function.	#ifndef FISH_BUILTIN_DISOWN_H
// Prototypes for executing builtin_echo function.	#ifndef FISH_BUILTIN_ECHO_H
// Prototypes for executing builtin_emit function.	#ifndef FISH_BUILTIN_EMIT_H
// Prototypes for executing builtin_eval function.	#ifndef FISH_BUILTIN_EVAL_H
// Prototypes for executing builtin_exit function.	#ifndef FISH_BUILTIN_EXIT_H
// Prototypes for executing builtin_fg function.	#ifndef FISH_BUILTIN_FG_H
// Prototypes for executing builtin_functions function.	#ifndef FISH_BUILTIN_FUNCTIONS_H
// Prototypes for executing builtin_history function.	#ifndef FISH_BUILTIN_HISTORY_H
// Prototypes for functions for executing builtin_jobs functions.	#ifndef FISH_BUILTIN_JOBS_H
// Prototypes for executing builtin_math function.	#ifndef FISH_BUILTIN_MATH_H
// Prototypes for functions for executing builtin_printf functions.	#ifndef FISH_BUILTIN_PRINTF_H
// Prototypes for executing builtin_pwd function.	#ifndef FISH_BUILTIN_PWD_H
// Prototypes for executing builtin_random function.	#ifndef FISH_BUILTIN_RANDOM_H
// Prototypes for executing builtin_read function.	#ifndef FISH_BUILTIN_READ_H
// Prototypes for executing builtin_realpath function.	#ifndef FISH_BUILTIN_REALPATH_H
// Prototypes for executing builtin_return function.	#ifndef FISH_BUILTIN_RETURN_H
// Prototypes for functions for executing builtin_set functions.	#ifndef FISH_BUILTIN_SET_H
// Prototypes for functions for executing builtin_set_color functions.	#ifndef FISH_BUILTIN_SET_COLOR_H
// Prototypes for executing builtin_source function.	#ifndef FISH_BUILTIN_SOURCE_H
// Prototypes for executing builtin_status function.	#ifndef FISH_BUILTIN_STATUS_H
// Prototypes for functions for executing builtin_string functions.	#ifndef FISH_BUILTIN_STRING_H
// Prototypes for functions for executing builtin_test functions.	#ifndef FISH_BUILTIN_TEST_H
// Prototypes for functions for executing builtin_ulimit functions.	#ifndef FISH_BUILTIN_ULIMIT_H
// Prototypes for executing builtin_wait function.	#ifndef FISH_BUILTIN_WAIT_H
// Observes that fish_complete_path has changed.	declaration of complete_invalidate_path
/// Returns a list of wrap targets for a given command.	declaration of complete_get_wrap_targets
"/// Support for ""wrap targets."" A wrap target is a command that completes like another command."	declaration of complete_remove_wrapper
"/// Support for ""wrap targets."" A wrap target is a command that completes like another command."	declaration of complete_add_wrapper
/// \param flags completion flags	declaration of append_completion
/// Tests if the specified argument is valid for the specified option and command.	declaration of complete_is_valid_argument
/// Tests if the specified option is defined for the specified command.	declaration of complete_is_valid_option
/// Return a list of all current completions.	declaration of complete_print
/// \return all completions of the command cmd.	declaration of operation_context_t
/// \return all completions of the command cmd.	declaration of operation_context_t
/// Removes all completions for a given command.	declaration of complete_remove_all
/// Remove a previously defined completion.	declaration of complete_remove
/// \param flags A set of completion flags	declaration of complete_add
/// order.	declaration of completions_sort_and_prioritize
// --foo	option_type_double_long
// -foo	option_type_single_long
// -x	option_type_short
// no option	option_type_args_only
// indicates that we don't require a prefix match	fuzzy_match
// indicates that we want descriptions	descriptions
// indicates the completion is for an autosuggestion	autosuggestion
// If this completion replaces the entire token, prepend a prefix. Otherwise do nothing.	declaration of prepend_token_prefix
// example, foo10 is naturally greater than foo2 (but alphabetically less than it).	declaration of is_naturally_less_than
// noexcepts are required for push_back to use the move ctor.	declaration of operator=
// noexcepts are required for push_back to use the move ctor.	declaration of completion_t
// Construction.	declaration of completion_t
/// signal that this completion is case insensitive.	definition of flags
/// The type of fuzzy match.	definition of match
/// The description for this completion.	definition of description
/// The completion string.	definition of completion
// Destructor. Not inlining it saves code size.	declaration of ~completion_t
// No public default constructor.	declaration of completion_t
/// Helper to return a description_func_t for a constant string.	declaration of const_desc
/// std::function which accepts a completion string and returns its description.	declaration of description_func_t
/// std::function which accepts a completion string and returns its description.	declaration of description_func_t
/// This completion looks to have the same string as an existing argument.	COMPLETE_DUPLICATES_ARGUMENT
/// Do not sort supplied completions	COMPLETE_DONT_SORT
/// If you do escape, don't escape tildes.	COMPLETE_DONT_ESCAPE_TILDES
/// This completion should be inserted as-is, without escaping.	COMPLETE_DONT_ESCAPE
/// character of the completion.	COMPLETE_AUTO_SPACE
/// This is not the suffix of a token, but replaces it entirely.	COMPLETE_REPLACES_TOKEN
/// a space).	COMPLETE_NO_SPACE
/// Character that separates the completion and description on programmable completions.	#define PROG_COMPLETE_SEP L'\t'
/// If set, require a parameter after completion.	definition of requires_param
/// If set, skip file completions.	definition of no_files
/// performing tab-completion.	#ifndef FISH_COMPLETE_H
/// \param in the string to add to the interned pool	declaration of intern_static
/// \param in the string to return an interned copy of.	declaration of intern
// Library for pooling common strings.	#ifndef FISH_INTERN_H
/// is the offset of the offending dollar sign within the token.	declaration of parse_util_expand_variable_error
/// operator. This does NOT currently detect unterminated quotes.	declaration of parse_util_detect_errors_in_argument
/// error, or none if no error occurred.	declaration of parse_util_detect_errors_in_argument_list
/// The top of the ast is assumed to be a job list.	declaration of parse_util_detect_errors
/// error. If out_pstree is not NULL, the resulting tree is returned by reference.	declaration of parse_util_detect_errors
/// size as the string.	declaration of parse_util_compute_indents
/// thus escaping should be with backslashes). Optionally do not escape tildes.	declaration of parse_util_escape_string_with_quote
/// \param out_type If not NULL, get_param will store the token type.	declaration of parse_util_get_parameter_info
/// Checks if the specified string is a help option.	declaration of parse_util_argument_is_help
/// transformation.	declaration of parse_util_unescape_wildcards
/// Return the total offset of the buffer for the cursor position nearest to the specified poition.	declaration of parse_util_get_offset
/// Get the offset of the first character on the specified line.	declaration of parse_util_get_offset_from_line
/// Calculate the line number of the specified cursor position.	declaration of parse_util_get_line_from_offset
/// Get the linenumber at the specified character offset.	declaration of parse_util_lineno
/// \param prev_end the end of the token before the current token	declaration of parse_util_token_extent
/// \param b the end of the searched string	declaration of parse_util_job_extent
/// \param tokens the tokens in the process	declaration of parse_util_process_extent
/// \param b the end of the searched string	declaration of parse_util_cmdsubst_extent
/// \return -1 on syntax error, 0 if no subshells exist and 1 on success	declaration of parse_util_locate_cmdsubst_range
/// Same as parse_util_locate_cmdsubst, but handles square brackets [ ].	declaration of parse_util_locate_slice
/// \return -1 on syntax error, 0 if no subshells exist and 1 on success	declaration of parse_util_locate_cmdsubst
// Various mostly unrelated utility functions related to parsing, loading and evaluating fish code.	#ifndef FISH_PARSE_UTIL_H
/// Returns the names of all named colors.	declaration of named_color_names
/// Compare two colors for inequality.	definition of operator!=
/// Compare two colors for equality.	definition of operator==
/// Set whether the color is reverse.	definition of set_reverse
/// Returns whether the color is reverse.	definition of is_reverse
/// Set whether the color is dim.	definition of set_dim
/// Returns whether the color is dim.	definition of is_dim
/// Set whether the color is italics.	definition of set_italics
/// Returns whether the color is italics.	definition of is_italics
/// Set whether the color is underlined.	definition of set_underline
/// Returns whether the color is underlined.	definition of is_underline
/// Set whether the color is bold.	definition of set_bold
/// Returns whether the color is bold.	definition of is_bold
/// Returns the 24 bit color for the given color. Requires that the color be RGB.	declaration of to_color24
/// Returns the term256 index for the given color. Requires that the color be RGB.	declaration of to_term256_index
/// Returns the name index for the given color. Requires that the color be named or RGB.	declaration of to_name_index
/// Returns a description of the color.	declaration of description
/// Returns whether the color is special, that is, not rgb or named.	definition of is_special
/// Returns whether the color is specified via RGB components.	definition of is_rgb
"/// Returns whether the color is a named color (like ""magenta"")."	definition of is_named
/// Returns whether the color is the none special color.	definition of is_none
/// Returns whether the color is the reset special color.	definition of is_reset
/// Returns whether the color is the normal special color.	definition of is_normal
/// Returns the none special color.	declaration of none
/// Returns the normal special color.	declaration of normal
/// Returns the reset special color.	declaration of reset
/// Returns black.	declaration of black
/// Returns white.	declaration of white
/// Parse a color from a string.	declaration of rgb_color_t
/// Parse a color from a string.	declaration of rgb_color_t
/// Default constructor of type none.	definition of rgb_color_t
/// Private constructor.	declaration of rgb_color_t
/// Parsing entry point.	declaration of parse
"/// Try parsing an explicit color name like ""magenta""."	declaration of try_parse_named
"/// Try parsing an rgb color like ""#F0A030""."	declaration of try_parse_rgb
"/// Try parsing a special color name like ""normal""."	declaration of try_parse_special
// 0-10	definition of name_idx
// Flags	definition of (unnamed enum)
// Types	definition of (unnamed enum)
/// static_assert	definition of rgb_color_t
// 24-bit color.	definition of color24_t
// Color class.	#ifndef FISH_COLOR_H
"// Normalize directories before resolving, as ""cd""."	PATH_FOR_CD
// Expand any leading tilde in the path.	PATH_EXPAND_TILDE
// The path must be to a directory.	PATH_REQUIRE_DIR
// This is used only internally to this file, and is exposed only for testing.	definition of (unnamed enum)
/// reference whether the suggestion is valid or not.	declaration of autosuggest_validate_from_history
/// \return an RGB color for a given highlight spec.	declaration of highlight_get_color
/// \param ctx The cancellation and other environment for this operation. This is unused.	declaration of highlight_universal
/// result, invalid commands may not be detected, etc.	declaration of highlight_shell_no_io
/// \param ctx The variables and cancellation check for this operation.	declaration of highlight_shell
/* implicit */	definition of highlight_spec_t
/// Simply value type describing how a character should be highlighted..	definition of highlight_spec_t
// NOTE: pager.cpp relies on these being in this order.	pager_progress
// autosuggestion	autosuggestion
// redirection	redirection
// quoted string	quote
// escape sequences	escape
// operator	operat
// search match	search_match
// matching parenthesis, etc.	match
// comment	comment
// command parameter (argument)	param
// process separator	statement_terminator
// command	command
// error	error
// normal text	normal
/// Describes the role of a span of text.	definition of highlight_role_t
// Prototypes for functions for syntax highlighting.	#ifndef FISH_HIGHLIGHT_H
/// been executed between invocations of code.	declaration of reader_run_count
/// Apply a completion string. Exposed for testing only.	declaration of completion_apply_to_command_line
/// \return none if no abbreviations were expanded, otherwise the new command line.	declaration of reader_expand_abbreviation_in_command
/// Exposed for testing purposes only.	declaration of combine_command_and_autosuggestion
/// Test whether the interactive reader has visible pager contents.	declaration of reader_has_pager_contents
/// Test whether the interactive reader is in search mode.	declaration of reader_is_in_search_mode
/// reader_set_test_function().	declaration of reader_shell_test
/// This function returns true if fish is exiting by force, i.e. because stdin died.	declaration of reader_exit_forced
/// The readers interrupt signal handler. Cancels all currently running blocks.	declaration of reader_handle_sigint
/// Returns true if the shell is exiting, 0 otherwise.	declaration of shell_is_exiting
/// Sets whether the reader should exit on ^C.	declaration of reader_set_exit_on_interrupt
/// Sets whether abbreviation expansion is performed.	declaration of reader_set_expand_abbreviations
/// Sets whether autosuggesting is allowed.	declaration of reader_set_allow_autosuggesting
/// Specify string of shell commands to be run in order to generate the right prompt.	declaration of reader_set_right_prompt
/// Specify string of shell commands to be run in order to generate the prompt.	declaration of reader_set_left_prompt
/// before returning.	declaration of reader_set_test_function
/// - An array_list_t used for storing error messages	declaration of reader_set_highlight_function
/// Function type for testing if a string is valid for the reader to return.	declaration of test_function_t
/// Function type for testing if a string is valid for the reader to return.	declaration of test_function_t
/// The type of a highlight function.	declaration of highlight_function_t
/// The type of a highlight function.	declaration of highlight_function_t
/// The type of a highlight function.	declaration of highlight_function_t
/// The type of a highlight function.	declaration of highlight_function_t
/// Mark whether tab completion is enabled.	declaration of reader_set_complete_ok
/// Return to previous reader environment.	declaration of reader_pop
/// Push a new reader environment.	declaration of reader_push
/// commandline.	declaration of reader_readline
/// was set. If the current reader is interruptible, call \c reader_exit().	declaration of reader_reading_interrupted
/// invocation but before the \c is_interactive_read flag was cleared.	declaration of reader_reset_interrupted
/// was set. In practice this will return 0 or SIGINT.	declaration of reader_test_and_clear_interrupted
/// selection, true otherwise.	declaration of reader_get_selection
/// return (size_t)-1.	declaration of reader_get_cursor_pos
/// is placed on the last character.	declaration of reader_set_buffer
/// Returns the current reader's history.	declaration of reader_get_history
/// is uninitialized.	declaration of reader_get_buffer
/// notification, set the title, etc.	declaration of reader_run_command
/// Enqueue an event to the back of the reader's input queue.	declaration of char_event_t
/// Enqueue an event to the back of the reader's input queue.	declaration of char_event_t
/// Repaint immediately if needed.	declaration of reader_repaint_if_needed
/// Call this function to tell the reader that some color has changed.	declaration of reader_react_to_color_change
/// possible.	declaration of reader_repaint_needed
/// \param reset_cursor_position If set, issue a \r so the line driver knows where we are	declaration of reader_write_title
/// Change the history file for the current command reading context.	declaration of reader_change_history
/// Restore the term mode at startup.	declaration of restore_term_mode
/// Initialize the reader.	declaration of reader_init
/// Check that the reader is in a sane state.	declaration of reader_sanity_check
/// Mark that the reader should forcibly exit. This may be invoked from a signal handler.	declaration of reader_force_exit
/// Mark that we encountered SIGHUP and must (soon) exit. This is invoked from a signal handler.	declaration of reader_sighup
/// Tell the shell whether it should exit after the currently running command finishes.	declaration of reader_set_end_loop
/// The fd is not closed.	declaration of reader_read
/// Redo the most recent undo. Returns true on success.	declaration of redo
/// Undo the most recent edit that was not yet undone. Returns true on success.	declaration of undo
/// Inserts a substring of str given by start, len at the cursor position.	declaration of insert_string
/// Replace the text of length @length at @offset by @replacement.	declaration of replace_substring
/// Erase @length characters starting at @offset.	declaration of erase_substring
/// text should pass through this function. You can use one of the wrappers below.	declaration of push_edit
// Gets the length of the text.	definition of size
/// Set the text directly without maintaining undo invariants. Use with caution.	definition of set_text_bypassing_undo_history
/// The current position of the cursor in the command line.	definition of position_
/// The command line.	definition of text_
/// Helper class for storing a command line.	definition of editable_line_t
/// Empty the history.	declaration of clear
/// last one.	definition of may_coalesce
/// If every single edit was undone, edits_applied is 0.	definition of edits_applied
/// The stack of edits that can be undone or redone atomically.	definition of edits
/// The history of all edits to some command line.	definition of undo_history_t
/// Currently exposed for testing only.	declaration of apply_edit
/// Used for testing.	declaration of operator==
/// The strings that are removed and added by this edit, respectively.	definition of old
/// The span of text that is replaced by this edit.	definition of offset
/// When undoing the edit we use this to restore the previous cursor position.	definition of cursor_position_before_edit
/// An edit action that can be undone.	definition of edit_t
// features.	#ifndef FISH_READER_H
/* FISH_WGETOPT_H */	#endif
/// Specifies that a switch accepts an optional argument.	#define optional_argument 2
/// Specifies that a switch requires an argument.	#define required_argument 1
/// Specifies that a switch does not accept an argument.	#define no_argument 0
/// return-value of the function call.	definition of val
/// If non-null, the flag whose value should be set if this switch is encountered.	definition of flag
/// code that assumes it is an int.	definition of has_arg
/// Long name for switch.	definition of name
/// options that have a zero `flag' field, `getopt' returns the contents of the `val' field.	definition of woption
// is the index in ARGV of the first of them; `last_nonopt' is the index after the last of them.	definition of first_nonopt
// `woptind' != ARGC.	definition of (unnamed enum)
// to avoid linking in the system's own getopt implementation.	definition of woptopt
// Callers store zero here to inhibit the error message for unrecognized options.	definition of wopterr
// XXX 1003.2 says this must be 1 before any call.	definition of woptind
// ARGV-element.	definition of nextchar
// non-option ARGV-element is returned here.	definition of woptarg
"/* Declarations for getopt.
   Copyright (C) 1989, 90, 91, 92, 93, 94 Free Software Foundation, Inc.

This file is part of the GNU C Library.  Its master source is NOT part of
the C library, however.  The master source lives in /gd/gnu/lib.

The GNU C Library is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The GNU C Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with the GNU C Library; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 675 Mass Ave,
Cambridge, MA 02139, USA.  */"	#ifndef FISH_WGETOPT_H
/// Return a one-line description of the specified builtin.	definition of builtin_get_desc
/// Insert all builtin names into list.	definition of builtin_get_names
/// Returns a list of all builtin names.	definition of builtin_get_names
/// Execute a builtin command	definition of builtin_run
/// Is the command a keyword we need to special-case the handling of `-h` and `--help`.	definition of help_builtins
/// Is there a builtin command with the given name?	definition of builtin_exists
/// Initialize builtin data.	definition of builtin_init
///	definition of builtin_lookup
// NOTE: These must be kept in sorted order!	definition of builtin_datas
// or clearer way to do this but this works.	declaration
// If we're not interactive then we can't enter the debugger. So treat this command as a no-op.	if (...) ... 
/// Implementation of the builtin breakpoint command, used to launch the interactive debugger.	definition of builtin_breakpoint
// Mark the status in the libdata.	ExprStmt
// Paranoia: ensure we have a real loop.	declaration
/// control.	definition of builtin_break_continue
// That means if you call `something | count a b c`, you'll get the count of something _plus 3_.	ExprStmt
// Ignore all errors for now.	if (...) ... 
// Count the newlines coming in via stdin like `wc -l`.	if (...) ... 
/// Implementation of the builtin count command, used to count the number of arguments sent to it.	definition of builtin_count
// Since this is just for counting, it can be massive.	#define COUNT_CHUNK_SIZE (512 * 256)
// just print help.	if (...) ... 
/// prints the help message. Useful for commands that live in the parser.	definition of builtin_generic
// Don't print two empty lines if we don't have a stacktrace.	if (...) ... 
/// Print the backtrace and call for help that we use at the end of error messages.	definition of builtin_print_error_trailer
/// Perform error reporting for encounter with missing argument.	definition of builtin_missing_argument
/// Perform error reporting for encounter with unknown option.	definition of builtin_unknown_option
// If it's an error, redirect the output of __fish_print_help to stderr	ExprStmt
// This won't ever work if no_exec is set.	if (...) ... 
/// Process and print help for the specified builtin or function.	definition of builtin_print_help
//!OCLINT(too few branches)	{ ... }
/// to stderr. Used by the builtin commands.	definition of builtin_wperror
/// Counts the number of arguments in the specified null-terminated array	definition of builtin_count_args
// so our help doesn't apply.	ExprStmt
/// function). It doesn't need to write anything to stdout that then needs to be eval'd.	definition of builtin_argparse
// escape_string(long_flag, 0, STRING_STYLE_VAR).	declaration
/// Put the result of parsing the supplied args into the caller environment as local vars.	definition of set_argparse_result_vars
// This ensures the memory for the data structure is freed when we leave this scope.	declaration
"// long_options should have a ""null terminator"""	ExprStmt
// arguments provided to the `argparse` command.	definition of argparse_parse_args
// tango`.	ExprStmt
// Work around weirdness with wgetopt, which crashes if we `continue` here.	if (...) ... 
// or just ignoring the error (e.g. in completions).	ExprStmt
// It's not a recognized flag. See if it's an implicit int flag.	declaration
/* print_hints */	return ...
// the mandatory arg is missing.	ExprStmt
// short or long flag was given.	ExprStmt
// See if this option passes the validation checks.	declaration
// Store this value under the implicit int option.	definition of validate_and_store_implicit_int
// We succeed if this argument can be parsed as an integer.	ExprStmt
// There is no implicit integer option.	return ...
/// \return whether the option 'opt' is an implicit integer option.	definition of is_implicit_int
// Obviously if there is no arg validation command we assume the arg is okay.	if (...) ... 
// If any error happens, the backtrace will show which argparse it was.	declaration
// The user didn't specify any option specs.	ExprStmt
// definitions we'll parse these strings into a more useful data structure.	ExprStmt
// Record our option under its short flag.	ExprStmt
// Record our long flag if we have one.	if (...) ... 
// Collect any long flag name.	if (...) ... 
// Try parsing stuff after the short flag.	if (...) ... 
/// This parses an option spec string into a struct option_spec.	definition of parse_option_spec
// behavior modifier chars.	if (...) ... 
// the struct is initialized assuming short_flag_valid should be true	ExprStmt
// mandatory arg and can appear only once	ExprStmt
// the struct is initialized assuming short_flag_valid should be true	ExprStmt
/// Parse the text following the short flag letter.	definition of parse_option_spec_sep
// Move cursor to the end so we don't expect a long flag.	while (...) ...
// mandatory arg and can appear only once	ExprStmt
// mandatory arg and can appear more than once	ExprStmt
// optional arg	ExprStmt
// Store the set of exclusive flags for use when parsing the supplied set of arguments.	ExprStmt
// It's a long flag we store as its short flag equivalent.	ExprStmt
// It's a short flag.	ExprStmt
// information to parse the values associated with any `--exclusive` flags.	definition of parse_exclusive_args
// testing easier.	if (...) ... 
// Ignore this flag in the list of mutually exclusive flags.	if (...) ... 
// other mutually exclusive options have been seen.	for(...:...) ...
// a short name we only need to check those.	definition of check_for_mutually_exclusive_flags
// but still print errors for all of them.	for(...;...;...) ...
// The user specified at least one job to be backgrounded.	declaration
// No jobs were specified so use the most recent (i.e., last) job.	declaration
/// Builtin for putting a job in the background.	definition of builtin_bg
/// Helper function for builtin_bg().	definition of send_to_bg
// _GLIBCXX_CSTDDEF	#endif
"// extern ""C++"""	#endif
// C++17	#endif
// namespace std	#endif
/// std::byte	#ifdef _GLIBCXX_USE_WCHAR_T
// C++11	#endif
//	#ifndef _GLIBCXX_CSTDDEF
/* _STL_SET_H */	#endif
//namespace std	#endif
// C++17	#endif
// Allow std::set access to internals of compatible sets.	#endif
/// See std::set::swap().	definition of swap
///  Returns !(x < y)	definition of operator>=
///  Returns !(y < x)	definition of operator<=
///  Returns y < x.	definition of operator>
///  Returns !(x == y).	definition of operator!=
"/**
   *  @brief  Set ordering relation.
   *  @param  __x  A %set.
   *  @param  __y  A %set of the same type as @a x.
   *  @return  True iff @a __x is lexicographically less than @a __y.
   *
   *  This is a total ordering relation.  It is linear in the size of the
   *  sets.  The elements must be comparable with @c <.
   *
   *  See std::lexicographical_compare() for how the determination is made.
  */"	definition of operator<
"/**
   *  @brief  Set equality comparison.
   *  @param  __x  A %set.
   *  @param  __y  A %set of the same type as @a x.
   *  @return  True iff the size and elements of the sets are equal.
   *
   *  This is an equivalence relation.  It is linear in the size of the sets.
   *  Sets are considered equivalent if their sizes are equal, and if
   *  corresponding elements compare equal.
  */"	definition of operator==
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return  Pair of iterators that possibly points to the subsequence
       *           matching given key.
       *
       *  This function is equivalent to
       *  @code
       *    std::make_pair(c.lower_bound(val),
       *                   c.upper_bound(val))
       *  @endcode
       *  (but is faster than making the calls separately).
       *
       *  This function probably only makes sense for multisets.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the end of a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return Iterator pointing to the first element
       *          greater than key, or end().
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the beginning of a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return  Iterator pointing to first element equal to or greater
       *           than key, or end().
       *
       *  This function returns the first element of a subsequence of elements
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Tries to locate an element in a %set.
       *  @param  __x  Element to be located.
       *  @return  Iterator pointing to sought-after element, or end() if not
       *           found.
       *
       *  This function takes a key and tries to locate the element with which
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */"	#if __cplusplus > 201103L
//@}	#endif
//@}	#if __cplusplus > 201703L
"/**
       *  @brief  Finds the number of elements.
       *  @param  __x  Element to located.
       *  @return  Number of elements with specified key.
       *
       *  This function only makes sense for multisets; for set the result will
       *  either be 0 (not present) or 1 (present).
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Erases a [first,last) range of elements from a %set.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                 erased.
       *  @param __last Iterator pointing to the end of the range to
       *  be erased.
       *
       *  This function erases a sequence of elements from a %set.
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */"	#endif
"/**
       *  @brief Erases a [__first,__last) range of elements from a %set.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                 erased.

       *  @param __last Iterator pointing to the end of the range to
       *  be erased.
       *  @return The iterator @a __last.
       *
       *  This function erases a sequence of elements from a %set.
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */"	#else
"/**
       *  @brief Erases elements according to the provided key.
       *  @param  __x  Key of element to be erased.
       *  @return  The number of elements erased.
       *
       *  This function erases all the elements located by the given key from
       *  a %set.
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Erases an element from a %set.
       *  @param  position  An iterator pointing to the element to be erased.
       *
       *  This function erases an element, pointed to by the given iterator,
       *  from a %set.  Note that this function only erases the element, and
       *  that if the element is itself a pointer, the pointed-to memory is not
       *  touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */"	#endif
"/**
       *  @brief Erases an element from a %set.
       *  @param  __position  An iterator pointing to the element to be erased.
       *  @return An iterator pointing to the element immediately following
       *          @a __position prior to the element being erased. If no such
       *          element exists, end() is returned.
       *
       *  This function erases an element, pointed to by the given iterator,
       *  from a %set.  Note that this function only erases the element, and
       *  that if the element is itself a pointer, the pointed-to memory is not
       *  touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */"	#else
// C++17	#endif
/// Re-insert an extracted node.	#endif
"/**
       *  @brief Attempts to insert a list of elements into the %set.
       *  @param  __l  A std::initializer_list<value_type> of elements
       *               to be inserted.
       *
       *  Complexity similar to that of the range constructor.
       */"	#endif
"/**
       *  @brief A template function that attempts to insert a range
       *  of elements.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                   inserted.
       *  @param  __last  Iterator pointing to the end of the range.
       *
       *  Complexity similar to that of the range constructor.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Attempts to insert an element into the %set.
       *  @param  __position  An iterator that serves as a hint as to where the
       *                    element should be inserted.
       *  @param  __x  Element to be inserted.
       *  @return An iterator that points to the element with key of
       *           @a __x (may or may not be the element passed in).
       *
       *  This function is not concerned about whether the insertion took place,
       *  and thus does not return a boolean like the single-argument insert()
       *  does.  Note that the first parameter is only a hint and can
       *  potentially improve the performance of the insertion process.  A bad
       *  hint would cause no gains in efficiency.
       *
       *  For more on @a hinting, see:
       *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       *
       *  Insertion requires logarithmic time (if the hint is not taken).
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Attempts to insert an element into the %set.
       *  @param  __x  Element to be inserted.
       *  @return  A pair, of which the first element is an iterator that points
       *           to the possibly inserted element, and the second is a bool
       *           that is true if the element was actually inserted.
       *
       *  This function attempts to insert an element into the %set.  A %set
       *  relies on unique keys and thus an element is only inserted if it is
       *  not already present in the %set.
       *
       *  Insertion requires logarithmic time.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Attempts to insert an element into the %set.
       *  @param  __pos  An iterator that serves as a hint as to where the
       *                element should be inserted.
       *  @param  __args  Arguments used to generate the element to be
       *                 inserted.
       *  @return An iterator that points to the element with key equivalent to
       *          the one generated from @a __args (may or may not be the
       *          element itself).
       *
       *  This function is not concerned about whether the insertion took place,
       *  and thus does not return a boolean like the single-argument emplace()
       *  does.  Note that the first parameter is only a hint and can
       *  potentially improve the performance of the insertion process.  A bad
       *  hint would cause no gains in efficiency.
       *
       *  For more on @a hinting, see:
       *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       *
       *  Insertion requires logarithmic time (if the hint is not taken).
       */"	#endif
// insert/erase	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reverse iterator that points to the
       *  last pair in the %set.  Iteration is done in descending order
       *  according to the keys.
       */"	#endif
"/**
       *  Returns a read-only (constant) reverse iterator that points to the
       *  last pair in the %set.  Iteration is done in descending order
       *  according to the keys.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  %Set list assignment operator.
       *  @param  __l  An initializer_list.
       *
       *  This function fills a %set with copies of the elements in the
       *  initializer list @a __l.
       *
       *  Note that the assignment completely changes the %set and
       *  that the resulting %set's size is the same as the number
       *  of elements assigned.
       */"	#endif
"/**
       *  @brief  %Set assignment operator.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus < 201103L
"/**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way. Managing the pointer is the user's responsibility.
       */"	#endif
"/**
       *  @brief  %Set copy constructor.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus < 201103L
"/**
       *  @brief  Default constructor creates no elements.
       */"	#if __cplusplus < 201103L
//@}	#if __cplusplus > 201402L
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief A standard container made up of unique keys, which can be
   *  retrieved in logarithmic time.
   *
   *  @ingroup associative_containers
   *
   *  @tparam _Key  Type of key objects.
   *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.
   *  @tparam _Alloc  Allocator type, defaults to allocator<_Key>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, a
   *  <a href=""tables.html#66"">reversible container</a>, and an
   *  <a href=""tables.html#69"">associative container</a> (using unique keys).
   *
   *  Sets support bidirectional iterators.
   *
   *  The private tree data is declared exactly the same way for set and
   *  multiset; the distinction is made entirely in how the tree functions are
   *  called (*_unique versus *_equal, same as the standard).
  */"	definition of set<_Key, _Compare, _Alloc>
"/** @file bits/stl_set.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{set}
 */"	#ifndef _STL_SET_H
/* _STL_MULTISET_H */	#endif
// namespace std	#endif
// C++17	#endif
// Allow std::multiset access to internals of compatible sets.	#endif
/// See std::multiset::swap().	definition of swap
///  Returns !(x < y)	definition of operator>=
///  Returns !(y < x)	definition of operator<=
///  Returns y < x.	definition of operator>
///  Returns !(x == y).	definition of operator!=
"/**
   *  @brief  Multiset ordering relation.
   *  @param  __x  A %multiset.
   *  @param  __y  A %multiset of the same type as @a __x.
   *  @return  True iff @a __x is lexicographically less than @a __y.
   *
   *  This is a total ordering relation.  It is linear in the size of the
   *  sets.  The elements must be comparable with @c <.
   *
   *  See std::lexicographical_compare() for how the determination is made.
  */"	definition of operator<
"/**
   *  @brief  Multiset equality comparison.
   *  @param  __x  A %multiset.
   *  @param  __y  A %multiset of the same type as @a __x.
   *  @return  True iff the size and elements of the multisets are equal.
   *
   *  This is an equivalence relation.  It is linear in the size of the
   *  multisets.
   *  Multisets are considered equivalent if their sizes are equal, and if
   *  corresponding elements compare equal.
  */"	definition of operator==
"/**
       *  @brief Finds a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return  Pair of iterators that possibly points to the subsequence
       *           matching given key.
       *
       *  This function is equivalent to
       *  @code
       *    std::make_pair(c.lower_bound(val),
       *                   c.upper_bound(val))
       *  @endcode
       *  (but is faster than making the calls separately).
       *
       *  This function probably only makes sense for multisets.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the end of a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return Iterator pointing to the first element
       *          greater than key, or end().
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Finds the beginning of a subsequence matching given key.
       *  @param  __x  Key to be located.
       *  @return  Iterator pointing to first element equal to or greater
       *           than key, or end().
       *
       *  This function returns the first element of a subsequence of elements
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Tries to locate an element in a %set.
       *  @param  __x  Element to be located.
       *  @return  Iterator pointing to sought-after element, or end() if not
       *           found.
       *
       *  This function takes a key and tries to locate the element with which
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */"	#if __cplusplus > 201103L
//@}	#endif
//@}	#if __cplusplus > 201703L
"/**
       *  @brief Finds the number of elements with given key.
       *  @param  __x  Key of elements to be located.
       *  @return Number of elements with specified key.
       */"	#if __cplusplus > 201103L
"/**
       *  @brief Erases a [first,last) range of elements from a %multiset.
       *  @param  first  Iterator pointing to the start of the range to be
       *                 erased.
       *  @param  last  Iterator pointing to the end of the range to be erased.
       *
       *  This function erases a sequence of elements from a %multiset.
       *  Note that this function only erases the elements, and that if
       *  the elements themselves are pointers, the pointed-to memory is not
       *  touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */"	#endif
"/**
       *  @brief Erases a [first,last) range of elements from a %multiset.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                   erased.
       *  @param __last Iterator pointing to the end of the range to
       *                be erased.
       *  @return The iterator @a last.
       *
       *  This function erases a sequence of elements from a %multiset.
       *  Note that this function only erases the elements, and that if
       *  the elements themselves are pointers, the pointed-to memory is not
       *  touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */"	#else
"/**
       *  @brief Erases elements according to the provided key.
       *  @param  __x  Key of element to be erased.
       *  @return  The number of elements erased.
       *
       *  This function erases all elements located by the given key from a
       *  %multiset.
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Erases an element from a %multiset.
       *  @param  __position  An iterator pointing to the element to be erased.
       *
       *  This function erases an element, pointed to by the given iterator,
       *  from a %multiset.  Note that this function only erases the element,
       *  and that if the element is itself a pointer, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */"	#endif
"/**
       *  @brief Erases an element from a %multiset.
       *  @param  __position  An iterator pointing to the element to be erased.
       *  @return An iterator pointing to the element immediately following
       *          @a position prior to the element being erased. If no such
       *          element exists, end() is returned.
       *
       *  This function erases an element, pointed to by the given iterator,
       *  from a %multiset.  Note that this function only erases the element,
       *  and that if the element is itself a pointer, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */"	#else
// C++17	#endif
/// Re-insert an extracted node.	#endif
"/**
       *  @brief Attempts to insert a list of elements into the %multiset.
       *  @param  __l  A std::initializer_list<value_type> of elements
       *               to be inserted.
       *
       *  Complexity similar to that of the range constructor.
       */"	#endif
"/**
       *  @brief A template function that tries to insert a range of elements.
       *  @param  __first  Iterator pointing to the start of the range to be
       *                   inserted.
       *  @param  __last  Iterator pointing to the end of the range.
       *
       *  Complexity similar to that of the range constructor.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Inserts an element into the %multiset.
       *  @param  __position  An iterator that serves as a hint as to where the
       *                    element should be inserted.
       *  @param  __x  Element to be inserted.
       *  @return An iterator that points to the inserted element.
       *
       *  This function inserts an element into the %multiset.  Contrary
       *  to a std::set the %multiset does not rely on unique keys and thus
       *  multiple copies of the same element can be inserted.
       *
       *  Note that the first parameter is only a hint and can potentially
       *  improve the performance of the insertion process.  A bad hint would
       *  cause no gains in efficiency.
       *
       *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       *  for more on @a hinting.
       *
       *  Insertion requires logarithmic time (if the hint is not taken).
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Inserts an element into the %multiset.
       *  @param  __x  Element to be inserted.
       *  @return An iterator that points to the inserted element.
       *
       *  This function inserts an element into the %multiset.  Contrary
       *  to a std::set the %multiset does not rely on unique keys and thus
       *  multiple copies of the same element can be inserted.
       *
       *  Insertion requires logarithmic time.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief Builds and inserts an element into the %multiset.
       *  @param  __pos  An iterator that serves as a hint as to where the
       *                element should be inserted.
       *  @param  __args  Arguments used to generate the element instance to be
       *                 inserted.
       *  @return An iterator that points to the inserted element.
       *
       *  This function inserts an element into the %multiset.  Contrary
       *  to a std::set the %multiset does not rely on unique keys and thus
       *  multiple copies of the same element can be inserted.
       *
       *  Note that the first parameter is only a hint and can potentially
       *  improve the performance of the insertion process.  A bad hint would
       *  cause no gains in efficiency.
       *
       *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       *  for more on @a hinting.
       *
       *  Insertion requires logarithmic time (if the hint is not taken).
       */"	#endif
// insert/erase	#if __cplusplus >= 201103L
"/**
       *  Returns a read-only (constant) reverse iterator that points to the
       *  last element in the %multiset.  Iteration is done in descending order
       *  according to the keys.
       */"	#endif
"/**
       *  Returns a read-only (constant) reverse iterator that points to the
       *  last element in the %multiset.  Iteration is done in descending order
       *  according to the keys.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  %Multiset list assignment operator.
       *  @param  __l  An initializer_list.
       *
       *  This function fills a %multiset with copies of the elements in the
       *  initializer list @a __l.
       *
       *  Note that the assignment completely changes the %multiset and
       *  that the resulting %multiset's size is the same as the number
       *  of elements assigned.
       */"	#endif
"/**
       *  @brief  %Multiset assignment operator.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus < 201103L
"/**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way. Managing the pointer is the user's responsibility.
       */"	#endif
"/**
       *  @brief  %Multiset copy constructor.
       *
       *  Whether the allocator is copied depends on the allocator traits.
       */"	#if __cplusplus < 201103L
"/**
       *  @brief  Default constructor creates no elements.
       */"	#if __cplusplus < 201103L
// but this allows modification of keys.	#if __cplusplus > 201402L
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief A standard container made up of elements, which can be retrieved
   *  in logarithmic time.
   *
   *  @ingroup associative_containers
   *
   *
   *  @tparam _Key  Type of key objects.
   *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.
   *  @tparam _Alloc  Allocator type, defaults to allocator<_Key>.
   *
   *  Meets the requirements of a <a href=""tables.html#65"">container</a>, a
   *  <a href=""tables.html#66"">reversible container</a>, and an
   *  <a href=""tables.html#69"">associative container</a> (using equivalent
   *  keys).  For a @c multiset<Key> the key_type and value_type are Key.
   *
   *  Multisets support bidirectional iterators.
   *
   *  The private tree data is declared exactly the same way for set and
   *  multiset; the distinction is made entirely in how the tree functions are
   *  called (*_unique versus *_equal, same as the standard).
  */"	definition of multiset<_Key, _Compare, _Alloc>
"/** @file bits/stl_multiset.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{set}
 */"	#ifndef _STL_MULTISET_H
/* _GLIBCXX_SET */	#endif
// C++20	#endif
// namespace std	#endif
// C++17	#endif
// namespace std	#endif
"/** @file include/set
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_SET
/* user */	if (...) ... 
/* user */	if (...) ... 
// If we get both, we erase both.	if (...) ... 
// Default to user mode	if (...) ... 
/// The bind builtin, used for setting character sequences.	definition of builtin_bind
// - It sorts it, which makes it nicer on the user.	declaration
// List all known modes, even if they are only in preset bindings.	declaration
/// List all current bind modes.	definition of list_modes
// Actually insert!	if (...) ... 
// get_terminfo_sequence already printed the error.	return ...
// First the presets, then the users (because of scrolling).	if (...) ... 
// Inserting both on the other hand makes no sense.	if (...) ... 
// If we get both or neither preset/user, we list both.	if (...) ... 
//!OCLINT(parameter reassignment)	ExprStmt
///	definition of erase
/// Add specified key binding.	definition of add
/// Wraps input_terminfo_get_sequence(), appending the correct error messages as needed.	definition of get_terminfo_sequence
/// Print all the special key binding functions to string buffer used for standard output.	definition of function_names
/// are defined for this terminal are printed.	definition of key_names
/// List all current key bindings.	definition of list
// Returns false only if neither exists.	definition of list_one
// Now show the list of commands.	for(...:...) ...
// No key name, so no -k; we show the escape sequence directly.	declaration
// Note that we show -k here because we have an input key name.	ExprStmt
// Append the name.	declaration
// Append the mode flags if applicable.	if (...) ... 
/// Returns false if no binding with that sequence and mode exists.	definition of list_one
// Set it in function scope	ExprStmt
// If this is the outermost block, then we're global	if (...) ... 
/// The block builtin, used for temporarily blocking events.	definition of builtin_block
/// builtins, printing help, etc.	definition of builtin_builtin
/* Length of data.  */	definition of iov_len
/* Pointer to data.  */	definition of iov_base
/* Structure for scatter/gather I/O.  */	definition of iovec
"/* Define struct iovec.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef __iovec_defined
/* _FALLOC_H_ */	#endif
"/*
 * FALLOC_FL_UNSHARE_RANGE is used to unshare shared blocks within the
 * file size without overwriting any existing data. The purpose of this
 * call is to preemptively reallocate any blocks that are subject to
 * copy-on-write.
 *
 * Different filesystems may implement different limitations on the
 * granularity of the operation. Most will limit operations to filesystem
 * block size boundaries, but this boundary may be larger or smaller
 * depending on the filesystem and/or the configuration of the filesystem
 * or file.
 *
 * This flag can only be used with allocate-mode fallocate, which is
 * to say that it cannot be used with the punch, zero, collapse, or
 * insert range modes.
 */"	#define FALLOC_FL_UNSHARE_RANGE 0x40
"/*
 * FALLOC_FL_INSERT_RANGE is use to insert space within the file size without
 * overwriting any existing data. The contents of the file beyond offset are
 * shifted towards right by len bytes to create a hole.  As such, this
 * operation will increase the size of the file by len bytes.
 *
 * Different filesystems may implement different limitations on the granularity
 * of the operation. Most will limit operations to filesystem block size
 * boundaries, but this boundary may be larger or smaller depending on
 * the filesystem and/or the configuration of the filesystem or file.
 *
 * Attempting to insert space using this flag at OR beyond the end of
 * the file is considered an illegal operation - just use ftruncate(2) or
 * fallocate(2) with mode 0 for such type of operations.
 */"	#define FALLOC_FL_INSERT_RANGE 0x20
"/*
 * FALLOC_FL_ZERO_RANGE is used to convert a range of file to zeros preferably
 * without issuing data IO. Blocks should be preallocated for the regions that
 * span holes in the file, and the entire range is preferable converted to
 * unwritten extents - even though file system may choose to zero out the
 * extent or do whatever which will result in reading zeros from the range
 * while the range remains allocated for the file.
 *
 * This can be also used to preallocate blocks past EOF in the same way as
 * with fallocate. Flag FALLOC_FL_KEEP_SIZE should cause the inode
 * size to remain the same.
 */"	#define FALLOC_FL_ZERO_RANGE 0x10
"/*
 * FALLOC_FL_COLLAPSE_RANGE is used to remove a range of a file
 * without leaving a hole in the file. The contents of the file beyond
 * the range being removed is appended to the start offset of the range
 * being removed (i.e. the hole that was punched is ""collapsed""),
 * resulting in a file layout that looks like the range that was
 * removed never existed. As such collapsing a range of a file changes
 * the size of the file, reducing it by the same length of the range
 * that has been removed by the operation.
 *
 * Different filesystems may implement different limitations on the
 * granularity of the operation. Most will limit operations to
 * filesystem block size boundaries, but this boundary may be larger or
 * smaller depending on the filesystem and/or the configuration of the
 * filesystem or file.
 *
 * Attempting to collapse a range that crosses the end of the file is
 * considered an illegal operation - just use ftruncate(2) if you need
 * to collapse a range that crosses EOF.
 */"	#define FALLOC_FL_COLLAPSE_RANGE 0x08
/* reserved codepoint */	#define FALLOC_FL_NO_HIDE_STALE 0x04
/* de-allocates range */	#define FALLOC_FL_PUNCH_HOLE 0x02
/* default is extend size */	#define FALLOC_FL_KEEP_SIZE 0x01
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef _FALLOC_H_
/* use GNU */	#endif
"/* Open file using the file handle.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of open_by_handle_at
/* Map file name to file handle.  */	declaration of name_to_handle_at
"/* Reserve storage for the data of the file associated with FD.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* In-kernel implementation of tee for pipe buffers.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of tee
"/* Splice two files together.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of splice
"/* Splice address range into a pipe.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vmsplice
"/* Selective file content synch'ing.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of sync_file_range
/* Provide kernel hint to read ahead.  */	declaration of readahead
"/* Test access permitted for
					   effective IDs, not real IDs.  */"	#define AT_EACCESS 0x200
/* Allow empty relative pathname.  */	#define AT_EMPTY_PATH 0x1000
"/* Suppress terminal automount
					   traversal.  */"	#define AT_NO_AUTOMOUNT 0x800
/* Follow symbolic links.  */	#define AT_SYMLINK_FOLLOW 0x400
"/* Remove directory instead of
					   unlinking file.  */"	#define AT_REMOVEDIR 0x200
/* Do not follow symbolic links.  */	#define AT_SYMLINK_NOFOLLOW 0x100
"/* Special value used to indicate
					   the *at functions should use the
					   current working directory. */"	#define AT_FDCWD -100
/* Values for `*at' functions.  */	#ifdef __USE_ATFILE
/* Maximum handle size (for now).  */	#define MAX_HANDLE_SZ 128
/* File identifier.  */	definition of f_handle
/* File handle structure.  */	definition of file_handle
/* Pages passed in are a gift.  */	#define SPLICE_F_GIFT 8
/* Expect more data.  */	#define SPLICE_F_MORE 4
"/* Don't block on the pipe splicing
					   (but we may still block on the fd
					   we splice from/to).  */"	#define SPLICE_F_NONBLOCK 2
/* Move pages instead of copying.  */	#define SPLICE_F_MOVE 1
/* Flags for SPLICE and VMSPLICE.  */	#define SPLICE_F_MOVE 1
"/* Wait upon writeout of all pages in
					     the range after performing the
					     write.  */"	#define SYNC_FILE_RANGE_WAIT_AFTER 4
"/* Initiate writeout of all those
					     dirty pages in the range which are
					     not presently under writeback.  */"	#define SYNC_FILE_RANGE_WRITE 2
"/* Wait upon writeout of all pages
					     in the range before performing the
					     write.  */"	#define SYNC_FILE_RANGE_WAIT_BEFORE 1
/* Flags for SYNC_FILE_RANGE.  */	#define SYNC_FILE_RANGE_WAIT_BEFORE 1
/* Data will be accessed once.  */	#define POSIX_FADV_NOREUSE __POSIX_FADV_NOREUSE
/* Don't need these pages.  */	#define POSIX_FADV_DONTNEED __POSIX_FADV_DONTNEED
/* Will need these pages.  */	#define POSIX_FADV_WILLNEED 3
/* Expect sequential page references.  */	#define POSIX_FADV_SEQUENTIAL 2
/* Expect random page references.  */	#define POSIX_FADV_RANDOM 1
/* No further special treatment.  */	#define POSIX_FADV_NORMAL 0
/* Advise to `posix_fadvise'.  */	#ifdef __USE_XOPEN2K
/* Use misc.  */	#endif
"/* Define some more compatibility macros to be backward compatible with
   BSD systems which did not managed to hide these kernel macros.  */"	#ifdef __USE_MISC
/* Hint values for F_{GET,SET}_RW_HINT.  */	#define RWF_WRITE_LIFE_NOT_SET 0
"/* Prevent future writes while
					   mapped.  */"	#define F_SEAL_FUTURE_WRITE 0x0010
/* Prevent writes.  */	#define F_SEAL_WRITE 0x0008
/* Prevent file from growing.  */	#define F_SEAL_GROW 0x0004
/* Prevent file from shrinking.  */	#define F_SEAL_SHRINK 0x0002
/* Prevent further seals from being set.  */	#define F_SEAL_SEAL 0x0001
/* Types of seals.  */	#define F_SEAL_SEAL 0x0001
/* ID of owner.  */	definition of pid
/* Owner type of ID.  */	definition of type
/* Structure to use with F_GETOWN_EX and F_SETOWN_EX.  */	definition of f_owner_ex
/* Alternative, obsolete name.  */	F_OWNER_GID
/* Process group.  */	F_OWNER_PGRP
/* Process.  */	F_OWNER_PID
/* Kernel thread.  */	F_OWNER_TID
/* Owner types.  */	definition of __pid_type
/* Don't remove notifier.  */	#define DN_MULTISHOT 0x80000000
/* File changed attributes.  */	#define DN_ATTRIB 0x00000020
/* File renamed.  */	#define DN_RENAME 0x00000010
/* File removed.  */	#define DN_DELETE 0x00000008
/* File created.  */	#define DN_CREATE 0x00000004
/* File modified.  */	#define DN_MODIFY 0x00000002
/* File accessed.  */	#define DN_ACCESS 0x00000001
/* Types of directory notifications that may be requested with F_NOTIFY.  */	#define DN_ACCESS 0x00000001
/* ... Which allows concurrent read & write operations.  */	#define LOCK_RW 192
/* ... which allows concurrent write operations.  */	#define LOCK_WRITE 128
/* ... which allows concurrent read operations.  */	#define LOCK_READ 64
/* This is a mandatory flock:  */	#define LOCK_MAND 32
/* Remove lock.  */	#define LOCK_UN 8
"/* Or'd with one of the above to prevent
				   blocking.  */"	#define LOCK_NB 4
/* Exclusive lock.  */	#define LOCK_EX 2
/* Shared lock.  */	#define LOCK_SH 1
/* Operations for BSD flock, also used by the kernel implementation.  */	#define LOCK_SH 1
/* or 4 */	#define F_SHLCK 8
/* or 3 */	#define F_EXLCK 4
/* For old implementation of BSD flock.  */	#ifndef F_EXLCK
/* Remove lock.  */	#define F_UNLCK 2
/* Write lock.  */	#define F_WRLCK 1
/* Read lock.  */	#define F_RDLCK 0
/* For posix fcntl() and `l_type' field of a `struct flock' for lockf().  */	#define F_RDLCK 0
/* Actually anything with low bit set goes */	#define FD_CLOEXEC 1
/* For F_[GET|SET]FD.  */	#define FD_CLOEXEC 1
"/* Duplicate file descriptor with
				   close-on-exit set.  */"	#define F_DUPFD_CLOEXEC 1030
/* Set / get write life time hints.  */	#define F_GET_RW_HINT 1035
/* Get seals for file.  */	#define F_GET_SEALS 1034
/* Add seals to file.  */	#define F_ADD_SEALS 1033
/* Set pipe page size array.  */	#define F_GETPIPE_SZ 1032
/* Set pipe page size array.  */	#define F_SETPIPE_SZ 1031
/* Request notifications on a directory.  */	#define F_NOTIFY 1026
/* Enquire what lease is active.  */	#define F_GETLEASE 1025
/* Set a lease.  */	#define F_SETLEASE 1024
/* Set owner (thread receiving SIGIO).  */	#define F_GETOWN_EX __F_GETOWN_EX
/* Get owner (thread receiving SIGIO).  */	#define F_SETOWN_EX __F_SETOWN_EX
/* Get number of signal to be sent.  */	#define F_GETSIG __F_GETSIG
/* Set number of signal to be sent.  */	#define F_SETSIG __F_SETSIG
/* Set owner (thread receiving SIGIO).  */	#define __F_GETOWN_EX 16
/* Get owner (thread receiving SIGIO).  */	#define __F_SETOWN_EX 15
/* Get number of signal to be sent.  */	#define __F_GETSIG 11
/* Set number of signal to be sent.  */	#define __F_SETSIG 10
/* Set owner (process receiving SIGIO).  */	#define F_GETOWN __F_GETOWN
/* Get owner (process receiving SIGIO).  */	#define F_SETOWN __F_SETOWN
/* Set file status flags.  */	#define F_SETFL 4
/* Get file status flags.  */	#define F_GETFL 3
/* Set file descriptor flags.  */	#define F_SETFD 2
/* Get file descriptor flags.  */	#define F_GETFD 1
/* Duplicate file descriptor.  */	#define F_DUPFD 0
/* Values for the second argument to `fcntl'.  */	#define F_DUPFD 0
/* Synchronize read operations.  */	#define O_RSYNC O_SYNC
/* Synchronize read operations.  */	#else
/* Synchronize data.  */	#define O_DSYNC __O_DSYNC
"/* For now, Linux has no separate synchronicity options for read
   operations.  We define O_RSYNC therefore as the same as O_SYNC
   since this is a superset.  */"	#if defined __USE_POSIX199309 || defined __USE_UNIX98
/* Atomically create nameless file.  */	#define O_TMPFILE __O_TMPFILE
/* Resolve pathname but do not open file.  */	#define O_PATH __O_PATH
/* Do not set atime.  */	#define O_NOATIME __O_NOATIME
/* Direct disk access.  */	#define O_DIRECT __O_DIRECT
/* Set close_on_exec.  */	#define O_CLOEXEC __O_CLOEXEC
/* Do not follow links.  */	#define O_NOFOLLOW __O_NOFOLLOW
/* Must be a directory.  */	#define O_DIRECTORY __O_DIRECTORY
"/* open file description locks.

   Usually record locks held by a process are released on *any* close and are
   not inherited across a fork.

   These cmd values will set locks that conflict with process-associated record
   locks, but are ""owned"" by the opened file description, not the process.
   This means that they are inherited across fork or clone with CLONE_FILES
   like BSD (flock) locks, and they are only released automatically when the
   last reference to the the file description against which they were acquired
   is put. */"	#ifdef __USE_GNU
/* Set record locking info (blocking).  */	#endif
/* Set record locking info (blocking).  */	#endif
/* Set record locking info (blocking).  */	#define F_SETLKW 7
/* Set record locking info (non-blocking).  */	#define F_SETLK 6
/* Get record locking info.  */	#define F_GETLK 5
/* Not fcntl.  */	#define O_TRUNC 01000
/* Not fcntl.  */	#define O_NOCTTY 0400
/* Not fcntl.  */	#define O_EXCL 0200
/* Not fcntl.  */	#define O_CREAT 0100
/* open/fcntl.  */	#define O_ACCMODE 0003
"/* This file contains shared definitions between Linux architectures
   and is included by <bits/fcntl.h> to declare them.  The various
   #ifndef cases allow the architecture specific file to define those
   values with different values.

   A minimal <bits/fcntl.h> contains just:

   struct flock {...}
   #ifdef __USE_LARGEFILE64
   struct flock64 {...}
   #endif
   #include <bits/fcntl-linux.h>
*/"	#ifdef __USE_GNU
"/* O_*, F_*, FD_* bit values for Linux.
   Copyright (C) 2001-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _FCNTL_H
/* Process holding the lock.  */	definition of l_pid
/* Size of the locked area; zero means until EOF.  */	definition of l_len
/* Offset where the lock begins.  */	definition of l_start
/* Where `l_start' is relative to (like `lseek').  */	definition of l_whence
"/* Type of lock: F_RDLCK, F_WRLCK, or F_UNLCK.	*/"	definition of l_type
/* Process holding the lock.  */	definition of l_pid
/* Size of the locked area; zero means until EOF.  */	#endif
/* Size of the locked area; zero means until EOF.  */	definition of l_len
/* Offset where the lock begins.  */	definition of l_start
/* Where `l_start' is relative to (like `lseek').  */	definition of l_whence
"/* Type of lock: F_RDLCK, F_WRLCK, or F_UNLCK.	*/"	definition of l_type
"/* Set record locking info (blocking).	*/"	#define F_SETLKW64 7
/* Set record locking info (non-blocking).  */	#define F_SETLK64 6
/* Get record locking info.  */	#define F_GETLK64 5
/* Not necessary, we always have 64-bit offsets.  */	#define F_GETLK64 5
"/* O_*, F_*, FD_* bit values for Linux/x86.
   Copyright (C) 2001-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _FCNTL_H
/* bits/stat.h */	#endif
/* Execute by owner.  */	#define __S_IEXEC 0100
/* Execute by owner.  */	#ifdef __USE_ATFILE
/* Write by owner.  */	#define __S_IWRITE 0200
/* Read by owner.  */	#define __S_IREAD 0400
/* Save swapped text after use (sticky).  */	#define __S_ISVTX 01000
/* Set group ID on execution.  */	#define __S_ISGID 02000
/* Set user ID on execution.  */	#define __S_ISUID 04000
/* Protection bits.  */	#define __S_ISUID 04000
"/* POSIX.1b objects.  Note that these macros always evaluate to zero.  But
   they do it by enforcing the correct use of the macros.  */"	#define __S_TYPEISMQ(buf) ((buf)->st_mode - (buf)->st_mode)
/* Socket.  */	#define __S_IFSOCK 0140000
/* Symbolic link.  */	#define __S_IFLNK 0120000
/* FIFO.  */	#define __S_IFIFO 0010000
/* Regular file.  */	#define __S_IFREG 0100000
/* Block device.  */	#define __S_IFBLK 0060000
/* Character device.  */	#define __S_IFCHR 0020000
/* Directory.  */	#define __S_IFDIR 0040000
/* File types.  */	#define __S_IFDIR 0040000
/* These bits determine file type.  */	#define __S_IFMT 0170000
/* Encoding of the file mode.  */	#define __S_IFMT 0170000
/* Nanosecond resolution time values are supported.  */	#define _STATBUF_ST_NSEC
/* Tell code we have these members.  */	#define _STATBUF_ST_BLKSIZE
"/* File serial number.		*/"	#endif
/* Nsecs of last status change.  */	#endif
/* Time of last status change.  */	definition of st_ctim
/* Time of last status change.  */	#else
/* Time of last modification.  */	definition of st_mtim
/* Time of last access.  */	definition of st_atim
"/* Nanosecond resolution timestamps are stored in a format
       equivalent to 'struct timespec'.  This is the type used
       whenever possible but the Unix namespace rules do not allow the
       identifier 'timespec' to appear in the <sys/stat.h> header.
       Therefore we have to handle the use of this header in strictly
       standard-compliant sources special.  */"	definition of st_atim
/* Nr. 512-byte blocks allocated.  */	definition of st_blocks
/* Nr. 512-byte blocks allocated.  */	#ifdef __USE_XOPEN2K8
/* Optimal block size for I/O.  */	definition of st_blksize
/* Size of file, in bytes.  */	#endif
/* Size of file, in bytes.  */	definition of st_size
/* Size of file, in bytes.  */	#else
/* Device number, if device.  */	definition of st_rdev
/* Group ID of the file's group.*/	definition of st_gid
/* Group ID of the file's group.*/	#ifdef __x86_64__
"/* User ID of the file's owner.	*/"	definition of st_uid
/* Link count.  */	#endif
/* File mode.  */	definition of st_mode
/* File mode.  */	#else
/* Link count.  */	definition of st_nlink
/* File serial number.  */	definition of st_ino
/* Device.  */	definition of st_dev
/* Device.  */	#ifdef __x86_64__
/* Note stat64 has the same shape as stat for x86-64.  */	definition of stat64
"/* File serial number.	*/"	#endif
/* Nsecs of last status change.  */	#endif
/* Backward compatibility.  */	#define st_atime st_atim.tv_sec
/* Backward compatibility.  */	#else
/* Time of last status change.  */	definition of st_ctim
/* Time of last modification.  */	definition of st_mtim
/* Time of last access.  */	definition of st_atim
"/* Nanosecond resolution timestamps are stored in a format
       equivalent to 'struct timespec'.  This is the type used
       whenever possible but the Unix namespace rules do not allow the
       identifier 'timespec' to appear in the <sys/stat.h> header.
       Therefore we have to handle the use of this header in strictly
       standard-compliant sources special.  */"	definition of st_atim
/* Number 512-byte blocks allocated. */	#endif
/* Number 512-byte blocks allocated. */	definition of st_blocks
/* Number 512-byte blocks allocated. */	#else
/* Optimal block size for I/O.  */	definition of st_blksize
/* Optimal block size for I/O.  */	#if defined __x86_64__  || !defined __USE_FILE_OFFSET64
/* Size of file, in bytes.  */	#endif
/* Size of file, in bytes.  */	definition of st_size
/* Size of file, in bytes.  */	#else
/* Device number, if device.  */	definition of st_rdev
/* Device number, if device.  */	#ifndef __x86_64__
/* Group ID of the file's group.*/	definition of st_gid
/* Group ID of the file's group.*/	#ifdef __x86_64__
"/* User ID of the file's owner.	*/"	definition of st_uid
/* File mode.  */	definition of st_mode
/* File mode.  */	#endif
/* Link count.  */	definition of st_nlink
/* Link count.  */	#else
"/* 32bit file serial number.	*/"	#endif
"/* File serial number.	*/"	definition of st_ino
"/* File serial number.	*/"	#else
/* Device.  */	definition of st_dev
/* Device.  */	#ifndef __x86_64__
/* x86-64 versions of the `xmknod' interface.  */	#define _MKNOD_VER_LINUX 0
/* x86-64 versions of the `xmknod' interface.  */	#endif
/* The bits defined below.  */	#else
/* Versions of the `struct stat' data structure.  */	#ifndef __x86_64__
"/* Copyright (C) 1999-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _SYS_STAT_H && !defined _FCNTL_H
"/* Check that calls to open and openat with O_CREAT or O_TMPFILE set have an
   appropriate third/fourth parameter.  */"	#ifndef __USE_FILE_OFFSET64
"/* Checking macros for fcntl functions.
   Copyright (C) 2007-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _FCNTL_H
/* fcntl.h  */	#endif
/* Define some inlines helping to catch common problems.  */	#if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function \
"/* Reserve storage for the data of the file associated with FD.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Advice the system about the expected behaviour of the application with
   respect to the file associated with FD.  */"	#ifndef __USE_FILE_OFFSET64
/* Test a region for other processes locks.  */	#define F_TEST 3
/* Test a region for other processes locks.  */	#ifndef __USE_FILE_OFFSET64
/* Test and lock a region for exclusive use.  */	#define F_TLOCK 2
/* Lock a region for exclusive use.  */	#define F_LOCK 1
/* Unlock a previously locked region.  */	#define F_ULOCK 0
"/* `lockf' is a simpler interface to the locking facilities of `fcntl'.
   LEN is always relative to the current file position.
   The CMD argument is one of the following.  */"	#define F_ULOCK 0
"/* Create and open FILE, with mode MODE.  This takes an `int' MODE
   argument because that is what `mode_t' will be widened to.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Similar to `open' but a relative path name is interpreted relative to
   the directory for which FD is a descriptor.

   NOTE: some other `openat' implementation support additional functionality
   through this interface, especially using the O_XATTR flag.  This is not
   yet supported here.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Open FILE and return a new file descriptor for it, or -1 on error.
   OFLAG determines the type of access used.  If O_CREAT or O_TMPFILE is set
   in OFLAG, the third argument is taken as a `mode_t', the mode of the
   created file.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Do the file control operation described by CMD on FD.
   The remaining arguments are interpreted depending on CMD.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	#ifndef __USE_FILE_OFFSET64
/* XPG */	#endif
/* Seek from end of file.  */	#define SEEK_END 2
/* Seek from current position.  */	#define SEEK_CUR 1
/* Seek from beginning of file.  */	#define SEEK_SET 0
/* XPG wants the following symbols.   <stdio.h> has the same definitions.  */	#if defined __USE_XOPEN || defined __USE_XOPEN2K8
/* Use misc.  */	#endif
/* Test for existence.  */	#define F_OK 0
/* Test for existence.  */	#endif
/* Test for execute permission.  */	#define X_OK 1
/* Test for write permission.  */	#define W_OK 2
/* Test for read permission.  */	#define R_OK 4
"/* Values for the second argument to access.
   These may be OR'd together.  */"	#define R_OK 4
/* Verbatim from <unistd.h>.  Ugh.  */	#ifndef R_OK
/* Read, write, and execute by others.  */	#define S_IRWXO (S_IRWXG >> 3)
/* Execute by others.  */	#define S_IXOTH (S_IXGRP >> 3)
/* Write by others.  */	#define S_IWOTH (S_IWGRP >> 3)
/* Read by others.  */	#define S_IROTH (S_IRGRP >> 3)
/* Read, write, and execute by group.  */	#define S_IRWXG (S_IRWXU >> 3)
/* Execute by group.  */	#define S_IXGRP (S_IXUSR >> 3)
/* Write by group.  */	#define S_IWGRP (S_IWUSR >> 3)
/* Read by group.  */	#define S_IRGRP (S_IRUSR >> 3)
/* Read, write, and execute by owner.  */	#define S_IRWXU (__S_IREAD|__S_IWRITE|__S_IEXEC)
/* Execute by owner.  */	#define S_IXUSR __S_IEXEC
/* Write by owner.  */	#define S_IWUSR __S_IWRITE
/* Read by owner.  */	#define S_IRUSR __S_IREAD
/* Save swapped text after use (sticky bit).  This is pretty well obsolete.  */	#define S_ISVTX __S_ISVTX
/* Set group ID on execution.  */	#define S_ISGID __S_ISGID
/* Set user ID on execution.  */	#define S_ISUID __S_ISUID
/* Protection bits.  */	#define S_ISUID __S_ISUID
/* For XPG all symbols from <sys/stat.h> should also be available.  */	#ifdef __USE_XOPEN2K8
"/* POSIX.1-2001 specifies that these types are defined by <fcntl.h>.
   Earlier POSIX standards permitted any type ending in `_t' to be defined
   by any POSIX header, so we don't conditionalize the definitions here.  */"	#ifndef __mode_t_defined
"/* Detect if open needs mode as a third argument (or for openat as a fourth
   argument).  */"	#ifdef __O_TMPFILE
"/*
 *	POSIX Standard: 6.5 File Control Operations	<fcntl.h>
 */"	#ifndef _FCNTL_H
/* __statx_timestamp_defined */	#endif
"/* Definition of the generic version of struct statx_timestamp.
   Copyright (C) 2018-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_STAT_H
/* __statx_defined */	#endif
"/* Warning: The kernel may add additional fields to this struct in the
   future.  Only use this struct for calling the statx function, not
   for storing data.  (Expansion will be controlled by the mask
   argument of the statx function.)  */"	definition of statx
"/* Definition of the generic version of struct statx.
   Copyright (C) 2018-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_STAT_H
/* Fill *BUF with information about PATH in DIRFD.  */	declaration of statx
/* !STATX_TYPE */	#endif
/* This interface is based on <linux/stat.h> in Linux.  */	#ifndef _SYS_STAT_H
"/* Use """" to work around incorrect macro expansion of the
   __has_include argument (GCC PR 80005).  */"	"#if __glibc_has_include (""__linux__/stat.h"")"
/* This interface is based on <linux/stat.h> in Linux.  */	#ifndef _SYS_STAT_H
/* sys/stat.h  */	#endif
/* Inlined versions of the real stat and mknod functions.  */	definition of stat
/* Wrappers for stat and mknod system calls.  */	#ifndef __USE_FILE_OFFSET64
"/* To allow the `struct stat' structure and the file type `mode_t'
   bits to vary without changing shared library major version number,
   the `stat' family of functions and `mknod' are in fact inline
   wrappers around calls to `xstat', `fxstat', `lxstat', and `xmknod',
   which all take a leading version-number argument designating the
   data structure and bits used.  <bits/stat.h> defines _STAT_VER with
   the version number corresponding to `struct stat' as defined in
   that file; and _MKNOD_VER with the version number corresponding to
   the S_IF* macros defined therein.  It is arranged that when not
   inlined these function are always statically linked; that way a
   dynamically-linked executable always encodes the version number
   corresponding to the data structures it uses, so the `x' functions
   in the shared library can adapt without needing to recompile all
   callers.  */"	#ifndef _STAT_VER
/* Set file access and modification times of the file associated with FD.  */	declaration of futimens
"/* Set file access and modification times relative to directory file
   descriptor.  */"	declaration of utimensat
"/* Like mkfifo, create a new FIFO with permission bits MODE.  But
   interpret relative PATH names relative to the directory associated
   with FD.  */"	declaration of mkfifoat
/* Create a new FIFO named PATH, with permission bits MODE.  */	declaration of mkfifo
"/* Like mknod, create a new device file with permission bits MODE and
   device number DEV.  But interpret relative PATH names relative to
   the directory associated with FD.  */"	declaration of mknodat
"/* Create a device file named PATH, with permission and special bits MODE
   and device number DEV (which can be constructed from major and minor
   device numbers with the `makedev' macro above).  */"	#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED
"/* Like mkdir, create a new directory with permission bits MODE.  But
   interpret relative PATH names relative to the directory associated
   with FD.  */"	declaration of mkdirat
/* Create a new directory named PATH, with permission bits MODE.  */	declaration of mkdir
"/* Get the current `umask' value without changing it.
   This function is only available under the GNU Hurd.  */"	declaration of getumask
"/* Set the file creation mask of the current process to MASK,
   and return the old creation mask.  */"	declaration of umask
/* Use ATFILE.  */	#endif
"/* Set file access permissions of FILE relative to
   the directory FD is open on.  */"	declaration of fchmodat
/* Set file access permissions of the file FD is open on to MODE.  */	#if defined __USE_POSIX199309 || defined __USE_XOPEN_EXTENDED
"/* Set file access permissions for FILE to MODE.
   If FILE is a symbolic link, this affects the link itself
   rather than its target.  */"	declaration of lchmod
"/* Set file access permissions for FILE to MODE.
   If FILE is a symbolic link, this affects its target instead.  */"	declaration of chmod
"/* Get file attributes about FILE and put them in BUF.
   If FILE is a symbolic link, do not follow it.  */"	declaration of lstat
"/* Similar to stat, get the attributes for FILE and put them in BUF.
   Relative path names are interpreted relative to FD unless FD is
   AT_FDCWD.  */"	#ifndef __USE_FILE_OFFSET64
"/* Get file attributes for the file, device, pipe, or socket
   that file descriptor FD is open on and put them in BUF.  */"	declaration of fstat
/* Get file attributes for FILE and put them in BUF.  */	declaration of stat
/* Block size for `st_blocks'.  */	#define S_BLKSIZE 512
/* 0666*/	#define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)
/* 07777 */	#define ALLPERMS (S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO)
/* 0777 */	#define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO)
/* Macros for common mode bit masks.  */	#define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO)
/* Read, write, and execute by others.  */	#define S_IRWXO (S_IRWXG >> 3)
/* Execute by others.  */	#define S_IXOTH (S_IXGRP >> 3)
/* Write by others.  */	#define S_IWOTH (S_IWGRP >> 3)
/* Read by others.  */	#define S_IROTH (S_IRGRP >> 3)
/* Read, write, and execute by group.  */	#define S_IRWXG (S_IRWXU >> 3)
/* Execute by group.  */	#define S_IXGRP (S_IXUSR >> 3)
/* Write by group.  */	#define S_IWGRP (S_IWUSR >> 3)
/* Read by group.  */	#define S_IRGRP (S_IRUSR >> 3)
/* Read, write, and execute by owner.  */	#define S_IRWXU (__S_IREAD|__S_IWRITE|__S_IEXEC)
/* Execute by owner.  */	#define S_IXUSR __S_IEXEC
/* Write by owner.  */	#define S_IWUSR __S_IWRITE
/* Read by owner.  */	#define S_IRUSR __S_IREAD
/* Save swapped text after use (sticky bit).  This is pretty well obsolete.  */	#define S_ISVTX __S_ISVTX
/* Set group ID on execution.  */	#define S_ISGID __S_ISGID
/* Set user ID on execution.  */	#define S_ISUID __S_ISUID
/* Protection bits.  */	#define S_ISUID __S_ISUID
"/* These are from POSIX.1b.  If the objects are not implemented using separate
   distinct file types, the macros always will evaluate to zero.  Unlike the
   other S_* macros the following three take a pointer to a `struct stat'
   object as the argument.  */"	#ifdef __USE_POSIX199309
"/* Test macros for file types.	*/"	#define __S_ISTYPE(mode,mask) (((mode) & __S_IFMT) == (mask))
/* Unix98 */	#endif
/* X/Open */	#endif
/* For __mode_t and __dev_t.  */	#ifdef __USE_XOPEN2K8
"/*
 *	POSIX Standard: 5.6 File Characteristics	<sys/stat.h>
 */"	#ifndef _SYS_STAT_H
/// Appends a path component, with a / if necessary.	declaration of append_path_component
/// directory. This operates on unescaped paths only (so a ~ means a literal ~).	declaration of path_apply_working_directory
/// Returns whether the two paths refer to the same file.	declaration of paths_are_same_file
/// slashes).	declaration of paths_are_equivalent
/// The string is modified in-place.	declaration of path_make_canonical
/// start with one of the allowed prefixes (., .., ~) and resolve to a directory.	declaration of path_as_implicit_cd
/// \return the command, or none() if it could not be found.	declaration of path_get_cdpath
/// Return all the paths that match the given command.	declaration of path_get_paths
/// should be freed with free().	declaration of path_get_path
/// Use the given environment stack to ensure this only occurs once.	declaration of env_stack_t
/// \return whether the directory was returned successfully	declaration of path_get_data
/// \return whether the directory was returned successfully	declaration of path_get_config
/// Return value for path_cdpath_get when locatied a rotten symlink.	#define EROTTEN 1
// issues.	#ifndef FISH_PATH_H
// We need to keep around the fd for this directory, in the parser.	declaration
/// specified. The directory can be relative to any directory in the CDPATH variable.	definition of builtin_cd
// Either find_path explicitly or just quiet.	{ ... }
// Quiet implies find_path.	if (...) ... 
/// just processes the flags.	definition of builtin_command
// -s and -v are aliases	case ...:
// Set default modes.	if (...) ... 
// No tokens in insert mode just means we do nothing.	return ...
// Check for invalid switch combinations.	if (...) ... 
// Inserts the readline function at the back of the queue.	ExprStmt
// Check for invalid switch combinations.	if (...) ... 
// init files. Just ignore it.	return ...
// What the commandline builtin considers to be the current cursor position.	declaration
// line buffer.	declaration
/// The commandline builtin. It is used for specifying a new value for the commandline.	definition of builtin_commandline
"// std::fwprintf( stderr, L""Subshell: %ls, end char %lc\n"", buff, *end );"	declaration
/// \param cursor_pos the position of the cursor in the command line	definition of write_part
/// \param cursor_pos the position of the cursor in the command line	definition of replace_part
// insert at end of current token/command/buffer	APPEND_MODE
// insert at cursor position	INSERT_MODE
// replace current text	REPLACE_MODE
/// For text insertion, how should it be done.	definition of (unnamed enum)
// operate on token under cursor	TOKEN_MODE
// operate on process under cursor	PROCESS_MODE
// operate on job under cursor	JOB_MODE
// operate on entire buffer	STRING_MODE
/// Which part of the comandbuffer are we operating on.	definition of (unnamed enum)
// Handle wrap targets (probably empty). We only wrap commands, not paths.	for(...:...) ...
// colorize if interactive	if (...) ... 
// to stdout.	declaration
// Append any description.	if (...) ... 
// we need to unescape the command line. See #1127.	ExprStmt
// just look for the space and clear it.	if (...) ... 
// Make a fake commandline, and then apply the completion to it.	declaration
// Allow a limited number of recursive calls to complete (#3474).	ExprStmt
// argument, not the reader buffer.	ExprStmt
// See #2361    .	ExprStmt
// No argument given, try to use the current commandline.	declaration
"// to enable `complete -C ""git check""`."	if (...) ... 
// This option was removed in commit 1911298 and is now a no-op.	break;
// This option was removed in commit 1911298 and is now a no-op.	break;
// complete.cpp for any heavy lifting.	definition of builtin_complete
/* is path */	ExprStmt
/* not path */	ExprStmt
// This means that all loops were empty.	ExprStmt
/* is path */	ExprStmt
/* not path */	ExprStmt
/// Silly function.	definition of builtin_complete_add
/// Silly function.	definition of builtin_complete_add2
/// a list.	definition of builtin_contains
// Disown all target jobs	for(...:...) ...
// Multiple PIDs may refer to the same job; include the job only once by using a set.	for(...;...;...) ...
// Even jobs that aren't under job control can be disowned!	declaration
/// Builtin for removing jobs from the job list.	definition of builtin_disown
// Instead, we set a flag and the parser removes the job from the jobs list later.	ExprStmt
// Stopped disowned jobs must be manually signaled; explain how to do so.	declaration
/// Helper for builtin_disown.	definition of disown_job
//	#pragma GCC system_header
// backslash, which will be handled by the loop increment.	ExprStmt
// Not a recognized escape. We consume only the backslash.	ExprStmt
// literal byte that we want to output (#1894).	ExprStmt
// Octal and hex escape sequences.	declaration
// sequences may consume more, while an unrecognized escape sequence consumes none.	declaration
// Not an escape.	ExprStmt
"/// fish specific, option -s to mean ""no spaces""."	definition of builtin_echo
// We succeeded if we consumed at least one digit.	if (...) ... 
// resulting character	definition of val
// Skip the x	ExprStmt
// Hex escape	ExprStmt
// allow 3.	ExprStmt
// Octal escape	ExprStmt
// the first character of the numeric part of the sequence	definition of start
/// \xhh: hex value, one to two digits	definition of builtin_echo_parse_numeric_sequence
// base must be hex or octal	ExprStmt
// enclosed in parentheses given the nature of this code.	definition of builtin_echo_digit
/// Implementation of the builtin emit command, used to create events.	definition of builtin_emit
// deallocate to close.	ExprStmt
// where we have an argument but nothing is executed.	ExprStmt
// Of course the same applies to stderr.	declaration
// We were unable to create a pipe, probably fd exhaustion.	return ...
// buffer in that case.	declaration
// Copy the full io chain; we may append bufferfills.	declaration
/// Implementation of eval builtin.	definition of builtin_eval
/// The exit builtin. Calls reader_exit to exit and returns the value specified.	definition of builtin_exit
// return value.	ExprStmt
//!OCLINT(too few branches)	{ ... }
// For compatibility with fish 2.0's $_, now replaced with `status current-command`	if (...) ... 
// printed until the command finishes.	ExprStmt
// emit (ambigous job specification vs malformed job id).	declaration
// to the foreground.	for(...:...) ...
/// Builtin for putting a job in the foreground.	definition of builtin_fg
// Prototypes for executing builtin_function function.	#ifndef FISH_BUILTIN_FUNCTION_H
/// Observes that fish_function_path has changed.	declaration of function_invalidate_path
/// is successful.	declaration of function_copy
/// This does not trigger autoloading.	declaration of function_get_definition_lineno
/// This returns an intern'd string.	declaration of function_get_definition_file
/// Returns true if the function was autoloaded.	declaration of function_is_autoloaded
/// \param get_hidden whether to include hidden functions, i.e. ones starting with an underscore.	declaration of function_get_names
/// Returns true if the function with the name name exists, without triggering autoload.	declaration of function_exists_no_autoload
/// Attempts to load a function if not yet loaded. This is used by the completion machinery.	declaration of function_load
/// This may autoload.	declaration of function_exists
/// Sets the description of the function with the name \c name.	declaration of function_set_desc
/// This does not trigger autoloading.	declaration of function_get_desc
/// This does not trigger autoloading.	declaration of function_get_definition
/// Returns the properties for a function, or nullptr if none. This does not trigger autoloading.	declaration of function_get_properties
/// Remove the function with the specified name.	declaration of function_remove
/// Add a function.	declaration of function_add
/// Set to true if invoking this function shadows the variables of the underlying function.	definition of shadow_scope
/// values.	definition of inherit_vars
/// List of all named arguments for this function.	definition of named_arguments
/// preserved.	definition of func_node
/// Parsed source containing the function.	definition of parsed_source
/// A function's constant properties. These do not change once initialized.	definition of function_properties_t
// taken care of by the parser and to some degree the builtin handling library.	#ifndef FISH_FUNCTION_H
/// argument is interpreted as a new command.	declaration of parser_keywords_skip_arguments
/// Test if the specified string is command that opens a new block.	declaration of parser_keywords_is_block
/// \return 1 of the command parameter is a command, 0 otherwise	declaration of parser_keywords_is_reserved
/// \return 1 of the command parameter is a command, 0 otherwise	declaration of parser_keywords_is_subcommand
// Functions having to do with parser keywords, like testing if a function is a block command.	#ifndef FISH_PARSER_KEYWORD_H
/// Wait until a sigint is delivered.	declaration of wait
/// was created.	declaration of check
/// A sigint_detector_t can be used to check if a SIGINT (or SIGHUP) has been delivered.	definition of sigchecker_t
/// In generaly this should only be done in interactive sessions.	declaration of signal_clear_cancel
/// This is thread safe.	declaration of signal_check_cancel
/// Returns signals with non-default handlers.	declaration of get_signals_with_handlers
/// Ensure we did not inherit any blocked signals. See issue #3964.	declaration of signal_unblock_all
/// \param sig The signal to specify the action of	declaration of signal_handle
/// Latch function. This sets signal handlers, but only the first time it is called.	declaration of signal_set_handlers_once
/// Set signal handlers to fish default handlers.	declaration of signal_set_handlers
/// Set all signal handlers to SIG_DFL.	declaration of signal_reset_handlers
/// Returns a description of the specified signal.	declaration of signal_get_desc
/// Get string representation of a signal.	declaration of sig2wcs
/// Get the integer signal value representing the specified signal, or -1 of no signal was found.	declaration of wcs2sig
// The library for various signal related issues.	#ifndef FISH_SIGNALH
// Handle wrap targets by creating the appropriate completions.	for(...:...) ...
// Add any event handlers.	for(...:...) ...
// Add the function itself.	ExprStmt
// Populate inherit_vars.	for(...:...) ...
// We have what we need to actually define the function.	declaration
// A valid function name has to be the first argument.	declaration
// builtins.	declaration
/// function.	definition of builtin_function
// This is currently impossible but let's be paranoid.	ExprStmt
// This is needed due to the semantics of the -a/--argument-names flag.	definition of short_options
// FISH_TERMSIZE_H	#endif
/// Convenience helper to return the last known termsize.	definition of termsize_last
/// Convenience helper to return the last known termsize.	#endif
// not react to any changes.	definition of setting_env_vars_
// Our lock-protected data.	definition of data_
// Update COLUMNS and LINES in the parser's stack.	declaration of set_columns_lines_vars
// Construct from a reader function.	definition of termsize_container_t
/// Mark that our termsize is (for the time being) from the environment, not the tty.	declaration of mark_override_from_env
/// \return the current termsize from this data.	declaration of current
// Set to a huge value so it's initially stale.	definition of last_tty_gen_count
// The last termsize seen from the environment (COLUMNS/LINES), or none if none.	definition of last_from_env
// The last termsize returned by TIOCGWINSZ, or none if none.	definition of last_from_tty
/// A function used for accessing the termsize from the tty. This is only exposed for testing.	declaration of tty_size_reader_func_t
/// \return the singleton shared container.	declaration of shared
/// Note that COLUMNS and/or LINES global variables changed.	declaration of handle_columns_lines_var_change
/// Invalidate the tty in the sense that we need to re-fetch its termsize.	declaration of invalidate_tty
/// Naturally this may be called from within a signal handler.	declaration of handle_winch
/// This does not change any variables in the environment.	declaration of initialize
/// \return the updated termsize.	declaration of updating
/// Return the default termsize if none.	declaration of last
/// SIGWINCH.	definition of termsize_container_t
/// Return a default-sized termsize.	definition of defaults
/// Construct from width and height.	definition of termsize_t
/// height of the terminal, in rows.	definition of height
/// width of the terminal, in columns.	definition of width
/// Default width and height.	definition of DEFAULT_WIDTH
/// A simple value type wrapping up a terminal size.	definition of termsize_t
// Keep things simple: don't allow existing names to be copy targets.	if (...) ... 
"// Trim trailing "", """	ExprStmt
// If we query with no argument, just return false.	if (...) ... 
// Erase, desc, query, copy and list are mutually exclusive.	declaration
/// The functions builtin, used for listing and erasing functions.	definition of builtin_functions
// Append a newline before the 'end', unless there already is one there.	if (...) ... 
// so we do what fish_indent would.	ExprStmt
// Output any inherited variables as `set -l` lines.	for(...:...) ...
// Output the function name if we deferred it.	if (...) ... 
// Output wrap targets.	for(...:...) ...
// But if the function name starts with a -, we'll need to output it after all the options.	declaration
/// Return a definition of the specified function. Used by the functions builtin.	definition of functions_def
/// Queries private mode status.	declaration of in_private_mode
/// Sets private mode on. Once in private mode, it cannot be turned off.	declaration of start_private_mode
/// Returns true for if paths is empty	declaration of all_paths_are_valid
/// This does disk I/O and may only be called in a background thread	declaration of valid_paths
/// Return the prefix for the files to be used for command and read history.	declaration of history_session_id
/// Saves the new history to disk.	declaration of history_save_all
// Default constructor.	declaration of history_search_t
// Default constructor.	definition of history_search_t
// Constructor.	definition of history_search_t
// Returns the current search result item contents. asserts if there is no current item.	declaration of current_string
// Returns the current search result item. asserts if there is no current item.	declaration of current_item
// Finds the previous search result (backwards in time). Returns true if one was found.	declaration of go_backwards
// Gets the original search term.	definition of original_term
// return whether we deduplicate items.	definition of dedup
// return whether we are case insensitive.	definition of ignores_case
// If deduping, the items we've seen.	definition of deduper_
// Index of the current history item.	definition of current_index_
// The current history item.	definition of current_item_
// Our flags.	definition of flags_
// Our search type.	definition of search_type_
// The (possibly lowercased) search term.	definition of canon_term_
// The original search term.	definition of orig_term_
// The history in which we are searching.	definition of history_
/// Note this does NOT de-duplicate; it is the caller's responsibility to do so.	definition of history_search_t
// If set, do not deduplicate, which can help performance.	history_search_no_dedup
// If set, ignore case.	history_search_ignore_case
/// Flags for history searching.	definition of (unnamed enum)
// Return the number of history entries.	declaration of size
// commandline. (So the most recent item is at index 1.)	declaration of item_at_index
// are skipped. Return a mapping from index to history item text.	declaration of items_at_indexes
// This may be long!	declaration of get_history
// Incorporates the history of other shells into this history.	declaration of incorporate_external_changes
// Populates from a bash history file.	declaration of populate_from_bash
// Populates from older location (in config path, rather than data path).	declaration of populate_from_config_path
// Irreversibly clears history.	declaration of clear
// Searches history.	declaration of search
// Saves history.	declaration of save
// Resolves any pending history items, so that they may be returned in history searches.	declaration of resolve_pending
// determine which arguments are paths	declaration of add_pending_with_file_detection
// Remove a history item.	declaration of remove
// pending items.	declaration of add
// require populating the history.	declaration of is_empty
/// Returns whether this is using the default name.	declaration of is_default
// Returns history with the given name, creating it if necessary.	declaration of history_with_name
// Whether to force the read path instead of mmap. This is useful for testing.	declaration of never_mmap
// This causes things like locks to fail.	declaration of chaos_mode
// call to resolve_pending.	declaration of add
// No copying or moving.	definition of history_t
// Whether our contents matches a search term.	declaration of matches_search
// Paths that we require to be valid for this item to be autosuggested.	definition of required_paths
// Sometimes unique identifier used for hinting.	definition of identifier
// Original creation time for the entry.	definition of creation_timestamp
// The actual contents of the entry.	definition of contents
// Attempts to merge two compatible history items together.	declaration of merge
// Matches everything.	match_everything
// Search for commands starting with the given glob pattern.	prefix_glob
// Search for commands containing the given glob pattern.	contains_glob
// Search for commands starting with the given string.	prefix
// Search for commands containing the given string.	contains
// Search for commands exactly matching the given string.	exact
// trigger race conditions. This is useful for testing.	declaration of path_list_t
// Prototypes for history functions, part of the user interface.	#ifndef FISH_HISTORY_H
// be handled only by the history function's interactive delete feature.	if (...) ... 
// Establish appropriate defaults.	if (...) ... 
// search term).	declaration
// from webconfig.py.	declaration
/// Manipulate history of interactive commands executed by the user.	definition of builtin_history
"// Try to parse it as a number; e.g., ""-123""."	ExprStmt
/// Remember the history subcommand and disallow selecting more than one history subcommand.	definition of set_hist_cmd
/// config.fish and other scripts.	definition of short_options
// Must be sorted by string, not enum or random.	definition of hist_enum_map
// IWYU pragma: keep	definition of hist_cmd_t
// Do not babble if not interactive.	if (...) ... 
// Ignore unconstructed jobs, i.e. ourself.	if (...) ... 
// Ignore unconstructed jobs, i.e. ourself.	for(...:...) ...
/// The jobs builtin. Used for printing running jobs. Defined in builtin_jobs.c.	definition of builtin_jobs
// Print table header before first job.	ExprStmt
// Print table header before first job.	ExprStmt
// Print table header before first job.	ExprStmt
// Print table header before first job.	ExprStmt
/// Print information about the specified job.	definition of builtin_jobs_print
"// std::fwprintf( stderr, L""t1 %f t2 %f p1 %d p2 %d\n"", t1, t2, jiffies, p->last_jiffies );"	ExprStmt
// Check for a race condition that can cause negative CPU usage to be reported (#7066)	declaration
/// Calculates the cpu usage (in percent) of the specified job.	definition of cpu_use
// print nothing (exit status only)	JOBS_PRINT_NOTHING
// print group id of job	JOBS_PRINT_GROUP
// print command name of each process in job	JOBS_PRINT_COMMAND
// print pid of each process in job	JOBS_PRINT_PID
// print lots of general info	JOBS_DEFAULT
/// Print modes for the jobs builtin.	definition of (unnamed enum)
"/* Needed definitions could be generated with:
   for func in $(grep __MATHCALL_VEC math/bits/mathcalls.h |\
		 sed -r ""s|__MATHCALL_VEC.?\(||; s|,.*||""); do
     echo ""#define __DECL_SIMD_${func}"";
     echo ""#define __DECL_SIMD_${func}f"";
     echo ""#define __DECL_SIMD_${func}l"";
   done
 */"	#ifndef _BITS_LIBM_SIMD_DECL_STUBS_H
"/* Empty definitions required for __MATHCALL_VEC unfolding in mathcalls.h.
   Copyright (C) 2014-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _MATH_H
/* W/o OpenMP use GCC 6.* __attribute__ ((__simd__)).  */	#endif
/* OpenMP case.  */	#elif __GNUC_PREREQ (6,0)
"/* Platform-specific SIMD declarations of math functions.
   Copyright (C) 2014-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _MATH_H
"/* Define __GLIBC_FLT_EVAL_METHOD.  x86 version.
   Copyright (C) 2016-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _MATH_H
"/* Define __FP_LOGB0_IS_MIN and __FP_LOGBNAN_IS_MIN.  x86 version.
   Copyright (C) 2016-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _MATH_H
"/* The GCC 4.6 compiler will define __FP_FAST_FMA{,F,L} if the fma{,f,l}
   builtins are supported.  */"	#ifdef __FP_FAST_FMA
"/* Define FP_FAST_* macros.
   Copyright (C) 2016-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _MATH_H
/* Test for signaling NaN.  */	declaration of __issignaling
/* Test for signaling NaN.  */	declaration of __issignalingf
/* Test for signaling NaN.  */	declaration of __issignalingl
/* Test for signaling NaN.  */	declaration of __issignalingf128
/* Test equality.  */	declaration of __iseqsig
/* Test equality.  */	declaration of __iseqsigf
/* Test equality.  */	declaration of __iseqsigl
/* Test equality.  */	declaration of __iseqsigf128
/* Return nonzero if VALUE is not a number.  */	declaration of __isnan
/* Return nonzero if VALUE is not a number.  */	declaration of __isnanf
/* Return nonzero if VALUE is not a number.  */	declaration of __isnanl
/* Return nonzero if VALUE is not a number.  */	declaration of __isnanf128
/* Return nonzero if VALUE is finite and not NaN.  Used by isfinite macro.  */	declaration of __finite
/* Return nonzero if VALUE is finite and not NaN.  Used by isfinite macro.  */	declaration of __finitef
/* Return nonzero if VALUE is finite and not NaN.  Used by isfinite macro.  */	declaration of __finitel
/* Return nonzero if VALUE is finite and not NaN.  Used by isfinite macro.  */	declaration of __finitef128
"/* Return 0 if VALUE is finite or NaN, +1 if it
   is +Infinity, -1 if it is -Infinity.  */"	declaration of __isinf
"/* Return 0 if VALUE is finite or NaN, +1 if it
   is +Infinity, -1 if it is -Infinity.  */"	declaration of __isinff
"/* Return 0 if VALUE is finite or NaN, +1 if it
   is +Infinity, -1 if it is -Infinity.  */"	declaration of __isinfl
"/* Return 0 if VALUE is finite or NaN, +1 if it
   is +Infinity, -1 if it is -Infinity.  */"	declaration of __isinff128
/* Test for negative number.  */	declaration of __signbit
/* Test for negative number.  */	declaration of __signbitf
/* Test for negative number.  */	declaration of __signbitl
/* Test for negative number.  */	declaration of __signbitf128
/* Classify given number.  */	declaration of __fpclassify
/* Classify given number.  */	declaration of __fpclassifyf
/* Classify given number.  */	declaration of __fpclassifyl
/* Classify given number.  */	declaration of __fpclassifyf128
/* Return X times (2 to the Nth power).  */	#endif
/* Return X times (2 to the Nth power).  */	declaration of __scalb
/* Return X times (2 to the Nth power).  */	declaration of scalb
/* Return X times (2 to the Nth power).  */	declaration of __scalbf
/* Return X times (2 to the Nth power).  */	declaration of scalbf
/* Return X times (2 to the Nth power).  */	declaration of __scalbl
/* Return X times (2 to the Nth power).  */	declaration of scalbl
/* Set signaling NaN payload.  */	declaration of setpayloadsig
/* Set signaling NaN payload.  */	declaration of setpayloadsigf
/* Set signaling NaN payload.  */	declaration of setpayloadsigl
/* Set signaling NaN payload.  */	declaration of setpayloadsigf32
/* Set signaling NaN payload.  */	declaration of setpayloadsigf64
/* Set signaling NaN payload.  */	declaration of setpayloadsigf128
/* Set signaling NaN payload.  */	declaration of setpayloadsigf32x
/* Set signaling NaN payload.  */	declaration of setpayloadsigf64x
/* Set quiet NaN payload.  */	declaration of setpayload
/* Set quiet NaN payload.  */	declaration of setpayloadf
/* Set quiet NaN payload.  */	declaration of setpayloadl
/* Set quiet NaN payload.  */	declaration of setpayloadf32
/* Set quiet NaN payload.  */	declaration of setpayloadf64
/* Set quiet NaN payload.  */	declaration of setpayloadf128
/* Set quiet NaN payload.  */	declaration of setpayloadf32x
/* Set quiet NaN payload.  */	declaration of setpayloadf64x
/* Get NaN payload.  */	declaration of __getpayload
/* Get NaN payload.  */	declaration of getpayload
/* Get NaN payload.  */	declaration of __getpayloadf
/* Get NaN payload.  */	declaration of getpayloadf
/* Get NaN payload.  */	declaration of __getpayloadl
/* Get NaN payload.  */	declaration of getpayloadl
/* Get NaN payload.  */	declaration of __getpayloadf32
/* Get NaN payload.  */	declaration of getpayloadf32
/* Get NaN payload.  */	declaration of __getpayloadf64
/* Get NaN payload.  */	declaration of getpayloadf64
/* Get NaN payload.  */	declaration of __getpayloadf128
/* Get NaN payload.  */	declaration of getpayloadf128
/* Get NaN payload.  */	declaration of __getpayloadf32x
/* Get NaN payload.  */	declaration of getpayloadf32x
/* Get NaN payload.  */	declaration of __getpayloadf64x
/* Get NaN payload.  */	declaration of getpayloadf64x
/* Canonicalize floating-point representation.  */	declaration of canonicalize
/* Canonicalize floating-point representation.  */	declaration of canonicalizef
/* Canonicalize floating-point representation.  */	declaration of canonicalizel
/* Canonicalize floating-point representation.  */	declaration of canonicalizef32
/* Canonicalize floating-point representation.  */	declaration of canonicalizef64
/* Canonicalize floating-point representation.  */	declaration of canonicalizef128
/* Canonicalize floating-point representation.  */	declaration of canonicalizef32x
/* Canonicalize floating-point representation.  */	declaration of canonicalizef64x
/* Total order operation on absolute values.  */	declaration of totalordermag
/* Total order operation on absolute values.  */	declaration of totalordermagf
/* Total order operation on absolute values.  */	declaration of totalordermagl
/* Total order operation on absolute values.  */	declaration of totalordermagf32
/* Total order operation on absolute values.  */	declaration of totalordermagf64
/* Total order operation on absolute values.  */	declaration of totalordermagf128
/* Total order operation on absolute values.  */	declaration of totalordermagf32x
/* Total order operation on absolute values.  */	declaration of totalordermagf64x
/* Total order operation.  */	declaration of totalorder
/* Total order operation.  */	declaration of totalorderf
/* Total order operation.  */	declaration of totalorderl
/* Total order operation.  */	declaration of totalorderf32
/* Total order operation.  */	declaration of totalorderf64
/* Total order operation.  */	declaration of totalorderf128
/* Total order operation.  */	declaration of totalorderf32x
/* Total order operation.  */	declaration of totalorderf64x
/* Return value with minimum magnitude.  */	declaration of __fminmag
/* Return value with minimum magnitude.  */	declaration of fminmag
/* Return value with minimum magnitude.  */	declaration of __fminmagf
/* Return value with minimum magnitude.  */	declaration of fminmagf
/* Return value with minimum magnitude.  */	declaration of __fminmagl
/* Return value with minimum magnitude.  */	declaration of fminmagl
/* Return value with minimum magnitude.  */	declaration of __fminmagf32
/* Return value with minimum magnitude.  */	declaration of fminmagf32
/* Return value with minimum magnitude.  */	declaration of __fminmagf64
/* Return value with minimum magnitude.  */	declaration of fminmagf64
/* Return value with minimum magnitude.  */	declaration of __fminmagf128
/* Return value with minimum magnitude.  */	declaration of fminmagf128
/* Return value with minimum magnitude.  */	declaration of __fminmagf32x
/* Return value with minimum magnitude.  */	declaration of fminmagf32x
/* Return value with minimum magnitude.  */	declaration of __fminmagf64x
/* Return value with minimum magnitude.  */	declaration of fminmagf64x
/* Return value with maximum magnitude.  */	declaration of __fmaxmag
/* Return value with maximum magnitude.  */	declaration of fmaxmag
/* Return value with maximum magnitude.  */	declaration of __fmaxmagf
/* Return value with maximum magnitude.  */	declaration of fmaxmagf
/* Return value with maximum magnitude.  */	declaration of __fmaxmagl
/* Return value with maximum magnitude.  */	declaration of fmaxmagl
/* Return value with maximum magnitude.  */	declaration of __fmaxmagf32
/* Return value with maximum magnitude.  */	declaration of fmaxmagf32
/* Return value with maximum magnitude.  */	declaration of __fmaxmagf64
/* Return value with maximum magnitude.  */	declaration of fmaxmagf64
/* Return value with maximum magnitude.  */	declaration of __fmaxmagf128
/* Return value with maximum magnitude.  */	declaration of fmaxmagf128
/* Return value with maximum magnitude.  */	declaration of __fmaxmagf32x
/* Return value with maximum magnitude.  */	declaration of fmaxmagf32x
/* Return value with maximum magnitude.  */	declaration of __fmaxmagf64x
/* Return value with maximum magnitude.  */	declaration of fmaxmagf64x
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __ufromfpx
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of ufromfpx
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __ufromfpxf
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of ufromfpxf
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __ufromfpxl
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of ufromfpxl
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __ufromfpxf32
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of ufromfpxf32
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __ufromfpxf64
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of ufromfpxf64
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __ufromfpxf128
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of ufromfpxf128
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __ufromfpxf32x
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of ufromfpxf32x
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __ufromfpxf64x
"/* Round X to nearest unsigned integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of ufromfpxf64x
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __fromfpx
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of fromfpx
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __fromfpxf
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of fromfpxf
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __fromfpxl
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of fromfpxl
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __fromfpxf32
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of fromfpxf32
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __fromfpxf64
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of fromfpxf64
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __fromfpxf128
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of fromfpxf128
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __fromfpxf32x
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of fromfpxf32x
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of __fromfpxf64x
"/* Round X to nearest signed integer value, raising inexact for
   non-integers, with control of rounding direction and width of
   result.  */"	declaration of fromfpxf64x
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of __ufromfp
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of ufromfp
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of __ufromfpf
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of ufromfpf
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of __ufromfpl
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of ufromfpl
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of __ufromfpf32
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of ufromfpf32
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of __ufromfpf64
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of ufromfpf64
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of __ufromfpf128
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of ufromfpf128
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of __ufromfpf32x
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of ufromfpf32x
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of __ufromfpf64x
"/* Round X to nearest unsigned integer value, not raising inexact,
   with control of rounding direction and width of result.  */"	declaration of ufromfpf64x
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of __fromfp
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of fromfp
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of __fromfpf
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of fromfpf
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of __fromfpl
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of fromfpl
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of __fromfpf32
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of fromfpf32
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of __fromfpf64
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of fromfpf64
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of __fromfpf128
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of fromfpf128
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of __fromfpf32x
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of fromfpf32x
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of __fromfpf64x
"/* Round X to nearest signed integer value, not raising inexact, with
   control of rounding direction and width of result.  */"	declaration of fromfpf64x
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of __roundeven
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of roundeven
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of __roundevenf
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of roundevenf
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of __roundevenl
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of roundevenl
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of __roundevenf32
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of roundevenf32
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of __roundevenf64
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of roundevenf64
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of __roundevenf128
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of roundevenf128
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of __roundevenf32x
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of roundevenf32x
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of __roundevenf64x
/* Round X to nearest integer value, rounding halfway cases to even.  */	declaration of roundevenf64x
/* Use ISO C99.  */	#endif
/* Multiply-add function computed as a ternary operation.  */	declaration of __fma
/* Multiply-add function computed as a ternary operation.  */	declaration of fma
/* Multiply-add function computed as a ternary operation.  */	declaration of __fmaf
/* Multiply-add function computed as a ternary operation.  */	declaration of fmaf
/* Multiply-add function computed as a ternary operation.  */	declaration of __fmal
/* Multiply-add function computed as a ternary operation.  */	declaration of fmal
/* Multiply-add function computed as a ternary operation.  */	declaration of __fmaf32
/* Multiply-add function computed as a ternary operation.  */	declaration of fmaf32
/* Multiply-add function computed as a ternary operation.  */	declaration of __fmaf64
/* Multiply-add function computed as a ternary operation.  */	declaration of fmaf64
/* Multiply-add function computed as a ternary operation.  */	declaration of __fmaf128
/* Multiply-add function computed as a ternary operation.  */	declaration of fmaf128
/* Multiply-add function computed as a ternary operation.  */	declaration of __fmaf32x
/* Multiply-add function computed as a ternary operation.  */	declaration of fmaf32x
/* Multiply-add function computed as a ternary operation.  */	declaration of __fmaf64x
/* Multiply-add function computed as a ternary operation.  */	declaration of fmaf64x
/* Return minimum numeric value from X and Y.  */	declaration of __fmin
/* Return minimum numeric value from X and Y.  */	declaration of fmin
/* Return minimum numeric value from X and Y.  */	declaration of __fminf
/* Return minimum numeric value from X and Y.  */	declaration of fminf
/* Return minimum numeric value from X and Y.  */	declaration of __fminl
/* Return minimum numeric value from X and Y.  */	declaration of fminl
/* Return minimum numeric value from X and Y.  */	declaration of __fminf32
/* Return minimum numeric value from X and Y.  */	declaration of fminf32
/* Return minimum numeric value from X and Y.  */	declaration of __fminf64
/* Return minimum numeric value from X and Y.  */	declaration of fminf64
/* Return minimum numeric value from X and Y.  */	declaration of __fminf128
/* Return minimum numeric value from X and Y.  */	declaration of fminf128
/* Return minimum numeric value from X and Y.  */	declaration of __fminf32x
/* Return minimum numeric value from X and Y.  */	declaration of fminf32x
/* Return minimum numeric value from X and Y.  */	declaration of __fminf64x
/* Return minimum numeric value from X and Y.  */	declaration of fminf64x
/* Return maximum numeric value from X and Y.  */	declaration of __fmax
/* Return maximum numeric value from X and Y.  */	declaration of fmax
/* Return maximum numeric value from X and Y.  */	declaration of __fmaxf
/* Return maximum numeric value from X and Y.  */	declaration of fmaxf
/* Return maximum numeric value from X and Y.  */	declaration of __fmaxl
/* Return maximum numeric value from X and Y.  */	declaration of fmaxl
/* Return maximum numeric value from X and Y.  */	declaration of __fmaxf32
/* Return maximum numeric value from X and Y.  */	declaration of fmaxf32
/* Return maximum numeric value from X and Y.  */	declaration of __fmaxf64
/* Return maximum numeric value from X and Y.  */	declaration of fmaxf64
/* Return maximum numeric value from X and Y.  */	declaration of __fmaxf128
/* Return maximum numeric value from X and Y.  */	declaration of fmaxf128
/* Return maximum numeric value from X and Y.  */	declaration of __fmaxf32x
/* Return maximum numeric value from X and Y.  */	declaration of fmaxf32x
/* Return maximum numeric value from X and Y.  */	declaration of __fmaxf64x
/* Return maximum numeric value from X and Y.  */	declaration of fmaxf64x
/* Return positive difference between X and Y.  */	declaration of __fdim
/* Return positive difference between X and Y.  */	declaration of fdim
/* Return positive difference between X and Y.  */	declaration of __fdimf
/* Return positive difference between X and Y.  */	declaration of fdimf
/* Return positive difference between X and Y.  */	declaration of __fdiml
/* Return positive difference between X and Y.  */	declaration of fdiml
/* Return positive difference between X and Y.  */	declaration of __fdimf32
/* Return positive difference between X and Y.  */	declaration of fdimf32
/* Return positive difference between X and Y.  */	declaration of __fdimf64
/* Return positive difference between X and Y.  */	declaration of fdimf64
/* Return positive difference between X and Y.  */	declaration of __fdimf128
/* Return positive difference between X and Y.  */	declaration of fdimf128
/* Return positive difference between X and Y.  */	declaration of __fdimf32x
/* Return positive difference between X and Y.  */	declaration of fdimf32x
/* Return positive difference between X and Y.  */	declaration of __fdimf64x
/* Return positive difference between X and Y.  */	declaration of fdimf64x
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __lround
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of lround
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __lroundf
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of lroundf
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __lroundl
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of lroundl
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __lroundf32
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of lroundf32
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __lroundf64
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of lroundf64
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __lroundf128
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of lroundf128
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __lroundf32x
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of lroundf32x
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __lroundf64x
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of lroundf64x
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of __lrint
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of lrint
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of __lrintf
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of lrintf
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of __lrintl
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of lrintl
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of __lrintf32
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of lrintf32
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of __lrintf64
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of lrintf64
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of __lrintf128
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of lrintf128
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of __lrintf32x
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of lrintf32x
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of __lrintf64x
"/* Round X to nearest integral value according to current rounding
   direction.  */"	declaration of lrintf64x
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of __remquo
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of remquo
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of __remquof
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of remquof
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of __remquol
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of remquol
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of __remquof32
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of remquof32
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of __remquof64
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of remquof64
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of __remquof128
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of remquof128
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of __remquof32x
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of remquof32x
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of __remquof64x
"/* Compute remainder of X and Y and put in *QUO a value with sign of x/y
   and magnitude congruent `mod 2^n' to the magnitude of the integral
   quotient x/y, with n >= 3.  */"	declaration of remquof64x
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of __trunc
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of trunc
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of __truncf
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of truncf
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of __truncl
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of truncl
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of __truncf32
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of truncf32
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of __truncf64
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of truncf64
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of __truncf128
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of truncf128
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of __truncf32x
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of truncf32x
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of __truncf64x
"/* Round X to the integral value in floating-point format nearest but
   not larger in magnitude.  */"	declaration of truncf64x
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __round
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of round
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __roundf
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of roundf
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __roundl
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of roundl
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __roundf32
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of roundf32
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __roundf64
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of roundf64
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __roundf128
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of roundf128
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __roundf32x
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of roundf32x
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of __roundf64x
"/* Round X to nearest integral value, rounding halfway cases away from
   zero.  */"	declaration of roundf64x
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of __nearbyint
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of nearbyint
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of __nearbyintf
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of nearbyintf
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of __nearbyintl
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of nearbyintl
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of __nearbyintf32
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of nearbyintf32
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of __nearbyintf64
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of nearbyintf64
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of __nearbyintf128
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of nearbyintf128
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of __nearbyintf32x
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of nearbyintf32x
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of __nearbyintf64x
"/* Round X to integral value in floating-point format using current
   rounding direction, but do not raise inexact exception.  */"	declaration of nearbyintf64x
/* Return X times (2 to the Nth power).  */	declaration of __scalbln
/* Return X times (2 to the Nth power).  */	declaration of scalbln
/* Return X times (2 to the Nth power).  */	declaration of __scalblnf
/* Return X times (2 to the Nth power).  */	declaration of scalblnf
/* Return X times (2 to the Nth power).  */	declaration of __scalblnl
/* Return X times (2 to the Nth power).  */	declaration of scalblnl
/* Return X times (2 to the Nth power).  */	declaration of __scalblnf32
/* Return X times (2 to the Nth power).  */	declaration of scalblnf32
/* Return X times (2 to the Nth power).  */	declaration of __scalblnf64
/* Return X times (2 to the Nth power).  */	declaration of scalblnf64
/* Return X times (2 to the Nth power).  */	declaration of __scalblnf128
/* Return X times (2 to the Nth power).  */	declaration of scalblnf128
/* Return X times (2 to the Nth power).  */	declaration of __scalblnf32x
/* Return X times (2 to the Nth power).  */	declaration of scalblnf32x
/* Return X times (2 to the Nth power).  */	declaration of __scalblnf64x
/* Return X times (2 to the Nth power).  */	declaration of scalblnf64x
/* Like ilogb, but returning long int.  */	declaration of __llogb
/* Like ilogb, but returning long int.  */	declaration of llogb
/* Like ilogb, but returning long int.  */	declaration of __llogbf
/* Like ilogb, but returning long int.  */	declaration of llogbf
/* Like ilogb, but returning long int.  */	declaration of __llogbl
/* Like ilogb, but returning long int.  */	declaration of llogbl
/* Like ilogb, but returning long int.  */	declaration of __llogbf32
/* Like ilogb, but returning long int.  */	declaration of llogbf32
/* Like ilogb, but returning long int.  */	declaration of __llogbf64
/* Like ilogb, but returning long int.  */	declaration of llogbf64
/* Like ilogb, but returning long int.  */	declaration of __llogbf128
/* Like ilogb, but returning long int.  */	declaration of llogbf128
/* Like ilogb, but returning long int.  */	declaration of __llogbf32x
/* Like ilogb, but returning long int.  */	declaration of llogbf32x
/* Like ilogb, but returning long int.  */	declaration of __llogbf64x
/* Like ilogb, but returning long int.  */	declaration of llogbf64x
/* Return the binary exponent of X, which must be nonzero.  */	declaration of __ilogb
/* Return the binary exponent of X, which must be nonzero.  */	declaration of ilogb
/* Return the binary exponent of X, which must be nonzero.  */	declaration of __ilogbf
/* Return the binary exponent of X, which must be nonzero.  */	declaration of ilogbf
/* Return the binary exponent of X, which must be nonzero.  */	declaration of __ilogbl
/* Return the binary exponent of X, which must be nonzero.  */	declaration of ilogbl
/* Return the binary exponent of X, which must be nonzero.  */	declaration of __ilogbf32
/* Return the binary exponent of X, which must be nonzero.  */	declaration of ilogbf32
/* Return the binary exponent of X, which must be nonzero.  */	declaration of __ilogbf64
/* Return the binary exponent of X, which must be nonzero.  */	declaration of ilogbf64
/* Return the binary exponent of X, which must be nonzero.  */	declaration of __ilogbf128
/* Return the binary exponent of X, which must be nonzero.  */	declaration of ilogbf128
/* Return the binary exponent of X, which must be nonzero.  */	declaration of __ilogbf32x
/* Return the binary exponent of X, which must be nonzero.  */	declaration of ilogbf32x
/* Return the binary exponent of X, which must be nonzero.  */	declaration of __ilogbf64x
/* Return the binary exponent of X, which must be nonzero.  */	declaration of ilogbf64x
/* Return X times (2 to the Nth power).  */	declaration of __scalbn
/* Return X times (2 to the Nth power).  */	declaration of scalbn
/* Return X times (2 to the Nth power).  */	declaration of __scalbnf
/* Return X times (2 to the Nth power).  */	declaration of scalbnf
/* Return X times (2 to the Nth power).  */	declaration of __scalbnl
/* Return X times (2 to the Nth power).  */	declaration of scalbnl
/* Return X times (2 to the Nth power).  */	declaration of __scalbnf32
/* Return X times (2 to the Nth power).  */	declaration of scalbnf32
/* Return X times (2 to the Nth power).  */	declaration of __scalbnf64
/* Return X times (2 to the Nth power).  */	declaration of scalbnf64
/* Return X times (2 to the Nth power).  */	declaration of __scalbnf128
/* Return X times (2 to the Nth power).  */	declaration of scalbnf128
/* Return X times (2 to the Nth power).  */	declaration of __scalbnf32x
/* Return X times (2 to the Nth power).  */	declaration of scalbnf32x
/* Return X times (2 to the Nth power).  */	declaration of __scalbnf64x
/* Return X times (2 to the Nth power).  */	declaration of scalbnf64x
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of __remainder
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of remainder
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of __remainderf
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of remainderf
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of __remainderl
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of remainderl
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of __remainderf32
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of remainderf32
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of __remainderf64
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of remainderf64
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of __remainderf128
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of remainderf128
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of __remainderf32x
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of remainderf32x
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of __remainderf64x
/* Return the remainder of integer divison X / Y with infinite precision.  */	declaration of remainderf64x
/* Return X + epsilon.  */	declaration of __nextup
/* Return X + epsilon.  */	declaration of nextup
/* Return X + epsilon.  */	declaration of __nextupf
/* Return X + epsilon.  */	declaration of nextupf
/* Return X + epsilon.  */	declaration of __nextupl
/* Return X + epsilon.  */	declaration of nextupl
/* Return X + epsilon.  */	declaration of __nextupf32
/* Return X + epsilon.  */	declaration of nextupf32
/* Return X + epsilon.  */	declaration of __nextupf64
/* Return X + epsilon.  */	declaration of nextupf64
/* Return X + epsilon.  */	declaration of __nextupf128
/* Return X + epsilon.  */	declaration of nextupf128
/* Return X + epsilon.  */	declaration of __nextupf32x
/* Return X + epsilon.  */	declaration of nextupf32x
/* Return X + epsilon.  */	declaration of __nextupf64x
/* Return X + epsilon.  */	declaration of nextupf64x
/* Return X - epsilon.  */	declaration of __nextdown
/* Return X - epsilon.  */	declaration of nextdown
/* Return X - epsilon.  */	declaration of __nextdownf
/* Return X - epsilon.  */	declaration of nextdownf
/* Return X - epsilon.  */	declaration of __nextdownl
/* Return X - epsilon.  */	declaration of nextdownl
/* Return X - epsilon.  */	declaration of __nextdownf32
/* Return X - epsilon.  */	declaration of nextdownf32
/* Return X - epsilon.  */	declaration of __nextdownf64
/* Return X - epsilon.  */	declaration of nextdownf64
/* Return X - epsilon.  */	declaration of __nextdownf128
/* Return X - epsilon.  */	declaration of nextdownf128
/* Return X - epsilon.  */	declaration of __nextdownf32x
/* Return X - epsilon.  */	declaration of nextdownf32x
/* Return X - epsilon.  */	declaration of __nextdownf64x
/* Return X - epsilon.  */	declaration of nextdownf64x
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of __nextafter
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of nextafter
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of __nextafterf
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of nextafterf
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of __nextafterl
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of nextafterl
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of __nextafterf32
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of nextafterf32
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of __nextafterf64
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of nextafterf64
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of __nextafterf128
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of nextafterf128
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of __nextafterf32x
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of nextafterf32x
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of __nextafterf64x
/* Return X + epsilon if X < Y, X - epsilon if X > Y.  */	declaration of nextafterf64x
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of __rint
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of rint
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of __rintf
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of rintf
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of __rintl
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of rintl
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of __rintf32
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of rintf32
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of __rintf64
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of rintf64
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of __rintf128
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of rintf128
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of __rintf32x
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of rintf32x
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of __rintf64x
"/* Return the integer nearest X in the direction of the
   prevailing rounding mode.  */"	declaration of rintf64x
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of __lgamma_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of lgamma_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of __lgammaf_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of lgammaf_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of __lgammal_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of lgammal_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of __lgammaf32_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of lgammaf32_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of __lgammaf64_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of lgammaf64_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of __lgammaf128_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of lgammaf128_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of __lgammaf32x_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of lgammaf32x_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of __lgammaf64x_r
"/* Reentrant version of lgamma.  This function uses the global variable
   `signgam'.  The reentrant version instead takes a pointer and stores
   the value through it.  */"	declaration of lgammaf64x_r
/* Obsolete alias for `lgamma'.  */	#endif
/* Obsolete alias for `lgamma'.  */	declaration of __gamma
/* Obsolete alias for `lgamma'.  */	declaration of gamma
/* Obsolete alias for `lgamma'.  */	declaration of __gammaf
/* Obsolete alias for `lgamma'.  */	declaration of gammaf
/* Obsolete alias for `lgamma'.  */	declaration of __gammal
/* Obsolete alias for `lgamma'.  */	declaration of gammal
/* True gamma function.  */	declaration of __tgamma
/* True gamma function.  */	declaration of tgamma
/* True gamma function.  */	declaration of __tgammaf
/* True gamma function.  */	declaration of tgammaf
/* True gamma function.  */	declaration of __tgammal
/* True gamma function.  */	declaration of tgammal
/* True gamma function.  */	declaration of __tgammaf32
/* True gamma function.  */	declaration of tgammaf32
/* True gamma function.  */	declaration of __tgammaf64
/* True gamma function.  */	declaration of tgammaf64
/* True gamma function.  */	declaration of __tgammaf128
/* True gamma function.  */	declaration of tgammaf128
/* True gamma function.  */	declaration of __tgammaf32x
/* True gamma function.  */	declaration of tgammaf32x
/* True gamma function.  */	declaration of __tgammaf64x
/* True gamma function.  */	declaration of tgammaf64x
/* Error and gamma functions.  */	declaration of __lgamma
/* Error and gamma functions.  */	declaration of lgamma
/* Error and gamma functions.  */	declaration of __erfc
/* Error and gamma functions.  */	declaration of erfc
/* Error and gamma functions.  */	declaration of __erf
/* Error and gamma functions.  */	declaration of erf
/* Error and gamma functions.  */	declaration of __lgammaf
/* Error and gamma functions.  */	declaration of lgammaf
/* Error and gamma functions.  */	declaration of __erfcf
/* Error and gamma functions.  */	declaration of erfcf
/* Error and gamma functions.  */	declaration of __erff
/* Error and gamma functions.  */	declaration of erff
/* Error and gamma functions.  */	declaration of __lgammal
/* Error and gamma functions.  */	declaration of lgammal
/* Error and gamma functions.  */	declaration of __erfcl
/* Error and gamma functions.  */	declaration of erfcl
/* Error and gamma functions.  */	declaration of __erfl
/* Error and gamma functions.  */	declaration of erfl
/* Error and gamma functions.  */	declaration of __lgammaf32
/* Error and gamma functions.  */	declaration of lgammaf32
/* Error and gamma functions.  */	declaration of __erfcf32
/* Error and gamma functions.  */	declaration of erfcf32
/* Error and gamma functions.  */	declaration of __erff32
/* Error and gamma functions.  */	declaration of erff32
/* Error and gamma functions.  */	declaration of __lgammaf64
/* Error and gamma functions.  */	declaration of lgammaf64
/* Error and gamma functions.  */	declaration of __erfcf64
/* Error and gamma functions.  */	declaration of erfcf64
/* Error and gamma functions.  */	declaration of __erff64
/* Error and gamma functions.  */	declaration of erff64
/* Error and gamma functions.  */	declaration of __lgammaf128
/* Error and gamma functions.  */	declaration of lgammaf128
/* Error and gamma functions.  */	declaration of __erfcf128
/* Error and gamma functions.  */	declaration of erfcf128
/* Error and gamma functions.  */	declaration of __erff128
/* Error and gamma functions.  */	declaration of erff128
/* Error and gamma functions.  */	declaration of __lgammaf32x
/* Error and gamma functions.  */	declaration of lgammaf32x
/* Error and gamma functions.  */	declaration of __erfcf32x
/* Error and gamma functions.  */	declaration of erfcf32x
/* Error and gamma functions.  */	declaration of __erff32x
/* Error and gamma functions.  */	declaration of erff32x
/* Error and gamma functions.  */	declaration of __lgammaf64x
/* Error and gamma functions.  */	declaration of lgammaf64x
/* Error and gamma functions.  */	declaration of __erfcf64x
/* Error and gamma functions.  */	declaration of erfcf64x
/* Error and gamma functions.  */	declaration of __erff64x
/* Error and gamma functions.  */	declaration of erff64x
/* Bessel functions.  */	declaration of __yn
/* Bessel functions.  */	declaration of yn
/* Bessel functions.  */	declaration of __y1
/* Bessel functions.  */	declaration of y1
/* Bessel functions.  */	declaration of __y0
/* Bessel functions.  */	declaration of y0
/* Bessel functions.  */	declaration of __jn
/* Bessel functions.  */	declaration of jn
/* Bessel functions.  */	declaration of __j1
/* Bessel functions.  */	declaration of j1
/* Bessel functions.  */	declaration of __j0
/* Bessel functions.  */	declaration of j0
/* Bessel functions.  */	declaration of __ynf
/* Bessel functions.  */	declaration of ynf
/* Bessel functions.  */	declaration of __y1f
/* Bessel functions.  */	declaration of y1f
/* Bessel functions.  */	declaration of __y0f
/* Bessel functions.  */	declaration of y0f
/* Bessel functions.  */	declaration of __jnf
/* Bessel functions.  */	declaration of jnf
/* Bessel functions.  */	declaration of __j1f
/* Bessel functions.  */	declaration of j1f
/* Bessel functions.  */	declaration of __j0f
/* Bessel functions.  */	declaration of j0f
/* Bessel functions.  */	declaration of __ynl
/* Bessel functions.  */	declaration of ynl
/* Bessel functions.  */	declaration of __y1l
/* Bessel functions.  */	declaration of y1l
/* Bessel functions.  */	declaration of __y0l
/* Bessel functions.  */	declaration of y0l
/* Bessel functions.  */	declaration of __jnl
/* Bessel functions.  */	declaration of jnl
/* Bessel functions.  */	declaration of __j1l
/* Bessel functions.  */	declaration of j1l
/* Bessel functions.  */	declaration of __j0l
/* Bessel functions.  */	declaration of j0l
/* Bessel functions.  */	declaration of __ynf32
/* Bessel functions.  */	declaration of ynf32
/* Bessel functions.  */	declaration of __y1f32
/* Bessel functions.  */	declaration of y1f32
/* Bessel functions.  */	declaration of __y0f32
/* Bessel functions.  */	declaration of y0f32
/* Bessel functions.  */	declaration of __jnf32
/* Bessel functions.  */	declaration of jnf32
/* Bessel functions.  */	declaration of __j1f32
/* Bessel functions.  */	declaration of j1f32
/* Bessel functions.  */	declaration of __j0f32
/* Bessel functions.  */	declaration of j0f32
/* Bessel functions.  */	declaration of __ynf64
/* Bessel functions.  */	declaration of ynf64
/* Bessel functions.  */	declaration of __y1f64
/* Bessel functions.  */	declaration of y1f64
/* Bessel functions.  */	declaration of __y0f64
/* Bessel functions.  */	declaration of y0f64
/* Bessel functions.  */	declaration of __jnf64
/* Bessel functions.  */	declaration of jnf64
/* Bessel functions.  */	declaration of __j1f64
/* Bessel functions.  */	declaration of j1f64
/* Bessel functions.  */	declaration of __j0f64
/* Bessel functions.  */	declaration of j0f64
/* Bessel functions.  */	declaration of __ynf128
/* Bessel functions.  */	declaration of ynf128
/* Bessel functions.  */	declaration of __y1f128
/* Bessel functions.  */	declaration of y1f128
/* Bessel functions.  */	declaration of __y0f128
/* Bessel functions.  */	declaration of y0f128
/* Bessel functions.  */	declaration of __jnf128
/* Bessel functions.  */	declaration of jnf128
/* Bessel functions.  */	declaration of __j1f128
/* Bessel functions.  */	declaration of j1f128
/* Bessel functions.  */	declaration of __j0f128
/* Bessel functions.  */	declaration of j0f128
/* Bessel functions.  */	declaration of __ynf32x
/* Bessel functions.  */	declaration of ynf32x
/* Bessel functions.  */	declaration of __y1f32x
/* Bessel functions.  */	declaration of y1f32x
/* Bessel functions.  */	declaration of __y0f32x
/* Bessel functions.  */	declaration of y0f32x
/* Bessel functions.  */	declaration of __jnf32x
/* Bessel functions.  */	declaration of jnf32x
/* Bessel functions.  */	declaration of __j1f32x
/* Bessel functions.  */	declaration of j1f32x
/* Bessel functions.  */	declaration of __j0f32x
/* Bessel functions.  */	declaration of j0f32x
/* Bessel functions.  */	declaration of __ynf64x
/* Bessel functions.  */	declaration of ynf64x
/* Bessel functions.  */	declaration of __y1f64x
/* Bessel functions.  */	declaration of y1f64x
/* Bessel functions.  */	declaration of __y0f64x
/* Bessel functions.  */	declaration of y0f64x
/* Bessel functions.  */	declaration of __jnf64x
/* Bessel functions.  */	declaration of jnf64x
/* Bessel functions.  */	declaration of __j1f64x
/* Bessel functions.  */	declaration of j1f64x
/* Bessel functions.  */	declaration of __j0f64x
/* Bessel functions.  */	declaration of j0f64x
/* Return nonzero if VALUE is not a number.  */	#endif
/* Return nonzero if VALUE is not a number.  */	declaration of isnanf
/* Return nonzero if VALUE is not a number.  */	declaration of isnanl
/* Return representation of qNaN for double type.  */	declaration of __nan
/* Return representation of qNaN for double type.  */	declaration of nan
/* Return representation of qNaN for double type.  */	declaration of __nanf
/* Return representation of qNaN for double type.  */	declaration of nanf
/* Return representation of qNaN for double type.  */	declaration of __nanl
/* Return representation of qNaN for double type.  */	declaration of nanl
/* Return representation of qNaN for double type.  */	declaration of __nanf32
/* Return representation of qNaN for double type.  */	declaration of nanf32
/* Return representation of qNaN for double type.  */	declaration of __nanf64
/* Return representation of qNaN for double type.  */	declaration of nanf64
/* Return representation of qNaN for double type.  */	declaration of __nanf128
/* Return representation of qNaN for double type.  */	declaration of nanf128
/* Return representation of qNaN for double type.  */	declaration of __nanf32x
/* Return representation of qNaN for double type.  */	declaration of nanf32x
/* Return representation of qNaN for double type.  */	declaration of __nanf64x
/* Return representation of qNaN for double type.  */	declaration of nanf64x
/* Return X with its signed changed to Y's.  */	declaration of __copysign
/* Return X with its signed changed to Y's.  */	declaration of copysign
/* Return X with its signed changed to Y's.  */	declaration of __copysignf
/* Return X with its signed changed to Y's.  */	declaration of copysignf
/* Return X with its signed changed to Y's.  */	declaration of __copysignl
/* Return X with its signed changed to Y's.  */	declaration of copysignl
/* Return X with its signed changed to Y's.  */	declaration of __copysignf32
/* Return X with its signed changed to Y's.  */	declaration of copysignf32
/* Return X with its signed changed to Y's.  */	declaration of __copysignf64
/* Return X with its signed changed to Y's.  */	declaration of copysignf64
/* Return X with its signed changed to Y's.  */	declaration of __copysignf128
/* Return X with its signed changed to Y's.  */	declaration of copysignf128
/* Return X with its signed changed to Y's.  */	declaration of __copysignf32x
/* Return X with its signed changed to Y's.  */	declaration of copysignf32x
/* Return X with its signed changed to Y's.  */	declaration of __copysignf64x
/* Return X with its signed changed to Y's.  */	declaration of copysignf64x
/* Use misc.  */	#endif
/* Return the fractional part of X after dividing out `ilogb (X)'.  */	#endif
/* Return the fractional part of X after dividing out `ilogb (X)'.  */	declaration of __significand
/* Return the fractional part of X after dividing out `ilogb (X)'.  */	declaration of significand
/* Return the fractional part of X after dividing out `ilogb (X)'.  */	declaration of __significandf
/* Return the fractional part of X after dividing out `ilogb (X)'.  */	declaration of significandf
/* Return the fractional part of X after dividing out `ilogb (X)'.  */	declaration of __significandl
/* Return the fractional part of X after dividing out `ilogb (X)'.  */	declaration of significandl
/* Return the remainder of X/Y.  */	declaration of __drem
/* Return the remainder of X/Y.  */	declaration of drem
/* Return the remainder of X/Y.  */	declaration of __dremf
/* Return the remainder of X/Y.  */	declaration of dremf
/* Return the remainder of X/Y.  */	declaration of __dreml
/* Return the remainder of X/Y.  */	declaration of dreml
/* Return nonzero if VALUE is finite and not NaN.  */	declaration of finite
/* Return nonzero if VALUE is finite and not NaN.  */	declaration of finitef
/* Return nonzero if VALUE is finite and not NaN.  */	declaration of finitel
"/* Return 0 if VALUE is finite or NaN, +1 if it
   is +Infinity, -1 if it is -Infinity.  */"	#endif
"/* Return 0 if VALUE is finite or NaN, +1 if it
   is +Infinity, -1 if it is -Infinity.  */"	declaration of isinff
"/* Return 0 if VALUE is finite or NaN, +1 if it
   is +Infinity, -1 if it is -Infinity.  */"	declaration of isinfl
/* Floating-point modulo remainder of X/Y.  */	declaration of __fmod
/* Floating-point modulo remainder of X/Y.  */	declaration of fmod
/* Floating-point modulo remainder of X/Y.  */	declaration of __fmodf
/* Floating-point modulo remainder of X/Y.  */	declaration of fmodf
/* Floating-point modulo remainder of X/Y.  */	declaration of __fmodl
/* Floating-point modulo remainder of X/Y.  */	declaration of fmodl
/* Floating-point modulo remainder of X/Y.  */	declaration of __fmodf32
/* Floating-point modulo remainder of X/Y.  */	declaration of fmodf32
/* Floating-point modulo remainder of X/Y.  */	declaration of __fmodf64
/* Floating-point modulo remainder of X/Y.  */	declaration of fmodf64
/* Floating-point modulo remainder of X/Y.  */	declaration of __fmodf128
/* Floating-point modulo remainder of X/Y.  */	declaration of fmodf128
/* Floating-point modulo remainder of X/Y.  */	declaration of __fmodf32x
/* Floating-point modulo remainder of X/Y.  */	declaration of fmodf32x
/* Floating-point modulo remainder of X/Y.  */	declaration of __fmodf64x
/* Floating-point modulo remainder of X/Y.  */	declaration of fmodf64x
/* Largest integer not greater than X.  */	declaration of __floor
/* Largest integer not greater than X.  */	declaration of floor
/* Largest integer not greater than X.  */	declaration of __floorf
/* Largest integer not greater than X.  */	declaration of floorf
/* Largest integer not greater than X.  */	declaration of __floorl
/* Largest integer not greater than X.  */	declaration of floorl
/* Largest integer not greater than X.  */	declaration of __floorf32
/* Largest integer not greater than X.  */	declaration of floorf32
/* Largest integer not greater than X.  */	declaration of __floorf64
/* Largest integer not greater than X.  */	declaration of floorf64
/* Largest integer not greater than X.  */	declaration of __floorf128
/* Largest integer not greater than X.  */	declaration of floorf128
/* Largest integer not greater than X.  */	declaration of __floorf32x
/* Largest integer not greater than X.  */	declaration of floorf32x
/* Largest integer not greater than X.  */	declaration of __floorf64x
/* Largest integer not greater than X.  */	declaration of floorf64x
/* Absolute value of X.  */	declaration of __fabs
/* Absolute value of X.  */	declaration of fabs
/* Absolute value of X.  */	declaration of __fabsf
/* Absolute value of X.  */	declaration of fabsf
/* Absolute value of X.  */	declaration of __fabsl
/* Absolute value of X.  */	declaration of fabsl
/* Absolute value of X.  */	declaration of __fabsf32
/* Absolute value of X.  */	declaration of fabsf32
/* Absolute value of X.  */	declaration of __fabsf64
/* Absolute value of X.  */	declaration of fabsf64
/* Absolute value of X.  */	declaration of __fabsf128
/* Absolute value of X.  */	declaration of fabsf128
/* Absolute value of X.  */	declaration of __fabsf32x
/* Absolute value of X.  */	declaration of fabsf32x
/* Absolute value of X.  */	declaration of __fabsf64x
/* Absolute value of X.  */	declaration of fabsf64x
/* Smallest integral value not less than X.  */	declaration of __ceil
/* Smallest integral value not less than X.  */	declaration of ceil
/* Smallest integral value not less than X.  */	declaration of __ceilf
/* Smallest integral value not less than X.  */	declaration of ceilf
/* Smallest integral value not less than X.  */	declaration of __ceill
/* Smallest integral value not less than X.  */	declaration of ceill
/* Smallest integral value not less than X.  */	declaration of __ceilf32
/* Smallest integral value not less than X.  */	declaration of ceilf32
/* Smallest integral value not less than X.  */	declaration of __ceilf64
/* Smallest integral value not less than X.  */	declaration of ceilf64
/* Smallest integral value not less than X.  */	declaration of __ceilf128
/* Smallest integral value not less than X.  */	declaration of ceilf128
/* Smallest integral value not less than X.  */	declaration of __ceilf32x
/* Smallest integral value not less than X.  */	declaration of ceilf32x
/* Smallest integral value not less than X.  */	declaration of __ceilf64x
/* Smallest integral value not less than X.  */	declaration of ceilf64x
/* Return the cube root of X.  */	declaration of __cbrt
/* Return the cube root of X.  */	declaration of cbrt
/* Return the cube root of X.  */	declaration of __cbrtf
/* Return the cube root of X.  */	declaration of cbrtf
/* Return the cube root of X.  */	declaration of __cbrtl
/* Return the cube root of X.  */	declaration of cbrtl
/* Return the cube root of X.  */	declaration of __cbrtf32
/* Return the cube root of X.  */	declaration of cbrtf32
/* Return the cube root of X.  */	declaration of __cbrtf64
/* Return the cube root of X.  */	declaration of cbrtf64
/* Return the cube root of X.  */	declaration of __cbrtf128
/* Return the cube root of X.  */	declaration of cbrtf128
/* Return the cube root of X.  */	declaration of __cbrtf32x
/* Return the cube root of X.  */	declaration of cbrtf32x
/* Return the cube root of X.  */	declaration of __cbrtf64x
/* Return the cube root of X.  */	declaration of cbrtf64x
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of __hypot
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of hypot
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of __hypotf
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of hypotf
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of __hypotl
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of hypotl
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of __hypotf32
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of hypotf32
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of __hypotf64
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of hypotf64
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of __hypotf128
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of hypotf128
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of __hypotf32x
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of hypotf32x
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of __hypotf64x
/* Return `sqrt(X*X + Y*Y)'.  */	declaration of hypotf64x
/* Return the square root of X.  */	declaration of __sqrt
/* Return the square root of X.  */	declaration of sqrt
/* Return the square root of X.  */	declaration of __sqrtf
/* Return the square root of X.  */	declaration of sqrtf
/* Return the square root of X.  */	declaration of __sqrtl
/* Return the square root of X.  */	declaration of sqrtl
/* Return the square root of X.  */	declaration of __sqrtf32
/* Return the square root of X.  */	declaration of sqrtf32
/* Return the square root of X.  */	declaration of __sqrtf64
/* Return the square root of X.  */	declaration of sqrtf64
/* Return the square root of X.  */	declaration of __sqrtf128
/* Return the square root of X.  */	declaration of sqrtf128
/* Return the square root of X.  */	declaration of __sqrtf32x
/* Return the square root of X.  */	declaration of sqrtf32x
/* Return the square root of X.  */	declaration of __sqrtf64x
/* Return the square root of X.  */	declaration of sqrtf64x
/* Return X to the Y power.  */	declaration of __pow
/* Return X to the Y power.  */	declaration of pow
/* Return X to the Y power.  */	declaration of __powf
/* Return X to the Y power.  */	declaration of powf
/* Return X to the Y power.  */	declaration of __powl
/* Return X to the Y power.  */	declaration of powl
/* Return X to the Y power.  */	declaration of __powf32
/* Return X to the Y power.  */	declaration of powf32
/* Return X to the Y power.  */	declaration of __powf64
/* Return X to the Y power.  */	declaration of powf64
/* Return X to the Y power.  */	declaration of __powf128
/* Return X to the Y power.  */	declaration of powf128
/* Return X to the Y power.  */	declaration of __powf32x
/* Return X to the Y power.  */	declaration of powf32x
/* Return X to the Y power.  */	declaration of __powf64x
/* Return X to the Y power.  */	declaration of powf64x
/* Compute base-2 logarithm of X.  */	declaration of __log2
/* Compute base-2 logarithm of X.  */	declaration of log2
/* Compute base-2 logarithm of X.  */	declaration of __log2f
/* Compute base-2 logarithm of X.  */	declaration of log2f
/* Compute base-2 logarithm of X.  */	declaration of __log2l
/* Compute base-2 logarithm of X.  */	declaration of log2l
/* Compute base-2 logarithm of X.  */	declaration of __log2f32
/* Compute base-2 logarithm of X.  */	declaration of log2f32
/* Compute base-2 logarithm of X.  */	declaration of __log2f64
/* Compute base-2 logarithm of X.  */	declaration of log2f64
/* Compute base-2 logarithm of X.  */	declaration of __log2f128
/* Compute base-2 logarithm of X.  */	declaration of log2f128
/* Compute base-2 logarithm of X.  */	declaration of __log2f32x
/* Compute base-2 logarithm of X.  */	declaration of log2f32x
/* Compute base-2 logarithm of X.  */	declaration of __log2f64x
/* Compute base-2 logarithm of X.  */	declaration of log2f64x
/* Compute base-2 exponential of X.  */	declaration of __exp2
/* Compute base-2 exponential of X.  */	declaration of exp2
/* Compute base-2 exponential of X.  */	declaration of __exp2f
/* Compute base-2 exponential of X.  */	declaration of exp2f
/* Compute base-2 exponential of X.  */	declaration of __exp2l
/* Compute base-2 exponential of X.  */	declaration of exp2l
/* Compute base-2 exponential of X.  */	declaration of __exp2f32
/* Compute base-2 exponential of X.  */	declaration of exp2f32
/* Compute base-2 exponential of X.  */	declaration of __exp2f64
/* Compute base-2 exponential of X.  */	declaration of exp2f64
/* Compute base-2 exponential of X.  */	declaration of __exp2f128
/* Compute base-2 exponential of X.  */	declaration of exp2f128
/* Compute base-2 exponential of X.  */	declaration of __exp2f32x
/* Compute base-2 exponential of X.  */	declaration of exp2f32x
/* Compute base-2 exponential of X.  */	declaration of __exp2f64x
/* Compute base-2 exponential of X.  */	declaration of exp2f64x
/* Return the base 2 signed integral exponent of X.  */	declaration of __logb
/* Return the base 2 signed integral exponent of X.  */	declaration of logb
/* Return the base 2 signed integral exponent of X.  */	declaration of __logbf
/* Return the base 2 signed integral exponent of X.  */	declaration of logbf
/* Return the base 2 signed integral exponent of X.  */	declaration of __logbl
/* Return the base 2 signed integral exponent of X.  */	declaration of logbl
/* Return the base 2 signed integral exponent of X.  */	declaration of __logbf32
/* Return the base 2 signed integral exponent of X.  */	declaration of logbf32
/* Return the base 2 signed integral exponent of X.  */	declaration of __logbf64
/* Return the base 2 signed integral exponent of X.  */	declaration of logbf64
/* Return the base 2 signed integral exponent of X.  */	declaration of __logbf128
/* Return the base 2 signed integral exponent of X.  */	declaration of logbf128
/* Return the base 2 signed integral exponent of X.  */	declaration of __logbf32x
/* Return the base 2 signed integral exponent of X.  */	declaration of logbf32x
/* Return the base 2 signed integral exponent of X.  */	declaration of __logbf64x
/* Return the base 2 signed integral exponent of X.  */	declaration of logbf64x
/* Return log(1 + X).  */	declaration of __log1p
/* Return log(1 + X).  */	declaration of log1p
/* Return log(1 + X).  */	declaration of __log1pf
/* Return log(1 + X).  */	declaration of log1pf
/* Return log(1 + X).  */	declaration of __log1pl
/* Return log(1 + X).  */	declaration of log1pl
/* Return log(1 + X).  */	declaration of __log1pf32
/* Return log(1 + X).  */	declaration of log1pf32
/* Return log(1 + X).  */	declaration of __log1pf64
/* Return log(1 + X).  */	declaration of log1pf64
/* Return log(1 + X).  */	declaration of __log1pf128
/* Return log(1 + X).  */	declaration of log1pf128
/* Return log(1 + X).  */	declaration of __log1pf32x
/* Return log(1 + X).  */	declaration of log1pf32x
/* Return log(1 + X).  */	declaration of __log1pf64x
/* Return log(1 + X).  */	declaration of log1pf64x
/* Return exp(X) - 1.  */	declaration of __expm1
/* Return exp(X) - 1.  */	declaration of expm1
/* Return exp(X) - 1.  */	declaration of __expm1f
/* Return exp(X) - 1.  */	declaration of expm1f
/* Return exp(X) - 1.  */	declaration of __expm1l
/* Return exp(X) - 1.  */	declaration of expm1l
/* Return exp(X) - 1.  */	declaration of __expm1f32
/* Return exp(X) - 1.  */	declaration of expm1f32
/* Return exp(X) - 1.  */	declaration of __expm1f64
/* Return exp(X) - 1.  */	declaration of expm1f64
/* Return exp(X) - 1.  */	declaration of __expm1f128
/* Return exp(X) - 1.  */	declaration of expm1f128
/* Return exp(X) - 1.  */	declaration of __expm1f32x
/* Return exp(X) - 1.  */	declaration of expm1f32x
/* Return exp(X) - 1.  */	declaration of __expm1f64x
/* Return exp(X) - 1.  */	declaration of expm1f64x
/* Compute exponent to base ten.  */	declaration of __exp10
/* Compute exponent to base ten.  */	declaration of exp10
/* Compute exponent to base ten.  */	declaration of __exp10f
/* Compute exponent to base ten.  */	declaration of exp10f
/* Compute exponent to base ten.  */	declaration of __exp10l
/* Compute exponent to base ten.  */	declaration of exp10l
/* Compute exponent to base ten.  */	declaration of __exp10f32
/* Compute exponent to base ten.  */	declaration of exp10f32
/* Compute exponent to base ten.  */	declaration of __exp10f64
/* Compute exponent to base ten.  */	declaration of exp10f64
/* Compute exponent to base ten.  */	declaration of __exp10f128
/* Compute exponent to base ten.  */	declaration of exp10f128
/* Compute exponent to base ten.  */	declaration of __exp10f32x
/* Compute exponent to base ten.  */	declaration of exp10f32x
/* Compute exponent to base ten.  */	declaration of __exp10f64x
/* Compute exponent to base ten.  */	declaration of exp10f64x
/* Break VALUE into integral and fractional parts.  */	declaration of __modf
/* Break VALUE into integral and fractional parts.  */	declaration of modf
/* Break VALUE into integral and fractional parts.  */	declaration of __modff
/* Break VALUE into integral and fractional parts.  */	declaration of modff
/* Break VALUE into integral and fractional parts.  */	declaration of __modfl
/* Break VALUE into integral and fractional parts.  */	declaration of modfl
/* Break VALUE into integral and fractional parts.  */	declaration of __modff32
/* Break VALUE into integral and fractional parts.  */	declaration of modff32
/* Break VALUE into integral and fractional parts.  */	declaration of __modff64
/* Break VALUE into integral and fractional parts.  */	declaration of modff64
/* Break VALUE into integral and fractional parts.  */	declaration of __modff128
/* Break VALUE into integral and fractional parts.  */	declaration of modff128
/* Break VALUE into integral and fractional parts.  */	declaration of __modff32x
/* Break VALUE into integral and fractional parts.  */	declaration of modff32x
/* Break VALUE into integral and fractional parts.  */	declaration of __modff64x
/* Break VALUE into integral and fractional parts.  */	declaration of modff64x
/* Base-ten logarithm of X.  */	declaration of __log10
/* Base-ten logarithm of X.  */	declaration of log10
/* Base-ten logarithm of X.  */	declaration of __log10f
/* Base-ten logarithm of X.  */	declaration of log10f
/* Base-ten logarithm of X.  */	declaration of __log10l
/* Base-ten logarithm of X.  */	declaration of log10l
/* Base-ten logarithm of X.  */	declaration of __log10f32
/* Base-ten logarithm of X.  */	declaration of log10f32
/* Base-ten logarithm of X.  */	declaration of __log10f64
/* Base-ten logarithm of X.  */	declaration of log10f64
/* Base-ten logarithm of X.  */	declaration of __log10f128
/* Base-ten logarithm of X.  */	declaration of log10f128
/* Base-ten logarithm of X.  */	declaration of __log10f32x
/* Base-ten logarithm of X.  */	declaration of log10f32x
/* Base-ten logarithm of X.  */	declaration of __log10f64x
/* Base-ten logarithm of X.  */	declaration of log10f64x
/* Natural logarithm of X.  */	declaration of __log
/* Natural logarithm of X.  */	declaration of log
/* Natural logarithm of X.  */	declaration of __logf
/* Natural logarithm of X.  */	declaration of logf
/* Natural logarithm of X.  */	declaration of __logl
/* Natural logarithm of X.  */	declaration of logl
/* Natural logarithm of X.  */	declaration of __logf32
/* Natural logarithm of X.  */	declaration of logf32
/* Natural logarithm of X.  */	declaration of __logf64
/* Natural logarithm of X.  */	declaration of logf64
/* Natural logarithm of X.  */	declaration of __logf128
/* Natural logarithm of X.  */	declaration of logf128
/* Natural logarithm of X.  */	declaration of __logf32x
/* Natural logarithm of X.  */	declaration of logf32x
/* Natural logarithm of X.  */	declaration of __logf64x
/* Natural logarithm of X.  */	declaration of logf64x
/* X times (two to the EXP power).  */	declaration of __ldexp
/* X times (two to the EXP power).  */	declaration of ldexp
/* X times (two to the EXP power).  */	declaration of __ldexpf
/* X times (two to the EXP power).  */	declaration of ldexpf
/* X times (two to the EXP power).  */	declaration of __ldexpl
/* X times (two to the EXP power).  */	declaration of ldexpl
/* X times (two to the EXP power).  */	declaration of __ldexpf32
/* X times (two to the EXP power).  */	declaration of ldexpf32
/* X times (two to the EXP power).  */	declaration of __ldexpf64
/* X times (two to the EXP power).  */	declaration of ldexpf64
/* X times (two to the EXP power).  */	declaration of __ldexpf128
/* X times (two to the EXP power).  */	declaration of ldexpf128
/* X times (two to the EXP power).  */	declaration of __ldexpf32x
/* X times (two to the EXP power).  */	declaration of ldexpf32x
/* X times (two to the EXP power).  */	declaration of __ldexpf64x
/* X times (two to the EXP power).  */	declaration of ldexpf64x
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of __frexp
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of frexp
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of __frexpf
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of frexpf
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of __frexpl
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of frexpl
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of __frexpf32
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of frexpf32
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of __frexpf64
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of frexpf64
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of __frexpf128
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of frexpf128
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of __frexpf32x
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of frexpf32x
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of __frexpf64x
/* Break VALUE into a normalized fraction and an integral power of 2.  */	declaration of frexpf64x
/* Exponential function of X.  */	declaration of __exp
/* Exponential function of X.  */	declaration of exp
/* Exponential function of X.  */	declaration of __expf
/* Exponential function of X.  */	declaration of expf
/* Exponential function of X.  */	declaration of __expl
/* Exponential function of X.  */	declaration of expl
/* Exponential function of X.  */	declaration of __expf32
/* Exponential function of X.  */	declaration of expf32
/* Exponential function of X.  */	declaration of __expf64
/* Exponential function of X.  */	declaration of expf64
/* Exponential function of X.  */	declaration of __expf128
/* Exponential function of X.  */	declaration of expf128
/* Exponential function of X.  */	declaration of __expf32x
/* Exponential function of X.  */	declaration of expf32x
/* Exponential function of X.  */	declaration of __expf64x
/* Exponential function of X.  */	declaration of expf64x
/* Hyperbolic arc tangent of X.  */	declaration of __atanh
/* Hyperbolic arc tangent of X.  */	declaration of atanh
/* Hyperbolic arc tangent of X.  */	declaration of __atanhf
/* Hyperbolic arc tangent of X.  */	declaration of atanhf
/* Hyperbolic arc tangent of X.  */	declaration of __atanhl
/* Hyperbolic arc tangent of X.  */	declaration of atanhl
/* Hyperbolic arc tangent of X.  */	declaration of __atanhf32
/* Hyperbolic arc tangent of X.  */	declaration of atanhf32
/* Hyperbolic arc tangent of X.  */	declaration of __atanhf64
/* Hyperbolic arc tangent of X.  */	declaration of atanhf64
/* Hyperbolic arc tangent of X.  */	declaration of __atanhf128
/* Hyperbolic arc tangent of X.  */	declaration of atanhf128
/* Hyperbolic arc tangent of X.  */	declaration of __atanhf32x
/* Hyperbolic arc tangent of X.  */	declaration of atanhf32x
/* Hyperbolic arc tangent of X.  */	declaration of __atanhf64x
/* Hyperbolic arc tangent of X.  */	declaration of atanhf64x
/* Hyperbolic arc sine of X.  */	declaration of __asinh
/* Hyperbolic arc sine of X.  */	declaration of asinh
/* Hyperbolic arc sine of X.  */	declaration of __asinhf
/* Hyperbolic arc sine of X.  */	declaration of asinhf
/* Hyperbolic arc sine of X.  */	declaration of __asinhl
/* Hyperbolic arc sine of X.  */	declaration of asinhl
/* Hyperbolic arc sine of X.  */	declaration of __asinhf32
/* Hyperbolic arc sine of X.  */	declaration of asinhf32
/* Hyperbolic arc sine of X.  */	declaration of __asinhf64
/* Hyperbolic arc sine of X.  */	declaration of asinhf64
/* Hyperbolic arc sine of X.  */	declaration of __asinhf128
/* Hyperbolic arc sine of X.  */	declaration of asinhf128
/* Hyperbolic arc sine of X.  */	declaration of __asinhf32x
/* Hyperbolic arc sine of X.  */	declaration of asinhf32x
/* Hyperbolic arc sine of X.  */	declaration of __asinhf64x
/* Hyperbolic arc sine of X.  */	declaration of asinhf64x
/* Hyperbolic arc cosine of X.  */	declaration of __acosh
/* Hyperbolic arc cosine of X.  */	declaration of acosh
/* Hyperbolic arc cosine of X.  */	declaration of __acoshf
/* Hyperbolic arc cosine of X.  */	declaration of acoshf
/* Hyperbolic arc cosine of X.  */	declaration of __acoshl
/* Hyperbolic arc cosine of X.  */	declaration of acoshl
/* Hyperbolic arc cosine of X.  */	declaration of __acoshf32
/* Hyperbolic arc cosine of X.  */	declaration of acoshf32
/* Hyperbolic arc cosine of X.  */	declaration of __acoshf64
/* Hyperbolic arc cosine of X.  */	declaration of acoshf64
/* Hyperbolic arc cosine of X.  */	declaration of __acoshf128
/* Hyperbolic arc cosine of X.  */	declaration of acoshf128
/* Hyperbolic arc cosine of X.  */	declaration of __acoshf32x
/* Hyperbolic arc cosine of X.  */	declaration of acoshf32x
/* Hyperbolic arc cosine of X.  */	declaration of __acoshf64x
/* Hyperbolic arc cosine of X.  */	declaration of acoshf64x
/* Cosine and sine of X.  */	declaration of __sincos
/* Cosine and sine of X.  */	declaration of sincos
/* Cosine and sine of X.  */	declaration of __sincosf
/* Cosine and sine of X.  */	declaration of sincosf
/* Cosine and sine of X.  */	declaration of __sincosl
/* Cosine and sine of X.  */	declaration of sincosl
/* Cosine and sine of X.  */	declaration of __sincosf32
/* Cosine and sine of X.  */	declaration of sincosf32
/* Cosine and sine of X.  */	declaration of __sincosf64
/* Cosine and sine of X.  */	declaration of sincosf64
/* Cosine and sine of X.  */	declaration of __sincosf128
/* Cosine and sine of X.  */	declaration of sincosf128
/* Cosine and sine of X.  */	declaration of __sincosf32x
/* Cosine and sine of X.  */	declaration of sincosf32x
/* Cosine and sine of X.  */	declaration of __sincosf64x
/* Cosine and sine of X.  */	declaration of sincosf64x
/* Hyperbolic tangent of X.  */	declaration of __tanh
/* Hyperbolic tangent of X.  */	declaration of tanh
/* Hyperbolic tangent of X.  */	declaration of __tanhf
/* Hyperbolic tangent of X.  */	declaration of tanhf
/* Hyperbolic tangent of X.  */	declaration of __tanhl
/* Hyperbolic tangent of X.  */	declaration of tanhl
/* Hyperbolic tangent of X.  */	declaration of __tanhf32
/* Hyperbolic tangent of X.  */	declaration of tanhf32
/* Hyperbolic tangent of X.  */	declaration of __tanhf64
/* Hyperbolic tangent of X.  */	declaration of tanhf64
/* Hyperbolic tangent of X.  */	declaration of __tanhf128
/* Hyperbolic tangent of X.  */	declaration of tanhf128
/* Hyperbolic tangent of X.  */	declaration of __tanhf32x
/* Hyperbolic tangent of X.  */	declaration of tanhf32x
/* Hyperbolic tangent of X.  */	declaration of __tanhf64x
/* Hyperbolic tangent of X.  */	declaration of tanhf64x
/* Hyperbolic sine of X.  */	declaration of __sinh
/* Hyperbolic sine of X.  */	declaration of sinh
/* Hyperbolic sine of X.  */	declaration of __sinhf
/* Hyperbolic sine of X.  */	declaration of sinhf
/* Hyperbolic sine of X.  */	declaration of __sinhl
/* Hyperbolic sine of X.  */	declaration of sinhl
/* Hyperbolic sine of X.  */	declaration of __sinhf32
/* Hyperbolic sine of X.  */	declaration of sinhf32
/* Hyperbolic sine of X.  */	declaration of __sinhf64
/* Hyperbolic sine of X.  */	declaration of sinhf64
/* Hyperbolic sine of X.  */	declaration of __sinhf128
/* Hyperbolic sine of X.  */	declaration of sinhf128
/* Hyperbolic sine of X.  */	declaration of __sinhf32x
/* Hyperbolic sine of X.  */	declaration of sinhf32x
/* Hyperbolic sine of X.  */	declaration of __sinhf64x
/* Hyperbolic sine of X.  */	declaration of sinhf64x
/* Hyperbolic cosine of X.  */	declaration of __cosh
/* Hyperbolic cosine of X.  */	declaration of cosh
/* Hyperbolic cosine of X.  */	declaration of __coshf
/* Hyperbolic cosine of X.  */	declaration of coshf
/* Hyperbolic cosine of X.  */	declaration of __coshl
/* Hyperbolic cosine of X.  */	declaration of coshl
/* Hyperbolic cosine of X.  */	declaration of __coshf32
/* Hyperbolic cosine of X.  */	declaration of coshf32
/* Hyperbolic cosine of X.  */	declaration of __coshf64
/* Hyperbolic cosine of X.  */	declaration of coshf64
/* Hyperbolic cosine of X.  */	declaration of __coshf128
/* Hyperbolic cosine of X.  */	declaration of coshf128
/* Hyperbolic cosine of X.  */	declaration of __coshf32x
/* Hyperbolic cosine of X.  */	declaration of coshf32x
/* Hyperbolic cosine of X.  */	declaration of __coshf64x
/* Hyperbolic cosine of X.  */	declaration of coshf64x
/* Tangent of X.  */	declaration of __tan
/* Tangent of X.  */	declaration of tan
/* Tangent of X.  */	declaration of __tanf
/* Tangent of X.  */	declaration of tanf
/* Tangent of X.  */	declaration of __tanl
/* Tangent of X.  */	declaration of tanl
/* Tangent of X.  */	declaration of __tanf32
/* Tangent of X.  */	declaration of tanf32
/* Tangent of X.  */	declaration of __tanf64
/* Tangent of X.  */	declaration of tanf64
/* Tangent of X.  */	declaration of __tanf128
/* Tangent of X.  */	declaration of tanf128
/* Tangent of X.  */	declaration of __tanf32x
/* Tangent of X.  */	declaration of tanf32x
/* Tangent of X.  */	declaration of __tanf64x
/* Tangent of X.  */	declaration of tanf64x
/* Sine of X.  */	declaration of __sin
/* Sine of X.  */	declaration of sin
/* Sine of X.  */	declaration of __sinf
/* Sine of X.  */	declaration of sinf
/* Sine of X.  */	declaration of __sinl
/* Sine of X.  */	declaration of sinl
/* Sine of X.  */	declaration of __sinf32
/* Sine of X.  */	declaration of sinf32
/* Sine of X.  */	declaration of __sinf64
/* Sine of X.  */	declaration of sinf64
/* Sine of X.  */	declaration of __sinf128
/* Sine of X.  */	declaration of sinf128
/* Sine of X.  */	declaration of __sinf32x
/* Sine of X.  */	declaration of sinf32x
/* Sine of X.  */	declaration of __sinf64x
/* Sine of X.  */	declaration of sinf64x
/* Cosine of X.  */	declaration of __cos
/* Cosine of X.  */	declaration of cos
/* Cosine of X.  */	declaration of __cosf
/* Cosine of X.  */	declaration of cosf
/* Cosine of X.  */	declaration of __cosl
/* Cosine of X.  */	declaration of cosl
/* Cosine of X.  */	declaration of __cosf32
/* Cosine of X.  */	declaration of cosf32
/* Cosine of X.  */	declaration of __cosf64
/* Cosine of X.  */	declaration of cosf64
/* Cosine of X.  */	declaration of __cosf128
/* Cosine of X.  */	declaration of cosf128
/* Cosine of X.  */	declaration of __cosf32x
/* Cosine of X.  */	declaration of cosf32x
/* Cosine of X.  */	declaration of __cosf64x
/* Cosine of X.  */	declaration of cosf64x
/* Arc tangent of Y/X.  */	declaration of __atan2
/* Arc tangent of Y/X.  */	declaration of atan2
/* Arc tangent of Y/X.  */	declaration of __atan2f
/* Arc tangent of Y/X.  */	declaration of atan2f
/* Arc tangent of Y/X.  */	declaration of __atan2l
/* Arc tangent of Y/X.  */	declaration of atan2l
/* Arc tangent of Y/X.  */	declaration of __atan2f32
/* Arc tangent of Y/X.  */	declaration of atan2f32
/* Arc tangent of Y/X.  */	declaration of __atan2f64
/* Arc tangent of Y/X.  */	declaration of atan2f64
/* Arc tangent of Y/X.  */	declaration of __atan2f128
/* Arc tangent of Y/X.  */	declaration of atan2f128
/* Arc tangent of Y/X.  */	declaration of __atan2f32x
/* Arc tangent of Y/X.  */	declaration of atan2f32x
/* Arc tangent of Y/X.  */	declaration of __atan2f64x
/* Arc tangent of Y/X.  */	declaration of atan2f64x
/* Arc tangent of X.  */	declaration of __atan
/* Arc tangent of X.  */	declaration of atan
/* Arc tangent of X.  */	declaration of __atanf
/* Arc tangent of X.  */	declaration of atanf
/* Arc tangent of X.  */	declaration of __atanl
/* Arc tangent of X.  */	declaration of atanl
/* Arc tangent of X.  */	declaration of __atanf32
/* Arc tangent of X.  */	declaration of atanf32
/* Arc tangent of X.  */	declaration of __atanf64
/* Arc tangent of X.  */	declaration of atanf64
/* Arc tangent of X.  */	declaration of __atanf128
/* Arc tangent of X.  */	declaration of atanf128
/* Arc tangent of X.  */	declaration of __atanf32x
/* Arc tangent of X.  */	declaration of atanf32x
/* Arc tangent of X.  */	declaration of __atanf64x
/* Arc tangent of X.  */	declaration of atanf64x
/* Arc sine of X.  */	declaration of __asin
/* Arc sine of X.  */	declaration of asin
/* Arc sine of X.  */	declaration of __asinf
/* Arc sine of X.  */	declaration of asinf
/* Arc sine of X.  */	declaration of __asinl
/* Arc sine of X.  */	declaration of asinl
/* Arc sine of X.  */	declaration of __asinf32
/* Arc sine of X.  */	declaration of asinf32
/* Arc sine of X.  */	declaration of __asinf64
/* Arc sine of X.  */	declaration of asinf64
/* Arc sine of X.  */	declaration of __asinf128
/* Arc sine of X.  */	declaration of asinf128
/* Arc sine of X.  */	declaration of __asinf32x
/* Arc sine of X.  */	declaration of asinf32x
/* Arc sine of X.  */	declaration of __asinf64x
/* Arc sine of X.  */	declaration of asinf64x
/* Arc cosine of X.  */	declaration of __acos
/* Arc cosine of X.  */	declaration of acos
/* Arc cosine of X.  */	declaration of __acosf
/* Arc cosine of X.  */	declaration of acosf
/* Arc cosine of X.  */	declaration of __acosl
/* Arc cosine of X.  */	declaration of acosl
/* Arc cosine of X.  */	declaration of __acosf32
/* Arc cosine of X.  */	declaration of acosf32
/* Arc cosine of X.  */	declaration of __acosf64
/* Arc cosine of X.  */	declaration of acosf64
/* Arc cosine of X.  */	declaration of __acosf128
/* Arc cosine of X.  */	declaration of acosf128
/* Arc cosine of X.  */	declaration of __acosf32x
/* Arc cosine of X.  */	declaration of acosf32x
/* Arc cosine of X.  */	declaration of __acosf64x
/* Arc cosine of X.  */	declaration of acosf64x
"/* NOTE: Because of the special way this file is used by <math.h>, this
   file must NOT be protected from multiple inclusion as header files
   usually are.

   This file provides prototype declarations for the math functions.
   Most functions are declared using the macro:

   __MATHCALL (NAME,[_r], (ARGS...));

   This means there is a function `NAME' returning `double' and a function
   `NAMEf' returning `float'.  Each place `_Mdouble_' appears in the
   prototype, that is actually `double' in the prototype for `NAME' and
   `float' in the prototype for `NAMEf'.  Reentrant variant functions are
   called `NAME_r' and `NAMEf_r'.

   Functions returning other types like `int' are declared using the macro:

   __MATHDECL (TYPE, NAME,[_r], (ARGS...));

   This is just like __MATHCALL but for a function returning `TYPE'
   instead of `_Mdouble_'.  In all of these cases, there is still
   both a `NAME' and a `NAMEf' that takes `float' arguments.

   Note that there must be no whitespace before the argument passed for
   NAME, to make token pasting work with -traditional.  */"	#ifndef _MATH_H
/* Subtract.  */	declaration of fsub
/* Subtract.  */	declaration of fsubl
/* Subtract.  */	declaration of dsubl
/* Subtract.  */	declaration of f32subf32x
/* Subtract.  */	declaration of f32subf64
/* Subtract.  */	declaration of f32subf64x
/* Subtract.  */	declaration of f32subf128
/* Subtract.  */	declaration of f32xsubf64
/* Subtract.  */	declaration of f32xsubf64x
/* Subtract.  */	declaration of f32xsubf128
/* Subtract.  */	declaration of f64subf64x
/* Subtract.  */	declaration of f64subf128
/* Subtract.  */	declaration of f64xsubf128
/* Multiply.  */	declaration of fmul
/* Multiply.  */	declaration of fmull
/* Multiply.  */	declaration of dmull
/* Multiply.  */	declaration of f32mulf32x
/* Multiply.  */	declaration of f32mulf64
/* Multiply.  */	declaration of f32mulf64x
/* Multiply.  */	declaration of f32mulf128
/* Multiply.  */	declaration of f32xmulf64
/* Multiply.  */	declaration of f32xmulf64x
/* Multiply.  */	declaration of f32xmulf128
/* Multiply.  */	declaration of f64mulf64x
/* Multiply.  */	declaration of f64mulf128
/* Multiply.  */	declaration of f64xmulf128
/* Divide.  */	declaration of fdiv
/* Divide.  */	declaration of fdivl
/* Divide.  */	declaration of ddivl
/* Divide.  */	declaration of f32divf32x
/* Divide.  */	declaration of f32divf64
/* Divide.  */	declaration of f32divf64x
/* Divide.  */	declaration of f32divf128
/* Divide.  */	declaration of f32xdivf64
/* Divide.  */	declaration of f32xdivf64x
/* Divide.  */	declaration of f32xdivf128
/* Divide.  */	declaration of f64divf64x
/* Divide.  */	declaration of f64divf128
/* Divide.  */	declaration of f64xdivf128
/* Add.  */	declaration of fadd
/* Add.  */	declaration of faddl
/* Add.  */	declaration of daddl
/* Add.  */	declaration of f32addf32x
/* Add.  */	declaration of f32addf64
/* Add.  */	declaration of f32addf64x
/* Add.  */	declaration of f32addf128
/* Add.  */	declaration of f32xaddf64
/* Add.  */	declaration of f32xaddf64x
/* Add.  */	declaration of f32xaddf128
/* Add.  */	declaration of f64addf64x
/* Add.  */	declaration of f64addf128
/* Add.  */	declaration of f64xaddf128
"/* Declare functions returning a narrower type.
   Copyright (C) 2018-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _MATH_H
/* __cplusplus */	#endif
"/* In C++ mode, __MATH_TG cannot be used, because it relies on
   __builtin_types_compatible_p, which is a C-only builtin.  On the
   other hand, overloading provides the means to distinguish between
   the floating-point types.  The overloading resolution will match
   the correct parameter (regardless of type qualifiers (i.e.: const
   and volatile)).  */"	definition of iscanonical
"/* Return nonzero value if X is canonical.  In IEEE interchange binary
   formats, all values are canonical, but the argument must still be
   converted to its semantic type for any exceptions arising from the
   conversion, before being discarded; in extended precision, there
   are encodings that are not consistently handled as corresponding to
   any particular value of the type, and we return 0 for those.  */"	#ifndef __cplusplus
"/* Define iscanonical macro.  ldbl-96 version.
   Copyright (C) 2016-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _MATH_H
/* Here goes the real code.  */	#endif
"/* This file should provide inline versions of math functions.

   Surround GCC-specific parts with #ifdef __GNUC__, and use `__extern_inline'.

   This file should define __MATH_INLINES if functions are actually defined as
   inlines.  */"	#if !defined __NO_MATH_INLINES && defined __OPTIMIZE__
/* math.h  */	#endif
/* __cplusplus */	#endif
"/* extern ""C++"" */"	#endif
"/* When using an IEEE 128-bit long double, _Float128 is defined as long double
     in C++.  */"	definition of __iseqsig_type<_Float128>
"/* Return X == Y but raising ""invalid"" and setting errno if X or Y is
   a NaN.  */"	#if !defined __cplusplus || (__cplusplus < 201103L && !defined __GNUC__)
"/* An expression whose type has the widest of the evaluation formats
   of X and Y (which are of floating-point types).  */"	#if __FLT_EVAL_METHOD__ == 2 || __FLT_EVAL_METHOD__ > 64
/* __FINITE_MATH_ONLY__ > 0.  */	#endif
/* Include bits/math-finite.h for _FloatN and _FloatNx.  */	"#if (__HAVE_DISTINCT_FLOAT16 || (__HAVE_FLOAT16 && !defined _LIBC))	\"
/* __USE_ISOC99.  */	#endif
/* Include bits/math-finite.h for long double.  */	#ifdef __MATH_DECLARE_LDOUBLE
"/* When __USE_ISOC99 is defined, include math-finite for float and
   long double, as well.  */"	#ifdef __USE_ISOC99
"/* Define special entry points to use when the compiler got told to
   only expect finite results.  */"	#if defined __FINITE_MATH_ONLY__ && __FINITE_MATH_ONLY__ > 0
/* Get machine-dependent inline versions (if there are any).  */	#ifdef __USE_EXTERN_INLINES
/* isunordered must always check both operands first for signaling NaNs.  */	#endif
"/* ISO C99 defines some macros to compare number while taking care for
   unordered numbers.  Many FPUs provide special instructions to support
   these operations.  Generic support in GCC for these as builtins went
   in 2.97, but not all cpus added their patterns until 3.1.  Therefore
   we enable the builtins from 3.1 onwards and use a generic implementation
   othwerwise.  */"	#define isgreater(x,y) __builtin_isgreater(x, y)
"/* When compiling in strict ISO C compatible mode we must not use the
   inline functions since they, among other things, do not set the
   `errno' variable correctly.  */"	#if defined __STRICT_ANSI__ && !defined __NO_MATH_INLINES
/* 1/sqrt(2) */	#define M_SQRT1_2f64x __f64x (0.707106781186547524400844362104849039)
/* sqrt(2) */	#define M_SQRT2f64x __f64x (1.414213562373095048801688724209698079)
/* 2/sqrt(pi) */	#define M_2_SQRTPIf64x __f64x (1.128379167095512573896158903121545172)
/* 2/pi */	#define M_2_PIf64x __f64x (0.636619772367581343075535053490057448)
/* 1/pi */	#define M_1_PIf64x __f64x (0.318309886183790671537767526745028724)
/* pi/4 */	#define M_PI_4f64x __f64x (0.785398163397448309615660845819875721)
/* pi/2 */	#define M_PI_2f64x __f64x (1.570796326794896619231321691639751442)
/* pi */	#define M_PIf64x __f64x (3.141592653589793238462643383279502884)
/* log_e 10 */	#define M_LN10f64x __f64x (2.302585092994045684017991454684364208)
/* log_e 2 */	#define M_LN2f64x __f64x (0.693147180559945309417232121458176568)
/* log_10 e */	#define M_LOG10Ef64x __f64x (0.434294481903251827651128918916605082)
/* log_2 e */	#define M_LOG2Ef64x __f64x (1.442695040888963407359924681001892137)
/* e */	#define M_Ef64x __f64x (2.718281828459045235360287471352662498)
/* 1/sqrt(2) */	#define M_SQRT1_2f32x __f32x (0.707106781186547524400844362104849039)
/* sqrt(2) */	#define M_SQRT2f32x __f32x (1.414213562373095048801688724209698079)
/* 2/sqrt(pi) */	#define M_2_SQRTPIf32x __f32x (1.128379167095512573896158903121545172)
/* 2/pi */	#define M_2_PIf32x __f32x (0.636619772367581343075535053490057448)
/* 1/pi */	#define M_1_PIf32x __f32x (0.318309886183790671537767526745028724)
/* pi/4 */	#define M_PI_4f32x __f32x (0.785398163397448309615660845819875721)
/* pi/2 */	#define M_PI_2f32x __f32x (1.570796326794896619231321691639751442)
/* pi */	#define M_PIf32x __f32x (3.141592653589793238462643383279502884)
/* log_e 10 */	#define M_LN10f32x __f32x (2.302585092994045684017991454684364208)
/* log_e 2 */	#define M_LN2f32x __f32x (0.693147180559945309417232121458176568)
/* log_10 e */	#define M_LOG10Ef32x __f32x (0.434294481903251827651128918916605082)
/* log_2 e */	#define M_LOG2Ef32x __f32x (1.442695040888963407359924681001892137)
/* e */	#define M_Ef32x __f32x (2.718281828459045235360287471352662498)
/* 1/sqrt(2) */	#define M_SQRT1_2f128 __f128 (0.707106781186547524400844362104849039)
/* sqrt(2) */	#define M_SQRT2f128 __f128 (1.414213562373095048801688724209698079)
/* 2/sqrt(pi) */	#define M_2_SQRTPIf128 __f128 (1.128379167095512573896158903121545172)
/* 2/pi */	#define M_2_PIf128 __f128 (0.636619772367581343075535053490057448)
/* 1/pi */	#define M_1_PIf128 __f128 (0.318309886183790671537767526745028724)
/* pi/4 */	#define M_PI_4f128 __f128 (0.785398163397448309615660845819875721)
/* pi/2 */	#define M_PI_2f128 __f128 (1.570796326794896619231321691639751442)
/* pi */	#define M_PIf128 __f128 (3.141592653589793238462643383279502884)
/* log_e 10 */	#define M_LN10f128 __f128 (2.302585092994045684017991454684364208)
/* log_e 2 */	#define M_LN2f128 __f128 (0.693147180559945309417232121458176568)
/* log_10 e */	#define M_LOG10Ef128 __f128 (0.434294481903251827651128918916605082)
/* log_2 e */	#define M_LOG2Ef128 __f128 (1.442695040888963407359924681001892137)
/* e */	#define M_Ef128 __f128 (2.718281828459045235360287471352662498)
/* 1/sqrt(2) */	#define M_SQRT1_2f64 __f64 (0.707106781186547524400844362104849039)
/* sqrt(2) */	#define M_SQRT2f64 __f64 (1.414213562373095048801688724209698079)
/* 2/sqrt(pi) */	#define M_2_SQRTPIf64 __f64 (1.128379167095512573896158903121545172)
/* 2/pi */	#define M_2_PIf64 __f64 (0.636619772367581343075535053490057448)
/* 1/pi */	#define M_1_PIf64 __f64 (0.318309886183790671537767526745028724)
/* pi/4 */	#define M_PI_4f64 __f64 (0.785398163397448309615660845819875721)
/* pi/2 */	#define M_PI_2f64 __f64 (1.570796326794896619231321691639751442)
/* pi */	#define M_PIf64 __f64 (3.141592653589793238462643383279502884)
/* log_e 10 */	#define M_LN10f64 __f64 (2.302585092994045684017991454684364208)
/* log_e 2 */	#define M_LN2f64 __f64 (0.693147180559945309417232121458176568)
/* log_10 e */	#define M_LOG10Ef64 __f64 (0.434294481903251827651128918916605082)
/* log_2 e */	#define M_LOG2Ef64 __f64 (1.442695040888963407359924681001892137)
/* e */	#define M_Ef64 __f64 (2.718281828459045235360287471352662498)
/* 1/sqrt(2) */	#define M_SQRT1_2f32 __f32 (0.707106781186547524400844362104849039)
/* sqrt(2) */	#define M_SQRT2f32 __f32 (1.414213562373095048801688724209698079)
/* 2/sqrt(pi) */	#define M_2_SQRTPIf32 __f32 (1.128379167095512573896158903121545172)
/* 2/pi */	#define M_2_PIf32 __f32 (0.636619772367581343075535053490057448)
/* 1/pi */	#define M_1_PIf32 __f32 (0.318309886183790671537767526745028724)
/* pi/4 */	#define M_PI_4f32 __f32 (0.785398163397448309615660845819875721)
/* pi/2 */	#define M_PI_2f32 __f32 (1.570796326794896619231321691639751442)
/* pi */	#define M_PIf32 __f32 (3.141592653589793238462643383279502884)
/* log_e 10 */	#define M_LN10f32 __f32 (2.302585092994045684017991454684364208)
/* log_e 2 */	#define M_LN2f32 __f32 (0.693147180559945309417232121458176568)
/* log_10 e */	#define M_LOG10Ef32 __f32 (0.434294481903251827651128918916605082)
/* log_2 e */	#define M_LOG2Ef32 __f32 (1.442695040888963407359924681001892137)
/* e */	#define M_Ef32 __f32 (2.718281828459045235360287471352662498)
/* 1/sqrt(2) */	#endif
/* 1/sqrt(2) */	#define M_SQRT1_2l 0.707106781186547524400844362104849039L
/* sqrt(2) */	#define M_SQRT2l 1.414213562373095048801688724209698079L
/* 2/sqrt(pi) */	#define M_2_SQRTPIl 1.128379167095512573896158903121545172L
/* 2/pi */	#define M_2_PIl 0.636619772367581343075535053490057448L
/* 1/pi */	#define M_1_PIl 0.318309886183790671537767526745028724L
/* pi/4 */	#define M_PI_4l 0.785398163397448309615660845819875721L
/* pi/2 */	#define M_PI_2l 1.570796326794896619231321691639751442L
/* pi */	#define M_PIl 3.141592653589793238462643383279502884L
/* log_e 10 */	#define M_LN10l 2.302585092994045684017991454684364208L
/* log_e 2 */	#define M_LN2l 0.693147180559945309417232121458176568L
/* log_10 e */	#define M_LOG10El 0.434294481903251827651128918916605082L
/* log_2 e */	#define M_LOG2El 1.442695040888963407359924681001892137L
/* e */	#define M_El 2.718281828459045235360287471352662498L
"/* The above constants are not adequate for computation using `long double's.
   Therefore we provide as an extension constants with similar names as a
   GNU extension.  Provide enough digits for the 128-bit IEEE quad.  */"	#ifdef __USE_GNU
/* 1/sqrt(2) */	#define M_SQRT1_2 0.70710678118654752440
/* sqrt(2) */	#define M_SQRT2 1.41421356237309504880
/* 2/sqrt(pi) */	#define M_2_SQRTPI 1.12837916709551257390
/* 2/pi */	#define M_2_PI 0.63661977236758134308
/* 1/pi */	#define M_1_PI 0.31830988618379067154
/* pi/4 */	#define M_PI_4 0.78539816339744830962
/* pi/2 */	#define M_PI_2 1.57079632679489661923
/* pi */	#define M_PI 3.14159265358979323846
/* log_e 10 */	#define M_LN10 2.30258509299404568402
/* log_e 2 */	#define M_LN2 0.69314718055994530942
/* log_10 e */	#define M_LOG10E 0.43429448190325182765
/* log_2 e */	#define M_LOG2E 1.4426950408889634074
/* e */	#define M_E 2.7182818284590452354
/* Some useful constants.  */	#if defined __USE_MISC || defined __USE_XOPEN
/* X/Open wants another strange constant.  */	#define MAXFLOAT 3.40282347e+38F
/* Use IEC_60559_BFP_EXT.  */	#endif
/* __cplusplus */	#endif
/* extern C++ */	#endif
"/* When using an IEEE 128-bit long double, _Float128 is defined as long double
     in C++.  */"	#endif
/* __cplusplus */	#else
/* Return nonzero value if X is zero.  */	#ifndef __cplusplus
/* Return nonzero value if X is subnormal.  */	#define issubnormal(x) (fpclassify (x) == FP_SUBNORMAL)
/* extern C++ */	#endif
"/* When using an IEEE 128-bit long double, _Float128 is defined as long double
   in C++.  */"	definition of issignaling
"/* In C++ mode, __MATH_TG cannot be used, because it relies on
      __builtin_types_compatible_p, which is a C-only builtin.  On the
      other hand, overloading provides the means to distinguish between
      the floating-point types.  The overloading resolution will match
      the correct parameter (regardless of type qualifiers (i.e.: const
      and volatile)).  */"	definition of issignaling
/* Return nonzero value if X is a signaling NaN.  */	#ifndef __cplusplus
/* Use ISO C99.  */	#endif
"/* By default all math functions support both errno and exception handling
   (except for soft floating point implementations which may only support
   errno handling).  If errno handling is disabled, exceptions are still
   supported by GLIBC.  Set math_errhandling to 0 with -ffast-math (this is
   nonconforming but it is more useful than leaving it undefined).  */"	#ifdef __FAST_MATH__
/* Exceptions raised by math functions.  */	#define MATH_ERREXCEPT 2
/* errno set by math functions.  */	#define MATH_ERRNO 1
/* Bitmasks for the math_errhandling macro.  */	#define MATH_ERRNO 1
"/* Since __builtin_isinf_sign is broken for float128 before GCC 7.0,
      use the helper function, __isinff128, with older compilers.  This is
      only provided for C mode, because in C++ mode, GCC has no support
      for __builtin_types_compatible_p (and when in C++ mode, this macro is
      not used anyway, because libstdc++ headers undefine it).  */"	#elif (__GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__) \
/* Return nonzero value if X is positive or negative infinity.  */	#if __HAVE_DISTINCT_FLOAT128 && !__GNUC_PREREQ (7,0) \
"/* Return nonzero value if X is a NaN.  We could use `fpclassify' but
   we already have this functions `__isnan' and it is faster.  */"	#if (__GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__) \
/* Return nonzero value if X is neither zero, subnormal, Inf, nor NaN.  */	#if (__GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__) \
/* Return nonzero value if X is not +-Inf or NaN.  */	#if (__GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__) \
"/* In C++ mode, __MATH_TG cannot be used, because it relies on
     __builtin_types_compatible_p, which is a C-only builtin.
     The check for __cplusplus allows the use of the builtin instead of
     __MATH_TG. This is provided for libstdc++, only to let its configure
     test work. No further use of this definition of signbit is expected
     in C++ mode, since libstdc++ provides its own version of signbit
     in cmath (which undefines signbit). */"	#elif __GNUC_PREREQ (4,0)
/* Return nonzero value if sign of X is negative.  */	#if __GNUC_PREREQ (6,0) || __glibc_clang_prereq (3,3)
"/* The check for __cplusplus allows the use of the builtin, even
	when optimization for size is on.  This is provided for
	libstdc++, only to let its configure test work when it is built
	with -Os.  No further use of this definition of fpclassify is
	expected in C++ mode, since libstdc++ provides its own version
	of fpclassify in cmath (which undefines fpclassify).  */"	#define fpclassify(x) __builtin_fpclassify (FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, x)
/* Return number of classification appropriate for X.  */	"#if ((__GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__)		      \"
/* All floating-point numbers can be put in one of these categories.  */	definition of (unnamed enum)
/* ISO C99 defines some generic macros which work on any data type.  */	#ifdef __USE_ISOC99
"/* Depending on the type of TG_ARG, call an appropriately suffixed
   version of FUNC with arguments (including parentheses) ARGS.
   Suffixed functions may not exist for long double if it has the same
   format as double, or for other types with the same format as float,
   double or long double.  The behavior is undefined if the argument
   does not have a real floating type.  The definition may use a
   conditional expression, so all suffixed versions of FUNC must
   return the same type (FUNC may include a cast if necessary rather
   than being a single identifier).  */"	#ifdef __NO_LONG_DOUBLE_MATH
/* This variable is used by `gamma' and `lgamma'.  */	declaration of signgam
/* Declare functions returning a narrower type.  */	#define __MATHCALL_NARROW_ARGS_1 (_Marg_ __x)
/* __HAVE_DISTINCT_FLOAT128X || (__HAVE_FLOAT128X && !_LIBC).  */	#endif
/* __HAVE_DISTINCT_FLOAT64X || (__HAVE_FLOAT64X && !_LIBC).  */	#endif
/* __HAVE_DISTINCT_FLOAT32X || (__HAVE_FLOAT32X && !_LIBC).  */	#endif
/* __HAVE_DISTINCT_FLOAT128 || (__HAVE_FLOAT128 && !_LIBC).  */	#endif
/* __HAVE_DISTINCT_FLOAT64 || (__HAVE_FLOAT64 && !_LIBC).  */	#endif
/* __HAVE_DISTINCT_FLOAT32 || (__HAVE_FLOAT32 && !_LIBC).  */	#endif
/* __HAVE_DISTINCT_FLOAT16 || (__HAVE_FLOAT16 && !_LIBC).  */	#endif
"/* Include the file of declarations for _FloatN and _FloatNx
   types.  */"	#if __HAVE_DISTINCT_FLOAT16 || (__HAVE_FLOAT16 && !defined _LIBC)
/* Use ISO C99.  */	#endif
/* !(__NO_LONG_DOUBLE_MATH && _LIBC) || __LDBL_COMPAT */	#endif
"/* Include the file of declarations again, this time using `long double'
   instead of `double' and appending l to each function name.  */"	#define _Mdouble_ long double
"/* Include the file of declarations again, this time using `float'
   instead of `double' and appending f to each function name.  */"	#define _Mdouble_ float
"/* The file <bits/mathcalls.h> contains the prototypes for all the
   actual math functions.  These macros are used for those prototypes,
   so we can easily declare each function as both `name' and `__name',
   and can declare the float versions `namef' and `__namef'.  */"	#define __SIMD_DECL(function) __CONCAT (__DECL_SIMD_, function)
/* Rounding direction macros for fromfp functions.  */	definition of (unnamed enum)
"/* Define the following typedefs.

    float_t	floating-point type at least as wide as `float' used
		to evaluate `float' expressions
    double_t	floating-point type at least as wide as `double' used
		to evaluate `double' expressions
*/"	#if __GLIBC_FLT_EVAL_METHOD == 0 || __GLIBC_FLT_EVAL_METHOD == 16
/* Signaling NaN macros, if supported.  */	#if __GNUC_PREREQ (3, 3)
/* __USE_ISOC99 */	#endif
"/* This will raise an ""invalid"" exception outside static initializers,
   but is the best that can be done in ISO C while remaining a
   constant expression.  */"	#endif
/* IEEE Not A Number.  */	#if __GNUC_PREREQ (3, 3)
/* IEEE positive infinity.  */	#if __GNUC_PREREQ (3, 3)
"/* This may provoke compiler warnings, and may not be rounded to
   +Infinity in all IEEE 754 rounding modes, but is the best that can
   be done in ISO C while remaining a constant expression.  10,000 is
   greater than the maximum (decimal) exponent for all supported
   floating-point formats and widths.  */"	#endif
"/* Value returned on overflow.  With IEEE 754 floating point, this is
   +Infinity, otherwise the largest representable positive value.  */"	#if __GNUC_PREREQ (3, 3)
"/*
 *	ISO C99 Standard: 7.12 Mathematics	<math.h>
 */"	#ifndef _MATH_H
"// extern ""C++"""	#endif
// namespace	#if _GLIBCXX_USE_STD_SPEC_FUNCS
// C++20	#endif
// monotonic near __t=1	#endif
// C++17	#endif
// [c.math.hypot3], three-dimensional hypotenuse	#endif
// C++11	#endif
// _GLIBCXX_USE_C99_MATH_TR1	#endif
// DR 568.	definition of log2
/// Additional overloads.	#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
/* _GLIBCXX_USE_C99_MATH */	#endif
/* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */	#endif
// C++11	#endif
// Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.	definition of signbit
// These are possible macros imported from C99-land.	#undef fpclassify
// DR 550. What should the return type of pow(float,int) be?	#endif
// Get rid of those macros defined in <math.h> in lieu of real functions.	#undef div
//	#pragma GCC system_header
/*__TINYEXPR_H__*/	#endif
/* Returns NaN on error. */	declaration of te_interp
// This version was altered and ported to C++ for inclusion in fish.	#ifndef __TINYEXPR_H__
// if (argc == 0) return STATUS_CMD_OK;	declaration
/// The math builtin evaluates math expressions.	definition of builtin_math
// but that's much more work.	declaration
// so numbers work the same across locales.	declaration
/// Evaluate math expressions.	definition of evaluate_expression
// If we trimmed everything it must have just been zero.	if (...) ... 
// itself if there's nothing after it. Detect a decimal separator as a non-digit.	declaration
// instead of rounding.	if (...) ... 
/// Return a formatted version of the value \p v respecting the given \p opts.	definition of format_double
/// `string` does it.	definition of math_get_arg
/// Return the next argument from argv.	definition of math_get_arg_argv
// we're done	break;
// EOF	{ ... }
// failure	return ...
/// Get the arguments from stdin.	definition of math_get_arg_stdin
// We read from stdin if we are the second or later process in a pipeline.	definition of math_args_from_stdin
// can begin with a minus sign.	ExprStmt
"// ""max"" is the special value that tells us to pick the maximum scale."	if (...) ... 
// This is needed because of the minus, `-`, operator in math expressions.	definition of short_options
// i.e. this is the first value such that x + 1 == x (or == x + 2, depending on rounding mode).	definition of kMaximumContiguousInteger
// The maximum number of points after the decimal that we'll print.	definition of kDefaultScale
// namespace std	#endif
// Adhere to section 17.4.1.2 clause 5 of ISO 14882:1998	#ifndef va_end
//	#pragma GCC system_header
/// The printf builtin.	definition of builtin_printf
// so -1 is safe here even if prec < INT_MIN.	ExprStmt
// requires it.	if (...) ... 
/* ok['x'] is true if %x is allowed.  */	definition of ok
/* Arg to second '*'.  */	definition of precision
/* True if PRECISION is valid.  */	definition of have_precision
/* Arg to first '*'.  */	definition of field_width
/* True if FIELD_WIDTH is valid.  */	definition of have_field_width
/* Length of % directive.  */	definition of direc_length
/* Start of % directive.  */	definition of direc_start
/* Pointer into `format'.  */	definition of f
/* Preserve original value.  */	definition of save_argc
/// Return the number of elements of ARGV used.	definition of print_formatted
/// For each character in str, set the corresponding boolean in the array to the given flag.	definition of modify_allowed_format_specifiers
// Append the conversion itself.	ExprStmt
// existing integer length modifier.	switch (...) ... 
// Start with everything except the conversion specifier.	declaration
/// ARGUMENT is the argument to be formatted.	definition of print_direc
/// Print string STR, evaluating \ escapes.	definition of print_esc_string
// exceedingly rare.	if (...) ... 
// Escape sequence must be done. Complain if we didn't get anything.	if (...) ... 
// Wrap mod 256, which matches historic behavior.	for(...;...;...) ...
// A hexadecimal \xhh escape sequence must have 1 or 2 hex. digits.	for(...;...;...) ...
/* Length of \nnn escape. */	definition of esc_length
/* Value of \nnn escape. */	definition of esc_value
/// is an octal digit; otherwise they are of the form \ooo.	definition of print_esc
// vertical tab	{ ... }
// horizontal tab	{ ... }
// carriage return	{ ... }
// new line	{ ... }
// form feed	{ ... }
// escape	{ ... }
// cancel the rest of the output	{ ... }
// backspace	{ ... }
// alert	{ ... }
/// Output a single-character \ escape.	definition of print_esc_char
// #626	definition of raw_string_to_scalar_type
// This isn't entirely fatal - the value should still be printed.	ExprStmt
// Don't output if we're done.	if (...) ... 
// Don't output if we're done.	if (...) ... 
// Don't output if we're done.	if (...) ... 
// Don't error twice.	if (...) ... 
// Don't error twice.	if (...) ... 
// \c escape.	definition of early_exit
// The status of the operation.	definition of exit_code
// Out and err streams. Note this is a captured reference!	definition of streams
/// The pwd builtin. Respect -P to resolve symbolic links. Respect -L to not do that (the default).	definition of short_options
// namespace std	#endif
// no copy functions	definition of seed_seq
// property functions	definition of size
/** Default constructor. */	definition of seed_seq
/** The type of the seed vales. */	declaration of result_type
"/**
   * @brief The seed_seq class generates sequences of seeds for random
   *        number generators.
   */"	definition of seed_seq
"/**
    * @brief Return true if two piecewise linear distributions have
    *        different parameters.
   */"	definition of operator!=
"/**
       * @brief Return true if two piecewise linear distributions have the
       *        same parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Return a vector of the probability densities of the
       *        distribution.
       */"	declaration of densities
"/**
       * @brief Return the intervals of the distribution.
       */"	declaration of intervals
"/**
       * Resets the distribution state.
       */"	declaration of reset
// See: http://cpp-next.com/archive/2010/10/implicit-move-must-go/	declaration of param_type
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A piecewise_linear_distribution random number distribution.
   *
   * The formula for the piecewise linear probability mass function is
   *
   */"	definition of piecewise_linear_distribution<_RealType>
"/**
    * @brief Return true if two piecewise constant distributions have 
    *        different parameters.
   */"	definition of operator!=
"/**
       * @brief Return true if two piecewise constant distributions have the
       *        same parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns a vector of the probability densities.
       */"	declaration of densities
"/**
       * @brief Returns a vector of the intervals.
       */"	declaration of intervals
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
// See: http://cpp-next.com/archive/2010/10/implicit-move-must-go/	declaration of param_type
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A piecewise_constant_distribution random number distribution.
   *
   * The formula for the piecewise constant probability mass function is
   *
   */"	definition of piecewise_constant_distribution<_RealType>
"/**
    * @brief Return true if two discrete distributions have different
    *        parameters.
    */"	definition of operator!=
"/**
       * @brief Return true if two discrete distributions have the same
       *        parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the probabilities of the distribution.
       */"	declaration of probabilities
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
// See: http://cpp-next.com/archive/2010/10/implicit-move-must-go/	declaration of param_type
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A discrete_distribution random number distribution.
   *
   * The formula for the discrete probability mass function is
   *
   */"	definition of discrete_distribution<_IntType>
"/**
    * @brief Return true if two extreme value distributions have different
    *        parameters.
   */"	definition of operator!=
"/**
       * @brief Return true if two extreme value distributions have the same
       *        parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Return the @f$b@f$ parameter of the distribution.
       */"	declaration of b
"/**
       * @brief Return the @f$a@f$ parameter of the distribution.
       */"	declaration of a
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A extreme_value_distribution random number distribution.
   *
   * The formula for the normal probability mass function is
   * @f[
   *     p(x|a,b) = \frac{1}{b}
   *                \exp( \frac{a-x}{b} - \exp(\frac{a-x}{b})) 
   * @f]
   */"	definition of extreme_value_distribution<_RealType>
"/**
    * @brief Return true if two Weibull distributions have different
    *        parameters.
    */"	definition of operator!=
"/**
       * @brief Return true if two Weibull distributions have the same
       *        parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Return the @f$b@f$ parameter of the distribution.
       */"	declaration of b
"/**
       * @brief Return the @f$a@f$ parameter of the distribution.
       */"	declaration of a
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A weibull_distribution random number distribution.
   *
   * The formula for the normal probability density function is:
   * @f[
   *     p(x|\alpha,\beta) = \frac{\alpha}{\beta} (\frac{x}{\beta})^{\alpha-1}
   *                         \exp{(-(\frac{x}{\beta})^\alpha)} 
   * @f]
   */"	definition of weibull_distribution<_RealType>
"/**
   * @brief Return true if two exponential distributions have different
   *        parameters.
   */"	definition of operator!=
"/**
       * @brief Return true if two exponential distributions have the same
       *        parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the inverse scale parameter of the distribution.
       */"	declaration of lambda
"/**
       * @brief Resets the distribution state.
       *
       * Has no effect on exponential distributions.
       */"	declaration of reset
"/**
       * @brief Constructs an exponential distribution with inverse scale
       *        parameter @f$\lambda@f$.
       */"	declaration of exponential_distribution
"/**
       * @brief Constructs an exponential distribution with inverse scale
       *        parameter 1.0
       */"	declaration of exponential_distribution
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief An exponential continuous distribution for random numbers.
   *
   * The formula for the exponential probability density function is
   * @f$p(x|\lambda) = \lambda e^{-\lambda x}@f$.
   *
   * <table border=1 cellpadding=10 cellspacing=0>
   * <caption align=top>Distribution Statistics</caption>
   * <tr><td>Mean</td><td>@f$\frac{1}{\lambda}@f$</td></tr>
   * <tr><td>Median</td><td>@f$\frac{\ln 2}{\lambda}@f$</td></tr>
   * <tr><td>Mode</td><td>@f$zero@f$</td></tr>
   * <tr><td>Range</td><td>@f$[0, \infty]@f$</td></tr>
   * <tr><td>Standard Deviation</td><td>@f$\frac{1}{\lambda}@f$</td></tr>
   * </table>
   */"	definition of exponential_distribution<_RealType>
"/**
   * @brief Return true if two Poisson distributions are different.
   */"	definition of operator!=
// NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.	definition of _M_nd
"/**
	* @brief Return true if two Poisson distributions have the same
	*        parameters and the sequences that would be generated
	*        are equal.
	*/"	#ifdef _GLIBCXX_USE_C99_MATH_TR1
// Hosts either log(mean) or the threshold of the simple method.	#if _GLIBCXX_USE_C99_MATH_TR1
"/**
   * @brief A discrete Poisson random number distribution.
   *
   * The formula for the Poisson probability density function is
   * @f$p(i|\mu) = \frac{\mu^i}{i!} e^{-\mu}@f$ where @f$\mu@f$ is the
   * parameter of the distribution.
   */"	definition of poisson_distribution<_IntType>
"/**
   * @brief Return true if two negative binomial distributions are different.
   */"	definition of operator!=
"/**
       * @brief Return true if two negative binomial distributions have
       *        the same parameters and the sequences that would be
       *        generated are equal.
       */"	definition of operator==
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Return the @f$p@f$ parameter of the distribution.
       */"	declaration of p
"/**
       * @brief Return the @f$k@f$ parameter of the distribution.
       */"	declaration of k
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A negative_binomial_distribution random number distribution.
   *
   * The formula for the negative binomial probability mass function is
   * @f$p(i) = \binom{n}{i} p^i (1 - p)^{t - i}@f$ where @f$t@f$
   * and @f$p@f$ are the parameters of the distribution.
   */"	definition of negative_binomial_distribution<_IntType>
"/**
   * @brief Return true if two geometric distributions have
   *        different parameters.
   */"	definition of operator!=
"/**
       * @brief Return true if two geometric distributions have
       *        the same parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the distribution parameter @p p.
       */"	declaration of p
"/**
       * @brief Resets the distribution state.
       *
       * Does nothing for the geometric distribution.
       */"	declaration of reset
// constructors and member functions	declaration of geometric_distribution
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A discrete geometric random number distribution.
   *
   * The formula for the geometric probability density function is
   * @f$p(i|p) = p(1 - p)^{i}@f$ where @f$p@f$ is the parameter of the
   * distribution.
   */"	definition of geometric_distribution<_IntType>
"/**
   * @brief Return true if two binomial distributions are different.
   */"	definition of operator!=
// NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.	definition of _M_nd
"/**
       * @brief Return true if two binomial distributions have
       *        the same parameters and the sequences that would
       *        be generated are equal.
       */"	#ifdef _GLIBCXX_USE_C99_MATH_TR1
/** Parameter type. */	#if _GLIBCXX_USE_C99_MATH_TR1
"/**
   * @brief A discrete binomial random number distribution.
   *
   * The formula for the binomial probability density function is
   * @f$p(i|t,p) = \binom{t}{i} p^i (1 - p)^{t - i}@f$ where @f$t@f$
   * and @f$p@f$ are the parameters of the distribution.
   */"	definition of binomial_distribution<_IntType>
"/**
   * @brief Extracts a %bernoulli_distribution random number distribution
   * @p __x from the input stream @p __is.
   *
   * @param __is An input stream.
   * @param __x  A %bernoulli_distribution random number generator engine.
   *
   * @returns The input stream with @p __x extracted or in an error state.
   */"	definition of operator>>
"/**
   * @brief Return true if two Bernoulli distributions have
   *        different parameters.
   */"	definition of operator!=
"/**
     * @brief Return true if two Bernoulli distributions have
     *        the same parameters.
     */"	definition of operator==
"/**
     * @brief Generating functions.
     */"	definition of operator()
"/**
     * @brief Returns the least upper bound value of the distribution.
     */"	definition of max
"/**
     * @brief Returns the greatest lower bound value of the distribution.
     */"	definition of min
"/**
     * @brief Sets the parameter set of the distribution.
     * @param __param The new parameter set of the distribution.
     */"	definition of param
"/**
     * @brief Returns the parameter set of the distribution.
     */"	definition of param
"/**
     * @brief Returns the @p p parameter of the distribution.
     */"	definition of p
"/**
     * @brief Resets the distribution state.
     *
     * Does nothing for a Bernoulli distribution.
     */"	definition of reset
"/**
     * @brief Constructs a Bernoulli distribution with likelihood @p p.
     *
     * @param __p  [IN]  The likelihood of a true result being returned.
     *                   Must be in the interval @f$[0, 1]@f$.
     */"	definition of bernoulli_distribution
"/**
     * @brief Constructs a Bernoulli distribution with likelihood 0.5.
     */"	definition of bernoulli_distribution
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A Bernoulli random number distribution.
   *
   * Generates a sequence of true and false values with likelihood @f$p@f$
   * that true will come up and @f$(1 - p)@f$ that false will appear.
   */"	definition of bernoulli_distribution
"/**
   * @brief Return true if two Student t distributions are different.
   */"	definition of operator!=
"/**
       * @brief Return true if two Student t distributions have
       *        the same parameters and the sequences that would
       *        be generated are equal.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       *
       */"	declaration of n
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A student_t_distribution random number distribution.
   *
   * The formula for the normal probability mass function is:
   * @f[
   *     p(x|n) = \frac{1}{\sqrt(n\pi)} \frac{\Gamma((n+1)/2)}{\Gamma(n/2)}
   *              (1 + \frac{x^2}{n}) ^{-(n+1)/2} 
   * @f]
   */"	definition of student_t_distribution<_RealType>
"/**
   * @brief Return true if two Fisher f distributions are different.
   */"	definition of operator!=
"/**
       * @brief Return true if two Fisher f distributions have
       *        the same parameters and the sequences that would
       *        be generated are equal.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       *
       */"	declaration of m
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A fisher_f_distribution random number distribution.
   *
   * The formula for the normal probability mass function is
   * @f[
   *     p(x|m,n) = \frac{\Gamma((m+n)/2)}{\Gamma(m/2)\Gamma(n/2)}
   *                (\frac{m}{n})^{m/2} x^{(m/2)-1}
   *                (1 + \frac{mx}{n})^{-(m+n)/2} 
   * @f]
   */"	definition of fisher_f_distribution<_RealType>
"/**
   * @brief Return true if two Cauchy distributions have
   *        different parameters.
   */"	definition of operator!=
"/**
       * @brief Return true if two Cauchy distributions have
       *        the same parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       *
       */"	declaration of a
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A cauchy_distribution random number distribution.
   *
   * The formula for the normal probability mass function is
   * @f$p(x|a,b) = (\pi b (1 + (\frac{x-a}{b})^2))^{-1}@f$
   */"	definition of cauchy_distribution<_RealType>
"/**
   * @brief Return true if two Chi-squared distributions are different.
   */"	definition of operator!=
"/**
       * @brief Return true if two Chi-squared distributions have
       *        the same parameters and the sequences that would be
       *        generated are equal.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       *
       */"	declaration of n
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A chi_squared_distribution random number distribution.
   *
   * The formula for the normal probability mass function is
   * @f$p(x|n) = \frac{x^{(n/2) - 1}e^{-x/2}}{\Gamma(n/2) 2^{n/2}}@f$
   */"	definition of chi_squared_distribution<_RealType>
"/**
   * @brief Return true if two gamma distributions are different.
   */"	definition of operator!=
"/**
       * @brief Return true if two gamma distributions have the same
       *        parameters and the sequences that would be generated
       *        are equal.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the @f$\beta@f$ of the distribution.
       */"	declaration of beta
"/**
       * @brief Returns the @f$\alpha@f$ of the distribution.
       */"	declaration of alpha
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
"/**
       * @brief Constructs a gamma distribution with parameters
       * @f$\alpha@f$ and @f$\beta@f$.
       */"	declaration of gamma_distribution
"/**
       * @brief Constructs a gamma distribution with parameters 1 and 1.
       */"	declaration of gamma_distribution
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A gamma continuous distribution for random numbers.
   *
   * The formula for the gamma probability density function is:
   * @f[
   *     p(x|\alpha,\beta) = \frac{1}{\beta\Gamma(\alpha)}
   *                         (x/\beta)^{\alpha - 1} e^{-x/\beta} 
   * @f]
   */"	definition of gamma_distribution<_RealType>
"/**
   * @brief Return true if two lognormal distributions are different.
   */"	definition of operator!=
"/**
       * @brief Return true if two lognormal distributions have
       *        the same parameters and the sequences that would
       *        be generated are equal.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       *
       */"	declaration of m
"/**
       * Resets the distribution state.
       */"	declaration of reset
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A lognormal_distribution random number distribution.
   *
   * The formula for the normal probability mass function is
   * @f[
   *     p(x|m,s) = \frac{1}{sx\sqrt{2\pi}}
   *                \exp{-\frac{(\ln{x} - m)^2}{2s^2}} 
   * @f]
   */"	definition of lognormal_distribution<_RealType>
"/**
   * @brief Return true if two normal distributions are different.
   */"	definition of operator!=
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the least upper bound value of the distribution.
       */"	declaration of max
"/**
       * @brief Returns the greatest lower bound value of the distribution.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the standard deviation of the distribution.
       */"	declaration of stddev
"/**
       * @brief Returns the mean of the distribution.
       */"	declaration of mean
"/**
       * @brief Resets the distribution state.
       */"	declaration of reset
"/**
       * Constructs a normal distribution with parameters @f$mean@f$ and
       * standard deviation.
       */"	declaration of normal_distribution
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief A normal continuous distribution for random numbers.
   *
   * The formula for the normal probability density function is
   * @f[
   *     p(x|\mu,\sigma) = \frac{1}{\sigma \sqrt{2 \pi}}
   *            e^{- \frac{{x - \mu}^ {2}}{2 \sigma ^ {2}} } 
   * @f]
   */"	definition of normal_distribution<_RealType>
"/**
   * @brief Return true if two uniform real distributions have
   *        different parameters.
   */"	definition of operator!=
"/**
       * @brief Return true if two uniform real distributions have
       *        the same parameters.
       */"	definition of operator==
"/**
       * @brief Generating functions.
       */"	definition of operator()
"/**
       * @brief Returns the inclusive upper bound of the distribution range.
       */"	declaration of max
"/**
       * @brief Returns the inclusive lower bound of the distribution range.
       */"	declaration of min
"/**
       * @brief Sets the parameter set of the distribution.
       * @param __param The new parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Returns the parameter set of the distribution.
       */"	declaration of param
"/**
       * @brief Resets the distribution state.
       *
       * Does nothing for the uniform real distribution.
       */"	declaration of reset
"/**
       * @brief Constructs a uniform_real_distribution object.
       *
       * @param __a [IN]  The lower bound of the distribution.
       * @param __b [IN]  The upper bound of the distribution.
       */"	declaration of uniform_real_distribution
"/**
       * @brief Constructs a uniform_real_distribution object.
       *
       * The lower bound is set to 0.0 and the upper bound to 1.0
       */"	declaration of uniform_real_distribution
/** Parameter type. */	definition of param_type
/** The type of the range of the distribution. */	declaration of result_type
"/**
   * @brief Uniform continuous distribution for random numbers.
   *
   * A continuous random distribution on the range [min, max) with equal
   * probability throughout the range.  The URNG should be real-valued and
   * deliver number in the range [0, 1).
   */"	definition of uniform_real_distribution<_RealType>
"/**
   * @brief Return true if two uniform integer distributions have
   *        different parameters.
   */"	definition of operator!=
// No copy functions.	definition of random_device
// constructors, destructors and member functions	#ifdef _GLIBCXX_USE_DEV_RANDOM
/** The type of the generated random value. */	declaration of result_type
"/**
   * A standard interface to a platform-specific non-deterministic
   * random number generator (if any are available).
   */"	definition of random_device
"/**
   * An alternative Mersenne Twister.
   */"	declaration of mt19937_64
"/**
   * The classic Mersenne Twister.
   *
   * Reference:
   * M. Matsumoto and T. Nishimura, Mersenne Twister: A 623-Dimensionally
   * Equidistributed Uniform Pseudo-Random Number Generator, ACM Transactions
   * on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.
   */"	declaration of mt19937
"/**
   * An alternative LCR (Lehmer Generator function).
   */"	declaration of minstd_rand
"/**
   * The classic Minimum Standard rand0 of Lewis, Goodman, and Miller.
   */"	declaration of minstd_rand0
"/**
   * Compares two %shuffle_order_engine random number generator objects
   * of the same type for inequality.
   *
   * @param __lhs A %shuffle_order_engine random number generator object.
   * @param __rhs Another %shuffle_order_engine random number generator
   *              object.
   *
   * @returns true if the infinite sequences of generated values
   *          would be different, false otherwise.
   */"	definition of operator!=
"/**
       * Compares two %shuffle_order_engine random number generator objects
       * of the same type for equality.
       *
       * @param __lhs A %shuffle_order_engine random number generator object.
       * @param __rhs Another %shuffle_order_engine random number generator
       *              object.
       *
       * @returns true if the infinite sequences of generated values
       *          would be equal, false otherwise.
      */"	definition of operator==
"/**
       * Gets the next value in the generated random number sequence.
       */"	declaration of operator()
"/**
       * Discard a sequence of random numbers.
       */"	declaration of discard
"/**
       * Gets the maximum value in the generated random number range.
       */"	declaration of max
"/**
       * Gets the minimum value in the generated random number range.
       */"	declaration of min
"/**
       * Gets a const reference to the underlying generator engine object.
       */"	declaration of base
"/**
       * @brief Reseeds the %shuffle_order_engine object with the given seed
       *        sequence.
       * @param __q A seed generator function.
       */"	definition of seed
"/**
       * @brief Reseeds the %shuffle_order_engine object with the default seed
       *        for the underlying base class generator engine.
       */"	declaration of seed
"/**
       * @brief Reseeds the %shuffle_order_engine object with the default seed
                for the underlying base class generator engine.
       */"	declaration of seed
"/**
       * @brief Generator construct a %shuffle_order_engine engine.
       *
       * @param __q A seed sequence.
       */"	definition of shuffle_order_engine
"/**
       * @brief Seed constructs a %shuffle_order_engine engine.
       *
       * Constructs the underlying generator engine seeded with @p __s.
       * @param __s A seed value for the base class engine.
       */"	declaration of shuffle_order_engine
"/**
       * @brief Move constructs a %shuffle_order_engine engine.
       *
       * Copies an existing base class random number generator.
       * @param __rng An existing (base class) engine object.
       */"	declaration of shuffle_order_engine
"/**
       * @brief Copy constructs a %shuffle_order_engine engine.
       *
       * Copies an existing base class random number generator.
       * @param __rng An existing (base class) engine object.
       */"	declaration of shuffle_order_engine
"/**
       * @brief Constructs a default %shuffle_order_engine engine.
       *
       * The underlying engine is default constructed as well.
       */"	declaration of shuffle_order_engine
/** The type of the generated random value. */	declaration of result_type
"/**
   * @brief Produces random numbers by combining random numbers from some
   * base engine to produce random numbers with a specifies number of bits
   * @p __k.
   */"	definition of shuffle_order_engine<_RandomNumberEngine, __k>
"/**
   * @brief Inserts the current state of a %independent_bits_engine random
   *        number generator engine @p __x into the output stream @p __os.
   *
   * @param __os An output stream.
   * @param __x  A %independent_bits_engine random number generator engine.
   *
   * @returns The output stream with the state of @p __x inserted or in
   *          an error state.
   */"	definition of operator<<
"/**
   * @brief Compares two %independent_bits_engine random number generator
   * objects of the same type for inequality.
   *
   * @param __lhs A %independent_bits_engine random number generator
   *              object.
   * @param __rhs Another %independent_bits_engine random number generator
   *              object.
   *
   * @returns true if the infinite sequences of generated values
   *          would be different, false otherwise.
   */"	definition of operator!=
"/**
       * @brief Extracts the current state of a % subtract_with_carry_engine
       *        random number generator engine @p __x from the input stream
       *        @p __is.
       *
       * @param __is An input stream.
       * @param __x  A %independent_bits_engine random number generator
       *             engine.
       *
       * @returns The input stream with the state of @p __x extracted or in
       *          an error state.
       */"	definition of operator>>
"/**
       * @brief Compares two %independent_bits_engine random number generator
       * objects of the same type for equality.
       *
       * @param __lhs A %independent_bits_engine random number generator
       *              object.
       * @param __rhs Another %independent_bits_engine random number generator
       *              object.
       *
       * @returns true if the infinite sequences of generated values
       *          would be equal, false otherwise.
       */"	definition of operator==
"/**
       * @brief Gets the next value in the generated random number sequence.
       */"	declaration of operator()
"/**
       * @brief Discard a sequence of random numbers.
       */"	declaration of discard
"/**
       * @brief Gets the maximum value in the generated random number range.
       */"	declaration of max
"/**
       * @brief Gets the minimum value in the generated random number range.
       */"	declaration of min
"/**
       * @brief Gets a const reference to the underlying generator engine
       *        object.
       */"	declaration of base
"/**
       * @brief Reseeds the %independent_bits_engine object with the given
       *        seed sequence.
       * @param __q A seed generator function.
       */"	definition of seed
"/**
       * @brief Reseeds the %independent_bits_engine object with the default
       *        seed for the underlying base class generator engine.
       */"	declaration of seed
"/**
       * @brief Reseeds the %independent_bits_engine object with the default
       *        seed for the underlying base class generator engine.
       */"	declaration of seed
"/**
       * @brief Generator construct a %independent_bits_engine engine.
       *
       * @param __q A seed sequence.
       */"	definition of independent_bits_engine
"/**
       * @brief Seed constructs a %independent_bits_engine engine.
       *
       * Constructs the underlying generator engine seeded with @p __s.
       * @param __s A seed value for the base class engine.
       */"	declaration of independent_bits_engine
"/**
       * @brief Move constructs a %independent_bits_engine engine.
       *
       * Copies an existing base class random number generator.
       * @param __rng An existing (base class) engine object.
       */"	declaration of independent_bits_engine
"/**
       * @brief Copy constructs a %independent_bits_engine engine.
       *
       * Copies an existing base class random number generator.
       * @param __rng An existing (base class) engine object.
       */"	declaration of independent_bits_engine
"/**
       * @brief Constructs a default %independent_bits_engine engine.
       *
       * The underlying engine is default constructed as well.
       */"	declaration of independent_bits_engine
/** The type of the generated random value. */	declaration of result_type
"/**
   * Produces random numbers by combining random numbers from some base
   * engine to produce random numbers with a specifies number of bits @p __w.
   */"	definition of independent_bits_engine<_RandomNumberEngine, __w, _UIntType>
"/**
   * @brief Compares two %discard_block_engine random number generator
   *        objects of the same type for inequality.
   *
   * @param __lhs A %discard_block_engine random number generator object.
   * @param __rhs Another %discard_block_engine random number generator
   *              object.
   *
   * @returns true if the infinite sequences of generated values
   *          would be different, false otherwise.
   */"	definition of operator!=
"/**
       * @brief Compares two %discard_block_engine random number generator
       *        objects of the same type for equality.
       *
       * @param __lhs A %discard_block_engine random number generator object.
       * @param __rhs Another %discard_block_engine random number generator
       *              object.
       *
       * @returns true if the infinite sequences of generated values
       *          would be equal, false otherwise.
       */"	definition of operator==
"/**
       * @brief Gets the next value in the generated random number sequence.
       */"	declaration of operator()
"/**
       * @brief Discard a sequence of random numbers.
       */"	declaration of discard
"/**
       * @brief Gets the maximum value in the generated random number range.
       */"	declaration of max
"/**
       * @brief Gets the minimum value in the generated random number range.
       */"	declaration of min
"/**
       * @brief Gets a const reference to the underlying generator engine
       *        object.
       */"	declaration of base
"/**
       * @brief Reseeds the %discard_block_engine object with the given seed
       *        sequence.
       * @param __q A seed generator function.
       */"	definition of seed
"/**
       * @brief Reseeds the %discard_block_engine object with the default
       *        seed for the underlying base class generator engine.
       */"	declaration of seed
"/**
       * @brief Reseeds the %discard_block_engine object with the default
       *        seed for the underlying base class generator engine.
       */"	declaration of seed
"/**
       * @brief Generator construct a %discard_block_engine engine.
       *
       * @param __q A seed sequence.
       */"	definition of discard_block_engine
"/**
       * @brief Seed constructs a %discard_block_engine engine.
       *
       * Constructs the underlying generator engine seeded with @p __s.
       * @param __s A seed value for the base class engine.
       */"	declaration of discard_block_engine
"/**
       * @brief Move constructs a %discard_block_engine engine.
       *
       * Copies an existing base class random number generator.
       * @param __rng An existing (base class) engine object.
       */"	declaration of discard_block_engine
"/**
       * @brief Copy constructs a %discard_block_engine engine.
       *
       * Copies an existing base class random number generator.
       * @param __rng An existing (base class) engine object.
       */"	declaration of discard_block_engine
"/**
       * @brief Constructs a default %discard_block_engine engine.
       *
       * The underlying engine is default constructed as well.
       */"	declaration of discard_block_engine
// parameter values	definition of block_size
/** The type of the generated random value. */	declaration of result_type
"/**
   * Produces random numbers from some base engine by discarding blocks of
   * data.
   *
   * 0 <= @p __r <= @p __p
   */"	definition of discard_block_engine<_RandomNumberEngine, __p, __r>
"/**
   * @brief Compares two % subtract_with_carry_engine random number
   *        generator objects of the same type for inequality.
   *
   * @param __lhs A % subtract_with_carry_engine random number generator
   *              object.
   * @param __rhs Another % subtract_with_carry_engine random number
   *              generator object.
   *
   * @returns true if the infinite sequences of generated values
   *          would be different, false otherwise.
   */"	definition of operator!=
///< Current index of x(i - r).	definition of _M_p
///< The carry	definition of _M_carry
/// The state of the generator.  This is a ring buffer.	definition of _M_x
"/**
       * @brief Compares two % subtract_with_carry_engine random number
       *        generator objects of the same type for equality.
       *
       * @param __lhs A % subtract_with_carry_engine random number generator
       *              object.
       * @param __rhs Another % subtract_with_carry_engine random number
       *              generator object.
       *
       * @returns true if the infinite sequences of generated values
       *          would be equal, false otherwise.
      */"	definition of operator==
"/**
       * @brief Gets the next random number in the sequence.
       */"	declaration of operator()
"/**
       * @brief Discard a sequence of random numbers.
       */"	declaration of discard
"/**
       * @brief Gets the inclusive maximum value of the range of random
       * integers returned by this generator.
       */"	declaration of max
"/**
       * @brief Gets the inclusive minimum value of the range of random
       * integers returned by this generator.
       */"	declaration of min
"/**
       * @brief Seeds the initial state @f$x_0@f$ of the random number
       *        generator.
       *
       * N1688[4.19] modifies this as follows.  If @p __value == 0,
       * sets value to 19780503.  In any case, with a linear
       * congruential generator lcg(i) having parameters @f$ m_{lcg} =
       * 2147483563, a_{lcg} = 40014, c_{lcg} = 0, and lcg(0) = value
       * @f$, sets @f$ x_{-r} \dots x_{-1} @f$ to @f$ lcg(1) \bmod m
       * \dots lcg(r) \bmod m @f$ respectively.  If @f$ x_{-1} = 0 @f$
       * set carry to 1, otherwise sets carry to 0.
       */"	declaration of seed
"/**
       * @brief Constructs a %subtract_with_carry_engine random number engine
       *        seeded from the seed sequence @p __q.
       *
       * @param __q the seed sequence.
       */"	definition of subtract_with_carry_engine
"/**
       * @brief Constructs an explicitly seeded %subtract_with_carry_engine
       *        random number generator.
       */"	declaration of subtract_with_carry_engine
// parameter values	definition of word_size
/** The type of the generated random value. */	declaration of result_type
"/**
   * @brief The Marsaglia-Zaman generator.
   *
   * This is a model of a Generalized Fibonacci discrete random number
   * generator, sometimes referred to as the SWC generator.
   *
   * A discrete random number generator that produces pseudorandom
   * numbers using:
   * @f[
   *     x_{i}\leftarrow(x_{i - s} - x_{i - r} - carry_{i-1}) \bmod m 
   * @f]
   *
   * The size of the state is @f$r@f$
   * and the maximum period of the generator is @f$(m^r - m^s - 1)@f$.
   */"	definition of subtract_with_carry_engine<_UIntType, __w, __s, __r>
"/**
   * @brief Compares two % mersenne_twister_engine random number generator
   *        objects of the same type for inequality.
   *
   * @param __lhs A % mersenne_twister_engine random number generator
   *              object.
   * @param __rhs Another % mersenne_twister_engine random number
   *              generator object.
   *
   * @returns true if the infinite sequences of generated values
   *          would be different, false otherwise.
   */"	definition of operator!=
"/**
       * @brief Compares two % mersenne_twister_engine random number generator
       *        objects of the same type for equality.
       *
       * @param __lhs A % mersenne_twister_engine random number generator
       *              object.
       * @param __rhs Another % mersenne_twister_engine random number
       *              generator object.
       *
       * @returns true if the infinite sequences of generated values
       *          would be equal, false otherwise.
       */"	definition of operator==
"/**
       * @brief Discard a sequence of random numbers.
       */"	declaration of discard
"/**
       * @brief Gets the largest possible value in the output range.
       */"	declaration of max
"/**
       * @brief Gets the smallest possible value in the output range.
       */"	declaration of min
"/**
       * @brief Constructs a %mersenne_twister_engine random number generator
       *        engine seeded from the seed sequence @p __q.
       *
       * @param __q the seed sequence.
       */"	definition of mersenne_twister_engine
// constructors and member functions	declaration of mersenne_twister_engine
// parameter values	definition of word_size
/** The type of the generated random value. */	declaration of result_type
"/**
   * A generalized feedback shift register discrete random number generator.
   *
   * This algorithm avoids multiplication and division and is designed to be
   * friendly to a pipelined architecture.  If the parameters are chosen
   * correctly, this generator will produce numbers with a very long period and
   * fairly good apparent entropy, although still not cryptographically strong.
   *
   * The best way to use this generator is with the predefined mt19937 class.
   *
   * This algorithm was originally invented by Makoto Matsumoto and
   * Takuji Nishimura.
   *
   * @tparam __w  Word size, the number of bits in each element of 
   *              the state vector.
   * @tparam __n  The degree of recursion.
   * @tparam __m  The period parameter.
   * @tparam __r  The separation point bit index.
   * @tparam __a  The last row of the twist matrix.
   * @tparam __u  The first right-shift tempering matrix parameter.
   * @tparam __d  The first right-shift tempering matrix mask.
   * @tparam __s  The first left-shift tempering matrix parameter.
   * @tparam __b  The first left-shift tempering matrix mask.
   * @tparam __t  The second left-shift tempering matrix parameter.
   * @tparam __c  The second left-shift tempering matrix mask.
   * @tparam __l  The second right-shift tempering matrix parameter.
   * @tparam __f  Initialization multiplier.
   */"	definition of mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>
"/**
   * @brief Compares two linear congruential random number generator
   * objects of the same type for inequality.
   *
   * @param __lhs A linear congruential random number generator object.
   * @param __rhs Another linear congruential random number generator
   *              object.
   *
   * @returns true if the infinite sequences of generated values
   *          would be different, false otherwise.
   */"	definition of operator!=
"/**
       * @brief Compares two linear congruential random number generator
       * objects of the same type for equality.
       *
       * @param __lhs A linear congruential random number generator object.
       * @param __rhs Another linear congruential random number generator
       *              object.
       *
       * @returns true if the infinite sequences of generated values
       *          would be equal, false otherwise.
       */"	definition of operator==
"/**
       * @brief Gets the next random number in the sequence.
       */"	definition of operator()
"/**
       * @brief Discard a sequence of random numbers.
       */"	declaration of discard
"/**
       * @brief Gets the largest possible value in the output range.
       */"	definition of max
"/**
       * @brief Gets the smallest possible value in the output range.
       *
       * The minimum depends on the @p __c parameter: if it is zero, the
       * minimum generated must be > 0, otherwise 0 is allowed.
       */"	definition of min
"/**
       * @brief Reseeds the %linear_congruential_engine random number generator
       *        engine sequence to the seed @p __s.
       *
       * @param __s The new seed.
       */"	declaration of seed
"/**
       * @brief Constructs a %linear_congruential_engine random number
       *        generator engine seeded from the seed sequence @p __q.
       *
       * @param __q the seed sequence.
       */"	definition of linear_congruential_engine
"/**
       * @brief Constructs a %linear_congruential_engine random number
       *        generator engine with seed @p __s.  The default seed value
       *        is 1.
       *
       * @param __s The initial seed value.
       */"	definition of linear_congruential_engine
"/**
       * @brief Constructs a %linear_congruential_engine random number
       *        generator engine with seed 1.
       */"	definition of linear_congruential_engine
"/**
       * @brief Constructs a %linear_congruential_engine random number
       *        generator engine with seed 1.
       */"	declaration of linear_congruential_engine
/** The modulus. */	definition of modulus
/** An increment. */	definition of increment
/** The multiplier. */	definition of multiplier
/** The type of the generated random value. */	declaration of result_type
"/**
   * @brief A model of a linear congruential random number generator.
   *
   * A random number generator that produces pseudorandom numbers via
   * linear function:
   * @f[
   *     x_{i+1}\leftarrow(ax_{i} + c) \bmod m 
   * @f]
   *
   * The template parameter @p _UIntType must be an unsigned integral type
   * large enough to store values up to (__m-1). If the template parameter
   * @p __m is 0, the modulus @p __m used is
   * std::numeric_limits<_UIntType>::max() plus 1. Otherwise, the template
   * parameters @p __a and @p __c must be less than @p __m.
   *
   * The size of the state is @f$1@f$.
   */"	definition of linear_congruential_engine<_UIntType, __a, __c, __m>
// a random number engine _Engine with result type _Res.	definition of __is_seed_seq
"/*
	 * Converts a value generated by the adapted random number generator
	 * into a value in the input domain for the dependent random number
	 * distribution.
	 */"	declaration of operator()
"/*
     * An adaptor class for converting the output of any Generator into
     * the input for a specific Distribution.
     */"	definition of _Adaptor<_Engine, _DInputType>
// - a * (m - 1) + c fits in _Tp, there is no overflow.	definition of _Mod<_Tp, __m, __a, __c, true, __s>
// Schrage.	definition of _Mod<_Tp, __m, __a, __c, false, true>
// Assume a != 0, a < m, c < m, x < m.	definition of _Mod<_Tp, __m, __a, __c, __big_enough, __schrage_ok>
/* needs to be dependent */	"static_assert(..., ""sorry, would be too much trouble for a slow result"")"
/* needs to be dependent */	"static_assert(..., ""sorry, would be too much trouble for a slow result"")"
/* assume long long no bigger than __int128 */	"static_assert(..., ""sorry, would be too much trouble for a slow result"")"
/* assume long long no bigger than __int128 */	"static_assert(..., ""sorry, would be too much trouble for a slow result"")"
"/*
   * Implementation-space details.
   */"	std::__detail
"/**
 * @file bits/random.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{random}
 */"	#ifndef _RANDOM_H
// _BITS_OPT_RANDOM_H	#endif
// namespace	#endif
"/** @file bits/opt_random.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{random}
 */"	#ifndef _BITS_OPT_RANDOM_H
// namespace	#endif
// We could duplicate everything from operator()...	definition of operator<<
//  Make sure the last cumulative probablility is one.	definition of param_type
// Make sure the last cumulative probability is one.	definition of param_type
// Make sure the last cumulative probability is one.	definition of param_type
"/**
   * Marsaglia, G. and Tsang, W. W.
   * ""A Simple Method for Generating Gamma Variables""
   * ACM Transactions on Mathematical Software, 26, 3, 363-372, 2000.
   */"	definition of operator()
"/**
   * Polar method due to Marsaglia.
   *
   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,
   * New York, 1986, Ch. V, Sect. 4.4.
   */"	definition of operator()
// We could duplicate everything from operator()...	definition of operator<<
// sqrt(pi / 2)	#endif
"/**
   * A rejection algorithm when t * p >= 8 and a simple waiting time
   * method - the second in the referenced book - otherwise.
   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1
   * is defined.
   *
   * Reference:
   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,
   * New York, 1986, Ch. X, Sect. 4 (+ Errata!).
   */"	definition of operator()
// sqrt(pi / 2)	#endif
// We could duplicate everything from operator()...	definition of operator<<
// Only in the Errata, see libstdc++/83237.	#endif
"/**
   * A rejection algorithm when mean >= 12 and a simple method based
   * upon the multiplication of uniform random variates otherwise.
   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1
   * is defined.
   *
   * Reference:
   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,
   * New York, 1986, Ch. X, Sects. 3.3 & 3.4 (+ Errata!).
   */"	definition of operator()
// XXX Is the constructor too slow?	definition of __generate_impl
// XXX Is the constructor too slow?	definition of operator()
// This is Leger's algorithm, also in Devroye, Ch. X, Example 1.5.	definition of operator()
// The largest _RealType convertible to _IntType.	definition of operator<<
// The largest _RealType convertible to _IntType.	definition of __generate_impl
// Adjust current index to loop around in ring buffer.	definition of operator<<
// Calculate o(x(i)).	definition of operator<<
"/**
   * Seeds the LCR engine with a value generated by @p __q.
   */"	definition of seed
"/**
   * Seeds the LCR with integral value @p __s, adjusted so that the
   * ring identity is never a member of the convergence set.
   */"	definition of seed
// Note: only works correctly for __m % __a < __m / __a.	definition of __calc
"/*
   * (Further) implementation-space details.
   */"	std::__detail
// std::accumulate and std::partial_sum	std
"/** @file bits/random.tcc
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{random}
 */"	#ifndef _RANDOM_TCC
// _GLIBCXX_RANDOM	#endif
// C++11	#endif
// _GLIBCXX_USE_C99_STDINT_TR1	#endif
"/** @file include/random
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_RANDOM
// start < 0 <= random	declaration
// start <= random < 0	declaration
// 0 < step * diff <= end - start <= LL_MAX	ExprStmt
// 0 <= start <= random <= end	declaration
// start < 0 <= end	declaration
// 0 <= diff <= LL_MAX	ExprStmt
// 0 <= start <= end	declaration
// only for negative argument	declaration
// We have a single engine which we lazily seed. Lock it here.	declaration
/// The random builtin generates random numbers.	definition of builtin_random
// for the 64 bits of internal state of minstd_rand	declaration
/// \return a random-seeded engine.	definition of get_seeded_engine
// In case there were more args than splits	ExprStmt
// is set to the remaining string.	ExprStmt
// We're using a delimiter provided by the user so use the `string split` behavior.	declaration
// compatibility with old versions of fish.	declaration
// Not array mode. Split the input into tokens and assign each to the vars in sequence.	if (...) ... 
// We're using a delimiter provided by the user so use the `string split` behavior.	declaration
// compatibility with old versions of fish.	declaration
// specified the delimiter string or we're using IFS.	if (...) ... 
// assigned to the last var.	for(...:...) ...
// Array mode: assign each char as a separate element of the sole var.	ExprStmt
// the final var gets the remaining characters as a single string.	declaration
// The rest of the loop is other split-modes, we don't care about those.	continue;
// If we still have tokens, set the last variable to them.	if (...) ... 
// Array mode: assign each token as a separate element of the sole var.	declaration
// Read interactively using reader_readline(). This does not support splitting on null.	ExprStmt
// reinstated: if (isatty(0) && streams.stdin_fd == STDIN_FILENO && !split_null) {	declaration
// fill the given vars.	do (...) ...
// --line is the same as read -d \n repeated N times	ExprStmt
/// The read builtin. Reads from stdin and stores the values in environment variables.	definition of builtin_read
// Verify all variable names.	for(...;...;...) ...
/// Validate the arguments given to `read` and provide defaults where needed.	definition of validate_read_args
/// fd is not seekable.	definition of read_one_char_at_a_time
// not append it to the string.	if (...) ... 
// must be signed for use in lseek	definition of bytes_consumed
/// Returns an exit status.	definition of read_in_chunks
/// they've done more extensive testing.	#define READ_CHUNK_SIZE 128
// not typed.	ExprStmt
// No autosuggestions or abbreviations in builtin_read.	ExprStmt
// Don't keep history	ExprStmt
/// we weren't asked to split on null characters.	definition of read_interactive
// empty string and a given empty delimiter.	definition of have_delimiter
// IWYU pragma: keep	definition of read_cmd_opts_t
// Who knows. Probably a bug in our wrealpath() implementation.	ExprStmt
// this is an error from our builtin, not the system's realpath.	ExprStmt
// TODO: allow arbitrary args. `realpath *` should print many paths	{ ... }
/// will fallback to this builtin if an external command cannot be found.	definition of builtin_realpath
// Mark a return in the libdata.	ExprStmt
// Find the function block.	declaration
/// Function for handling the return builtin.	definition of builtin_return
// return value.	ExprStmt
//!OCLINT(too few branches)	{ ... }
// implicit list the vars we know about	{ ... }
// explicit list the vars we know about	{ ... }
/// The set builtin creates, updates, and erases (removes, deletes) variables.	definition of builtin_set
// Fire any events.	for(...:...) ...
// Handle the uncommon case of setting specific slices of a var.	ExprStmt
// Handle the simple, common, case. Set the var to the specified values.	ExprStmt
// calculate the variable scope based on the provided options	definition of scope
/// Set a variable.	definition of builtin_set_set
// calculate the variable scope based on the provided options	definition of scope
/// This handles the more difficult case of setting individual slices of a var.	definition of set_var_slices
/// This handles the common case of setting the entire var to a set of values.	definition of set_var_array
// Fire any events.	for(...:...) ...
// remove just the specified indexes of the var	{ ... }
// friendliness and correctness.	if (...) ... 
// unset the var	{ ... }
// calculate the variable scope based on the provided options	definition of scope
/// Erase a variable.	definition of builtin_set_erase
// show all vars	{ ... }
/// Show mode. Show information about the named variable(s).	definition of builtin_set_show
// try to print a mid-line ellipsis because we are eliding lines not words	ExprStmt
// Query mode. Return the number of variables that do not exist out of the specified variables.	definition of builtin_set_query
/// `set --names` flag was used.	definition of builtin_set_list
// One-based indexing!	ExprStmt
// given (1-based) indexes.	declaration
// This both sorts them into ascending order and removes duplicates.	declaration
/// Erase from a list of wcstring values at specified indexes.	definition of erase_values
// zero-based indices.	declaration
// Replace values where needed.	for(...;...;...) ...
// Convert negative index to a positive index.	if (...) ... 
// ignore errno == -1 meaning the int did not end with a '\0'	{ ... }
// Convert negative index to a positive index.	if (...) ... 
// ignore errno == -1 meaning the int did not end with a '\0'	{ ... }
// split the var name from the indexes/slices	ExprStmt
// no slices so nothing for us to do	return ...
///   is modified to omit the index expression leaving just the var name.	definition of parse_index
/// description of the problem to stderr.	definition of env_set_reporting_errors
// Once we have one valid entry, skip the remaining ones unless we might warn.	continue;
// don't start with /.	declaration
// Always allow setting an empty value.	if (...) ... 
// contain a colon, then complain. Return true if any path element was valid, false if not.	definition of validate_path_warning_on_colons
// https://github.com/fish-shell/fish-shell/issues/806	definition of check_global_scope_exists
// The --show flag cannot be combined with any other flag.	if (...) ... 
// Trying to erase and (un)export at the same time doesn't make sense.	if (...) ... 
// Variables can only have one path status.	if (...) ... 
// Variables can only have one export status.	if (...) ... 
// Variables can only have one scope.	if (...) ... 
// We can't both list and erase variables.	if (...) ... 
// Can't query and erase or list.	if (...) ... 
// Test if the specified variable should be subject to path validation.	definition of path_variables
// Hint for invalid path operation with a colon.	"#define BUILTIN_SET_PATH_ERROR _(L""%ls: Warning: $%ls entry \""%ls\"" is not valid (%s)\n"")"
// we stop scanning for flags when the first non-flag argument is seen.	definition of short_options
/// Values used for long-only options.	definition of (unnamed enum)
// IWYU pragma: keep	definition of set_cmd_opts_t
/* NCURSES_DLL_H_incl */	#endif
/* nothing */	#define NCURSES_API
/* nothing */	#define NCURSES_IMPEXP
/* Take care of non-cygwin platforms */	#if !defined(NCURSES_IMPEXP)
/* linking to the DLL */	#endif
/* nothing */	#else
/* building a DLL */	#elif defined(NCURSES_STATIC)
"/* ""the right way"" for proper static and dll+auto-import behavior   */"	#undef NCURSES_DLL
"/*
 * For reentrant code, we map the various global variables into SCREEN by
 * using functions to access them.
 */"	#define NCURSES_PUBLIC_VAR(name) _nc_ ## name
/* MingW */	#endif
/* broken compiler */	#endif
"/* 2014-08-02 workaround for broken MinGW compiler.
 * Oddly, only TRACE is mapped to trace - the other -D's are okay.
 * suggest TDM as an alternative.
 */"	#if (__GNUC__ == 4) && (__GNUC_MINOR__ == 8)
"/*
 * MinGW gcc (unlike MSYS2 and Cygwin) should define _WIN32 and possibly _WIN64.
 */"	#if defined(__MINGW64__)
/* $Id: ncurses_dll.h.in,v 1.11 2018/06/23 21:38:14 tom Exp $ */	#ifndef NCURSES_DLL_H_incl
/* __NCURSES_H */	#endif
/* NCURSES_NOMACROS */	#endif
/* these names conflict with STL */	#endif
/* enable all optimizations (dflt) */	#endif
/* maximum trace level */	#if defined(TRACE) || defined(NCURSES_TEST)
/* maximum trace level */	#define TRACE_MAXIMUM ((1 << TRACE_SHIFT) - 1)
/* number of bits in the trace masks */	#define TRACE_SHIFT 13
/* trace attribute updates */	#define TRACE_ATTRS 0x1000
/* trace read/write of terminfo/termcap data */	#define TRACE_DATABASE 0x0800
/* trace per-character calls */	#define TRACE_CCALLS 0x0400
/* trace internal/nested calls */	#define TRACE_ICALLS 0x0200
/* trace state of TTY control bits */	#define TRACE_BITS 0x0100
/* trace low-level input processing */	#define TRACE_IEVENT 0x0080
/* trace virtual character puts */	#define TRACE_VIRTPUT 0x0040
/* trace all curses calls */	#define TRACE_CALLS 0x0020
/* trace all update actions */	#define TRACE_ORDINARY 0x001F
/* trace all character outputs */	#define TRACE_CHARPUT 0x0010
/* trace cursor moves and scrolls */	#define TRACE_MOVE 0x0008
/* trace update actions, old & new screens */	#define TRACE_UPDATE 0x0004
/* trace tputs calls */	#define TRACE_TPUTS 0x0002
/* trace user and system times of updates */	#define TRACE_TIMES 0x0001
/* turn off tracing */	#define TRACE_DISABLE 0x0000
/* trace masks */	#define TRACE_DISABLE 0x0000
/* Debugging : use with libncurses_g.a */	#if NCURSES_WIDECHAR
/* Debugging : use with libncurses_g.a */	declaration of _tracechtype2
/* Debugging : use with libncurses_g.a */	declaration of _tracechtype
/* Debugging : use with libncurses_g.a */	declaration of _tracechar
/* Debugging : use with libncurses_g.a */	declaration of _traceattr2
/* Debugging : use with libncurses_g.a */	declaration of _traceattr
/* Debugging : use with libncurses_g.a */	declaration of _tracef
/* direct data to printer */	#endif
/* direct data to printer */	declaration of mcprint_sp
/* do we have given key? */	declaration of has_key_sp
/* do we have given key? */	#if NCURSES_SP_FUNCS
/* do we have given key? */	declaration of has_key
/* direct data to printer */	declaration of mcprint
/* other non-XSI functions */	declaration of mcprint
/* generated */	#if NCURSES_SP_FUNCS
/* generated */	declaration of mouse_trafo
/* button state bits */	definition of bstate
/* event coordinates (character-cell) */	definition of z
/* ID to distinguish multiple devices */	definition of id
/* macros to extract single event-bits from masks */	#define BUTTON_RELEASE(e,x) ((e) & NCURSES_MOUSE_MASK(x, 001))
"/*
 * In 32 bits the version-1 scheme does not provide enough space for a 5th
 * button, unless we choose to change the ABI by omitting the reserved-events.
 */"	#if NCURSES_MOUSE_VERSION > 1
/* event masks */	#define BUTTON1_RELEASED NCURSES_MOUSE_MASK(1, NCURSES_BUTTON_RELEASED)
/* mouse interface */	#if NCURSES_MOUSE_VERSION > 1
/* NCURSES_WIDECHAR */	#endif
/* NCURSES_NOMACROS */	#endif
"/*
 * XSI curses macros for XPG4 conformance.
 */"	#if !NCURSES_OPAQUE
/* implemented:SP_FUNC */	#endif
/* implemented:SP_FUNC */	declaration of vid_puts_sp
/* implemented:SP_FUNC */	declaration of vid_attr_sp
/* implemented:SP_FUNC */	declaration of wunctrl_sp
/* implemented:SP_FUNC */	declaration of unget_wch_sp
/* implemented:SP_FUNC */	declaration of term_attrs_sp
/* implemented */	#if NCURSES_SP_FUNCS
/* implemented */	declaration of wvline_set
/* implemented */	declaration of wunctrl
/* implemented */	declaration of winwstr
/* generated:WIDEC */	declaration of wins_wstr
/* implemented */	declaration of wins_wch
/* implemented */	declaration of wins_nwstr
/* implemented */	declaration of winnwstr
/* generated:WIDEC */	declaration of win_wchstr
/* implemented */	declaration of win_wchnstr
/* implemented */	declaration of win_wch
/* implemented */	declaration of whline_set
/* implemented */	declaration of wgetn_wstr
/* generated:WIDEC */	declaration of wgetbkgrnd
/* generated:WIDEC */	declaration of wget_wstr
/* implemented */	declaration of wget_wch
/* implemented */	declaration of wecho_wchar
/* implemented */	declaration of wborder_set
/* implemented */	declaration of wbkgrndset
/* implemented */	declaration of wbkgrnd
/* generated:WIDEC */	declaration of waddwstr
/* implemented */	declaration of waddnwstr
/* generated:WIDEC */	declaration of wadd_wchstr
/* implemented */	declaration of wadd_wchnstr
/* implemented */	declaration of wadd_wch
/* generated:WIDEC */	declaration of vline_set
/* implemented */	declaration of vid_puts
/* implemented */	declaration of vid_attr
/* implemented */	declaration of unget_wch
/* implemented */	declaration of term_attrs
/* implemented */	declaration of slk_wset
/* implemented */	declaration of setcchar
/* implemented */	declaration of pecho_wchar
/* generated:WIDEC */	declaration of mvwvline_set
/* generated:WIDEC */	declaration of mvwinwstr
/* generated:WIDEC */	declaration of mvwins_wstr
/* generated:WIDEC */	declaration of mvwins_wch
/* generated:WIDEC */	declaration of mvwins_nwstr
/* generated:WIDEC */	declaration of mvwinnwstr
/* generated:WIDEC */	declaration of mvwin_wchstr
/* generated:WIDEC */	declaration of mvwin_wchnstr
/* generated:WIDEC */	declaration of mvwin_wch
/* generated:WIDEC */	declaration of mvwhline_set
/* generated:WIDEC */	declaration of mvwgetn_wstr
/* generated:WIDEC */	declaration of mvwget_wstr
/* generated:WIDEC */	declaration of mvwget_wch
/* generated:WIDEC */	declaration of mvwaddwstr
/* generated:WIDEC */	declaration of mvwaddnwstr
/* generated:WIDEC */	declaration of mvwadd_wchstr
/* generated:WIDEC */	declaration of mvwadd_wchnstr
/* generated:WIDEC */	declaration of mvwadd_wch
/* generated:WIDEC */	declaration of mvvline_set
/* generated:WIDEC */	declaration of mvinwstr
/* generated:WIDEC */	declaration of mvins_wstr
/* generated:WIDEC */	declaration of mvins_wch
/* generated:WIDEC */	declaration of mvins_nwstr
/* generated:WIDEC */	declaration of mvinnwstr
/* generated:WIDEC */	declaration of mvin_wchstr
/* generated:WIDEC */	declaration of mvin_wchnstr
/* generated:WIDEC */	declaration of mvin_wch
/* generated:WIDEC */	declaration of mvhline_set
/* generated:WIDEC */	declaration of mvgetn_wstr
/* generated:WIDEC */	declaration of mvget_wstr
/* generated:WIDEC */	declaration of mvget_wch
/* generated:WIDEC */	declaration of mvaddwstr
/* generated:WIDEC */	declaration of mvaddnwstr
/* generated:WIDEC */	declaration of mvadd_wchstr
/* generated:WIDEC */	declaration of mvadd_wchnstr
/* generated:WIDEC */	declaration of mvadd_wch
/* implemented */	declaration of killwchar
/* implemented */	declaration of key_name
/* generated:WIDEC */	declaration of inwstr
/* generated:WIDEC */	declaration of ins_wstr
/* generated:WIDEC */	declaration of ins_wch
/* generated:WIDEC */	declaration of ins_nwstr
/* generated:WIDEC */	declaration of innwstr
/* generated:WIDEC */	declaration of in_wchstr
/* generated:WIDEC */	declaration of in_wchnstr
/* generated:WIDEC */	declaration of in_wch
/* generated:WIDEC */	declaration of hline_set
/* generated:WIDEC */	declaration of getn_wstr
/* implemented */	declaration of getcchar
/* generated:WIDEC */	declaration of getbkgrnd
/* generated:WIDEC */	declaration of get_wstr
/* generated:WIDEC */	declaration of get_wch
/* implemented */	declaration of erasewchar
/* generated:WIDEC */	declaration of echo_wchar
/* generated:WIDEC */	declaration of box_set
/* generated:WIDEC */	declaration of border_set
/* generated:WIDEC */	declaration of bkgrndset
/* generated:WIDEC */	declaration of bkgrnd
/* generated:WIDEC */	declaration of addwstr
/* generated:WIDEC */	declaration of addnwstr
/* generated:WIDEC */	declaration of add_wchstr
/* generated:WIDEC */	declaration of add_wchnstr
/* generated:WIDEC */	declaration of add_wch
"/*
 * Function prototypes for wide-character operations.
 *
 * ""generated"" comments should include "":WIDEC"" to make the corresponding
 * functions ifdef'd in lib_gen.c
 *
 * ""implemented"" comments do not need this marker.
 */"	declaration of add_wch
/* thick lines */	#define WACS_BTTB NCURSES_WACS('L')
/* double lines */	#define WACS_BDDB NCURSES_WACS('C')
/* UK pound sign */	#define WACS_STERLING NCURSES_WACS('}')
/* not equal */	#define WACS_NEQUAL NCURSES_WACS('|')
/* Pi */	#define WACS_PI NCURSES_WACS('{')
/* greater/equal */	#define WACS_GEQUAL NCURSES_WACS('z')
/* less/equal */	#define WACS_LEQUAL NCURSES_WACS('y')
/* scan line 7 */	#define WACS_S7 NCURSES_WACS('r')
/* scan line 3 */	#define WACS_S3 NCURSES_WACS('p')
/* ncurses extensions */	#define WACS_S3 NCURSES_WACS('p')
/* solid square block */	#define WACS_BLOCK NCURSES_WACS('0')
/* lantern symbol */	#define WACS_LANTERN NCURSES_WACS('i')
/* board of squares */	#define WACS_BOARD NCURSES_WACS('h')
/* arrow up */	#define WACS_UARROW NCURSES_WACS('-')
/* arrow down */	#define WACS_DARROW NCURSES_WACS('.')
/* arrow right */	#define WACS_RARROW NCURSES_WACS('+')
/* arrow left */	#define WACS_LARROW NCURSES_WACS(',')
/* Teletype 5410v1 symbols */	#define WACS_LARROW NCURSES_WACS(',')
/* bullet */	#define WACS_BULLET NCURSES_WACS('~')
/* plus/minus */	#define WACS_PLMINUS NCURSES_WACS('g')
/* degree symbol */	#define WACS_DEGREE NCURSES_WACS('f')
/* checker board */	#define WACS_CKBOARD NCURSES_WACS('a')
/* diamond */	#define WACS_DIAMOND NCURSES_WACS('`')
/* scan line 9 */	#define WACS_S9 NCURSES_WACS('s')
/* scan line 1 */	#define WACS_S1 NCURSES_WACS('o')
"/*
 * vile:cmode:
 * This file is part of ncurses, designed to be appended after curses.h.in
 * (see that file for the relevant copyright).
 */"	#if NCURSES_WIDECHAR
"/*
 * vile:cmode:
 * This file is part of ncurses, designed to be appended after curses.h.in
 * (see that file for the relevant copyright).
 */"	#define _XOPEN_CURSES 1
/* Maximum key value is 0633 */	#define KEY_MAX 0777
/* We were interrupted by an event */	#define KEY_EVENT 0633
/* Terminal resize event */	#define KEY_RESIZE 0632
/* Mouse event has occurred */	#define KEY_MOUSE 0631
/* undo key */	#define KEY_UNDO 0630
/* suspend key */	#define KEY_SUSPEND 0627
/* shifted undo key */	#define KEY_SUNDO 0626
/* shifted suspend key */	#define KEY_SSUSPEND 0625
/* shifted save key */	#define KEY_SSAVE 0624
/* shifted resume key */	#define KEY_SRSUME 0623
/* shifted right-arrow key */	#define KEY_SRIGHT 0622
/* shifted replace key */	#define KEY_SREPLACE 0621
/* shifted redo key */	#define KEY_SREDO 0620
/* shifted print key */	#define KEY_SPRINT 0617
/* shifted previous key */	#define KEY_SPREVIOUS 0616
/* shifted options key */	#define KEY_SOPTIONS 0615
/* shifted next key */	#define KEY_SNEXT 0614
/* shifted move key */	#define KEY_SMOVE 0613
/* shifted message key */	#define KEY_SMESSAGE 0612
/* shifted left-arrow key */	#define KEY_SLEFT 0611
/* shifted insert-character key */	#define KEY_SIC 0610
/* shifted home key */	#define KEY_SHOME 0607
/* shifted help key */	#define KEY_SHELP 0606
/* shifted find key */	#define KEY_SFIND 0605
/* shifted exit key */	#define KEY_SEXIT 0604
/* shifted clear-to-end-of-line key */	#define KEY_SEOL 0603
/* shifted end key */	#define KEY_SEND 0602
/* select key */	#define KEY_SELECT 0601
/* shifted delete-line key */	#define KEY_SDL 0600
/* shifted delete-character key */	#define KEY_SDC 0577
/* shifted create key */	#define KEY_SCREATE 0576
/* shifted copy key */	#define KEY_SCOPY 0575
/* shifted command key */	#define KEY_SCOMMAND 0574
/* shifted cancel key */	#define KEY_SCANCEL 0573
/* shifted begin key */	#define KEY_SBEG 0572
/* save key */	#define KEY_SAVE 0571
/* resume key */	#define KEY_RESUME 0570
/* restart key */	#define KEY_RESTART 0567
/* replace key */	#define KEY_REPLACE 0566
/* refresh key */	#define KEY_REFRESH 0565
/* reference key */	#define KEY_REFERENCE 0564
/* redo key */	#define KEY_REDO 0563
/* previous key */	#define KEY_PREVIOUS 0562
/* options key */	#define KEY_OPTIONS 0561
/* open key */	#define KEY_OPEN 0560
/* next key */	#define KEY_NEXT 0557
/* move key */	#define KEY_MOVE 0556
/* message key */	#define KEY_MESSAGE 0555
/* mark key */	#define KEY_MARK 0554
/* help key */	#define KEY_HELP 0553
/* find key */	#define KEY_FIND 0552
/* exit key */	#define KEY_EXIT 0551
/* end key */	#define KEY_END 0550
/* create key */	#define KEY_CREATE 0547
/* copy key */	#define KEY_COPY 0546
/* command key */	#define KEY_COMMAND 0545
/* close key */	#define KEY_CLOSE 0544
/* cancel key */	#define KEY_CANCEL 0543
/* begin key */	#define KEY_BEG 0542
/* back-tab key */	#define KEY_BTAB 0541
/* lower right of keypad */	#define KEY_C3 0540
/* lower left of keypad */	#define KEY_C1 0537
/* center of keypad */	#define KEY_B2 0536
/* upper right of keypad */	#define KEY_A3 0535
/* upper left of keypad */	#define KEY_A1 0534
/* lower-left key (home down) */	#define KEY_LL 0533
/* print key */	#define KEY_PRINT 0532
/* enter/send key */	#define KEY_ENTER 0527
/* clear-all-tabs key */	#define KEY_CATAB 0526
/* clear-tab key */	#define KEY_CTAB 0525
/* set-tab key */	#define KEY_STAB 0524
/* previous-page key */	#define KEY_PPAGE 0523
/* next-page key */	#define KEY_NPAGE 0522
/* scroll-backward key */	#define KEY_SR 0521
/* scroll-forward key */	#define KEY_SF 0520
/* clear-to-end-of-line key */	#define KEY_EOL 0517
/* clear-to-end-of-screen key */	#define KEY_EOS 0516
/* clear-screen or erase key */	#define KEY_CLEAR 0515
/* sent by rmir or smir in insert mode */	#define KEY_EIC 0514
/* insert-character key */	#define KEY_IC 0513
/* delete-character key */	#define KEY_DC 0512
/* insert-line key */	#define KEY_IL 0511
/* delete-line key */	#define KEY_DL 0510
/* Value of function key n */	#define KEY_F(n) (KEY_F0+(n))
/* Function keys.  Space for 64 */	#define KEY_F0 0410
/* backspace key */	#define KEY_BACKSPACE 0407
/* home key */	#define KEY_HOME 0406
/* right-arrow key */	#define KEY_RIGHT 0405
/* left-arrow key */	#define KEY_LEFT 0404
/* up-arrow key */	#define KEY_UP 0403
/* down-arrow key */	#define KEY_DOWN 0402
"/*
 * These definitions were generated by ./MKkey_defs.sh ../../include/Caps ../../include/Caps-ncurses
 */"	#define KEY_DOWN 0402
/* Reset or hard reset (unreliable) */	#define KEY_RESET 0531
/* Soft (partial) reset (unreliable) */	#define KEY_SRESET 0530
/* Break key (unreliable) */	#define KEY_BREAK 0401
/* Minimum curses key */	#define KEY_MIN 0401
/* A wchar_t contains a key code */	#define KEY_CODE_YES 0400
"/*
 * Pseudo-character tokens outside ASCII range.  The curses wgetch() function
 * will return any given one of these only if the corresponding k- capability
 * is defined in your terminal's terminfo entry.
 *
 * Some keys (KEY_A1, etc) are arranged like this:
 *	a1     up    a3
 *	left   b2    right
 *	c1     down  c3
 *
 * A few key codes do not depend upon the terminfo entry.
 */"	#define KEY_CODE_YES 0400
"/*
 * Public variables.
 *
 * Notes:
 *	a. ESCDELAY was an undocumented feature under AIX curses.
 *	   It gives the ESC expire time in milliseconds.
 *	b. ttytype is needed for backward compatibility
 */"	#if NCURSES_REENTRANT
/* NCURSES_NOMACROS */	#endif
"/*
 * X/Open says this returns a bool; SVr4 also checked for out-of-range line.
 * The macro provides compatibility:
 */"	#endif
"/*
 * These macros are extensions - not in X/Open Curses.
 */"	#if 1
"/*
 * Export fallback function for use in C++ binding.
 */"	#if !1
/* NCURSES_OPAQUE */	#endif
/* NCURSES_WATTR_MACROS */	#endif
/* (NCURSES_WIDECHAR && NCURSES_EXE_COLORS) */	#endif
/* !(NCURSES_WIDECHAR && NCURSES_EXE_COLORS) */	#else
/* NCURSES_OPAQUE */	#endif
"/*
 * Some wide-character functions can be implemented without the extensions.
 */"	#if !NCURSES_OPAQUE
/* NCURSES_OPAQUE */	#endif
/* NCURSES_OPAQUE */	#endif
/* NCURSES_WATTR_MACROS */	#endif
/* NCURSES_OPAQUE */	#endif
/* It seems older SYSV curses versions define these */	#if !NCURSES_OPAQUE
"/*
 * These pseudo functions are always implemented as macros:
 */"	#ifndef NCURSES_NOMACROS
"/*
 * These pseudo functions are always implemented as macros:
 */"	#define getyx(win,y,x) (y = getcury(win), x = getcurx(win))
/* ncurses extension */	#endif
/* ncurses extension */	#define A_ITALIC NCURSES_BITS(1U,23)
/* attributes */	#if 1
/* attributes */	#define NCURSES_ATTR_SHIFT 8
/* implemented:EXT_SP_FUNC */	#endif
/* implemented:EXT_SP_FUNC */	declaration of use_legacy_coding_sp
/* implemented:EXT_SP_FUNC */	declaration of use_default_colors_sp
/* implemented:EXT_SP_FUNC */	declaration of set_tabsize_sp
/* implemented:EXT_SP_FUNC */	declaration of set_escdelay_sp
/* implemented:EXT_SP_FUNC */	declaration of resizeterm_sp
/* implemented:EXT_SP_FUNC */	declaration of resize_term_sp
/* implemented:EXT_SP_FUNC */	declaration of reset_color_pairs_sp
/* implemented:EXT_SP_FUNC */	declaration of reset_color_pairs_sp
/* implemented */	declaration of nofilter_sp
/* implemented:EXT_SP_FUNC */	declaration of keyok_sp
/* implemented:EXT_SP_FUNC */	declaration of key_defined_sp
/* implemented:EXT_SP_FUNC */	declaration of is_term_resized_sp
/* implemented:EXT_SP_FUNC */	declaration of init_extended_pair_sp
/* implemented:EXT_SP_FUNC */	declaration of init_extended_color_sp
/* implemented:EXT_SP_FUNC */	declaration of free_pair_sp
/* implemented:EXT_SP_FUNC */	declaration of find_pair_sp
/* implemented:EXT_SP_FUNC */	declaration of get_escdelay_sp
/* implemented:EXT_SP_FUNC */	declaration of extended_slk_color_sp
/* implemented:EXT_SP_FUNC */	declaration of extended_pair_content_sp
/* implemented:EXT_SP_FUNC */	declaration of extended_color_content_sp
/* implemented:EXT_SP_FUNC */	declaration of define_key_sp
/* implemented:EXT_SP_FUNC */	declaration of assume_default_colors_sp
/* implemented:EXT_SP_FUNC */	declaration of alloc_pair_sp
/* implemented:EXT_SP_FUNC */	declaration of keybound_sp
/* implemented:SP_FUNC */	#if 1
/* implemented:SP_FUNC */	declaration of vidputs_sp
/* implemented:SP_FUNC */	declaration of vidattr_sp
/* implemented:SP_FUNC */	declaration of use_tioctl_sp
/* implemented:SP_FUNC */	declaration of use_env_sp
/* implemented:SP_FUNC */	declaration of ungetch_sp
/* implemented:SP_FUNC */	declaration of typeahead_sp
/* implemented:SP_FUNC */	declaration of termname_sp
/* implemented:SP_FUNC */	declaration of termattrs_sp
/* implemented:SP_FUNC */	declaration of start_color_sp
/* implemented:SP_FUNC */	declaration of slk_touch_sp
/* implemented:SP_FUNC */	declaration of slk_set_sp
/* implemented:SP_FUNC */	declaration of slk_restore_sp
/* implemented:SP_FUNC */	declaration of slk_refresh_sp
/* implemented:SP_FUNC */	declaration of slk_noutrefresh_sp
/* implemented:SP_FUNC */	declaration of slk_label_sp
/* implemented:SP_FUNC */	declaration of slk_init_sp
/* implemented:SP_FUNC */	declaration of slk_color_sp
/* implemented:SP_FUNC */	declaration of slk_clear_sp
/* implemented:SP_FUNC */	declaration of slk_attr_set_sp
/* implemented:SP_FUNC */	declaration of slk_attr_sp
/* implemented:SP_FUNC */	declaration of slk_attrset_sp
/* implemented:SP_FUNC */	declaration of slk_attron_sp
/* implemented:SP_FUNC */	declaration of slk_attroff_sp
/* implemented:SP_FUNC */	declaration of scr_set_sp
/* implemented:SP_FUNC */	declaration of scr_restore_sp
/* implemented:SP_FUNC */	declaration of scr_init_sp
/* implemented:SP_FUNC */	declaration of savetty_sp
/* implemented:SP_FUNC */	declaration of ripoffline_sp
/* implemented:SP_FUNC */	declaration of resetty_sp
/* implemented:SP_FUNC */	declaration of reset_shell_mode_sp
/* implemented:SP_FUNC */	declaration of reset_prog_mode_sp
/* implemented:SP_FUNC */	declaration of raw_sp
/* implemented:SP_FUNC */	declaration of qiflush_sp
/* implemented:SP_FUNC */	declaration of pair_content_sp
/* implemented:SP_FUNC */	declaration of noraw_sp
/* implemented:SP_FUNC */	declaration of noqiflush_sp
/* implemented:SP_FUNC */	declaration of nonl_sp
/* implemented:SP_FUNC */	declaration of noecho_sp
/* implemented:SP_FUNC */	declaration of nocbreak_sp
/* implemented:SP_FUNC */	declaration of nl_sp
/* implemented:SP_FUNC */	declaration of newwin_sp
/* implemented:SP_FUNC */	declaration of newterm_sp
/* implemented:SP_FUNC */	declaration of newpad_sp
/* implemented:SP_FUNC */	declaration of napms_sp
/* implemented:SP_FUNC */	declaration of mvcur_sp
/* implemented:SP_FUNC */	declaration of longname_sp
/* implemented:SP_FUNC */	declaration of killchar_sp
/* implemented:SP_FUNC */	declaration of keyname_sp
/* implemented:SP_FUNC */	declaration of isendwin_sp
/* implemented:SP_FUNC */	declaration of intrflush_sp
/* implemented:SP_FUNC */	declaration of init_pair_sp
/* implemented:SP_FUNC */	declaration of init_color_sp
/* implemented:SP_FUNC */	declaration of has_il_sp
/* implemented:SP_FUNC */	declaration of has_ic_sp
/* implemented:SP_FUNC */	declaration of has_colors_sp
/* implemented:SP_FUNC */	declaration of halfdelay_sp
/* implemented:SP_FUNC */	declaration of getwin_sp
/* implemented:SP_FUNC */	declaration of flushinp_sp
/* implemented:SP_FUNC */	declaration of flash_sp
/* implemented:SP_FUNC */	declaration of filter_sp
/* implemented:SP_FUNC */	declaration of erasechar_sp
/* implemented:SP_FUNC */	declaration of endwin_sp
/* implemented:SP_FUNC */	declaration of echo_sp
/* implemented:SP_FUNC */	declaration of doupdate_sp
/* implemented:SP_FUNC */	declaration of delay_output_sp
/* implemented:SP_FUNC */	declaration of def_shell_mode_sp
/* implemented:SP_FUNC */	declaration of def_prog_mode_sp
/* implemented:SP_FUNC */	declaration of color_content_sp
/* implemented:SP_FUNC */	declaration of curs_set_sp
/* implemented:SP_FUNC */	declaration of cbreak_sp
/* implemented:SP_FUNC */	declaration of can_change_color_sp
/* implemented:SP_FUNC */	declaration of beep_sp
/* implemented:SP_FUNC */	declaration of baudrate_sp
/* implemented:SP_FUNC */	declaration of new_prescr
/* Define the sp-funcs helper function */	#define NCURSES_SP_OUTC NCURSES_SP_NAME(NCURSES_OUTC)
"/*
 * Extra extension-functions, which pass a SCREEN pointer rather than using
 * a global variable SP.
 */"	#if 1
/* generated */	#else
/* generated */	declaration of wgetscrreg
/* generated */	declaration of wgetdelay
/* generated */	declaration of is_syncok
/* generated */	declaration of is_subwin
/* generated */	declaration of is_scrollok
/* generated */	declaration of is_pad
/* generated */	declaration of is_notimeout
/* generated */	declaration of is_nodelay
/* generated */	declaration of is_leaveok
/* generated */	declaration of is_keypad
/* generated */	declaration of is_immedok
/* generated */	declaration of is_idlok
/* generated */	declaration of is_idcok
/* generated */	declaration of is_cleared
/* generated */	declaration of wgetparent
"/*
 * These extensions provide access to information stored in the WINDOW even
 * when NCURSES_OPAQUE is set:
 */"	declaration of wgetparent
"/*
 * These functions are extensions - not in X/Open Curses.
 */"	#if 1
"/*
 * vid_attr() was implemented originally based on a draft of X/Open curses.
 */"	#if !NCURSES_WIDECHAR
/* generated */	declaration of getpary
/* generated */	declaration of getparx
/* generated */	declaration of getmaxy
/* generated */	declaration of getmaxx
/* generated */	declaration of getbegy
/* generated */	declaration of getbegx
/* generated */	declaration of getcury
/* generated */	declaration of getcurx
/* generated */	declaration of getattrs
"/*
 * These functions are not in X/Open, but we use them in macro definitions:
 */"	declaration of getattrs
/* special */	declaration of tiparm
/* special */	#endif
/* special */	#else
/* special */	declaration of tparm
/* implemented */	#if NCURSES_TPARM_VARARGS
/* implemented */	declaration of putp
/* implemented */	declaration of tigetstr
/* implemented */	declaration of tigetnum
/* implemented */	declaration of tigetflag
"/*
 * These are also declared in <term.h>:
 */"	declaration of tigetflag
/* implemented */	declaration of wvline
/* implemented */	declaration of wtouchln
/* implemented */	declaration of wtimeout
/* implemented */	declaration of wsyncup
/* implemented */	declaration of wsyncdown
/* generated */	declaration of wstandend
/* generated */	declaration of wstandout
/* implemented */	declaration of wsetscrreg
/* implemented */	declaration of wscrl
/* implemented */	declaration of wscanw
/* implemented */	declaration of wrefresh
/* implemented */	declaration of wredrawln
/* implemented */	declaration of wprintw
/* implemented */	declaration of wnoutrefresh
/* implemented */	declaration of wmove
/* generated */	declaration of winstr
/* generated */	declaration of winsstr
/* implemented */	declaration of winsnstr
/* generated */	declaration of winsertln
/* implemented */	declaration of winsdelln
/* implemented */	declaration of winsch
/* implemented */	declaration of winnstr
/* generated */	declaration of winchstr
/* implemented */	declaration of winchnstr
/* implemented */	declaration of winch
/* implemented */	declaration of whline
/* generated */	declaration of wgetstr
/* implemented */	declaration of wgetnstr
/* implemented */	declaration of wgetch
/* implemented */	declaration of werase
/* implemented */	declaration of wechochar
/* generated */	declaration of wdeleteln
/* implemented */	declaration of wdelch
/* implemented */	declaration of wcursyncup
/* implemented */	declaration of wcolor_set
/* implemented */	declaration of wclrtoeol
/* implemented */	declaration of wclrtobot
/* implemented */	declaration of wclear
/* implemented */	declaration of wchgat
/* implemented */	declaration of wborder
/* implemented */	declaration of wbkgdset
/* implemented */	declaration of wbkgd
/* generated */	declaration of wattr_set
/* implemented */	declaration of wattr_off
/* implemented */	declaration of wattr_on
/* generated */	declaration of wattr_get
/* generated */	declaration of wattrset
/* generated */	declaration of wattroff
/* generated */	declaration of wattron
/* generated */	declaration of waddstr
/* implemented */	declaration of waddnstr
/* generated */	declaration of waddchstr
/* implemented */	declaration of waddchnstr
/* implemented */	declaration of waddch
/* implemented */	declaration of vw_scanw
/* implemented */	declaration of vwscanw
/* implemented */	declaration of vw_printw
/* implemented */	declaration of vwprintw
/* generated */	declaration of vline
/* implemented */	declaration of vidputs
/* implemented */	declaration of vidattr
/* implemented */	declaration of use_tioctl
/* implemented */	declaration of use_env
/* generated */	declaration of untouchwin
/* implemented */	declaration of ungetch
/* implemented */	declaration of typeahead
/* generated */	declaration of touchwin
/* generated */	declaration of touchline
/* generated */	declaration of timeout
/* implemented */	declaration of termname
/* implemented */	declaration of termattrs
/* implemented */	declaration of syncok
/* implemented */	declaration of subwin
/* implemented */	declaration of subpad
/* implemented */	declaration of start_color
/* generated */	declaration of standend
/* generated */	declaration of standout
/* implemented */	declaration of slk_touch
/* implemented */	declaration of slk_set
/* implemented */	declaration of slk_restore
/* implemented */	declaration of slk_refresh
/* implemented */	declaration of slk_noutrefresh
/* implemented */	declaration of slk_label
/* implemented */	declaration of slk_init
/* implemented */	declaration of slk_color
/* implemented */	declaration of slk_clear
/* implemented */	declaration of slk_attr_set
/* implemented */	declaration of slk_attr
/* implemented */	declaration of slk_attrset
/* generated:WIDEC */	declaration of slk_attr_on
/* implemented */	declaration of slk_attron
/* generated:WIDEC */	declaration of slk_attr_off
/* implemented */	declaration of slk_attroff
/* implemented */	declaration of set_term
/* generated */	declaration of setscrreg
/* implemented */	declaration of scr_set
/* implemented */	declaration of scr_restore
/* implemented */	declaration of scrollok
/* generated */	declaration of scroll
/* generated */	declaration of scrl
/* implemented */	declaration of scr_init
/* implemented */	declaration of scr_dump
/* implemented */	declaration of scanw
/* implemented */	declaration of savetty
/* implemented */	declaration of ripoffline
/* implemented */	declaration of reset_shell_mode
/* implemented */	declaration of reset_prog_mode
/* implemented */	declaration of resetty
/* generated */	declaration of refresh
/* generated */	declaration of redrawwin
/* implemented */	declaration of raw
/* implemented */	declaration of qiflush
/* implemented */	declaration of putwin
/* implemented */	declaration of printw
/* implemented */	declaration of prefresh
/* implemented */	declaration of pnoutrefresh
/* implemented */	declaration of pechochar
/* generated */	declaration of PAIR_NUMBER
/* implemented */	declaration of pair_content
/* implemented */	declaration of overwrite
/* implemented */	declaration of overlay
/* implemented */	declaration of notimeout
/* implemented */	declaration of noraw
/* implemented */	declaration of noqiflush
/* implemented */	declaration of nonl
/* implemented */	declaration of noecho
/* implemented */	declaration of nodelay
/* implemented */	declaration of nocbreak
/* implemented */	declaration of nl
/* implemented */	declaration of newwin
/* implemented */	declaration of newterm
/* implemented */	declaration of newpad
/* implemented */	declaration of napms
/* generated */	declaration of mvwvline
/* implemented */	declaration of mvwscanw
/* implemented */	declaration of mvwprintw
/* generated */	declaration of mvwinstr
/* generated */	declaration of mvwinsstr
/* generated */	declaration of mvwinsnstr
/* generated */	declaration of mvwinsch
/* generated */	declaration of mvwinnstr
/* generated */	declaration of mvwinchstr
/* generated */	declaration of mvwinchnstr
/* generated */	declaration of mvwinch
/* implemented */	declaration of mvwin
/* generated */	declaration of mvwhline
/* generated */	declaration of mvwgetstr
/* generated */	declaration of mvwgetnstr
/* generated */	declaration of mvwgetch
/* generated */	declaration of mvwdelch
/* generated */	declaration of mvwchgat
/* generated */	declaration of mvwaddstr
/* generated */	declaration of mvwaddnstr
/* generated */	declaration of mvwaddchstr
/* generated */	declaration of mvwaddchnstr
/* generated */	declaration of mvwaddch
/* generated */	declaration of mvvline
/* implemented */	declaration of mvscanw
/* implemented */	declaration of mvprintw
/* generated */	declaration of mvinstr
/* generated */	declaration of mvinsstr
/* generated */	declaration of mvinsnstr
/* generated */	declaration of mvinsch
/* generated */	declaration of mvinnstr
/* generated */	declaration of mvinchstr
/* generated */	declaration of mvinchnstr
/* generated */	declaration of mvinch
/* generated */	declaration of mvhline
/* generated */	declaration of mvgetstr
/* generated */	declaration of mvgetnstr
/* generated */	declaration of mvgetch
/* implemented */	declaration of mvderwin
/* generated */	declaration of mvdelch
/* implemented */	declaration of mvcur
/* generated */	declaration of mvchgat
/* generated */	declaration of mvaddstr
/* generated */	declaration of mvaddnstr
/* generated */	declaration of mvaddchstr
/* generated */	declaration of mvaddchnstr
/* generated */	declaration of mvaddch
/* generated */	declaration of move
/* implemented */	declaration of meta
/* implemented */	declaration of longname
/* implemented */	declaration of leaveok
/* implemented */	declaration of killchar
/* implemented */	declaration of keypad
/* implemented */	declaration of keyname
/* implemented */	declaration of is_wintouched
/* implemented */	declaration of is_linetouched
/* implemented */	declaration of isendwin
/* implemented */	declaration of intrflush
/* generated */	declaration of instr
/* generated */	declaration of insstr
/* generated */	declaration of insnstr
/* generated */	declaration of insertln
/* generated */	declaration of insdelln
/* generated */	declaration of insch
/* generated */	declaration of innstr
/* implemented */	declaration of init_pair
/* implemented */	declaration of init_color
/* implemented */	declaration of initscr
/* generated */	declaration of inchstr
/* generated */	declaration of inchnstr
/* generated */	declaration of inch
/* implemented */	declaration of immedok
/* implemented */	declaration of idlok
/* implemented */	declaration of idcok
/* generated */	declaration of hline
/* implemented */	declaration of has_il
/* implemented */	declaration of has_ic
/* implemented */	declaration of has_colors
/* implemented */	declaration of halfdelay
/* implemented */	declaration of getwin
/* generated */	declaration of getstr
/* generated */	declaration of getnstr
/* generated */	declaration of getch
/* generated */	declaration of getbkgd
/* implemented */	declaration of flushinp
/* implemented */	declaration of flash
/* implemented */	declaration of filter
/* implemented */	declaration of erasechar
/* implemented */	declaration of endwin
/* generated */	declaration of erase
/* generated */	declaration of echochar
/* implemented */	declaration of echo
/* implemented */	declaration of dupwin
/* implemented */	declaration of doupdate
/* implemented */	declaration of derwin
/* generated */	declaration of deleteln
/* implemented */	declaration of delwin
/* implemented */	declaration of delscreen
/* generated */	declaration of delch
/* implemented */	declaration of delay_output
/* implemented */	declaration of def_shell_mode
/* implemented */	declaration of def_prog_mode
/* implemented */	declaration of curs_set
/* implemented */	declaration of copywin
/* generated */	declaration of COLOR_PAIR
/* generated */	declaration of color_set
/* implemented */	declaration of color_content
/* generated */	declaration of clrtoeol
/* generated */	declaration of clrtobot
/* implemented */	declaration of clearok
/* generated */	declaration of clear
/* generated */	declaration of chgat
/* implemented */	declaration of cbreak
/* implemented */	declaration of can_change_color
/* generated */	declaration of box
/* generated */	declaration of border
/* generated */	declaration of bkgdset
/* generated */	declaration of bkgd
/* implemented */	declaration of beep
/* implemented */	declaration of baudrate
/* generated */	declaration of attr_set
/* generated */	declaration of attr_on
/* generated */	declaration of attr_off
/* generated */	declaration of attr_get
/* generated */	declaration of attrset
/* generated */	declaration of attron
/* generated */	declaration of attroff
/* generated */	declaration of addstr
/* generated */	declaration of addnstr
/* generated */	declaration of addchstr
/* generated */	declaration of addchnstr
/* generated */	declaration of addch
"/*
 * Function prototypes.  This is the complete X/Open Curses list of required
 * functions.  Those marked `generated' will have sources generated from the
 * macro definitions later in this file, in order to satisfy XPG4.2
 * requirements.
 */"	declaration of addch
"/*
 * Curses uses a helper function.  Define our type for this to simplify
 * extending it for the sp-funcs feature.
 */"	declaration of NCURSES_OUTC
/* nothing */	#endif
/* nothing */	#endif
/* nothing */	#define GCC_UNUSED
/* nothing */	#endif
/* nothing */	#define GCC_NORETURN
/*nothing*/	#endif
/*nothing*/	#define GCC_SCANFLIKE(fmt,var)
/*nothing*/	#endif
/*nothing*/	#define GCC_PRINTFLIKE(fmt,var)
"/*
 * We cannot define these in ncurses_cfg.h, since they require parameters to be
 * passed (that is non-portable).  If you happen to be using gcc with warnings
 * enabled, define
 *	GCC_PRINTF
 *	GCC_SCANF
 * to improve checking of calls to printw(), etc.
 */"	#ifndef GCC_PRINTFLIKE
/* nothing */	#endif
"/*
 * GCC (and some other compilers) define '__attribute__'; we're using this
 * macro to alert the compiler to flag inconsistencies in printf/scanf-like
 * function calls.  Just in case '__attribute__' isn't defined, make a dummy.
 * Old versions of G++ do not accept it anyway, at least not consistently with
 * GCC.
 */"	#if !(defined(__GNUC__) || defined(__GNUG__) || defined(__attribute__))
/* NCURSES_EXT_FUNCS */	#endif
/* NCURSES_WGETCH_EVENTS */	#endif
/* experimental */	#endif
/* Not supported yet... */	#if 0
"/*
 * Bits to set in _nc_event.data.flags
 */"	#if 0
/* !defined(__BEOS__) */	#endif
/* Fix _nc_timed_wait() on BEOS... */	#endif
"/*
 * This is an extension to support events...
 */"	#if 1
/* NCURSES_OPAQUE */	#endif
/* current color-pair for non-space character */	#endif
/* current color-pair for non-space character */	definition of _color
/* current background char/attribute pair */	#if 1
/* current background char/attribute pair */	definition of _bkgrnd
/* real begy is _begy + _yoffset */	#if NCURSES_WIDECHAR
/* real begy is _begy + _yoffset */	definition of _yoffset
/* these are used only if this is a pad */	definition of pdat
/* pointer to parent if a sub-window */	definition of _parent
/* y coordinate of this window in parent */	definition of _pary
/* x coordinate of this window in parent */	definition of _parx
/* these are used only if this is a sub-window */	definition of _parx
/* bottom line of scrolling region */	definition of _regbottom
/* top line of scrolling region */	definition of _regtop
/* global screen state */	definition of _regtop
/* the actual line data */	definition of _line
/* 0 = nodelay, <0 = blocking, >0 = delay */	definition of _delay
/* process function keys into KEY_ symbols? */	definition of _use_keypad
/* window in sync mode? */	definition of _sync
/* window in immed mode? (not yet used) */	definition of _immed
/* OK to use insert/delete char? */	definition of _idcok
/* OK to use insert/delete line? */	definition of _idlok
/* OK to scroll this window? */	definition of _scroll
/* OK to not reset cursor on exit? */	definition of _leaveok
/* consider all data in the window invalid? */	definition of _clear
/* no time out on function-key entry? */	definition of _notimeout
/* option values set by user */	definition of _notimeout
/* current background char/attribute pair */	definition of _bkgd
/* current attribute for non-space character */	definition of _attrs
/* attribute tracking */	definition of _attrs
/* window state flags */	definition of _flags
/* screen coords of upper-left-hand corner */	definition of _begx
/* maximums of x and y, NOT window size */	definition of _maxx
/* window location and size */	definition of _maxy
/* current cursor position */	definition of _curx
/* NCURSES_WIDECHAR */	#endif
/* color pair, must be more than 16-bits */	#endif
/* color pair, must be more than 16-bits */	definition of ext_color
"/*
 * cchar_t stores an array of CCHARW_MAX wide characters.  The first is
 * normally a spacing character.  The others are non-spacing.  If those
 * (spacing and nonspacing) do not fill the array, a null L'\0' follows.
 * Otherwise, a null is assumed to follow when extracting via getcchar().
 */"	#if 1
"/*
 * cchar_t stores an array of CCHARW_MAX wide characters.  The first is
 * normally a spacing character.  The others are non-spacing.  If those
 * (spacing and nonspacing) do not fill the array, a null L'\0' follows.
 * Otherwise, a null is assumed to follow when extracting via getcchar().
 */"	#define CCHARW_MAX 5
/* ...to get mbstate_t, etc. */	#endif
/* libutf8.h defines it w/o undefining first */	#ifdef mblen
/* ...must be at least as wide as chtype */	#if NCURSES_WIDECHAR
/* ...must be at least as wide as chtype */	declaration of attr_t
"/*
 * this value is used in the oldindex field to mark lines created by insertions
 * and scrolls.
 */"	#define _NEWINDEX -1
"/*
 * this value is used in the firstchar and lastchar fields to mark
 * unchanged lines
 */"	#define _NOCHANGE -1
/* cursor was just wrappped */	#define _WRAPPED 0x40
/* has cursor moved since last refresh? */	#define _HASMOVED 0x20
/* is this window a pad? */	#define _ISPAD 0x10
/* bottom edge is at screen bottom? */	#define _SCROLLWIN 0x08
/* is the window full-screen? */	#define _FULLWIN 0x04
/* is the window flush right? */	#define _ENDLINE 0x02
/* is this a sub-window? */	#define _SUBWIN 0x01
/* values for the _flags member */	#define _SUBWIN 0x01
"/*
 * Line drawing ACS names are of the form ACS_trbl, where t is the top, r
 * is the right, b is the bottom, and l is the left.  t, r, b, and l might
 * be B (blank), S (single), D (double), or T (thick).  The subset defined
 * here only uses B and S.
 */"	#define ACS_BSSB ACS_ULCORNER
/* UK pound sign */	#define ACS_STERLING NCURSES_ACS('}')
/* not equal */	#define ACS_NEQUAL NCURSES_ACS('|')
/* Pi */	#define ACS_PI NCURSES_ACS('{')
/* greater/equal */	#define ACS_GEQUAL NCURSES_ACS('z')
/* less/equal */	#define ACS_LEQUAL NCURSES_ACS('y')
/* scan line 7 */	#define ACS_S7 NCURSES_ACS('r')
/* scan line 3 */	#define ACS_S3 NCURSES_ACS('p')
"/*
 * These aren't documented, but a lot of System Vs have them anyway
 * (you can spot pprryyzz{{||}} in a lot of AT&T terminfo strings).
 * The ACS_names may not match AT&T's, our source didn't know them.
 */"	#define ACS_S3 NCURSES_ACS('p')
/* solid square block */	#define ACS_BLOCK NCURSES_ACS('0')
/* lantern symbol */	#define ACS_LANTERN NCURSES_ACS('i')
/* board of squares */	#define ACS_BOARD NCURSES_ACS('h')
/* arrow pointing up */	#define ACS_UARROW NCURSES_ACS('-')
/* arrow pointing down */	#define ACS_DARROW NCURSES_ACS('.')
/* arrow pointing right */	#define ACS_RARROW NCURSES_ACS('+')
/* arrow pointing left */	#define ACS_LARROW NCURSES_ACS(',')
/* Teletype 5410v1 symbols begin here */	#define ACS_LARROW NCURSES_ACS(',')
/* bullet */	#define ACS_BULLET NCURSES_ACS('~')
/* plus/minus */	#define ACS_PLMINUS NCURSES_ACS('g')
/* degree symbol */	#define ACS_DEGREE NCURSES_ACS('f')
/* checker board (stipple) */	#define ACS_CKBOARD NCURSES_ACS('a')
/* diamond */	#define ACS_DIAMOND NCURSES_ACS('`')
/* scan line 9 */	#define ACS_S9 NCURSES_ACS('s')
/* scan line 1 */	#define ACS_S1 NCURSES_ACS('o')
/* large plus or crossover */	#define ACS_PLUS NCURSES_ACS('n')
/* vertical line */	#define ACS_VLINE NCURSES_ACS('x')
/* horizontal line */	#define ACS_HLINE NCURSES_ACS('q')
/* tee pointing down */	#define ACS_TTEE NCURSES_ACS('w')
/* tee pointing up */	#define ACS_BTEE NCURSES_ACS('v')
/* tee pointing left */	#define ACS_RTEE NCURSES_ACS('u')
/* tee pointing right */	#define ACS_LTEE NCURSES_ACS('t')
/* lower right corner */	#define ACS_LRCORNER NCURSES_ACS('j')
/* upper right corner */	#define ACS_URCORNER NCURSES_ACS('k')
/* lower left corner */	#define ACS_LLCORNER NCURSES_ACS('m')
/* upper left corner */	#define ACS_ULCORNER NCURSES_ACS('l')
/* VT100 symbols begin here */	#define ACS_ULCORNER NCURSES_ACS('l')
/* line graphics */	#if 0 || NCURSES_REENTRANT
/* colors */	#define COLOR_BLACK 0
/* ncurses extension */	#endif
/* ncurses extension */	#define WA_ITALIC A_ITALIC
"/*
 * X/Open attributes.  In the ncurses implementation, they are identical to the
 * A_ attributes.
 */"	#if 1
"/*
 * X/Open attributes.  In the ncurses implementation, they are identical to the
 * A_ attributes.
 */"	#define WA_ATTRIBUTES A_ATTRIBUTES
/* !__cplusplus, etc. */	#endif
/* there is no predefined bool - use our own */	#endif
/* use whatever the C compiler decides bool really is */	#else
/* c89, c99, etc. */	#else
/* use the C++ compiler's bool type */	#else
/* use the C++ compiler's bool type */	#define NCURSES_BOOL bool
/* __cplusplus, etc. */	#if defined(__cplusplus)
"/* X/Open and SVr4 specify that curses implements 'bool'.  However, C++ may also
 * implement it.  If so, we must use the C++ compiler's type to avoid conflict
 * with other interfaces.
 *
 * A further complication is that <stdbool.h> may declare 'bool' to be a
 * different type, such as an enum which is not necessarily compatible with
 * C++.  If we have <stdbool.h>, make 'bool' a macro, so users may #undef it.
 * Otherwise, let it remain a typedef to avoid conflicts with other #define's.
 * In either case, make a typedef for NCURSES_BOOL which can be used if needed
 * from either C or C++.
 */"	#if defined(__cplusplus)
"/* X/Open and SVr4 specify that curses implements 'bool'.  However, C++ may also
 * implement it.  If so, we must use the C++ compiler's type to avoid conflict
 * with other interfaces.
 *
 * A further complication is that <stdbool.h> may declare 'bool' to be a
 * different type, such as an enum which is not necessarily compatible with
 * C++.  If we have <stdbool.h>, make 'bool' a macro, so users may #undef it.
 * Otherwise, let it remain a typedef to avoid conflicts with other #define's.
 * In either case, make a typedef for NCURSES_BOOL which can be used if needed
 * from either C or C++.
 */"	#undef TRUE
/* we want wchar_t */	#endif
/* we need va_list */	#if NCURSES_WIDECHAR
/* NCURSES_WIDECHAR */	#endif
"/*
 * With XPG4, you must define _XOPEN_SOURCE_EXTENDED, it is redundant (or
 * conflicting) when _XOPEN_SOURCE is 500 or greater.  If NCURSES_WIDECHAR is
 * not already defined, e.g., if the platform relies upon nonstandard feature
 * test macros, define it at this point if the standard feature test macros
 * indicate that it should be defined.
 */"	#ifndef NCURSES_WIDECHAR
"/*
 * NCURSES_CH_T is used in building the library, but not used otherwise in
 * this header file, since that would make the normal/wide-character versions
 * of the header incompatible.
 */"	#if 1 && defined(_LP64)
"/*
 * NCURSES_CH_T is used in building the library, but not used otherwise in
 * this header file, since that would make the normal/wide-character versions
 * of the header incompatible.
 */"	#undef NCURSES_CH_T
"/*
 * Control whether ncurses uses wcwidth() for checking width of line-drawing
 * characters.
 */"	#undef NCURSES_WCWIDTH_GRAPHICS
"/*
 * Control type used for tparm's arguments.  While X/Open equates long and
 * char* values, this is not always workable for 64-bit platforms.
 */"	#undef NCURSES_TPARM_ARG
"/*
 * Control whether tparm() supports varargs or fixed-parameter list.
 */"	#undef NCURSES_TPARM_VARARGS
"/*
 * The internal type used for window dimensions.
 */"	#undef NCURSES_SIZE_T
"/*
 * Control whether bindings for interop support are added.
 */"	#undef NCURSES_INTEROP_FUNCS
"/*
 * The reentrant code relies on the opaque setting, but adds features.
 */"	#ifndef NCURSES_REENTRANT
"/*
 * Definition used to optionally suppress wattr* macros to help with the
 * transition from ncurses5 to ncurses6 by allowing the header files to
 * be shared across development packages for ncursesw in both ABIs.
 */"	#ifndef NCURSES_WATTR_MACROS
"/*
 * Definitions used to make WINDOW and similar structs opaque.
 */"	#ifndef NCURSES_INTERNALS
"/*
 * The standard type used for color values, and for color-pairs.  The latter
 * allows the curses library to enumerate the combinations of foreground and
 * background colors used by an application, and is normally the product of the
 * total foreground and background colors.
 *
 * X/Open uses ""short"" for both of these types, ultimately because they are
 * numbers from the SVr4 terminal database, which uses 16-bit signed values.
 */"	#undef NCURSES_COLOR_T
"/*
 * Expands to 'const' if ncurses is configured using --enable-const.  Note that
 * doing so makes it incompatible with other implementations of X/Open Curses.
 */"	#undef NCURSES_CONST
"/*
 * NCURSES_ATTR_T is used to quiet compiler warnings when building ncurses
 * configured using --disable-macros.
 */"	#ifndef NCURSES_ATTR_T
"/*
 * User-definable tweak to disable the include of <stdbool.h>.
 */"	#ifndef NCURSES_ENABLE_STDBOOL_H
"/*
 * Definitions to facilitate DLL's.
 */"	#if 1
"/*
 * Identify the mouse encoding version.
 */"	#define NCURSES_MOUSE_VERSION 2
/* This is defined in more than one ncurses header, for identification */	#undef NCURSES_VERSION
/* These are defined only in curses.h, and are used for conditional compiles */	#define NCURSES_VERSION_MAJOR 6
/* $Id: curses.h.in,v 1.264 2019/03/23 23:06:46 tom Exp $ */	#ifndef __NCURSES_H
/* NCURSES_UNCTRL_H_incl */	#endif
/* $Id: unctrl.h.in,v 1.11 2009/04/18 21:00:52 tom Exp $ */	#ifndef NCURSES_UNCTRL_H_incl
/* NCURSES_TERM_H_incl */	#endif
/* NCURSES_SP_FUNCS */	#endif
/* termcap database emulation (XPG4 uses const only for 2nd param of tgetent) */	declaration of tputs_sp
/* termcap database emulation (XPG4 uses const only for 2nd param of tgetent) */	declaration of tgetnum_sp
/* termcap database emulation (XPG4 uses const only for 2nd param of tgetent) */	declaration of tgetflag_sp
/* termcap database emulation (XPG4 uses const only for 2nd param of tgetent) */	declaration of tgetent_sp
/* termcap database emulation (XPG4 uses const only for 2nd param of tgetent) */	declaration of tgoto_sp
/* termcap database emulation (XPG4 uses const only for 2nd param of tgetent) */	declaration of tgetstr_sp
/* special */	#endif
/* special */	declaration of tparm_sp
/* NCURSES_TPARM_VARARGS */	#if 1
"/*
 * Include curses.h before term.h to enable these extensions.
 */"	#if defined(NCURSES_SP_FUNCS) && (NCURSES_SP_FUNCS != 0)
/* NCURSES_TERMCAP_H_incl */	#endif
/* termcap database emulation (XPG4 uses const only for 2nd param of tgetent) */	#if !defined(NCURSES_TERMCAP_H_incl)
/* __NCURSES_H */	#endif
/* special */	#endif
/* special */	#endif
/* special */	#else
/* NCURSES_TPARM_VARARGS */	#if 1
/* terminfo entry points, also declared in curses.h */	#if !defined(__NCURSES_H)
/* miscellaneous entry points */	declaration of setupterm
/* miscellaneous entry points */	declaration of restartterm
/* Normal entry points */	declaration of del_curterm
/* Normal entry points */	declaration of set_curterm
"/*
 * These entrypoints are used by tack.
 */"	declaration of _nc_read_entry
"/*
 * These entrypoints are used by tack.
 */"	declaration of _nc_fallback
/* NCURSES_INTERNALS */	#endif
"/*
 * These entrypoints are used only by the ncurses utilities such as tic.
 */"	#ifdef NCURSES_INTERNALS
/* NCURSES_INTERNALS */	#endif
/* extended terminal type description */	#else
/* NCURSES_XNAMES */	#endif
/* count extensions to Strings */	#endif
/* array of string offsets */	#if NCURSES_XNAMES
"/*
 * The only reason these structures are visible is for read-only use.
 * Programs which modify the data are not, never were, portable across
 * curses implementations.
 */"	#ifdef NCURSES_INTERNALS
/* NCURSES_XNAMES */	#endif
/* count extensions to Strings */	definition of ext_Strings
/* count extensions to Numbers */	definition of ext_Numbers
/* count extensions to Booleans */	definition of ext_Booleans
/* count total Strings */	definition of num_Strings
/* count total Numbers */	definition of num_Numbers
/* count total Booleans */	definition of num_Booleans
/* corresponding names */	definition of ext_Names
/* pointer to extended string table */	definition of ext_str_table
/* array of string offsets */	definition of Strings
/* array of integer values */	definition of Numbers
/* array of boolean values */	definition of Booleans
/* pointer to string table */	definition of str_table
/* str_table offset of term names */	definition of term_names
/* in-core form of terminfo data */	definition of termtype
/* used by code for comparing entries */	#define acs_chars_index 146
"/*
 * Predefined terminfo array sizes
 */"	#define BOOLCOUNT 44
/* __INTERNAL_CAPS_VISIBLE */	#endif
/* HPUX-11 uses this name rather than the standard one */	#ifndef micro_char_size
/* older synonyms for some capabilities */	#define beehive_glitch no_esc_ctlc
/* The cast works because TERMTYPE is the first data in TERMINAL */	#define CUR ((TERMTYPE *)(cur_term))->
/* HAVE_TERMIOS_H */	#endif
/* HAVE_TERMIO_H */	#endif
/* MINGW32 */	#endif
/* !HAVE_TERMIO_H */	#else
/* #if HAVE_TERMIO_H */	#if 1
/* !HAVE_TERMIOS_H */	#else
/* #if HAVE_TERMIOS_H && HAVE_TCGETATTR */	#if 1 && 1
"/* We will use these symbols to hide differences between
 * termios/termio/sgttyb interfaces.
 */"	#undef TTY
"/* Make this file self-contained by providing defaults for the HAVE_TERMIO[S]_H
 * definition (based on the system for which this was configured).
 */"	#undef NCURSES_CONST
"/*
**	term.h -- Definition of struct term
*/"	#ifndef NCURSES_TERM_H_incl
/// Sets what colors are supported.	definition of (unnamed enum)
/// This outputter flushes its buffer after every write operation.	declaration of stdoutput
/// Balance a beginBuffering() call.	definition of endBuffering
/// endBuffering() call.	definition of beginBuffering
/// Output any buffered data to the given \p fd.	declaration of flush_to
"/// \return the ""output"" contents."	definition of contents
/// Write a narrow character.	definition of push_back
/// Write a narrow NUL-terminated string.	definition of writestr
/// Write a narrow string of the given length.	definition of writestr
/// Write the given terminfo string to the receiver, like tputs().	declaration of term_puts
/// Write a wide character string to the receiver.	definition of writestr
/// Write a NUL-terminated wide character string to the receiver.	declaration of writestr
/// Write a wide character to the receiver.	declaration of writech
/// Set the foreground and background color.	declaration of set_color
/// Unconditionally write the color string to the output.	declaration of write_color
/// Construct an outputter which outputs to its string.	definition of outputter_t
/// Construct an outputter which outputs to its string.	declaration of outputter_t
/// Flush output, if we have a set fd and our buffering count is 0.	definition of maybe_flush
/// Construct an outputter which outputs to a given fd.	definition of outputter_t
/// fd to output to.	definition of fd_
/// Count of how many outstanding beginBuffering() calls there are.	definition of bufferCount_
/// Storage for buffered contents.	definition of contents_
// classified as one of the following types.	#ifndef FISH_OUTPUT_H
// Output the collected string.	ExprStmt
/* not is_fg */	ExprStmt
//  $ echo (set_color foo)bar	ExprStmt
/* is_fg */	if (...) ... 
// just give up...	if (...) ... 
// color, we'll get none(); if we have at least one we expect not-none.	declaration
// Remaining arguments are foreground color.	declaration
// and we don't error for missing colors.	return ...
// Parse options to obtain the requested operation and the modifiers.	declaration
// hack, quietly return failure.	if (...) ... 
// Variables used for parsing the argument list.	declaration
// Helps Terminal.app/iTerm	#ifdef __APPLE__
// By the time this is called we should have initialized the curses subsystem.	ExprStmt
/// set_color builtin.	definition of builtin_set_color
// conveniently, 'normal' is always the last color so we don't need to reset here	ExprStmt
// eval.	return ...
// points to the end of argv. Otherwise we want to skip the file name to get to the args if any.	declaration
// Don't implicitly read from the terminal.	return ...
// Either a bare `source` which means to implicitly read from stdin or an explicit `-`.	if (...) ... 
// The fd that we read from, either from opened_fd or stdin.	declaration
// If we open a file, this ensures we close it.	declaration
/// context.	definition of builtin_source
/// at startup only.	declaration of mutable_fish_features
/// Perform a feature test on the global set of features.	definition of feature_test
/// Return the global set of features for fish. This is const to prevent accidental mutation.	declaration of fish_features
/// Values for the flags.	definition of values
/// Return the metadata for a particular name, or nullptr if not found.	declaration of metadata_for
/// The metadata, indexed by flag.	declaration of metadata
/// User-presentable description of the feature flag.	definition of description
/// Comma-separated list of feature groups.	definition of groups
/// User-presentable short name of the feature flag.	definition of name
/// The flag itself.	definition of flag
/// Metadata about feature flags.	definition of metadata_t
/// Unknown features are silently ignored.	declaration of set_from_string
/// Set a flag.	definition of set
/// Return whether a flag is set.	definition of test
/// The number of flags.	flag_count
/// Whether string replace -r double-unescapes the replacement.	string_replace_backslash
/// Whether ? is supported as a glob.	qmark_noglob
/// Whether ^ is supported for stderr redirection.	stderr_nocaret
/// The list of flags.	definition of flag_t
// Flags to enable upcoming features	#ifndef FISH_FUTURE_FEATURE_FLAGS_H
// HACK: Go via the deprecated variable to get the command.	declaration
"// streams.out.append_format(L""%d\n"", parser.get_lineno(opts.level));"	ExprStmt
// Flag form was used.	if (...) ... 
// Every argument that we haven't consumed already is an argument for a subcommand.	declaration
// Note that this can be simplified after we eliminate allowing subcommands as flags.	if (...) ... 
/// The status builtin. Gives various status information on fish.	definition of builtin_status
/// Print the features and their values.	definition of print_features
/// Remember the status subcommand and disallow selecting more than one status subcommand.	definition of set_status_cmd
/// scripts.	definition of short_options
/// Values that may be returned from the test-feature option to status.	definition of (unnamed enum)
// Must be sorted by string, not enum or random.	definition of status_enum_map
/* PCRE2_H_IDEMPOTENT_GUARD */	#endif
"/* extern ""C"" */"	#endif
/* PCRE2_CODE_UNIT_WIDTH is defined */	#endif
/* PCRE2_CODE_UNIT_WIDTH is defined */	#else
"/* PCRE2_CODE_UNIT_WIDTH must be defined. If it is 8, 16, or 32, redefine
PCRE2_SUFFIX to use it. If it is 0, undefine the other macros and make
PCRE2_SUFFIX a no-op. Otherwise, generate an error. */"	#undef PCRE2_SUFFIX
/* Undefine the list macros; they are no longer needed. */	#undef PCRE2_TYPES_LIST
"/* Now generate all three sets of width-specific structures and function
prototypes. */"	#define PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS PCRE2_TYPES_LIST PCRE2_STRUCTURE_LIST PCRE2_GENERAL_INFO_FUNCTIONS PCRE2_GENERAL_CONTEXT_FUNCTIONS PCRE2_COMPILE_CONTEXT_FUNCTIONS PCRE2_CONVERT_CONTEXT_FUNCTIONS PCRE2_CONVERT_FUNCTIONS PCRE2_MATCH_CONTEXT_FUNCTIONS PCRE2_COMPILE_FUNCTIONS PCRE2_PATTERN_INFO_FUNCTIONS PCRE2_MATCH_FUNCTIONS PCRE2_SUBSTRING_FUNCTIONS PCRE2_SERIALIZE_FUNCTIONS PCRE2_SUBSTITUTE_FUNCTION PCRE2_JIT_FUNCTIONS PCRE2_OTHER_FUNCTIONS
/* Keep this obsolete function for backwards compatibility: it is now a noop. */	#define pcre2_set_recursion_memory_management PCRE2_SUFFIX(pcre2_set_recursion_memory_management_)
/* Keep this old function name for backwards compatibility */	#define pcre2_set_recursion_limit PCRE2_SUFFIX(pcre2_set_recursion_limit_)
/* Functions: the complete list in alphabetical order */	#define pcre2_callout_enumerate PCRE2_SUFFIX(pcre2_callout_enumerate_)
/* Data blocks */	#define pcre2_callout_block PCRE2_SUFFIX(pcre2_callout_block_)
/* Data types */	#define PCRE2_UCHAR PCRE2_SUFFIX(PCRE2_UCHAR)
"/* Define macros that generate width-specific names from generic versions. The
three-level macro scheme is necessary to get the macros expanded when we want
them to be. First we get the width from PCRE2_LOCAL_WIDTH, which is used for
generating three versions of everything below. After that, PCRE2_SUFFIX will be
re-defined to use PCRE2_CODE_UNIT_WIDTH, for use when macros such as
pcre2_compile are called by application code. */"	#define PCRE2_JOIN(a,b) a ## b
/* Other miscellaneous functions. */	#define PCRE2_OTHER_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_get_error_message(int, PCRE2_UCHAR *, PCRE2_SIZE); PCRE2_EXP_DECL const uint8_t PCRE2_CALL_CONVENTION *pcre2_maketables(pcre2_general_context *);
/* Functions for JIT processing */	#define PCRE2_JIT_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_jit_compile(pcre2_code *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_jit_match(const pcre2_code *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_SIZE, uint32_t, pcre2_match_data *, pcre2_match_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_jit_free_unused_memory(pcre2_general_context *); PCRE2_EXP_DECL pcre2_jit_stack PCRE2_CALL_CONVENTION *pcre2_jit_stack_create(PCRE2_SIZE, PCRE2_SIZE, pcre2_general_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_jit_stack_assign(pcre2_match_context *, pcre2_jit_callback, void *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_jit_stack_free(pcre2_jit_stack *);
/* Functions for converting pattern source strings. */	#define PCRE2_CONVERT_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_pattern_convert(PCRE2_SPTR, PCRE2_SIZE, uint32_t, PCRE2_UCHAR **, PCRE2_SIZE *, pcre2_convert_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_converted_pattern_free(PCRE2_UCHAR *);
/* Convenience function for match + substitute. */	#define PCRE2_SUBSTITUTE_FUNCTION PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substitute(const pcre2_code *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_SIZE, uint32_t, pcre2_match_data *, pcre2_match_context *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_UCHAR *, PCRE2_SIZE *);
/* Functions for serializing / deserializing compiled patterns. */	#define PCRE2_SERIALIZE_FUNCTIONS PCRE2_EXP_DECL int32_t PCRE2_CALL_CONVENTION pcre2_serialize_encode(const pcre2_code **, int32_t, uint8_t **, PCRE2_SIZE *, pcre2_general_context *); PCRE2_EXP_DECL int32_t PCRE2_CALL_CONVENTION pcre2_serialize_decode(pcre2_code **, int32_t, const uint8_t *, pcre2_general_context *); PCRE2_EXP_DECL int32_t PCRE2_CALL_CONVENTION pcre2_serialize_get_number_of_codes(const uint8_t *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_serialize_free(uint8_t *);
/* Convenience functions for handling matched substrings. */	#define PCRE2_SUBSTRING_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_copy_byname(pcre2_match_data *, PCRE2_SPTR, PCRE2_UCHAR *, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_copy_bynumber(pcre2_match_data *, uint32_t, PCRE2_UCHAR *, PCRE2_SIZE *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_substring_free(PCRE2_UCHAR *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_get_byname(pcre2_match_data *, PCRE2_SPTR, PCRE2_UCHAR **, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_get_bynumber(pcre2_match_data *, uint32_t, PCRE2_UCHAR **, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_length_byname(pcre2_match_data *, PCRE2_SPTR, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_length_bynumber(pcre2_match_data *, uint32_t, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_nametable_scan(const pcre2_code *, PCRE2_SPTR, PCRE2_SPTR *, PCRE2_SPTR *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_number_from_name(const pcre2_code *, PCRE2_SPTR); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_substring_list_free(PCRE2_SPTR *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_list_get(pcre2_match_data *, PCRE2_UCHAR ***, PCRE2_SIZE **);
/* Functions for running a match and inspecting the result. */	#define PCRE2_MATCH_FUNCTIONS PCRE2_EXP_DECL pcre2_match_data PCRE2_CALL_CONVENTION *pcre2_match_data_create(uint32_t, pcre2_general_context *); PCRE2_EXP_DECL pcre2_match_data PCRE2_CALL_CONVENTION *pcre2_match_data_create_from_pattern(const pcre2_code *, pcre2_general_context *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_dfa_match(const pcre2_code *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_SIZE, uint32_t, pcre2_match_data *, pcre2_match_context *, int *, PCRE2_SIZE); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_match(const pcre2_code *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_SIZE, uint32_t, pcre2_match_data *, pcre2_match_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_match_data_free(pcre2_match_data *); PCRE2_EXP_DECL PCRE2_SPTR PCRE2_CALL_CONVENTION pcre2_get_mark(pcre2_match_data *); PCRE2_EXP_DECL uint32_t PCRE2_CALL_CONVENTION pcre2_get_ovector_count(pcre2_match_data *); PCRE2_EXP_DECL PCRE2_SIZE PCRE2_CALL_CONVENTION *pcre2_get_ovector_pointer(pcre2_match_data *); PCRE2_EXP_DECL PCRE2_SIZE PCRE2_CALL_CONVENTION pcre2_get_startchar(pcre2_match_data *);
/* Functions that give information about a compiled pattern. */	#define PCRE2_PATTERN_INFO_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_pattern_info(const pcre2_code *, uint32_t, void *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_callout_enumerate(const pcre2_code *, int (*)(pcre2_callout_enumerate_block *, void *), void *);
/* Functions concerned with compiling a pattern to PCRE internal code. */	#define PCRE2_COMPILE_FUNCTIONS PCRE2_EXP_DECL pcre2_code PCRE2_CALL_CONVENTION *pcre2_compile(PCRE2_SPTR, PCRE2_SIZE, uint32_t, int *, PCRE2_SIZE *, pcre2_compile_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_code_free(pcre2_code *); PCRE2_EXP_DECL pcre2_code PCRE2_CALL_CONVENTION *pcre2_code_copy(const pcre2_code *); PCRE2_EXP_DECL pcre2_code PCRE2_CALL_CONVENTION *pcre2_code_copy_with_tables(const pcre2_code *);
/* Functions for manipulating contexts. */	#define PCRE2_GENERAL_CONTEXT_FUNCTIONS PCRE2_EXP_DECL pcre2_general_context PCRE2_CALL_CONVENTION *pcre2_general_context_copy(pcre2_general_context *); PCRE2_EXP_DECL pcre2_general_context PCRE2_CALL_CONVENTION *pcre2_general_context_create(void *(*)(PCRE2_SIZE, void *), void (*)(void *, void *), void *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_general_context_free(pcre2_general_context *);
"/* List the generic forms of all other functions in macros, which will be
expanded for each width below. Start with functions that give general
information. */"	#define PCRE2_GENERAL_INFO_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_config(uint32_t, void *);
/* Set after a backtrack */	#define PCRE2_CALLOUT_BACKTRACK 0x00000002u
/* Set for each bumpalong */	#define PCRE2_CALLOUT_STARTMATCH 0x00000001u
/* Flags for the callout_flags field. These are cleared after a callout. */	#define PCRE2_CALLOUT_STARTMATCH 0x00000001u
"/* Generic types for opaque structures and JIT callback functions. These
declarations are defined in a macro that is expanded for each width later. */"	#define PCRE2_TYPES_LIST struct pcre2_real_general_context; typedef struct pcre2_real_general_context pcre2_general_context; struct pcre2_real_compile_context; typedef struct pcre2_real_compile_context pcre2_compile_context; struct pcre2_real_match_context; typedef struct pcre2_real_match_context pcre2_match_context; struct pcre2_real_convert_context; typedef struct pcre2_real_convert_context pcre2_convert_context; struct pcre2_real_code; typedef struct pcre2_real_code pcre2_code; struct pcre2_real_match_data; typedef struct pcre2_real_match_data pcre2_match_data; struct pcre2_real_jit_stack; typedef struct pcre2_real_jit_stack pcre2_jit_stack; typedef pcre2_jit_stack *(*pcre2_jit_callback)(void *);
"/* The PCRE2_SIZE type is used for all string lengths and offsets in PCRE2,
including pattern offsets for errors and subject offsets after a match. We
define special values to indicate zero-terminated strings and unset offsets in
the offset vector (ovector). */"	#define PCRE2_SIZE size_t
/* Types for code units in patterns and subject strings. */	declaration of PCRE2_UCHAR8
/* Obsolete */	#define PCRE2_CONFIG_STACKRECURSE 8
/* Obsolete synonym */	#define PCRE2_CONFIG_RECURSIONLIMIT 7
/* Request types for pcre2_config(). */	#define PCRE2_CONFIG_BSR 0
/* Obsolete synonym */	#define PCRE2_INFO_RECURSIONLIMIT 21
/* Request types for pcre2_pattern_info() */	#define PCRE2_INFO_ALLOPTIONS 0
/* Obsolete synonym */	#define PCRE2_ERROR_RECURSIONLIMIT (-53)
/* Never used by PCRE2 itself */	#define PCRE2_ERROR_CALLOUT (-37)
/* Name was changed */	#define PCRE2_ERROR_MIXEDTABLES (-30)
"/* Miscellaneous error codes for pcre2[_dfa]_match(), substring extraction
functions, context functions, and serializing functions. They are in numerical
order. Originally they were in alphabetical order too, but now that PCRE2 is
released, the numbers must not be changed. */"	#define PCRE2_ERROR_BADDATA (-29)
/* Error codes for UTF-32 validity checks */	#define PCRE2_ERROR_UTF32_ERR1 (-27)
/* Error codes for UTF-16 validity checks */	#define PCRE2_ERROR_UTF16_ERR1 (-24)
/* Error codes for UTF-8 validity checks */	#define PCRE2_ERROR_UTF8_ERR1 (-3)
"/* ""Expected"" matching error codes: no match and partial match. */"	#define PCRE2_ERROR_NOMATCH (-1)
/* Error 159 is obsolete and should now never occur */	#define PCRE2_ERROR_VERB_ARGUMENT_NOT_ALLOWED 159
"/* Error codes for pcre2_compile(). Some of these are also used by
pcre2_pattern_convert(). */"	#define PCRE2_ERROR_END_BACKSLASH 101
"/* Newline and \R settings, for use in compile contexts. The newline values
must be kept in step with values set in config.h and both sets must all be
greater than zero. */"	#define PCRE2_NEWLINE_CR 1
/* Options for pcre2_pattern_convert(). */	#define PCRE2_CONVERT_UTF 0x00000001u
"/* A further option for pcre2_match(), not allowed for pcre2_dfa_match(),
ignored for pcre2_jit_match(). */"	#define PCRE2_NO_JIT 0x00002000u
"/* These are additional options for pcre2_substitute(), which passes any others
through to pcre2_match(). */"	#define PCRE2_SUBSTITUTE_GLOBAL 0x00000100u
/* These are additional options for pcre2_dfa_match(). */	#define PCRE2_DFA_RESTART 0x00000040u
/* ) adjacent to each other. */	#define PCRE2_NOTEMPTY_ATSTART 0x00000008u
/* ) These two must be kept */	#define PCRE2_NOTEMPTY 0x00000004u
"/* These are for pcre2_match(), pcre2_dfa_match(), and pcre2_jit_match(). Note
that PCRE2_ANCHORED and PCRE2_NO_UTF_CHECK can also be passed to these
functions (though pcre2_jit_match() ignores the latter since it bypasses all
sanity checks). */"	#define PCRE2_NOTBOL 0x00000001u
/* For full matching */	#define PCRE2_JIT_COMPLETE 0x00000001u
/* These are for pcre2_jit_compile(). */	#define PCRE2_JIT_COMPLETE 0x00000001u
/* C */	#define PCRE2_EXTRA_MATCH_LINE 0x00000008u
/* C */	#define PCRE2_EXTRA_MATCH_WORD 0x00000004u
/* C */	#define PCRE2_EXTRA_BAD_ESCAPE_IS_LITERAL 0x00000002u
/* C */	#define PCRE2_EXTRA_ALLOW_SURROGATE_ESCAPES 0x00000001u
/* An additional compile options word is available in the compile context. */	#define PCRE2_EXTRA_ALLOW_SURROGATE_ESCAPES 0x00000001u
/* C       */	#define PCRE2_LITERAL 0x02000000u
/* C       */	#define PCRE2_EXTENDED_MORE 0x01000000u
/*   J M D */	#define PCRE2_USE_OFFSET_LIMIT 0x00800000u
/* C       */	#define PCRE2_ALT_VERBNAMES 0x00400000u
/*   J M D */	#define PCRE2_ALT_CIRCUMFLEX 0x00200000u
/* C       */	#define PCRE2_NEVER_BACKSLASH_C 0x00100000u
/* C J M D */	#define PCRE2_UTF 0x00080000u
/* C       */	#define PCRE2_UNGREEDY 0x00040000u
/* C J M D */	#define PCRE2_UCP 0x00020000u
/*   J M D */	#define PCRE2_NO_START_OPTIMIZE 0x00010000u
/* C       */	#define PCRE2_NO_DOTSTAR_ANCHOR 0x00008000u
/* C       */	#define PCRE2_NO_AUTO_POSSESS 0x00004000u
/* C       */	#define PCRE2_NO_AUTO_CAPTURE 0x00002000u
/* C       */	#define PCRE2_NEVER_UTF 0x00001000u
/* C       */	#define PCRE2_NEVER_UCP 0x00000800u
/* C       */	#define PCRE2_MULTILINE 0x00000400u
/* C J M   */	#define PCRE2_MATCH_UNSET_BACKREF 0x00000200u
/*   J M D */	#define PCRE2_FIRSTLINE 0x00000100u
/* C       */	#define PCRE2_EXTENDED 0x00000080u
/* C       */	#define PCRE2_DUPNAMES 0x00000040u
/* C       */	#define PCRE2_DOTALL 0x00000020u
/*   J M D */	#define PCRE2_DOLLAR_ENDONLY 0x00000010u
/* C       */	#define PCRE2_CASELESS 0x00000008u
/* C       */	#define PCRE2_AUTO_CALLOUT 0x00000004u
/* C       */	#define PCRE2_ALT_BSUX 0x00000002u
/* C       */	#define PCRE2_ALLOW_EMPTY_CLASS 0x00000001u
"/* The following option bits can be passed only to pcre2_compile(). However,
they may affect compilation, JIT compilation, and/or interpretive execution.
The following tags indicate which:

C   alters what is compiled by pcre2_compile()
J   alters what is compiled by pcre2_jit_compile()
M   is inspected during pcre2_match() execution
D   is inspected during pcre2_dfa_match() execution
*/"	#define PCRE2_ALLOW_EMPTY_CLASS 0x00000001u
"/* The following option bits can be passed to pcre2_compile(), pcre2_match(),
or pcre2_dfa_match(). PCRE2_NO_UTF_CHECK affects only the function to which it
is passed. Put these bits at the most significant end of the options word so
others can be added next to them */"	#define PCRE2_ANCHORED 0x80000000u
/* Allow for C++ users compiling this directly. */	#ifdef __cplusplus
"/* When compiling with the MSVC compiler, it is sometimes necessary to include
a ""calling convention"" before exported function names. (This is secondhand
information; I know nothing about MSVC myself). For example, something like

  void __cdecl function(....)

might be needed. In order so make this easy, all the exported functions have
PCRE2_CALL_CONVENTION just before their names. It is rarely needed; if not
set, we ensure here that it has no effect. */"	#ifndef PCRE2_CALL_CONVENTION
"/* By default, we use the standard ""extern"" declarations. */"	#ifndef PCRE2_EXP_DECL
"/* When an application links to a PCRE DLL in Windows, the symbols that are
imported have to be identified as such. When building PCRE2, the appropriate
export setting is defined in pcre2_internal.h, which includes this file. So we
don't change existing definitions of PCRE2_EXP_DECL. */"	#if defined(_WIN32) && !defined(PCRE2_STATIC)
"/* For the benefit of systems without stdint.h, an alternative is to use
inttypes.h. The existence of these headers is checked by configure or CMake. */"	#define PCRE2_HAVE_STDINT_H 1
/* The current PCRE version information. */	#define PCRE2_MAJOR 10
"/* This is the public header file for the PCRE library, second API, to be
#included by applications that call PCRE2 functions.

           Copyright (c) 2016-2018 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/"	#ifndef PCRE2_H_IDEMPOTENT_GUARD
/// Test wildcard completion.	declaration of wildcard_complete
/// Check if the specified string contains wildcards.	declaration of wildcard_has
/// Check if the specified string contains wildcards.	declaration of wildcard_has
/// \return true if the wildcard matched	declaration of wildcard_match
/// Expansion was cancelled (e.g. control-C).	cancel
/// The wildcard did match.	match
/// The wildcard did not match.	no_match
///	definition of wildcard_expand_result_t
/// end of the the special characters so we can sanity check the enum range.	ANY_SENTINEL
/// Character representing any character string.	ANY_STRING_RECURSIVE
/// Character representing any character string not containing '/' (slash).	ANY_STRING
/// Character representing any character except '/' (slash).	ANY_CHAR
// Enumeration of all wildcard types.	definition of (unnamed enum)
// support tab-expansion of globbed parameters.	#ifndef FISH_WILDCARD_H
/// The string builtin, for manipulating strings.	definition of builtin_string
//!OCLINT(unused param)	definition of handler
/// Implementation of `string upper`.	definition of string_upper
/// Implementation of `string lower`.	definition of string_lower
// A helper function for lower and upper.	definition of string_transform
// character to trim on the right. The length is thus end - start.	declaration
// checked above	ExprStmt
// checked above	ExprStmt
// returns the to_repeat string, repeated until max char has been reached.	definition of wcsrepeat_until
// returns the to_repeat string, repeated count times.	definition of wcsrepeat
/* don't split */	definition of aiter
/* is_split0 */	return ...
/* is_split0 */	return ...
// We split something if we have more split values than args.	return ...
// field indexing starts from 1	if (...) ... 
// fields do not exist, unless `--allow-empty` is used.	if (...) ... 
// Remove the last element if it is empty.	if (...) ... 
// If we are from the right, split_about gave us reversed strings, in reversed order!	if (...) ... 
// match_data	if (...) ... 
// replacement was an invalid string	return ...
// pcre2_compile() failed	return ...
/// indicates an unrecoverable error.	definition of replace_matches
/// indicates an unrecoverable error.	definition of replace_matches
// Invalid escape.	return ...
/* all matches found now */	if (...) ... 
/* no matches */	if (...) ... 
/* pcre2 error */	if (...) ... 
// start at end of previous match	definition of offset
/* no match */	if (...) ... 
/* pcre2 error */	if (...) ... 
// See pcre2demo.c for an explanation of this logic.	declaration
// pcre2_compile() failed.	return ...
// an unrecoverable error.	if (...) ... 
// May have end < begin if \K is used.	ExprStmt
// The output vector wasn't big enough. Should not happen.	ExprStmt
// Return values: -1 = error, 0 = no match, 1 = match.	if (...) ... 
// Disable some sequences that can lead to security problems.	declaration
// against the entire argument.	declaration
// If the pattern is empty, this becomes one ANY_STRING that matches everything.	ExprStmt
/* is_join0 */	return ...
/* is_join0 */	return ...
// At this point we should not have optional args and be reading args from stdin.	if (...) ... 
// If the caller requires one or two mandatory args deal with that here.	if (...) ... 
/* print_hints */	return ...
// clone of string_error	ExprStmt
/// Parse the arguments for flags recognized by a specific string subcommand.	definition of parse_opts
// Remember: adjust share/completions/string.fish when `string` options change	definition of long_options
//!OCLINT(high npath complexity)	{ ... }
/// not require an argument depending on the meaning.	definition of construct_short_opts
/// This handles the `--style=xxx` flag.	definition of handle_flag_1
//!OCLINT(too many fields)	definition of options_t
// valid and get the result of parsing the command for flags.	definition of options_t
// Split the buffer on the sep and return the first part.	ExprStmt
// (read_blocked already retries for EAGAIN and EINTR)	ExprStmt
// in case there was no trailing sep.	if (...) ... 
// Read in chunks from fd until buffer has a line (or the end if split_ is unset).	declaration
/// not. On true, the string is stored in storage_.	definition of get_arg_stdin
// Backing storage for the next() string.	definition of storage_
// If set, when reading from a stream, split on newlines.	definition of split_
// If not using argv, a string to store bytes that have been read but not yet returned.	definition of buffer_
// If using argv, index of the next argument to return.	definition of argidx_
// The list of arguments passed to the string builtin.	definition of argv_
// A helper type for extracting arguments from either argv or stdin.	(unnamed namespace)
// We read from stdin if we are the second or later process in a pipeline.	definition of string_args_from_stdin
// This should be about the size of a line.	#define STRING_CHUNK_SIZE 128
// because this isn't about passing the wrong options.	ExprStmt
// Per 1003.1, exit true if the arg is non-empty.	return ...
// Per 1003.1, exit false.	return ...
// Collect the arguments into a list.	declaration
// Ignore the closing bracket from now on.	ExprStmt
// The first argument should be the name of the command ('test').	if (...) ... 
/// Return status is the final shell status, i.e. 0 for true, 1 for false and 2 for error.	definition of builtin_test
"// ""-z"", true if length of string is 0"	{ ... }
"// ""-n"", non-empty string"	{ ... }
"// ""-x"", whether file execute/search is allowed"	{ ... }
"// ""-w"", whether file write permission is allowed"	{ ... }
"// ""-u"", whether file is setuid"	{ ... }
"// ""-r"", read permission"	{ ... }
"// ""-t"", whether the fd is associated with a terminal"	{ ... }
"// ""-s"", size greater than zero"	{ ... }
"// ""-S"", socket"	{ ... }
"// ""-p"", for FIFO"	{ ... }
"// ""-O"", for check effective user id"	{ ... }
"// ""-k"", for sticky bit"	{ ... }
"// ""-L"", same as -h"	{ ... }
"// ""-h"", for symbolic links"	case ...:
"// ""-g"", for set-group-id"	{ ... }
"// ""-G"", for check effective group id"	{ ... }
"// ""-f"", for for regular files"	{ ... }
"// ""-e"", for files that exist"	{ ... }
"// ""-d"", for directories"	{ ... }
"// ""-c"", for character special files"	{ ... }
"// ""-b"", for block special files"	{ ... }
// NaN is an error as far as we're concerned.	ExprStmt
// Check for special fish_wcsto* value or show standard EINVAL/ERANGE error.	if (...) ... 
// above.	declaration
// invalid (e.g. not a representable integer).	ExprStmt
// since we allow trailing whitespace, with other implementations such as bash.	definition of parse_number
// Consume trailing spaces.	while (...) ...
// Consume leading spaces.	while (...) ...
// Parse a double from arg. Return true on success, false on failure.	definition of parse_double
// OR it in.	ExprStmt
// next subject) is not AND, then exit the loop.	if (...) ... 
// Evaluate it, short-circuiting.	ExprStmt
// element.	declaration
// short circuit	{ ... }
// One-element case.	if (...) ... 
//!OCLINT(multiple unary operator)	ExprStmt
// parse_expression().	ExprStmt
// For now we only show the first error.	if (...) ... 
// Empty list and one-arg list should be handled by caller.	ExprStmt
// should have been caught by the above test	ExprStmt
// Transfer ownership to the vector of subjects.	declaration
// See IEEE 1003.1 breakdown of the behavior for different parameter counts.	definition of parse_3_arg_expression
// Success.	return ...
// We need at least three arguments: open paren, argument, close paren.	if (...) ... 
// All our binary primaries are infix, so the operator is at start + 1.	declaration
// We need three arguments.	for(...;...;...) ...
// type.	return ...
// We need one argument.	if (...) ... 
// All our unary primaries are prefix, so the operator is at start.	declaration
// We need two arguments.	if (...) ... 
// irrelevant.	return ...
// no subjects	return ...
// Go to the end of this expression.	ExprStmt
// Clean up the dangling combiner, since it never got its right hand expression.	ExprStmt
// Parse another expression.	declaration
/* Not a combiner, we're done */	ExprStmt
// This is not the first expression, so we expect a combiner.	declaration
/// Parse a combining expression (AND, OR).	definition of parse_combining_expression
/// Parenthetical expression.	definition of parenthetical_expression
// We should have one more subject than combiner.	ExprStmt
/// we don't have to worry about precedence in the parser.	definition of combining_expression
/// Unary operator like bang.	definition of unary_operator
/// Two argument primary like foo != bar.	definition of binary_primary
"/// Single argument like -n foo or ""just a string""."	definition of unary_primary
/// Evaluate returns true if the expression is true (i.e. STATUS_CMD_OK).	declaration of evaluate
/// Base class for expressions.	definition of expression
//              '(' <expr> ')'	declaration of expression
// Return true if the number is a tty()/	definition of isatty
// equal to, or greater than the rhs.	definition of compare
// We enforce the property that 0 <= delta < 1.	definition of base
/// inodes).	definition of number_t
"// "")"", close paren"	test_paren_close
"// ""("", open paren"	test_paren_open
"// ""-o"", true if either left or right is true"	test_combine_or
"// ""-a"", true if left and right are both true"	test_combine_and
"// ""-le"", true if first number is at most second"	test_number_lesser_equal
"// ""-lt"", true if first number is smaller than second"	test_number_lesser
"// ""-ge"", true if first number is at least second"	test_number_greater_equal
"// ""-gt"", true if first number is larger than second"	test_number_greater
"// ""-ne"", true if numbers are not equal"	test_number_not_equal
"// ""-eq"", true if numbers are equal"	test_number_equal
"// ""!="", true if strings are not identical"	test_string_not_equal
"// ""="", true if strings are identical"	test_string_equal
"// ""-z"", true if length of string is 0"	test_string_z
"// ""-n"", non-empty string"	test_string_n
"// ""-x"", whether file execute/search is allowed"	test_fileperm_x
"// ""-w"", whether file write permission is allowed"	test_fileperm_w
"// ""-u"", whether file is setuid"	test_fileperm_u
"// ""-r"", read permission"	test_fileperm_r
"// ""-t"", whether the fd is associated with a terminal"	test_filedesc_t
"// ""-s"", size greater than zero"	test_filesize_s
"// ""-S"", socket"	test_filetype_S
"// ""-p"", for FIFO"	test_filetype_p
"// ""-O"", for check effective user id"	test_filetype_O
"// ""-L"", same as -h"	test_filetype_L
"// ""-k"", for sticky bit"	test_filetype_k
"// ""-h"", for symbolic links"	test_filetype_h
"// ""-g"", for set-group-id"	test_filetype_g
"// ""-G"", for check effective group id"	test_filetype_G
"// ""-f"", for for regular files"	test_filetype_f
"// ""-e"", for files that exist"	test_filetype_e
"// ""-d"", for directories"	test_filetype_d
"// ""-c"", for character special files"	test_filetype_c
"// ""-b"", for block special files"	test_filetype_b
"// ""!"", inverts sense"	test_bang
// arbitrary string	test_unknown
"/* Number of involuntary context switches, i.e. a higher priority process
       became runnable or the current process used up its time slice.  */"	definition of union <unnamed>
"/* Number of voluntary context switches, i.e. because the process
       gave up the process before it had to (usually to wait for some
       resource to be available).  */"	definition of union <unnamed>
/* Number of signals delivered.  */	definition of union <unnamed>
/* Number of IPC messages received.  */	definition of union <unnamed>
/* Number of IPC messages sent.  */	definition of union <unnamed>
/* Number of output operations via the file system.  */	definition of union <unnamed>
"/* Number of input operations via the file system.  Note: This
       and `ru_oublock' do not include operations with the cache.  */"	definition of union <unnamed>
/* Number of times a process was swapped out of physical memory.  */	definition of union <unnamed>
/* Number of hard page faults (i.e. those that required I/O).  */	definition of union <unnamed>
"/* Number of soft page faults (i.e. those serviced by reclaiming
       a page from the list of pages awaiting reallocation.  */"	definition of union <unnamed>
/* Amount of stack memory used (kilobyte-seconds).  */	definition of union <unnamed>
/* Amount of data segment memory used (kilobyte-seconds).  */	definition of union <unnamed>
"/* Amount of sharing of text segment memory
       with other processes (kilobyte-seconds).  */"	definition of union <unnamed>
/* Maximum resident set size (in kilobytes).  */	definition of union <unnamed>
/* Total amount of system time used.  */	definition of ru_stime
/* Total amount of user time used.  */	definition of ru_utime
"/* The purpose of all the unions is to have the kernel-compatible layout
   while keeping the API type as 'long int', and among machines where
   __syscall_slong_t is not 'long int', this only does the right thing
   for little-endian ones, like x32.  */"	definition of rusage
"/* Define struct rusage.
   Copyright (C) 1994-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef __rusage_defined
/* Modify and return resource limits of a process atomically.  */	#ifndef __USE_FILE_OFFSET64
/* WHO is a user ID.  */	PRIO_USER
/* WHO is a process group ID.  */	PRIO_PGRP
/* WHO is a process ID.  */	PRIO_PROCESS
"/* The type of the WHICH argument to `getpriority' and `setpriority',
   indicating what flavor of entity the WHO argument specifies.  */"	definition of __priority_which
/* Maximum priority a process can have.  */	#define PRIO_MAX 20
/* Minimum priority a process can have.  */	#define PRIO_MIN -20
/* Priority limits.  */	#define PRIO_MIN -20
/* Name for the same functionality on Solaris.  */	#define RUSAGE_LWP RUSAGE_THREAD
/* The calling thread.  */	RUSAGE_THREAD
/* All of its terminated child processes.  */	RUSAGE_CHILDREN
/* The calling process.  */	RUSAGE_SELF
/* Whose usage statistics do you want?  */	definition of __rusage_who
/* The hard limit.  */	definition of rlim_max
/* The current (soft) limit.  */	definition of rlim_cur
/* The hard limit.  */	definition of rlim_max
/* The current (soft) limit.  */	definition of rlim_cur
/* Type for resource quantity measurement.  */	#ifndef __USE_FILE_OFFSET64
/* We can represent all limits.  */	#define RLIM_SAVED_MAX RLIM_INFINITY
/* Value to indicate that there is no limit.  */	#ifndef __USE_FILE_OFFSET64
"/* Maximum CPU time in Âµs that a process scheduled under a real-time
     scheduling policy may consume without making a blocking system
     call before being forcibly descheduled.  */"	__RLIMIT_RTTIME
"/* Maximum realtime priority allowed for non-priviledged
     processes.  */"	__RLIMIT_RTPRIO
"/* Maximum nice priority allowed to raise to.
     Nice levels 19 .. -20 correspond to 0 .. 39
     values of this resource limit.  */"	__RLIMIT_NICE
/* Maximum bytes in POSIX message queues.  */	__RLIMIT_MSGQUEUE
/* Maximum number of pending signals.  */	__RLIMIT_SIGPENDING
/* Maximum number of file locks.  */	__RLIMIT_LOCKS
/* Locked-in-memory address space.  */	__RLIMIT_MEMLOCK
/* Number of processes.  */	__RLIMIT_NPROC
/* Address space limit.  */	RLIMIT_AS
/* BSD name for same.  */	__RLIMIT_OFILE
/* Number of open files.  */	RLIMIT_NOFILE
"/* Largest resident set size, in bytes.
     This affects swapping; processes that are exceeding their
     resident set size will be more likely to have physical memory
     taken from them.  */"	__RLIMIT_RSS
/* Largest core file that can be created, in bytes.  */	RLIMIT_CORE
/* Maximum size of stack segment, in bytes.  */	RLIMIT_STACK
/* Maximum size of data segment, in bytes.  */	RLIMIT_DATA
/* Largest file that can be created, in bytes.  */	RLIMIT_FSIZE
/* Per-process CPU limit, in seconds.  */	RLIMIT_CPU
/* Kinds of resource limit.  */	definition of __rlimit_resource
"/* Bit values & structures for resource limits.  Linux version.
   Copyright (C) 1994-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_RESOURCE_H
/* sys/resource.h  */	#endif
"/* Set the priority of all processes specified by WHICH and WHO (see above)
   to PRIO.  Returns 0 on success, -1 on errors.  */"	declaration of setpriority
"/* Return the highest priority of any process specified by WHICH and WHO
   (see above); if WHO is zero, the current process, process group, or user
   (as specified by WHO) is used.  A lower priority number means higher
   priority.  Priorities range from PRIO_MIN to PRIO_MAX (above).  */"	declaration of getpriority
"/* Return resource usage information on process indicated by WHO
   and put it in *USAGE.  Returns 0 for success, -1 for failure.  */"	declaration of getrusage
"/* Set the soft and hard limits for RESOURCE to *RLIMITS.
   Only the super-user can increase hard limits.
   Return 0 if successful, -1 if not (and sets errno).  */"	#ifndef __USE_FILE_OFFSET64
"/* Put the soft and hard limits for RESOURCE in *RLIMITS.
   Returns 0 if successful, -1 if not (and sets errno).  */"	#ifndef __USE_FILE_OFFSET64
"/* The X/Open standard defines that all the functions below must use
   `int' as the type for the first argument.  When we are compiling with
   GNU extensions we change this slightly to provide better error
   checking.  */"	#if defined __USE_GNU && !defined __cplusplus
"/* Copyright (C) 1992-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_RESOURCE_H
// Set both hard and soft limits if neither was specified.	ExprStmt
// Show current limit value.	ExprStmt
/// The ulimit builtin, used for setting resource limits.	definition of builtin_ulimit
// Do not attempt to set the soft limit higher than the hard limit.	if (...) ... 
// value by the multiplier constant used by the commandline ulimit.	definition of set_limit
/// Returns the description for the specified resource limit.	definition of get_desc
/// Print values of all resource limits.	definition of print_all
/// Print the value of the specified resource limit.	definition of print
/// value by the multiplier constant used by the commandline ulimit.	definition of get
/// Get the implicit multiplication factor for the specified resource limit.	definition of get_multiplier
/// Array of resource_t structs, describing all known resource types.	definition of resource_arr
// the implicit multiplier used when setting getting values	definition of multiplier
// switch used on commandline to specify resource	definition of switch_char
// description of resource	definition of desc
// resource ID	definition of resource
/// Struct describing a resource limit.	definition of resource_t
// argument is process name	if (...) ... 
// argument is pid	declaration
// jobs specified	declaration
// no jobs specified	ExprStmt
// flag for -n option	definition of any_flag
/// safe. It waits for child jobs, not for child processes individually.	definition of builtin_wait
// If pids doesn't already have the pgid, add it.	ExprStmt
// Check if the specified pid is a child process of the job.	for(...:...) ...
// If pids doesn't already have the pgid, add it.	ExprStmt
/// It should search the job list for something matching the given proc.	definition of find_job_by_name
// Don't wait for itself	if (...) ... 
/// See if the process described by \c proc matches the commandline \c cmd.	definition of match_pid
/// Tests if all characters in the wide string are numeric.	definition of iswnumeric
// If any specified job is removed from list, return true.	return ...
// If any specified job is completed, return true.	if (...) ... 
// If there are stopped jobs, they are ignored.	if (...) ... 
// Check for jobs running exist or not.	if (...) ... 
// If any job is completed, return true.	if (...) ... 
// If any job is removed from list, return true.	if (...) ... 
// If there are stopped jobs, they are ignored.	if (...) ... 
// Check if the specified pid is a child process of the job.	for(...:...) ...
/// doesn't work properly, so use this function in wait command.	definition of get_job_id_from_pid
// this is an error	return ...
// TODO: This should look for the nearest color.	ExprStmt
// Bright White	return ...
// Cannot be a named color	return ...
// Optimized conversion to lowercase with early abort	declaration
// Binary search	declaration
"// appears in the output of ""set_color --print-colors""."	ExprStmt
// Keep this sorted alphabetically	definition of named_colors
// Format: F3A035	for(...;...;...) ...
// Format: FA3	for(...;...;...) ...
// Skip any leading #.	if (...) ... 
//  F3A035	declaration
// what amounts to a simple memcmp before needing to access the invariant case lookup tables.	declaration
// namespace __cxxabiv1	#endif
// Constructors and destructors do not return a value.	declaration of __cxa_cdtor_return_type
// __cxa_vec_ctor has void return type.	declaration of __cxa_vec_ctor_return_type
// The generic ABI uses the first byte of a 64-bit guard variable.	#define _GLIBCXX_GUARD_TEST(x) (*(char *) (x) != 0)
"/** @file bits/cxxabi_tweaks.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{cxxabi.h}
 */"	#ifndef _CXXABI_TWEAKS_H
// __CXXABI_H	#endif
// __cplusplus	#endif
"/**
   *  @brief Exception thrown by __cxa_guard_acquire.
   *  @ingroup exceptions
   *
   *  C++ 2011 6.7 [stmt.dcl]/4: If control re-enters the declaration
   *  recursively while the variable is being initialized, the behavior
   *  is undefined.
   *
   *  Since we already have a library function to handle locking, we might
   *  as well check for this situation and throw an exception.
   *  We use the second byte of the guard variable to remember that we're
   *  in the middle of an initialization.
   */"	definition of recursive_init_error
"/** @namespace abi
 *  @brief The cross-vendor C++ Application Binary Interface. A
 *  namespace alias to __cxxabiv1, but user programs should use the
 *  alias 'abi'.
 *
 *  A brief overview of an ABI is given in the libstdc++ FAQ, question
 *  5.8 (you may have a copy of the FAQ locally, or you can view the online
 *  version at http://gcc.gnu.org/onlinedocs/libstdc++/faq.html#5_8 ).
 *
 *  GCC subscribes to a cross-vendor ABI for C++, sometimes
 *  called the IA64 ABI because it happens to be the native ABI for that
 *  platform.  It is summarized at http://www.codesourcery.com/cxx-abi/
 *  along with the current specification.
 *
 *  For users of GCC greater than or equal to 3.x, entry points are
 *  available in <cxxabi.h>, which notes, <em>'It is not normally
 *  necessary for user programs to include this header, or use the
 *  entry points directly.  However, this header is available should
 *  that be needed.'</em>
*/"	abi
// prevent catch by value	declaration of __pure_dummy
// to recognize foreign exceptions.	definition of __foreign_exception
// Free the space allocated for the dependent exception.	declaration of __cxa_free_dependent_exception
// Allocate memory for a dependent exception.	declaration of __cxa_allocate_dependent_exception
// null if there is none.	declaration of __cxa_current_exception_type
// Used to implement exception handlers.	declaration of __cxa_get_exception_ptr
// Throw the exception.	declaration of __cxa_throw
// Free the space allocated for the primary exception.	declaration of __cxa_free_exception
// thread, so no initialization is necessary.	declaration of __cxa_get_globals
// Starting object.	declaration of __dynamic_cast
//   -3: src_type is a multiple public non-virtual base of dst_type	declaration of __dynamic_cast
// Exception handling forward declarations.	declaration of __cxa_exception
// Exception handling forward declarations.	declaration of __cxa_dependent_exception
// Exception handling forward declarations.	declaration of __cxa_eh_globals
// Exception handling forward declarations.	declaration of __cxa_refcounted_exception
// Implementation defined member functions.	declaration of __do_dyncast
// Diamond shaped multiple inheritance.	__diamond_shaped_mask
// Distinct instance of repeated base.	__non_diamond_repeat_mask
// Implementation defined types.	definition of __flags_masks
// Array of bases.	definition of __base_info
// internally generated by the compiler.	definition of __base_info
// Number of direct bases.	definition of __base_count
// Details about the class hierarchy.	definition of __flags
// Type information for a class with multiple and/or virtual bases.	definition of __vmi_class_type_info
// Implementation defined member functions.	declaration of __do_dyncast
// Type information for a class with a single non-virtual base.	definition of __si_class_type_info
// of the destination type.  OBJ_PTR points to the current base.	declaration of __do_find_public_src
// if we have located an ambiguous match.	declaration of __do_dyncast
// not_contained for non containment or private containment.	declaration of __find_public_src
// Return false if not found, true if found.	declaration of __do_upcast
// Implementation defined member functions.	declaration of __do_upcast
// Contained within us.	__contained_mask
// Via a public path.	__contained_public_mask
// Via a virtual path.	__contained_virtual_mask
// Contained ambiguously.	__contained_ambig
// mean not contained publicly)	__not_contained
// We have no idea.	__unknown
// not publicly contained.	definition of __sub_kind
// Type information for a class.	definition of __class_type_info
// what we want.	return ...
// Implementation defined member functions.	definition of __is_virtual_p
// Bits to shift offset.	__offset_shift
// Offset and info.	definition of __offset_flags
// Offset and info.	#else
// Base class type.	definition of __base_type
// Helper class for __vmi_class_type.	definition of __base_class_type_info
// Implementation defined member function.	declaration of __pointer_catch
// Class of the member.	definition of __context
// Type information for a pointer to member variable.	definition of __pointer_to_member_type_info
// Implementation defined member functions.	declaration of __is_pointer_p
// Type information for simple pointers.	definition of __pointer_type_info
// Implementation defined member functions.	declaration of __do_catch
// Implementation defined type.	definition of __masks
// Type of pointed to object.	definition of __pointee
// Qualification of the target object.	definition of __flags
// Common type information for simple pointers and pointers to member.	definition of __pbase_type_info
// Type information for enumerations.	definition of __enum_type_info
// Implementation defined member function.	declaration of __is_function_p
// Type information for functions (both member and non-member).	definition of __function_type_info
// Type information for array objects.	definition of __array_type_info
// Type information for int, float etc.	definition of __fundamental_type_info
// namespace __cxxabiv1	#endif
"/**
   *  @brief Demangling routine.
   *  ABI-mandated entry point in the C++ runtime library for demangling.
   *
   *  @param __mangled_name A NUL-terminated character string
   *  containing the name to be demangled.
   *
   *  @param __output_buffer A region of memory, allocated with
   *  malloc, of @a *__length bytes, into which the demangled name is
   *  stored.  If @a __output_buffer is not long enough, it is
   *  expanded using realloc.  @a __output_buffer may instead be NULL;
   *  in that case, the demangled name is placed in a region of memory
   *  allocated with malloc.
   *
   *  @param __length If @a __length is non-null, the length of the
   *  buffer containing the demangled name is placed in @a *__length.
   *
   *  @param __status If @a __status is non-null, @a *__status is set to
   *  one of the following values:
   *   0: The demangling operation succeeded.
   *  -1: A memory allocation failure occurred.
   *  -2: @a mangled_name is not a valid name under the C++ ABI mangling rules.
   *  -3: One of the arguments is invalid.
   *
   *  @return A pointer to the start of the NUL-terminated demangled
   *  name, or NULL if the demangling fails.  The caller is
   *  responsible for deallocating this memory using @c free.
   *
   *  The demangling is performed using the C++ ABI mangling rules,
   *  with GNU extensions. For example, this function is used in
   *  __gnu_cxx::__verbose_terminate_handler.
   *
   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html
   *  for other examples of use.
   *
   *  @note The same demangling functionality is available via
   *  libiberty (@c <libiberty/demangle.h> and @c libiberty.a) in GCC
   *  3.1 and later, but that requires explicit installation (@c
   *  --enable-install-libiberty) and uses a different API, although
   *  the ABI is unchanged.
   */"	declaration of __cxa_demangle
// Exception handling auxiliary.	declaration of __cxa_bad_cast
// Pure virtual functions.	declaration of __cxa_pure_virtual
// TLS destruction.	declaration of __cxa_thread_atexit
// DSO destruction.	declaration of __cxa_atexit
// Destruct and release array.	declaration of __cxa_vec_delete
// Destruct array.	declaration of __cxa_vec_dtor
// Construct array.	declaration of __cxa_vec_ctor
// Allocate array.	declaration of __cxa_vec_new
"/** @file cxxabi.h
 *  The header provides an interface to the C++ ABI.
 */"	#ifndef _CXXABI_H
/* This function calls the profiling functions.  */	declaration of _dl_mcount_wrapper_check
"/* To support profiling of shared objects it is a good idea to call
   the function found using `dlsym' using the following macro since
   these calls do not use the PLT.  But this would mean the dynamic
   loader has no chance to find out when the function is called.  The
   macro applies the necessary magic so that profiling is possible.
   Rewrite
	foo = (*fctp) (arg1, arg2);
   into
        foo = DL_CALL_FCT (fctp, (arg1, arg2));
*/"	#define DL_CALL_FCT(fctp,args) (_dl_mcount_wrapper_check ((void *) (fctp)), (*(fctp)) args)
/* Do not delete object when closed.  */	#define RTLD_NODELETE 0x01000
"/* Unix98 demands the following flag which is the inverse to RTLD_GLOBAL.
   The implementation does this by default and so we can define the
   value to zero.  */"	#define RTLD_LOCAL 0
"/* If the following bit is set in the MODE argument to `dlopen',
   the symbols of the loaded object and its dependencies are made
   visible as if the object were linked directly into the program.  */"	#define RTLD_GLOBAL 0x00100
/* Use deep binding.  */	#define RTLD_DEEPBIND 0x00008
/* Do not load the object.  */	#define RTLD_NOLOAD 0x00004
/* Mask of binding time value.  */	#define RTLD_BINDING_MASK 0x3
/* Immediate function call binding.  */	#define RTLD_NOW 0x00002
/* Lazy function call binding.  */	#define RTLD_LAZY 0x00001
/* The MODE argument to `dlopen' contains one of the following: */	#define RTLD_LAZY 0x00001
"/* System dependent definitions for run-time dynamic loading.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _DLFCN_H
/* dlfcn.h */	#endif
/* __USE_GNU */	#endif
/* Actually longer, dls_cnt elements.  */	#endif
/* Actually longer, dls_cnt elements.  */	definition of dls_serpath
"/* The zero-length array avoids an unwanted array subscript check by
     the compiler, while the surrounding anonymous union preserves the
     historic size of the type.  At the time of writing, GNU C does
     not support structs with flexible array members in unions.  */"	definition of union <unnamed>
/* Number of elements in `dls_serpath'.  */	definition of dls_cnt
/* Size in bytes of the whole buffer.  */	definition of dls_size
"/* This is the structure that must be passed (by reference) to `dlinfo' for
   the RTLD_DI_SERINFO and RTLD_DI_SERINFOSIZE requests.  */"	definition of Dl_serinfo
/* Indicates where this directory came from. */	definition of dls_flags
/* Name of library search path directory.  */	definition of dls_name
"/* This is the type of elements in `Dl_serinfo', below.
   The `dls_name' member points to space in the buffer passed to `dlinfo'.  */"	definition of Dl_serpath
"/* Treat ARG as `void **', and store there a pointer to the calling
       thread's TLS block corresponding to this object's PT_TLS segment.
       Store a null pointer if this object does not define a PT_TLS
       segment, or if the calling thread has not allocated a block for it.  */"	RTLD_DI_TLS_DATA
"/* Treat ARG as `size_t *', and store there the TLS module ID
       of this object's PT_TLS segment, as used in TLS relocations;
       store zero if this object does not define a PT_TLS segment.  */"	RTLD_DI_TLS_MODID
/* Unsupported, defined by Solaris.  */	RTLD_DI_PROFILEOUT
/* Unsupported, defined by Solaris.  */	RTLD_DI_PROFILENAME
"/* Treat ARG as `char *', and store there the directory name used to
       expand $ORIGIN in this shared object's dependency file names.  */"	RTLD_DI_ORIGIN
"/* Treat ARG as `Dl_serinfo *' (see below), and fill in to describe the
       directories that will be searched for dependencies of this object.
       RTLD_DI_SERINFOSIZE fills in just the `dls_cnt' and `dls_size'
       entries to indicate the size of the buffer that must be passed to
       RTLD_DI_SERINFO to fill in the full information.  */"	RTLD_DI_SERINFO
/* Unsupported, defined by Solaris.  */	RTLD_DI_CONFIGADDR
"/* Treat ARG as `struct link_map **';
       store the `struct link_map *' for HANDLE there.  */"	RTLD_DI_LINKMAP
/* Treat ARG as `lmid_t *'; store namespace ID for HANDLE there.  */	RTLD_DI_LMID
/* These are the possible values for the REQUEST argument to `dlinfo'.  */	definition of (unnamed enum)
"/* Get information about the shared object HANDLE refers to.
   REQUEST is from among the values below, and determines the use of ARG.

   On success, returns zero.  On failure, returns -1 and records an error
   message to be fetched with `dlerror'.  */"	declaration of dlinfo
/* The object containing the address (struct link_map *).  */	RTLD_DL_LINKMAP
/* Matching symbol table entry (const ElfNN_Sym *).  */	RTLD_DL_SYMENT
"/* These are the possible values for the FLAGS argument to `dladdr1'.
   This indicates what extra information is stored at *EXTRA_INFO.
   It may also be zero, in which case the EXTRA_INFO argument is not used.  */"	definition of (unnamed enum)
/* Same as `dladdr', but additionally sets *EXTRA_INFO according to FLAGS.  */	declaration of dladdr1
"/* Fill in *INFO with the following information about ADDRESS.
   Returns 0 iff no shared object's segments contain that address.  */"	declaration of dladdr
/* Exact value of nearest symbol.  */	definition of dli_saddr
/* Name of nearest symbol.  */	definition of dli_sname
/* Load address of that object.  */	definition of dli_fbase
/* File name of defining object.  */	definition of dli_fname
"/* Structure containing information about object searched using
   `dladdr'.  */"	definition of Dl_info
"/* When any of the above functions fails, call this function
   to return a string describing the error.  Each call resets
   the error string so that a following call returns null.  */"	declaration of dlerror
"/* Find the run-time address in the shared object HANDLE refers to
   of the symbol called NAME with VERSION.  */"	declaration of dlvsym
/* Like `dlopen', but request object to be allocated in a new namespace.  */	declaration of dlmopen
"/* Find the run-time address in the shared object HANDLE refers to
   of the symbol called NAME.  */"	declaration of dlsym
"/* Unmap and close a shared object opened by `dlopen'.
   The handle cannot be used again after calling `dlclose'.  */"	declaration of dlclose
"/* Open the shared object FILE and map it in; return a handle that can be
   passed to `dlsym' to get symbol values from it.  */"	declaration of dlopen
/* For dlmopen: request new namespace.  */	#define LM_ID_NEWLM -1
/* Initial namespace.  */	#define LM_ID_BASE 0
/* Special namespace ID values.  */	#define LM_ID_BASE 0
/* Type for namespace indeces.  */	declaration of Lmid_t
"/* If the first argument to `dlsym' or `dlvsym' is set to RTLD_DEFAULT
   the run-time address of the symbol called NAME in the global scope
   is returned.  */"	#define RTLD_DEFAULT ((void *) 0)
"/* If the first argument of `dlsym' or `dlvsym' is set to RTLD_NEXT
   the run-time address of the symbol called NAME in the next shared
   object is returned.  The ""next"" relation is defined by the order
   the shared objects were loaded.  */"	#define RTLD_NEXT ((void *) -1l)
"/* User functions for run-time dynamic loading.
   Copyright (C) 1995-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _DLFCN_H
/* !_PATHS_H_ */	#endif
/* Provide trailing slash, since mostly used for building pathnames. */	"#define _PATH_DEV ""/dev/"""
/* All standard utilities path. */	"#define _PATH_STDPATH ""/usr/bin:/bin:/usr/sbin:/sbin"""
/* Default search path. */	"#define _PATH_DEFPATH ""/usr/bin:/bin"""
"/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)paths.h	8.1 (Berkeley) 6/2/93
 */"	#ifndef _PATHS_H_
/* execinfo.h  */	#endif
"/* This function is similar to backtrace_symbols() but it writes the result
   immediately to a file.  */"	declaration of backtrace_symbols_fd
"/* Return names of functions from the backtrace list in ARRAY in a newly
   malloc()ed memory block.  */"	declaration of backtrace_symbols
"/* Store up to SIZE return address of the current program state in
   ARRAY and return the exact number of values stored.  */"	declaration of backtrace
"/* Copyright (C) 1998-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _EXECINFO_H
"/* Linux provides as additional information in the `struct utsname'
   the name of the current domain.  Define _UTSNAME_DOMAIN_LENGTH
   to a value != 0 to activate this entry.  */"	#define _UTSNAME_DOMAIN_LENGTH _UTSNAME_LENGTH
/* Length of the entries in `struct utsname' is 65.  */	#define _UTSNAME_LENGTH 65
"/* Copyright (C) 1995-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_UTSNAME_H
/* sys/utsname.h  */	#endif
/* Put information about the system in NAME.  */	declaration of uname
/* Note that SVID assumes all members have the same size.  */	#define SYS_NMLN _UTSNAME_LENGTH
/* Name of the domain of this node on the network.  */	#ifdef __USE_GNU
/* Name of the hardware type the system is running on.  */	definition of machine
/* Current version level of this release.  */	definition of version
/* Current release level of this implementation.  */	definition of release
/* Name of this node on the network.  */	definition of nodename
/* Name of the implementation of the operating system.  */	definition of sysname
/* Structure describing the system and machine.  */	definition of utsname
"/*
 *	POSIX Standard: 4.4 System Identification	<sys/utsname.h>
 */"	#ifndef _SYS_UTSNAME_H
/// Implementation of perform().	declaration of perform_impl
/// One-argument form with no completion.	definition of perform
/// This returns the active thread token, which is only of interest to tests.	definition of perform
/// a new thread is spawned.	definition of debounce_t
/// Thread IDs are never repeated.	declaration of thread_id
/// \returns true on success, false on failure.	declaration of make_detached_pthread
/// \returns true on success, false on failure.	declaration of make_detached_pthread
/// Performs a function on the main thread, blocking until it completes.	declaration of iothread_perform_on_main
/// This is for cases where deferring a new thread might lead to deadlock.	definition of iothread_perform_cantwait
// variant of iothread_perform without a completion handler	definition of iothread_perform
// on a background thread.	definition of iothread_perform
// The generated handler and completion functions.	definition of handler
// Void specialization.	definition of iothread_trampoline_t<Handler, Completion, void>
// The generated handler and completion functions.	definition of handler
// of Handler and the argument to Completion	definition of iothread_trampoline_t<Handler, Completion, Result>
// Internal implementation	declaration of iothread_perform_impl
/// \return the number of threads that were running.	declaration of iothread_drain_all
/// Services one iothread completion callback.	declaration of iothread_service_completion
/// \return A file descriptor on which to listen for completion callbacks.	declaration of iothread_port
/// \return A sequence number, currently not very useful.	declaration of iothread_perform_base
// Handles IO that may hang.	#ifndef FISH_IOTHREAD_H
// and that $TERM is simple, e.g. `xterm` or `vt100`, not `xterm-something`	return ...
// bullet-proof and that's OK.	definition of is_console_session
/// Return a path to a directory where we can store temporary files.	definition of get_path_to_tmp_dir
// eventually fall back to the compile time paths.	return ...
// Solaris	ExprStmt
// other BSDs	ExprStmt
// Linux	ExprStmt
// On other unixes, fall back to the Linux-ish /proc/ directory	declaration
// the value for the current process.	#else
// https://opensource.apple.com/source/adv_cmds/adv_cmds-163/ps/print.c	#elif defined(__FreeBSD__)
/// Return the path to the current executable. This needs to be realpath'd.	definition of get_executable_path
/// Test if the string is a valid function name.	definition of valid_func_name
/// Test if the given string is a valid variable name.	definition of valid_var_name
/// Test if the given char is valid in a variable name.	definition of valid_var_name_char
/// Display a failed assertion message, dump a stack trace if possible, then die.	definition of __fish_assert
/// become invalid.	definition of redirect_tty_output
// TODO: Actually implement the replacement as documented above.	definition of fish_reserved_codepoint
// actually locked; fortunately we are checking the opposite so we're safe.	if (...) ... 
// handler to allow it to fail properly. Note that we are about to exit.	ExprStmt
// Just call thread_id() once to force increment of thread_id.	declaration
// thread.	declaration
// return (double)tv.tv_sec + 0.000001 * tv.tv_usec;	return ...
/// the gettimeofday function and will have the same precision as that function.	definition of timef
// Maybe append a single fraction digit.	declaration
// need to leave room for a null terminator	definition of max_len
/// Crappy function to extract the most significant digit of an unsigned long long value.	definition of extract_most_significant_digit
// equal	return ...
/// Compare types; if the types match, compare distances.	definition of compare
// prefer earlier matches	ExprStmt
// A case-insensitive version of the string is in the match against.	ExprStmt
// prefer earlier matches	ExprStmt
// String is contained within match against.	ExprStmt
// Distances are generally the amount of text not matched.	declaration
// We succeeded if we exhausted our sequence.	ExprStmt
// we found it, continue the search just after it	ExprStmt
// didn't find this character	break;
// Empty strings are considered to be subsequences of everything.	if (...) ... 
// Impossible if seq is larger than string.	if (...) ... 
/// Returns true if seq, represented as a subsequence, is contained within string.	definition of subsequence_in_string
// unescaping PCRE2 is not needed/supported, the PCRE2 engine is responsible for that	ExprStmt
// unescaping PCRE2 is not needed/supported, the PCRE2 engine is responsible for that	ExprStmt
// Return the string by reference, and then success.	if (...) ... 
"/* Literal backslash that doesn't escape anything! Leave things alone;
                             * we'll append the backslash itself */"	break;
/* Skip over the backslash */	ExprStmt
/* Swallow newline */	ExprStmt
/* Skip over the backslash */	ExprStmt
// append the backslash itself.	break;
/* Skip over the backslash */	ExprStmt
// sure what it means or the importance of this.	ExprStmt
// skip over the backslash	ExprStmt
// A backslash may or may not escape something in single quotes.	switch (...) ... 
// surrounding pair we only get seps inside *that*.	if (...) ... 
// We also need to turn all spaces back.	for(...;...;...) ...
// put the literal back.	if (...) ... 
"// shouldn't be able to get here"");"	ExprStmt
// We need to store where the brace *ends up* in the output.	ExprStmt
// reflect the fact that ** is the recursive wildcard.	if (...) ... 
// skip over 'self's	ExprStmt
// %self/foo will NOT match this.	if (...) ... 
// We've already appended, don't append anything else.	ExprStmt
// will increment it.	ExprStmt
// A none() return indicates an error.	ExprStmt
// appending INTERNAL_SEPARATORs, so we have to handle them specially.	declaration
// Here's the character we'll append to result, or none() to suppress it.	declaration
"// We only read braces as expanders if there's a variable expansion or "","" in them."	declaration
// The positions of open braces.	declaration
// Set up result string, which we'll swap with the output on success.	declaration
/// successful. If false, the contents of output_str are undefined (!).	definition of unescape_string_internal
// If a backslash is followed by an actual newline, swallow them both.	case ...:
// \v means vertical tab.	case ...:
// \t means tab.	case ...:
// \r means carriage return.	case ...:
// \n means newline.	case ...:
// \f means form feed.	case ...:
// \x1B means escape.	case ...:
// \cX means control sequence X.	case ...:
// \b means backspace.	case ...:
// \a means bell (alert).	case ...:
// we want to start our escape from there.	ExprStmt
// Don't exceed the largest Unicode code point - see #1107.	if (...) ... 
// Numeric escape sequences. No prefix means octal escape, otherwise hexadecimal.	case ...:
// It's an error, unless we're allowing incomplete escapes.	if (...) ... 
// Adjust in_pos to only include the backslash.	ExprStmt
// A null character after a backslash is an error.	case ...:
// of characters read so far)	declaration
// in_pos always tracks the next character to read (and therefore the number	definition of in_pos
// valid thing to append.	declaration
/// appending to result. Return the number of characters consumed, or 0 on error.	definition of read_unquoted_escape
/// Helper to return the last character in a string, or none.	definition of string_last_char
/* FALLTHROUGH */	ExprStmt
// but...	case ...:
// a wild guess	ExprStmt
/// \param in is the raw string to be searched for literally when substituted in a PCRE2 expression.	definition of escape_string_pcre2
// Use quoted escaping if possible, since most people find it easier to read.	if (...) ... 
// See #1614	ExprStmt
/// Escape a string in a fashion suitable for using in fish script. Store the result in out_str.	definition of escape_string_script
// string ended prematurely	return ...
// found unexpected escape char at end of string	return ...
// invalid character means we can't decode the string	return ...
/// chars.	definition of unescape_string_var
// All other chars need to have their UTF-8 representation encoded in hex.	declaration
// Underscores are encoded by doubling them.	ExprStmt
// ASCII alphanumerics don't need to be encoded.	if (...) ... 
// This silliness is so we get the correct result whether chars are signed or unsigned.	declaration
/// Escape a string in a fashion suitable for using as a fish var name. Store the result in out_str.	definition of escape_string_var
// string ended prematurely	return ...
// found unexpected end of string	return ...
// invalid character means we can't decode the string	return ...
/// chars.	definition of unescape_string_url
// All other chars need to have their UTF-8 representation encoded in hex.	declaration
// The above characters don't need to be encoded.	ExprStmt
// This silliness is so we get the correct result whether chars are signed or unsigned.	declaration
/// Escape a string in a fashion suitable for using as a URL. Store the result in out_str.	definition of escape_string_url
// Print the token.	declaration
// In case of overflow, we print a newline, except if we already are at position 0.	declaration
// If token is zero character long, we don't do anything.	if (...) ... 
// the token.	if (...) ... 
// Tokenize on whitespace, and also calculate the width of the token.	while (...) ...
// Generate the string backwards, then reverse it.	definition of format_long_safe
// Careful to not negate LLONG_MIN.	definition of absolute_value
// We always append a newline.	ExprStmt
// Some other format specifier, just skip it.	ExprStmt
// Must be at the end of the string.	ExprStmt
// Handle a format string.	ExprStmt
/// fish parser where we expect a lot of diagnostic messages due to testing error conditions.	definition of should_suppress_stderr_for_tests
/// error.	definition of write_loop
"// ""black circle"""	ExprStmt
"// ""bullet"""	ExprStmt
"// ""pilcrow"""	ExprStmt
// they can be *encoded* just fine. Use alternative glyphs.	ExprStmt
"// ""horizontal ellipsis"""	ExprStmt
// can_be_encoded() will return false in that case.	if (...) ... 
// Try printing.	declaration
// Reallocate if necessary.	if (...) ... 
// that, though.	declaration
/// Test if the character can be encoded using the current locale.	definition of can_be_encoded
// If `wc` contains a wide character we emit a question-mark.	if (...) ... 
// single-byte locale (C/POSIX/ISO-8859)	if (...) ... 
/// area.	definition of wcs2str_internal
// If `wc` contains a wide character we emit a question-mark.	if (...) ... 
// single-byte locale (C/POSIX/ISO-8859)	{ ... }
/// This function is distinguished from wcs2str_internal in that it allows embedded null bytes.	definition of wcs2string
// This eliminates false warnings in coverity about resource leaks.	ExprStmt
// Here we probably allocate a buffer probably much larger than necessary.	declaration
// It converted into the local buffer, so copy it.	ExprStmt
// Convert into local buff, then use strdup() so we don't waste malloc'd space.	declaration
// Handles embedded nulls!	return ...
// Handles embedded nulls!	return ...
// normal case	{ ... }
// embedded null byte!	{ ... }
// it's guaranteed the UTF-8 decoding is wrong so use direct encoding.	ExprStmt
//!OCLINT(constant if expression)	if (...) ... 
// Other error codes? Terrifying, should never happen.	ExprStmt
// Invalid data.	ExprStmt
// Incomplete sequence.	ExprStmt
// Determine whether to encode this character with our crazy scheme.	if (...) ... 
// two UTF-16 chars. Something that doesn't work with our simple use of std::mbrtowc().	ExprStmt
//!OCLINT(constant if expression)	if (...) ... 
// sequences longer than four bytes (e.g., OS X Snow Leopard).	ExprStmt
// Single-byte locale, all values are legal.	while (...) ...
/// area.	definition of str2wcs_internal
// HAVE_BACKTRACE_SYMBOLS	#endif
// HAVE_BACKTRACE_SYMBOLS	#else
// https://gist.github.com/fmela/591333 but adapted to the style of the fish project.	definition of demangled_backtrace
// postfork.cpp. Make sure we never dynamically allocate any memory in the fast path!	return ...
// more time.	declaration
/// This is a specialization of `convert_digit()` that only handles base 16 and only uppercase.	definition of convert_hex_digit
/// Test whether the char is a valid hex digit as used by the `escape_string_*()` functions.	definition of is_hex_digit
/// Return the integer value if it is valid else -1.	definition of convert_digit
// https://github.com/Microsoft/BashOnWindows/issues/545	#else
/// This is set during startup and not modified after.	definition of initial_fg_process_group
// default maximum debug output level (errors and warnings)	definition of debug_level
/// This allows us to bypass the main thread checks	definition of thread_asserts_cfg_for_testing
/// This allows us to notice when we've forked.	definition of is_forked_proc
/* pwd.h  */	#endif
"/* Write a traditional /etc/passwd line, based on the user database
   entry for the given UID, to BUFFER; space for BUFFER must be
   allocated by the caller.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of getpw
/* POSIX or reentrant */	#endif
"/* Read a user database entry from STREAM.  This function is not
   standardized and probably never will.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fgetpwent_r
"/* This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of getpwent_r
"/* Reentrant versions of some of the functions above.

   PLEASE NOTE: the `getpwent_r' function is not (yet) standardized.
   The interface may change in later versions of this library.  But
   the interface is designed following the principals used for the
   other reentrant functions so the chances are good this is what the
   POSIX people would choose.  */"	#ifdef __USE_MISC
"/* Reasonable value for the buffer sized used in the reentrant
   functions below.  But better use `sysconf'.  */"	#define NSS_BUFLEN_PASSWD 1024
"/* Retrieve the user database entry for the given username.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of getpwnam
"/* Retrieve the user database entry for the given user ID.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of getpwuid
"/* Write a given user database entry onto the given stream.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of putpwent
"/* Read a user database entry from STREAM.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fgetpwent
"/* Read an entry from the user database stream, opening it if necessary.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of getpwent
"/* Close the user database stream.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of endpwent
"/* Rewind the user database stream.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of setpwent
/* Shell program.  */	definition of pw_shell
/* Home directory.  */	definition of pw_dir
/* Real name.  */	definition of pw_gecos
/* Group ID.  */	definition of pw_gid
/* User ID.  */	definition of pw_uid
"/* Hashed passphrase, if shadow database
                                   not in use (see shadow.h).  */"	definition of pw_passwd
/* Username.  */	definition of pw_name
/* A record in the user database.  */	definition of passwd
"/* The Single Unix specification says that some more types are
   available here.  */"	#ifndef __gid_t_defined
"/*
 *	POSIX Standard: 9.2.2 User Database Access	<pwd.h>
 */"	#ifndef _PWD_H
/// Get the current time in microseconds since Jan 1, 1970.	declaration of get_time
/// wcsfilecmp, but frozen in time for glob usage.	declaration of wcsfilecmp_glob
/// given above.	declaration of wcsfilecmp
// Generic utilities library.	#ifndef FISH_UTIL_H
// If it's already present, we do nothing.	if (...) ... 
// TODO: This should maybe include full cycle detection.	if (...) ... 
/// Add a new target that wraps a command. Example: __fish_XYZ (function) wraps XYZ (target).	definition of complete_add_wrapper
/* not a path */	ExprStmt
// principle track those completions loaded by the autoloader alone.	declaration
// Append wraps.	declaration
"// These should be ""c""begin/end, but then gcc from ~~the dark ages~~ RHEL 7 would complain."	ExprStmt
// Get a list of all completions in a vector, then sort it by order.	declaration
// just a guess	ExprStmt
/// Use by the bare `complete`, loaded completions are printed out as commands	definition of complete_print
/// wcstring, but only if \c argument isn't an empty string.	definition of append_switch
// Determine the innermost subcommand.	declaration
// Lastly mark any completions that appear to already be present in arguments.	ExprStmt
// Escape '[' in the argument before completing it.	ExprStmt
// This function wants the unescaped string.	ExprStmt
// And if we're autosuggesting, and the token is empty, don't do file suggestions.	if (...) ... 
// Hack. If we're cd, handle it specially (issue #1059, others).	ExprStmt
// Invoke any custom completions for this command.	ExprStmt
// disables do_file, then they all do.	ExprStmt
// Try completing as an argument.	declaration
// Check to see if we have a preceding double-dash.	for(...;...;...) ...
// previous argument is the one before it.	declaration
// See whether we are in an argument, in a redirection or in the whitespace in between.	declaration
// Complete command filename.	ExprStmt
/* do_file */	ExprStmt
// No need for any other completions.	declaration
// If there was an error, it was in the last token.	{ ... }
// Since fish does not currently support redirect in command position, we return here.	if (...) ... 
// Don't autosuggest anything based on the empty string (generalizes #1631).	if (...) ... 
// Empty process (cursor is after one of ;, &, |, \n, &&, || modulo whitespace).	if (...) ... 
"// Hack: fix autosuggestion by removing prefixing ""and""s #6249."	if (...) ... 
// Get all the arguments.	declaration
// argument (#2477).	declaration
// Get all the arguments, unescaped, into an array that we're going to bsearch.	declaration
/// Set the DUPLICATES_ARG flag in any completion that duplicates an argument.	definition of mark_completions_duplicating_arguments
// is only set for user or variable names which cannot contain '['.	ExprStmt
// Opening a quote.	ExprStmt
// Closing a quote.	ExprStmt
/// argument instead of appending, so '[' will be escaped.	definition of escape_opening_brackets
// recursively.	definition of walk_wrap_chain
// Recurse with our new command and command line.	declaration
// Do not recurse if we have already seen this.	if (...) ... 
// re-parsing everything.	declaration
// Construct a fake command line containing the wrap target.	declaration
// Limit our recursion depth. This prevents cycles in the wrap chain graph from overflowing.	if (...) ... 
// Recursive implementation of walk_wrap_chain().	definition of walk_wrap_chain_recursive
// A set tracking which (command, wrap) pairs we have seen.	declaration of wrap_chain_visited_set_t
// The callback type for walk_wrap_chain.	declaration of wrap_chain_visitor_t
// Append a user name	ExprStmt
// Append a user name	ExprStmt
// cppcheck-suppress getpwentCalled	while (...) ...
// since every app is sandboxed and can't access eachother.	#else
/// \return false if unable to complete, true otherwise	definition of try_complete_user
// don't generate an autosuggestion, but do allow tab completion.	declaration
// all other chars ignored here	break;
// This character cannot be in a variable, reset the dollar.	ExprStmt
// npos means none.	declaration
// Append matching environment variables	ExprStmt
// Can't use ctx.vars here, it could be any variable.	declaration
// #6288.	if (...) ... 
// Take only the suffix.	ExprStmt
// no match	continue;
/// Complete the specified string as an environment variable.	definition of complete_variable
// consider relaxing this if there was a preceding double-dash argument.	if (...) ... 
// inserting our separator and prefix.	declaration
// See #4954.	declaration
// Squelch file descriptions per issue #254.	if (...) ... 
/// Perform generic (not command-specific) expansions on the specified string.	definition of complete_param_expand
// Append a long-style option	ExprStmt
// Append a long-style option with a mandatory trailing equal sign	ExprStmt
// functions.	declaration
// does this switch _require_ an argument	definition of req_arg
// does this switch have any known arguments	definition of has_arg
// Check if the long style option matches.	if (...) ... 
// Append a short-style option	ExprStmt
// It's a match.	declaration
// Only complete when the last short option has no parameter yet..	if (...) ... 
// Only complete short options if there is no character after the dash.	if (...) ... 
// Check if the short style option matches.	if (...) ... 
// If this entry is for the base command, check if any of the arguments match.	if (...) ... 
// Now we try to complete an option itself	for(...:...) ...
// to see how we should complete the current argument	if (...) ... 
// any short (or gnu style) options do.	if (...) ... 
// If we are using old style long options, check for them first.	for(...:...) ...
// to see how we should complete the current argument	declaration
// -I/usr/include).	for(...:...) ...
// the lock because callouts (like the condition) may add or remove completions. See issue 2.	for(...:...) ...
// Oof, this is a lot of copying	ExprStmt
// Copy all of their options into our list.	ExprStmt
// Make a list of lists of all options that we care about.	declaration
"// and automatic completions (""gi"" autosuggestion provider -> git)"	do (...) ...
// Use cmd_orig here as it is potentially pathed.	ExprStmt
// Only reload environment variables if builtin_exists returned false, as an optimization	if (...) ... 
"// FLOGF(error, L""\nThinking about looking up completions for %ls\n"", cmd.c_str());"	declaration
// is used to make that determination instead? I don't know.	declaration
/// Insert results into comp_out. Return true to perform file completion, false to disable it.	definition of complete_param
// Note we only look at the global fish_function_path and fish_completion_path.	declaration
// See issue #2466.	declaration
/// Load command-specific completions for the specified command.	definition of complete_load
// The first character after the dash is not a valid option.	if (...) ... 
/// Returns wcstring::npos if there is no valid short option.	definition of short_option_pos
// sign for long options.	ExprStmt
// Verify options match.	if (...) ... 
// Verify leading dashes.	declaration
// We may get a complete_entry_opt_t with no options if it's just arguments.	if (...) ... 
/// Test if a string is an option with an argument, like --color=auto or -I/usr/include.	definition of param_match2
/// Match a parameter.	definition of param_match
///	definition of complete_from_args
// Append all matching builtins	ExprStmt
// Append all known matching functions	ExprStmt
// Append all matching directories	do (...) ...
// updated with choices for the user.	declaration
// Append all possible executables	declaration
/// \param str_cmd the command string to find completions for	definition of complete_cmd
// A completion description is a single line.	for(...:...) ...
/// Returns a description for the specified function, or an empty string if none.	definition of complete_function_desc
// description.	for(...:...) ...
// way, and I get to decide these things.	ExprStmt
// Skip keys that are too short.	if (...) ... 
// A typical entry is the command name, followed by a tab, followed by a description.	for(...:...) ...
// hashtable with the completion as key and the description as value.	declaration
/* don't apply exit status */	ExprStmt
// systems with a large set of manuals, but it should be ok since apropos is only called once.	declaration
// least two characters if we don't know the location of the whatis-database.	if (...) ... 
/// for the executable.	definition of complete_cmd_desc
///    The flags	definition of complete_strings
// Make sure the path is not included in the command.	declaration
/// Use the empty string as the 'path' for commands that can not be found.	ExprStmt
/// Find the full path and commandname from a command string 'str'.	definition of parse_cmd_string
// const_cast: See SET_ELEMENTS_ARE_IMMUTABLE.	declaration
// Just go to the next one.	ExprStmt
/// Must be called while locked.	definition of remove_option
// Create our new option.	declaration
// Lock the lock that allows us to edit the completion entry list.	declaration
// option should be empty iff the option type is arguments only.	ExprStmt
// invalidates its internal state.	return ...
/// Locate the specified entry. Create it if it doesn't exist. Must be called while locked.	definition of complete_get_exact_entry
// Use the old value.	ExprStmt
/* don't apply exit status */	ExprStmt
// Compute new value and reinsert it.	ExprStmt
"// std::fwprintf( stderr, L""No condition specified\n"" );"	return ...
/// after a completion run to make sure that there are no stale completions.	definition of condition_test
/// Create a new completion entry.	definition of append_completion
// Autoloader for completions.	definition of completion_autoloader
// expansion because it's not thread safe.	declaration
/// Attempt to complete an abbreviation for the given string.	declaration of complete_abbr
// If we are doing fuzzy matching, request all types; if not request only prefix matching.	if (...) ... 
/// results.	declaration of condition_cache_t
/// The output completions.	definition of completions
/// Flags associated with the completion request.	definition of flags
/// The command to complete.	definition of cmd
/// The operation context for this completion.	definition of ctx
/// Class representing an attempt to compute completions.	definition of completer_t
// emacs.	if (...) ... 
// Sort, provided COMPLETE_DONT_SORT isn't set.	ExprStmt
// Deduplicate both sorted and unsorted results.	ExprStmt
// Throw out completions whose match types are less suitable than the best.	ExprStmt
// will only show one match if it matches a file exactly. (see issue #959).	if (...) ... 
// We can't get better than this (see below)	break;
// Find the best match type.	declaration
// Remove (return true) if insertion fails.	ExprStmt
/// Unique the list of completions, without perturbing their order.	definition of unique_completions_retaining_order
// stable_sort twice rather than to iterate once performing all comparisons in one go!	definition of compare_completions_by_duplicate_arguments
// Both completions are from a source with the --keep-order flag.	return ...
// For this to work, stable_sort must be used because results aren't interchangeable.	if (...) ... 
/// completion_t functions. Note that the constructor resolves flags!	definition of completion_t
/// suffix of the string.	definition of resolve_auto_space
/// Comparison function to sort completions by their order field.	definition of compare_completions_by_order
"/// Completion ""wrapper"" support. The map goes from wrapping-command to wrapped-command-list."	declaration of wrapper_map_t
// namespace std	declaration of completion_entry_set_t
/// Set of all completion entries.	std
/// Adds or removes an option.	declaration of remove_option
/// Adds or removes an option.	declaration of add_option
/// Getters for option list.	declaration of get_options
/// time.	definition of order
/// True if command is a path.	definition of cmd_is_path
/// Command string.	definition of cmd
/// List of all options.	definition of options
/// Struct describing a command completion.	declaration of option_list_t
/// Last value used in the order field of completion_entry_t.	definition of k_complete_order
// Completion flags.	definition of flags
// Determines how completions should be performed on the argument after the switch.	definition of result_mode
// Condition under which to use the option.	definition of condition
// Description of the completion.	definition of desc
// Arguments to the option.	definition of comp
// Type of the option: args-oly, short, single_long, or double_long.	definition of type
// Text of the option (like 'foo').	definition of option
/// switch.	definition of complete_entry_opt
/// the response).	#ifdef HAVE_GETTEXT
/// Description for abbreviations.	"#define ABBR_DESC _(L""Abbreviation: %ls"")"
/// Description for short variables. The value is concatenated to this description.	"#define COMPLETE_VAR_DESC_VAL _(L""Variable: %ls"")"
/// Description for ~USER completion.	"#define COMPLETE_USER_DESC _(L""Home for %ls"")"
// fetch_default_strategy_from_environment for names.	"#define UNIVERSAL_NOTIFIER_ENV_NAME ""fish_universal_notifier"""
// have been posted.	declaration of notification_fd_became_readable
// Returns the fd from which to watch for events, or -1 if none.	declaration of notification_fd
// Recommended delay between polls. A value of 0 means no polling required (so no timeout).	declaration of usec_delay_between_polls
// Triggers a notification.	declaration of post_notification
// Does a fast poll(). Returns true if changed.	declaration of poll
// Default instance. Other instances are possible for testing.	declaration of default_notifier
// Factory constructor.	declaration of new_notifier_for_strategy
// No copying.	declaration of universal_notifier_t
// No copying.	declaration of operator=
// polling most of the time.	strategy_named_pipe
// Strategy that uses notify(3). Simple and efficient, but OS X/macOS only.	strategy_notifyd
// wakeups.	strategy_shmem_polling
/// true if the file may have changed.	definition of universal_notifier_t
/// Access the export generation.	declaration of get_export_generation
/// Exposed for testing only.	definition of is_ok_to_save
/// Serialize a variable list. Exposed for testing only.	declaration of serialize_with_vars
/// Guess a file format. Exposed for testing only.	declaration of format_for_contents
/// \return the format of the file that we read.	declaration of populate_variables
/// written.	declaration of sync
/// Loads variables at the correct path, optionally migrating from a legacy path.	declaration of initialize
/// Get a view on the universal variable table.	definition of get_table
// Gets variable names.	declaration of get_names
// Removes a variable. Returns true if it was found, false if not.	declaration of remove
// Sets a variable.	declaration of set
// \return flags from the variable with the given name.	declaration of get_flags
// Get the value of the variable with the specified name.	declaration of get
// vars_to_acquire.	declaration of acquire_variables
// the new vars. Also update our exports generation count as necessary.	declaration of generate_callbacks_and_update_exports
// File id from which we last read.	definition of last_read_file
// Functions concerned with saving.	declaration of move_new_vars_file_into_place
// Functions concerned with saving.	declaration of write_to_fd
// Functions concerned with saving.	declaration of open_temporary_file
// Functions concerned with saving.	declaration of open_and_acquire_lock
// fish wrote the uvars contents.	definition of ok_to_save
// A generation count which is incremented every time an exported variable is modified.	definition of export_generation
// Path that we save to. If empty, use the default.	definition of explicit_vars_path
// vars indicates a deleted value.	definition of modified
// order.	definition of vars
/// Class representing universal variables.	definition of env_universal_t
// This is exposed for testing.	definition of uvar_format_t
/// \return whether this callback represents an erased variable.	definition of is_erase
/// Construct from a key and maybe a value.	definition of callback_data_t
// The value of the variable, or none if it is erased.	definition of val
// The name of the variable.	definition of key
/// Callback data, reflecting a change in universal variables.	definition of callback_data_t
/// Initialize variable dispatch.	declaration of environment_t
// Prototypes for functions that react to environment variable changes	#ifndef FISH_ENV_DISPATCH_H
// Prototype for version receiver.	declaration of get_fish_version
// /tmp/fish.user	declaration
// getpeuid() can't fail, but getpwuid sure can.	declaration
// practice it is not always the case: see #1828 and #2222.	declaration
/// Return the path of an appropriate runtime data directory.	definition of env_get_runtime_path
// OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.	declaration
/// (http://tmux.sourceforge.net/).	definition of check_runtime_path
// once.	for(...:...) ...
// Only dispatch variable changes if we are the principal environment.	if (...) ... 
// Important to not hold the lock here.	ExprStmt
// If the principal stack modified universal variables, then post a barrier.	if (...) ... 
// Important to not hold the lock here.	if (...) ... 
// Replace empties with dot. Note we ignore pathvar here.	if (...) ... 
// Historical behavior.	if (...) ... 
/// Update the PWD variable directory from the result of getcwd().	definition of set_pwd_from_getcwd
"// runs."""	if (...) ... 
// The user requested erasing from a particular scope.	if (...) ... 
// Helper to remove from uvars.	declaration
// Users can't remove read-only keys.	if (...) ... 
// Unspecified scope with no existing variables.	declaration
// Existing universal variable.	ExprStmt
// Existing global variable.	ExprStmt
// Existing local variable.	ExprStmt
// The user requested a particular scope.	if (...) ... 
// name will be a pathvar. This is historical.	declaration
// Handle electric and read-only variables.	if (...) ... 
// Construct and set the new variable.	declaration
// Resolve whether or not to export.	declaration
/// Set a universal variable, inheriting as applicable from the given old variable.	definition of set_universal
// Handle computed mutable electric variables.	if (...) ... 
// Be picky about exporting.	if (...) ... 
// If the variable is read-only, the user may not set it.	if (...) ... 
// If a variable is electric, it may only be set in the global scope.	if (...) ... 
// If so regenerate the export list.	if (...) ... 
// Pathvar is inferred from the name. If set, split our entry about colons.	declaration
// Use an explicit exports, or inherit from the existing variable.	declaration
/// Apply the pathvar behavior, splitting about colons.	definition of colon_split
// Exhausted the inner scopes, put back a shadowing scope.	ExprStmt
// Pop the inner scope.	ExprStmt
// Propagate local exported variables.	declaration
/// This is used for inheriting pathvar and export status.	definition of find_variable
// Implement the default behavior of 'set' by finding the node for an unspecified scope.	definition of resolve_unspecified_scope
/// Set a variable in a given node \p node.	declaration of set_in_node
/// Set a universal value.	declaration of set_universal
/// \p val will not be modified upon a none() return.	declaration of try_set_electric
/// \return true if the variable was found and removed.	definition of remove_from_chain
/// Find the first node in the chain starting at \p node which contains the given key \p key.	definition of find_in_chain
// whether the variable is exported by some parent.	definition of parent_exports
// if set, the new export value; otherwise inherit any existing export value.	definition of exports
// if set, whether we should become a path variable; otherwise guess based on the name.	definition of pathvar
/// A restricted set of variable flags.	definition of var_flags_t
/// The scopes of caller functions, which are currently shadowed.	definition of shadowed_locals_
/// \return a new impl representing global variables, with a single local scope.	definition of create
/// \return the popped node.	declaration of pop
/// Push a new non-shadowing (inner) local scope.	declaration of push_nonshadowing
/// Push a new shadowing local scope.	declaration of push_shadowing
/// Remove a variable under the name \p key.	declaration of remove
/// Set a variable under the name \p key, using the given \p mode, setting its value to \p val.	declaration of set
/// A mutable subclass of env_scoped_impl_t.	definition of env_stack_impl_t
// Whether we modified universal variables.	definition of uvar_modified
// Whether we modified the global scope.	definition of global_modified
// The publicly visible status of the set call.	definition of status
// A struct that wraps up the result of setting or removing a variable.	definition of mod_result_t
// Note assigning env is a potentially big copy.	ExprStmt
/// Recursive helper to snapshot a series of nodes.	definition of copy_node_chain
// Add electrics.	for(...:...) ...
// show_unexported.	declaration
// If the user requested only exported or unexported variables, enforce that here.	if (...) ... 
// Computed variables are effectively global and can't be shadowed.	if (...) ... 
// against races. Guess what the umask is; if we guess right we don't need to reset it.	declaration
// may ask for an environment variable, so don't take the lock here (we don't need it).	if (...) ... 
// Update our export array generations.	ExprStmt
// Construct the export list: a list of strings of the form key=value.	declaration
// Dorky way to add our single exported computed variable.	ExprStmt
// copy elision.	ExprStmt
// our generation list is stale.	if (...) ... 
// exported. See #2132.	ExprStmt
// existing values from previous scopes.	ExprStmt
/// Get the exported variables into a variable table.	definition of get_exported
/// \return a newly allocated export array.	declaration of create_export_array
/// \return whether the current export array is empty or out-of-date.	declaration of export_array_needs_regeneration
/// Invoke a function on the current (nonzero) export generations, in order.	definition of enumerate_generations
// query.	declaration of try_get_universal
// query.	declaration of try_get_global
// query.	declaration of try_get_local
// query.	declaration of try_get_computed
// If this differs from the current export generations then we need to regenerate the array.	definition of export_array_generations_
// Exported variable array used by execv.	definition of export_array_
// Per process data.	definition of perproc_data_
// Global scopes. There is no parent here.	definition of globals_
// A linked list of scopes.	definition of locals_
/// different fish internal processes.	definition of perproc_data_t
// namespace	declaration of env_node_ref_t
/// Pointer to next level.	definition of next
/// subshells, or redefines a variable to not be exported.	definition of export_gen
/// will explode.	definition of new_scope
/// Variable table.	definition of env
// Struct representing one level in the function variable stack.	definition of env_node_t
// note we don't use pathvar for searches, so these don't default to true if unspecified.	ExprStmt
"// Whether this is a ""user"" set."	definition of user
// Whether pathvar or unpathvar was set.	definition of has_pathvar_unpathvar
// Whether to search exported and unexported variables.	definition of exports
// Whether export or unexport was specified.	definition of has_export_unexport
// Whether to search local, global, universal scopes.	definition of local
// Whether any scopes were specified.	definition of has_scope
// an exported universal variable. See issues #5258 and #5348.	for(...:...) ...
// Set up universal variables. The empty string means to use the default path.	ExprStmt
// Complain about invalid config paths.	ExprStmt
// Allow changes to variables to produce events.	ExprStmt
// Initialize termsize variables.	declaration
// vars.	declaration
// If $USER is empty as well (which we tried to set above), we can't get $HOME.	ExprStmt
// so it isn't necessary to warn here as well.	ExprStmt
// Maybe USER is set but it's bogus. Reset USER from the db and try again.	ExprStmt
//     env HOME=(mktemp -d) su --preserve-environment fish	if (...) ... 
// TODO: Figure out how to handle invalid numbers better. Shouldn't we issue a diagnostic?	declaration
// was not inherited from the environment.	declaration
// Set the $hostname variable	declaration
// Set the $fish_pid variable.	ExprStmt
// Set up the version variable.	declaration
// Set up $IFS - this used to be in share/config.fish, but really breaks if it isn't done.	ExprStmt
// UID == 0.	declaration
// Set up the USER and PATH variables	ExprStmt
// Set the given paths in the environment, if we have any.	if (...) ... 
// No equal-sign found so treat it as a defined var that has no value(s).	if (...) ... 
// like foo=bar	definition of key_and_val
// (See issue #2784).	declaration
/* or NULL */	{ ... }
// I doubt this is even necessary	#endif
// _CS_PATH: colon-separated paths to find POSIX utilities	declaration
/// Make sure the PATH variable contains something.	definition of setup_path
// issue #3748.	if (...) ... 
/// routines.	definition of misc_init
/// Set up the USER variable.	definition of setup_user
// See https://github.com/fish-shell/fish-shell/issues/5080	declaration
/// \return a singleton empty list, to avoid unnecessary allocations in env_var_t.	definition of empty_list
/// Return a string representation of the var.	definition of as_string
/// sentinel that indicates that the node contains no exported variables.	declaration of export_generation_t
// node would need its own lock.	definition of env_lock
/// Return true if a variable should become a path variable by default. See #436.	definition of variable_should_auto_pathvar
// Hack.	return ...
/// Check if a variable may not be set using the set command.	definition of is_read_only
// Keep sorted alphabetically	definition of electric_variables
// Exported to child processes.	fexports
// Value is dynamically computed.	fcomputed
// May not be modified by the user.	freadonly
/// Getter for universal variables.	definition of uvars
/// Universal variables global instance. Initialized in env_init.	definition of s_universal_variables
"/// Does the terminal have the ""eat_newline_glitch""."	definition of term_has_xn
/// The character used to delimit path and non-path variables in exporting and in string expansion.	definition of PATH_ARRAY_SEP
/// At init, we read all the environment variables from this array.	declaration of environ
/// Some configuration path environment variables.	"#define FISH_DATADIR_VAR L""__fish_data_dir"""
// Note this points into our cache; do not modify the cache while the pointer lives.	declaration of find_prompt_layout
// Add a cache entry.	declaration of add_prompt_layout
// variables change by calling `cached_esc_sequences.clear()`.	declaration of shared
/// \return the layout, and optionally the truncated prompt itself, by reference.	declaration of calc_prompt_layout
// element that is less than or equal to entry.	if (...) ... 
// another one. This seems like a safe assumption.	declaration
/// \return the length of a string that matches a prefix of \p entry.	definition of find_escape_code
/// \return the length of an escape code, accessing and perhaps populating the cache.	declaration of escape_code_length
/// Insert the entry \p str in its sorted position, if it is not already present in the cache.	definition of add_escape_code
/// \return the size of the escape code cache.	definition of esc_cache_size
// Resulting layout.	definition of layout
// Resulting truncated prompt string.	definition of trunc_text
// Max line width when computing layout (for truncation).	definition of max_line_width
// Original prompt string.	definition of text
// Use a list so we can promote to the front on a cache hit.	definition of prompt_cache_entry_t
// lexicographically.	definition of esc_cache_
// Maintain a mapping of escape sequences to their widths for fast lookup.	definition of layout_cache_t
// width of the last line	definition of last_line_width
// width of the longest line	definition of max_line_width
// how many lines the prompt consumes	definition of line_count
// Information about the layout of a prompt.	definition of prompt_layout_t
/// Issues an immediate clr_eos.	declaration of screen_force_clear_to_end
/// Stat stdout and stderr and save result as the current timestamp.	declaration of s_save_status
/// The screen width must be provided for the PROMPT_SP hack.	declaration of s_reset_abandoning_line
/// This function assumes that the current line is still valid.	declaration of s_reset_line
/// \param cursor_is_within_pager whether the position is within the pager line (first line)	declaration of s_write
/// otherwise empty. This includes both soft and hard wrapping.	declaration of cursor_is_wrapped_to_own_line
/// \return the outputter for this screen.	definition of outp
/// main loop, in which case we need to redraw.	definition of prev_buff_1
/// remember to clear the subsequent lines.	definition of actual_lines_before_reset
/// Whether there may be yet more content after the lines, and we issue a clr_eos if possible.	definition of need_clear_screen
/// actual_lines_before_reset.	definition of need_clear_lines
/// Whether the last-drawn autosuggestion (if any) is truncated, or hidden entirely.	definition of autosuggestion_is_truncated
/// If we support soft wrapping, we can output to this location without any cursor motion.	definition of soft_wrap_location
/// Last right prompt width.	definition of last_right_prompt_width
/// A string containing the prompt which was last printed to the screen.	definition of actual_left_prompt
/// The internal representation of the actual screen contents.	definition of actual
/// The internal representation of the desired screen contents.	definition of desired
/// The class representing the current and desired screen contents.	definition of screen_t
/// Where the cursor is in (x, y) coordinates.	definition of cursor_t
/// -1 if not set, i.e. we have not rendered before.	definition of screen_width
/// A class representing screen contents.	definition of screen_data_t
/// treated as 0.	declaration of wcswidth_min_0
/// Append the contents of \p line to this line.	definition of append_line
/// \return the color at a char index.	definition of color_at
/// \return the character at a char index.	definition of char_at
/// \return the number of characters.	definition of size
/// Append a nul-terminated string \p txt to the line, giving each character \p color.	definition of append
/// Append a single character \p txt to the line with color \p c.	definition of append
/// Clear the line's contents.	definition of clear
/// A pair of a character, and the color with which to draw it.	definition of text
/// A class representing a single line of a screen.	definition of line_t
// of text around to handle text insertion.	#ifndef FISH_SCREEN_H
// fish_read_limit variable.	definition of read_byte_limit
/// Miscellaneous variables.	definition of g_use_posix_spawn
/// Returns true if we think the terminal supports setting its title.	definition of term_supports_setting_title
// Make change known to GNU gettext.	declaration
// invalidate the pointer from the this setlocale() call.	declaration
/// Initialize the locale subsystem.	definition of init_locale
// Invalidate the cached escape sequences since they may no longer be valid.	ExprStmt
// does terminal have the eat_newline_glitch	ExprStmt
/// Initialize the curses subsystem.	definition of init_curses
/// don't. Since we can't see the underlying terminal below screen there is no way to fix this.	definition of title_terms
// seeing if the fallback name can be used.	declaration
// given, if any.	definition of initialize_curses_using_fallback
// See if terminfo happens to identify 256 colors	ExprStmt
// OS X Lion is version 299+, it has 256 color support (see github Wiki)	ExprStmt
// Assume that all 'xterm's can handle 256, except for Terminal.app from Snow Leopard	declaration
// TERM is *256color*: 256 colors explicitly supported	ExprStmt
// $fish_term256	ExprStmt
// otherwise infer it from the TERM variable or use terminfo.	declaration
/// Updates our idea of whether we support term256 and term24bit (see issue #10222).	definition of update_fish_color_support
// This is the subset of those dispatch functions which want to be run at startup.	ExprStmt
// This std::move is required to avoid a build error on old versions of libc++ (#5801)	return ...
/// Note this returns a new-allocated value that we expect to leak.	definition of create_dispatch_table
/// This is primarily for testing but could be used by users in special situations.	definition of handle_read_limit_change
// note this defaults to true	declaration
// We need to re-guess emoji width because the locale might have changed to a multibyte one.	ExprStmt
// TODO: eliminate this principal_parser. Need to rationalize how multiple threads work here.	ExprStmt
/// when an event occurs.	definition of universal_callback
// Eww.	if (...) ... 
// Do nothing if not yet fully initialized.	if (...) ... 
/// React to modifying the given variable.	definition of env_dispatch_var_change
// but only if it's at least 1.	declaration
// See https://gitlab.com/gnachman/iterm2/wikis/unicodeversionswitching	ExprStmt
// Apple Terminal on High Sierra	ExprStmt
/// Update the value of g_guessed_fish_emoji_width	definition of guess_emoji_width
/// Properly sets all timezone information.	definition of handle_timezone
// Via this construct we can avoid invoking destructors at shutdown.	ExprStmt
// avoid shutdown destructors. This is set during startup and should not be modified after.	definition of s_var_dispatch_table
// initialized.	declaration of create_dispatch_table
// Run those dispatch functions which want to be run at startup.	declaration of run_inits
/// True if we think we can set the terminal title.	definition of can_set_term_title
// Forward declarations.	declaration of update_fish_color_support
// Forward declarations.	declaration of init_locale
// Forward declarations.	declaration of init_curses
/// We must not already be observing this variable.	definition of add
/// We must not already be observing this variable.	definition of add
/// subsystem.	definition of curses_variables
/// subsystem.	definition of locale_variables
// IWYU pragma: keep	"#define DEFAULT_TERM1 ""ansi"""
"/* Atomically mark descriptor(s) as
				   non-blocking.  */"	SOCK_NONBLOCK
"/* Atomically set close-on-exec flag for the
				   new descriptor(s).  */"	SOCK_CLOEXEC
"/* Flags to be ORed into the type parameter of socket and socketpair and
     used for the flags parameter of paccept.  */"	SOCK_CLOEXEC
"/* Linux specific way of getting packets
				   at the dev level.  For writing rarp and
				   other similar things on the user level. */"	SOCK_PACKET
/* Datagram Congestion Control Protocol.  */	SOCK_DCCP
"/* Sequenced, reliable, connection-based,
				   datagrams of fixed maximum length.  */"	SOCK_SEQPACKET
/* Reliably-delivered messages.  */	SOCK_RDM
/* Raw protocol interface.  */	SOCK_RAW
"/* Connectionless, unreliable datagrams
				   of fixed maximum length.  */"	SOCK_DGRAM
"/* Sequenced, reliable, connection-based
				   byte streams.  */"	SOCK_STREAM
/* Types of sockets.  */	definition of __socket_type
"/* Define enum __socket_type for generic Linux.
   Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_SOCKET_H
/* bits/sockaddr.h */	#endif
/* Size of struct sockaddr_storage.  */	#define _SS_SIZE 128
"/* This macro is used to declare the initial common members
   of the data types used for socket addresses, `struct sockaddr',
   `struct sockaddr_in', `struct sockaddr_un', etc.  */"	#define __SOCKADDR_COMMON(sa_prefix) sa_family_t sa_prefix ## family
/* POSIX.1g specifies this type name for the `sa_family' member.  */	declaration of sa_family_t
"/*
 * Never include this file directly; use <sys/socket.h> instead.
 */"	#ifndef _BITS_SOCKADDR_H
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef __always_inline
/* __ASM_GENERIC_BITS_PER_LONG */	#endif
"/*
 * There seems to be no way of detecting this automatically from user
 * space, so 64 bit architectures should override this in their
 * bitsperlong.h. In particular, an architecture that supports
 * both 32 and 64 bit user space must not rely on CONFIG_64BIT
 * to decide it, but rather check a compiler provided macro.
 */"	#ifndef __BITS_PER_LONG
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef __ASM_GENERIC_BITS_PER_LONG
/* __ASM_X86_BITSPERLONG_H */	#endif
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef __ASM_X86_BITSPERLONG_H
/* __ASM_GENERIC_POSIX_TYPES_H */	#endif
"/*
 * anything below here should be completely generic
 */"	declaration of __kernel_off_t
"/*
 * Most 32 bit architectures use ""unsigned int"" size_t,
 * and all 64 bit architectures use ""unsigned long"" size_t.
 */"	#ifndef __kernel_size_t
"/*
 * This file is generally used by user-level software, so you need to
 * be a little careful about namespace pollution etc.
 *
 * First the types that are often defined in different ways across
 * architectures, so that you can override them.
 */"	#ifndef __kernel_long_t
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef __ASM_GENERIC_POSIX_TYPES_H
/* _ASM_X86_POSIX_TYPES_64_H */	#endif
"/*
 * This file is generally used by user-level software, so you need to
 * be a little careful about namespace pollution etc.  Also, we cannot
 * assume GCC is being used.
 */"	declaration of __kernel_old_uid_t
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef _ASM_X86_POSIX_TYPES_64_H
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifdef __i386__
/* _LINUX_POSIX_TYPES_H */	#endif
/* Type of a SYSV IPC key.  */	declaration of __kernel_key_t
/* Type of a signal handler.  */	declaration of __kernel_sighandler_t
"/*
 * This macro may have been defined in <gnu/types.h>. But we always
 * use the one here.
 */"	#undef __FD_SETSIZE
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef _LINUX_POSIX_TYPES_H
/* __ASM_GENERIC_SOCKIOS_H */	#endif
/* Get stamp (timespec) */	#define SIOCGSTAMPNS_OLD 0x8907
/* Get stamp (timeval) */	#define SIOCGSTAMP_OLD 0x8906
/* Socket-level I/O control calls. */	#define FIOSETOWN 0x8901
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef __ASM_GENERIC_SOCKIOS_H
/* __ASM_GENERIC_SOCKET_H */	#endif
/* on 64-bit and x32, avoid the ?: operator */	#define SO_TIMESTAMP SO_TIMESTAMP_OLD
/* Instruct lower device to use last 4-bytes of skb data as FCS */	#define SO_NOFCS 43
/* Socket filtering */	#define SO_ATTACH_FILTER 26
/* Security levels - as per NRL IPv6 - don't actually do anything */	#define SO_SECURITY_AUTHENTICATION 22
/* powerpc only differs in these */	#ifndef SO_PASSCRED
/* For setsockopt(2) */	#define SOL_SOCKET 1
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */	#ifndef __ASM_GENERIC_SOCKET_H
/* bits/socket.h */	#endif
/* Time to linger.  */	definition of l_linger
/* Nonzero to linger on close.  */	definition of l_onoff
/* Structure used to manipulate the SO_LINGER option.  */	definition of linger
/* GID of sending process.  */	definition of gid
/* UID of sending process.  */	definition of uid
/* PID of sending process.  */	definition of pid
/* User visible structure for SCM_CREDENTIALS message */	definition of ucred
/* Credentials passing.  */	SCM_CREDENTIALS
/* Transfer file descriptors.  */	SCM_RIGHTS
"/* Socket level message types.  This must match the definitions in
   <linux/socket.h>.  */"	definition of (unnamed enum)
/* Use `extern inline'.  */	#endif
/* No more entries.  */	return ...
/* The kernel header does this so there may be a reason.  */	return ...
/* Ancillary data object manipulation macros.  */	#if __glibc_c99_flexarr_available
/* Ancillary data.  */	definition of __cmsg_data
/* Protocol specific type.  */	definition of cmsg_type
/* Originating protocol.  */	definition of cmsg_level
"/* Length of data in cmsg_data plus length
				   of cmsghdr structure.
				   !! The type should be socklen_t but the
				   definition of the kernel is incompatible
				   with this.  */"	definition of cmsg_len
/* Structure used for storage of ancillary data object information.  */	definition of cmsghdr
/* Flags on received message.  */	definition of msg_flags
"/* Ancillary data buffer length.
				   !! The type should be socklen_t but the
				   definition of the kernel is incompatible
				   with this.  */"	definition of msg_controllen
/* Ancillary data (eg BSD filedesc passing). */	definition of msg_control
/* Number of elements in the vector.  */	definition of msg_iovlen
/* Vector of data to send/receive into.  */	definition of msg_iov
/* Length of address data.  */	definition of msg_namelen
/* Address to send to/receive from.  */	definition of msg_name
"/* Structure describing messages sent by
   `sendmsg' and received by `recvmsg'.  */"	definition of msghdr
"/* Set close_on_exit for file
					   descriptor received through
					   SCM_RIGHTS.  */"	MSG_CMSG_CLOEXEC
/* Send data in TCP SYN.  */	MSG_FASTOPEN
/* Use user data in kernel path.  */	MSG_ZEROCOPY
/* sendmmsg: more messages coming.  */	MSG_BATCH
/* Wait for at least one packet to return.*/	MSG_WAITFORONE
/* Sender will send more.  */	MSG_MORE
/* Do not generate SIGPIPE.  */	MSG_NOSIGNAL
/* Fetch message from error queue.  */	MSG_ERRQUEUE
/* Confirm path validity.  */	MSG_CONFIRM
/* Wait for a full request.  */	MSG_WAITALL
/* End of record.  */	MSG_EOR
/* Nonblocking IO.  */	MSG_DONTWAIT
/* Supply or ask second address.  */	MSG_PROXY
/* Control data lost before delivery.  */	MSG_CTRUNC
/* DECnet uses a different name.  */	MSG_TRYHARD
/* Don't use local routing.  */	MSG_DONTROUTE
/* Peek at incoming messages.  */	MSG_PEEK
/* Process out-of-band data.  */	MSG_OOB
/* Bits in the FLAGS argument to `send', `recv', et al.  */	definition of (unnamed enum)
/* Force desired alignment.  */	definition of __ss_align
/* Address family, etc.  */	definition of ss_family
"/* Structure large enough to hold any socket address (with the historical
   exception of AF_UNIX).  */"	#define __ss_aligntype unsigned long int
/* Address data.  */	definition of sa_data
/* Common data: address family and length.  */	definition of sa_family
/* Structure describing a generic socket address.  */	definition of sockaddr
/* Maximum queue length specifiable by listen.  */	#define SOMAXCONN 128
/* ATM Adaption Layer (packet level).  */	#define SOL_AAL 265
/* ATM layer (cell level).  */	#define SOL_ATM 264
"/* Socket level values.  Others are defined in the appropriate headers.

   XXX These definitions also should go into the appropriate headers as
   far as they are available.  */"	#define SOL_RAW 255
/* Address families.  */	#define AF_UNSPEC PF_UNSPEC
/* For now..  */	#define PF_MAX 45
/* XDP sockets.  */	#define PF_XDP 44
/* SMC sockets.  */	#define PF_SMC 43
/* Qualcomm IPC Router.  */	#define PF_QIPCRTR 42
/* Kernel Connection Multiplexor.  */	#define PF_KCM 41
/* vSockets.  */	#define PF_VSOCK 40
/* NFC sockets.  */	#define PF_NFC 39
/* Algorithm sockets.  */	#define PF_ALG 38
/* CAIF sockets.  */	#define PF_CAIF 37
/* IEEE 802.15.4 sockets.  */	#define PF_IEEE802154 36
/* Phonet sockets.  */	#define PF_PHONET 35
/* mISDN sockets.  */	#define PF_ISDN 34
/* RxRPC sockets.  */	#define PF_RXRPC 33
/* IUCV sockets.  */	#define PF_IUCV 32
/* Bluetooth sockets.  */	#define PF_BLUETOOTH 31
/* TIPC sockets.  */	#define PF_TIPC 30
/* Controller Area Network.  */	#define PF_CAN 29
/* MPLS.  */	#define PF_MPLS 28
/* Native InfiniBand address.  */	#define PF_IB 27
/* Linux LLC.  */	#define PF_LLC 26
/* Wanpipe API sockets.  */	#define PF_WANPIPE 25
/* PPPoX sockets.  */	#define PF_PPPOX 24
/* IRDA sockets.  */	#define PF_IRDA 23
/* Linux SNA Project */	#define PF_SNA 22
/* RDS sockets.  */	#define PF_RDS 21
/* ATM SVCs.  */	#define PF_ATMSVC 20
/* Acorn Econet.  */	#define PF_ECONET 19
/* Ash.  */	#define PF_ASH 18
/* Packet family.  */	#define PF_PACKET 17
/* Alias to emulate 4.4BSD.  */	#define PF_ROUTE PF_NETLINK
/* PF_KEY key management API.  */	#define PF_KEY 15
/* Security callback pseudo AF.  */	#define PF_SECURITY 14
/* Reserved for 802.2LLC project.  */	#define PF_NETBEUI 13
/* Reserved for DECnet project.  */	#define PF_DECnet 12
/* Amateur Radio X.25 PLP.  */	#define PF_ROSE 11
/* IP version 6.  */	#define PF_INET6 10
/* Reserved for X.25 project.  */	#define PF_X25 9
/* ATM PVCs.  */	#define PF_ATMPVC 8
/* Multiprotocol bridge.  */	#define PF_BRIDGE 7
/* Amateur radio NetROM.  */	#define PF_NETROM 6
/* Appletalk DDP.  */	#define PF_APPLETALK 5
/* Novell Internet Protocol.  */	#define PF_IPX 4
/* Amateur Radio AX.25.  */	#define PF_AX25 3
/* IP protocol family.  */	#define PF_INET 2
/* Another non-standard name for PF_LOCAL.  */	#define PF_FILE PF_LOCAL
/* POSIX name for PF_LOCAL.  */	#define PF_UNIX PF_LOCAL
/* Local to host (pipes and file-domain).  */	#define PF_LOCAL 1
/* Unspecified.  */	#define PF_UNSPEC 0
/* Protocol families.  */	#define PF_UNSPEC 0
/* Type for length arguments in socket calls.  */	#ifndef __socklen_t_defined
"/* System-specific socket constants and types.  Linux version.
   Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef __BITS_SOCKET_H
"/* This is the 4.3 BSD `struct sockaddr' format, which is used as wire
   format in the grotty old 4.3 `talk' protocol.  */"	definition of osockaddr
"/* Checking macros for socket functions.
   Copyright (C) 2005-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_SOCKET_H
/* sys/socket.h */	#endif
/* Define some macros helping to catch buffer overflows.  */	#if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
"/* FDTYPE is S_IFSOCK or another S_IF* macro defined in <sys/stat.h>;
   returns 1 if FD is open on an object of the indicated type, 0 if not,
   or -1 for errors (setting errno).  */"	declaration of isfdtype
/* Determine whether socket is at a out-of-band mark.  */	declaration of sockatmark
"/* Shut down all or part of the connection open on socket FD.
   HOW determines what to shut down:
     SHUT_RD   = No more receptions;
     SHUT_WR   = No more transmissions;
     SHUT_RDWR = No more receptions or transmissions.
   Returns 0 on success, -1 for errors.  */"	declaration of shutdown
"/* Similar to 'accept' but takes an additional parameter to specify flags.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of accept4
"/* Await a connection on socket FD.
   When a connection arrives, open a new socket to communicate with it,
   set *ADDR (which is *ADDR_LEN bytes long) to the address of the connecting
   peer and *ADDR_LEN to the address's actual length, and return the
   new socket's descriptor, or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of accept
"/* Prepare to accept connections on socket FD.
   N connection requests will be queued before further requests are refused.
   Returns 0 on success, -1 for errors.  */"	declaration of listen
"/* Set socket FD's option OPTNAME at protocol level LEVEL
   to *OPTVAL (which is OPTLEN bytes long).
   Returns 0 on success, -1 for errors.  */"	declaration of setsockopt
"/* Put the current value for socket FD's option OPTNAME at protocol level LEVEL
   into OPTVAL (which is *OPTLEN bytes long), and set *OPTLEN to the value's
   actual length.  Returns 0 on success, -1 for errors.  */"	declaration of getsockopt
"/* Receive up to VLEN messages as described by VMESSAGES from socket FD.
   Returns the number of messages received or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of recvmmsg
"/* Receive a message as described by MESSAGE from socket FD.
   Returns the number of bytes read or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of recvmsg
"/* Send a VLEN messages as described by VMESSAGES to socket FD.
   Returns the number of datagrams successfully written or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of sendmmsg
"/* Send a message described MESSAGE on socket FD.
   Returns the number of bytes sent, or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of sendmsg
"/* Read N bytes into BUF through socket FD.
   If ADDR is not NULL, fill in *ADDR_LEN bytes of it with tha address of
   the sender, and store the actual size of the address in *ADDR_LEN.
   Returns the number of bytes read or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of recvfrom
"/* Send N bytes of BUF on socket FD to peer at address ADDR (which is
   ADDR_LEN bytes long).  Returns the number sent, or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of sendto
"/* Read N bytes into BUF from socket FD.
   Returns the number read or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of recv
"/* Send N bytes of BUF to socket FD.  Returns the number sent or -1.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of send
"/* Put the address of the peer connected to socket FD into *ADDR
   (which is *LEN bytes long), and its actual length into *LEN.  */"	declaration of getpeername
"/* Open a connection on socket FD to peer at ADDR (which LEN bytes long).
   For connectionless socket types, just set the default address to send to
   and the only address from which to accept transmissions.
   Return 0 on success, -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of connect
/* Put the local address of FD into *ADDR and its length in *LEN.  */	declaration of getsockname
/* Give the socket FD the local address ADDR (which is LEN bytes long).  */	declaration of bind
"/* Create two new sockets, of type TYPE in domain DOMAIN and using
   protocol PROTOCOL, which are connected to each other, and put file
   descriptors for them in FDS[0] and FDS[1].  If PROTOCOL is zero,
   one will be chosen automatically.  Returns 0 on success, -1 for errors.  */"	declaration of socketpair
"/* Create a new socket of type TYPE in domain DOMAIN, using
   protocol PROTOCOL.  If PROTOCOL is zero, one is chosen automatically.
   Returns a file descriptor for the new socket, or -1 for errors.  */"	declaration of socket
"/* Number of received or sent bytes for the
				   entry.  */"	definition of msg_len
/* Actual message header.  */	definition of msg_hdr
/* For `recvmmsg' and `sendmmsg'.  */	definition of mmsghdr
"/* Add more `struct sockaddr_AF' types here as necessary.
   These are all the ones I found on NetBSD and Linux.  */"	#endif
"/* This is the type we use for generic socket address arguments.

   With GCC 2.7 and later, the funky union causes redeclarations or
   uses with any of the listed types to be allowed without complaint.
   G++ 2.7 does not support transparent unions so there we want the
   old-style declaration, too.  */"	#if defined __cplusplus || !__GNUC_PREREQ (2, 7) || !defined __USE_GNU
/* No more receptions or transmissions.  */	SHUT_RDWR
/* No more transmissions.  */	SHUT_WR
/* No more receptions.  */	SHUT_RD
"/* The following constants should be used for the second parameter of
   `shutdown'.  */"	definition of (unnamed enum)
"/* Declarations of socket constants, types, and functions.
   Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_SOCKET_H
/* IPv6 Routing header type 0.  */	#define IPV6_RTHDR_TYPE_0 0
/* Hop must be a neighbour.  */	#define IPV6_RTHDR_STRICT 1
/* Hop doesn't need to be neighbour. */	#define IPV6_RTHDR_LOOSE 0
/* Routing header options for IPv6.  */	#define IPV6_RTHDR_LOOSE 0
/* Socket level values for IPv6.  */	#define SOL_IPV6 41
/* See IP_PMTUDISC_OMIT.  */	#define IPV6_PMTUDISC_OMIT 5
/* See IP_PMTUDISC_INTERFACE.  */	#define IPV6_PMTUDISC_INTERFACE 4
/* Ignore dst pmtu.  */	#define IPV6_PMTUDISC_PROBE 3
/* Always DF.  */	#define IPV6_PMTUDISC_DO 2
/* Use per route hints.  */	#define IPV6_PMTUDISC_WANT 1
/* Never send DF frames.  */	#define IPV6_PMTUDISC_DONT 0
/* IPV6_MTU_DISCOVER values.  */	#define IPV6_PMTUDISC_DONT 0
/* Obsolete synonyms for the above.  */	#if !__USE_KERNEL_IPV6_DEFS
/* RFC5082.  */	#define IPV6_MINHOPCOUNT 73
/* RFC5014.  */	#define IPV6_ADDR_PREFERENCES 72
/* Advanced API (RFC3542) (2).  */	#define IPV6_RECVTCLASS 66
/* Advanced API (RFC3542) (1).  */	#define IPV6_RECVPKTINFO 49
"/* Options for use with `getsockopt' and `setsockopt' at the IPv6 level.
   The first word in the comment at the right is the data type used;
   ""bool"" means a boolean value stored in an `int'.  */"	#define IPV6_ADDRFORM 1
/* Header destination address  */	definition of ipi_addr
/* Routing destination address  */	definition of ipi_spec_dst
/* Interface index  */	definition of ipi_ifindex
/* Structure used for IP_PKTINFO.  */	definition of in_pktinfo
/* Interface index */	definition of imr_ifindex
/* local IP address of interface */	definition of imr_address
/* IP multicast address of group */	definition of imr_multiaddr
/* Like `struct ip_mreq' but including interface specification by index.  */	definition of ip_mreqn
/* Actually variable in size.  */	definition of ip_opts
/* First hop; zero without source route.  */	definition of ip_dst
"/* Structure used to describe IP options for IP_OPTIONS and IP_RETOPTS.
   The `ip_dst' field is used for the first-hop gateway when using a
   source route (this gets put into the header proper).  */"	definition of ip_opts
/* To select the IP level.  */	#define SOL_IP 0
/* Like IP_PMTUDISC_INTERFACE but allow packets to be fragmented.  */	#define IP_PMTUDISC_OMIT 5
"/* Always use interface mtu (ignores dst pmtu) but don't set DF flag.
   Also incoming ICMP frag_needed notifications will be ignored on
   this socket to prevent accepting spoofed ones.  */"	#define IP_PMTUDISC_INTERFACE 4
/* Ignore dst pmtu.  */	#define IP_PMTUDISC_PROBE 3
/* Always DF.  */	#define IP_PMTUDISC_DO 2
/* Use per route hints.  */	#define IP_PMTUDISC_WANT 1
/* Never send DF frames.  */	#define IP_PMTUDISC_DONT 0
/* IP_MTU_DISCOVER arguments.  */	#define IP_PMTUDISC_DONT 0
/* TProxy original addresses */	#define IP_ORIGDSTADDR 20
/* bool */	#define IP_MULTICAST_ALL 49
/* int */	#define IP_MTU 14
/* bool */	#define IP_RECVTOS 13
/* bool */	#define IP_RECVTTL 12
/* bool */	#define IP_RECVERR 11
/* int; see below */	#define IP_MTU_DISCOVER 10
/* obsolete name? */	#define IP_PMTUDISC 10
/* bool */	#define IP_PKTINFO 8
/* bool */	#define IP_ROUTER_ALERT 5
/* group_source_req: leave source-spec gr*/	#define MCAST_LEAVE_SOURCE_GROUP 47
/* group_source_req: join source-spec gr */	#define MCAST_JOIN_SOURCE_GROUP 46
/* group_req: leave any-source group */	#define MCAST_LEAVE_GROUP 45
/* group_source_req: unblock from given group*/	#define MCAST_UNBLOCK_SOURCE 44
/* group_source_req: block from given group */	#define MCAST_BLOCK_SOURCE 43
/* group_req: join any-source group */	#define MCAST_JOIN_GROUP 42
/* ip_mreq_source: leave source group */	#define IP_DROP_SOURCE_MEMBERSHIP 40
/* ip_mreq_source: join source group */	#define IP_ADD_SOURCE_MEMBERSHIP 39
/* ip_mreq_source: block data from source */	#define IP_BLOCK_SOURCE 38
/* ip_mreq_source: unblock data from source */	#define IP_UNBLOCK_SOURCE 37
/* ip_mreq; drop an IP group membership */	#define IP_DROP_MEMBERSHIP 36
/* ip_mreq; add an IP group membership */	#define IP_ADD_MEMBERSHIP 35
/* bool; set/get IP multicast loopback */	#define IP_MULTICAST_LOOP 34
/* unsigned char; set/get IP multicast ttl */	#define IP_MULTICAST_TTL 33
/* in_addr; set/get IP multicast i/f */	#define IP_MULTICAST_IF 32
/* ip_opts; Set/get IP per-packet options.  */	#define IP_RETOPTS 7
/* bool; Receive IP options for response.  */	#define IP_RECVRETOPTS IP_RETOPTS
/* For BSD compatibility.  */	#define IP_RECVRETOPTS IP_RETOPTS
/* bool; Receive all IP options w/datagram.  */	#define IP_RECVOPTS 6
/* int; IP time to live.  */	#define IP_TTL 2
/* int; IP type of service and precedence.  */	#define IP_TOS 1
/* int; Header is included with data.  */	#define IP_HDRINCL 3
/* ip_opts; IP per-packet options.  */	#define IP_OPTIONS 4
"/* Options for use with `getsockopt' and `setsockopt' at the IP level.
   The first word in the comment at the right is the data type used;
   ""bool"" means a boolean value stored in an `int'.  */"	#define IP_OPTIONS 4
"/* This is not quite the same API since the kernel always defines s6_addr16 and
   s6_addr32. This is not a violation of POSIX since POSIX says ""at least the
   following member"" and that holds true.  */"	#else
"/* If the application has already included linux/in6.h from a linux-based
   kernel then we will not define the IPv6 IPPROTO_* defines, in6_addr (nor the
   defines), sockaddr_in6, or ipv6_mreq. Same for in6_ptkinfo or ip6_mtuinfo
   in linux/ipv6.h. The ABI used by the linux-kernel and glibc match exactly.
   Neither the linux kernel nor glibc should break this ABI without coordination.
   In upstream kernel 56c176c9 the _UAPI prefix was stripped so we need to check
   for _LINUX_IN6_H and _IPV6_H now, and keep checking the old versions for
   maximum backwards compatibility.  */"	#if defined _UAPI_LINUX_IN6_H \
/* Linux version.  */	#ifndef _NETINET_IN_H
/* netinet/in.h */	#endif
/* use GNU */	#endif
/* Set source filter.  */	declaration of setsourcefilter
/* Get source filter.  */	declaration of getsourcefilter
/* Set IPv4 source filter.  */	declaration of setipv4sourcefilter
/* Get IPv4 source filter.  */	declaration of getipv4sourcefilter
/* Routing Header Option (RFC 3542).  */	declaration of inet6_rth_init
/* Routing Header Option (RFC 3542).  */	declaration of inet6_rth_space
/* Hop-by-Hop and Destination Options Processing (RFC 3542).  */	declaration of inet6_opt_append
/* Hop-by-Hop and Destination Options Processing (RFC 3542).  */	declaration of inet6_opt_init
/* Obsolete hop-by-hop and Destination Options Processing (RFC 2292).  */	declaration of inet6_option_space
/* !__USE_KERNEL_IPV6_DEFS */	#endif
/* path MTU in host byte order */	definition of ip6m_mtu
/* dst address including zone ID */	definition of ip6m_addr
/* IPv6 MTU information.  */	definition of ip6_mtuinfo
/* send/recv interface index */	definition of ipi6_ifindex
/* src/dst IPv6 address */	definition of ipi6_addr
/* IPv6 packet information.  */	definition of in6_pktinfo
/* Forward declaration.  */	declaration of cmsghdr
/* The IPv6 version of this function.  */	declaration of bindresvport6
/* Bind socket to a privileged IP port.  */	declaration of bindresvport
"/* The host byte order is the same as network byte order,
   so these functions are all just identity.  */"	#else
"/* We can optimize calls to the conversion functions.  Either nothing has
   to be done or we are using directly the byte-swapping functions which
   often can be inlined.  */"	#if __BYTE_ORDER == __BIG_ENDIAN
"/* Functions to convert between host and network byte order.

   Please note that these functions normally take `unsigned long int' or
   `unsigned short int' values as arguments and also return them.  But
   this was a short-sighted decision since on different systems the types
   may have different representations but the values are always the same.  */"	declaration of ntohs
"/* Functions to convert between host and network byte order.

   Please note that these functions normally take `unsigned long int' or
   `unsigned short int' values as arguments and also return them.  But
   this was a short-sighted decision since on different systems the types
   may have different representations but the values are always the same.  */"	declaration of ntohl
/* Source addresses.  */	definition of gf_slist
/* Number of source addresses.  */	definition of gf_numsrc
/* Filter mode.  */	definition of gf_fmode
/* Group address.  */	definition of gf_group
/* Interface index.  */	definition of gf_interface
/* Source addresses.  */	definition of imsf_slist
/* Number of source addresses.  */	definition of imsf_numsrc
/* Filter mode.  */	definition of imsf_fmode
/* Local IP address of interface.  */	definition of imsf_interface
/* IP multicast address of group.  */	definition of imsf_multiaddr
/* Full-state filter operations.  */	definition of ip_msfilter
/* Source address.  */	definition of gsr_source
/* Group address.  */	definition of gsr_group
/* Interface index.  */	definition of gsr_interface
/* Group address.  */	definition of gr_group
/* Interface index.  */	definition of gr_interface
/* Multicast group request.  */	definition of group_req
/* !__USE_KERNEL_IPV6_DEFS */	#endif
/* local interface */	definition of ipv6mr_interface
/* IPv6 multicast address of group */	definition of ipv6mr_multiaddr
/* Likewise, for IPv6.  */	definition of ipv6_mreq
/* IP address of source.  */	definition of imr_sourceaddr
/* IP address of interface.  */	definition of imr_interface
/* IP multicast address of group.  */	definition of imr_multiaddr
/* Local IP address of interface.  */	definition of imr_interface
/* IP multicast address of group.  */	definition of imr_multiaddr
/* IPv4 multicast request.  */	definition of ip_mreq
/* !__USE_KERNEL_IPV6_DEFS */	#endif
/* IPv6 scope-id */	definition of sin6_scope_id
/* IPv6 address */	definition of sin6_addr
/* IPv6 flow information */	definition of sin6_flowinfo
/* Transport layer port # */	definition of sin6_port
/* Ditto, for IPv6.  */	definition of sockaddr_in6
/* Pad to size of `struct sockaddr'.  */	definition of sin_zero
/* Internet address.  */	definition of sin_addr
/* Port number.  */	definition of sin_port
/* Structure describing an Internet socket address.  */	definition of sockaddr_in
/* ::1 */	declaration of in6addr_loopback
/* :: */	declaration of in6addr_any
/* !__USE_KERNEL_IPV6_DEFS */	#endif
/* IPv6 address */	definition of in6_addr
/* 224.0.0.255 */	#define INADDR_MAX_LOCAL_GROUP ((in_addr_t) 0xe00000ff)
/* 224.0.0.106 */	#define INADDR_ALLSNOOPERS_GROUP ((in_addr_t) 0xe000006a)
/* 224.0.0.2 */	#define INADDR_ALLRTRS_GROUP ((in_addr_t) 0xe0000002)
/* 224.0.0.1 */	#define INADDR_ALLHOSTS_GROUP ((in_addr_t) 0xe0000001)
/* 224.0.0.0 */	#define INADDR_UNSPEC_GROUP ((in_addr_t) 0xe0000000)
/* Defines for Multicast INADDR.  */	#define INADDR_UNSPEC_GROUP ((in_addr_t) 0xe0000000)
/* Inet 127.0.0.1.  */	#define INADDR_LOOPBACK ((in_addr_t) 0x7f000001)
/* Address to loopback in software to local host.  */	#ifndef INADDR_LOOPBACK
/* Network number for local host loopback.  */	#define IN_LOOPBACKNET 127
/* Address indicating an error return.  */	#define INADDR_NONE ((in_addr_t) 0xffffffff)
/* Address to send to all hosts.  */	#define INADDR_BROADCAST ((in_addr_t) 0xffffffff)
/* Address to accept any incoming messages.  */	#define INADDR_ANY ((in_addr_t) 0x00000000)
"/* Definitions of the bits in an Internet address integer.

   On subnets, host and network parts are found according to
   the subnet mask, not these masks.  */"	#define IN_CLASSA(a) ((((in_addr_t)(a)) & 0x80000000) == 0)
/* Ports greater this value are reserved for (non-privileged) servers.  */	IPPORT_USERRESERVED
/* Ports less than this value are reserved for privileged processes.  */	IPPORT_RESERVED
/* UDP ports.  */	IPPORT_BIFFUDP
/* rlogind service.  */	IPPORT_LOGINSERVER
/* execd service.  */	IPPORT_EXECSERVER
/* SUPDUP protocol.  */	IPPORT_SUPDUP
/* Finger service.  */	IPPORT_FINGER
/* Trivial File Transfer Protocol.  */	IPPORT_TFTP
/* Internet Whois service.  */	IPPORT_WHOIS
/* Domain Name Service.  */	IPPORT_NAMESERVER
/* Timeserver service.  */	IPPORT_TIMESERVER
/* Simple Mail Transfer Protocol.  */	IPPORT_SMTP
/* Telnet protocol.  */	IPPORT_TELNET
/* File Transfer Protocol.  */	IPPORT_FTP
/* Network status service.  */	IPPORT_NETSTAT
/* Time of day service.  */	IPPORT_DAYTIME
/* System status service.  */	IPPORT_SYSTAT
/* Discard transmissions service.  */	IPPORT_DISCARD
/* Echo service.  */	IPPORT_ECHO
/* Standard well-known ports.  */	definition of (unnamed enum)
/* Type to represent a port.  */	declaration of in_port_t
/* !__USE_KERNEL_IPV6_DEFS */	#endif
/* IPv6 mobility header.  */	IPPROTO_MH
/* IPv6 destination options.  */	IPPROTO_DSTOPTS
/* IPv6 no next header.  */	IPPROTO_NONE
/* ICMPv6.  */	IPPROTO_ICMPV6
/* IPv6 fragmentation header.  */	IPPROTO_FRAGMENT
/* IPv6 routing header.  */	IPPROTO_ROUTING
/* IPv6 Hop-by-Hop options.  */	IPPROTO_HOPOPTS
"/* If __USE_KERNEL_IPV6_DEFS is 1 then the user has included the kernel
   network headers first and we should use those ABI-identical definitions
   instead of our own, otherwise 0.  */"	#if !__USE_KERNEL_IPV6_DEFS
/* Raw IP packets.  */	IPPROTO_RAW
/* MPLS in IP.  */	IPPROTO_MPLS
/* UDP-Lite protocol.  */	IPPROTO_UDPLITE
/* Stream Control Transmission Protocol.  */	IPPROTO_SCTP
/* Compression Header Protocol.  */	IPPROTO_COMP
/* Protocol Independent Multicast.  */	IPPROTO_PIM
/* Encapsulation Header.  */	IPPROTO_ENCAP
/* IP option pseudo header for BEET.  */	IPPROTO_BEETPH
/* Multicast Transport Protocol.  */	IPPROTO_MTP
/* authentication header.  */	IPPROTO_AH
/* encapsulating security payload.  */	IPPROTO_ESP
/* General Routing Encapsulation.  */	IPPROTO_GRE
/* Reservation Protocol.  */	IPPROTO_RSVP
/* IPv6 header.  */	IPPROTO_IPV6
/* Datagram Congestion Control Protocol.  */	IPPROTO_DCCP
/* SO Transport Protocol Class 4.  */	IPPROTO_TP
/* XNS IDP protocol.  */	IPPROTO_IDP
/* User Datagram Protocol.  */	IPPROTO_UDP
/* PUP protocol.  */	IPPROTO_PUP
/* Exterior Gateway Protocol.  */	IPPROTO_EGP
/* Transmission Control Protocol.  */	IPPROTO_TCP
/* IPIP tunnels (older KA9Q tunnels use 94).  */	IPPROTO_IPIP
/* Internet Group Management Protocol. */	IPPROTO_IGMP
/* Internet Control Message Protocol.  */	IPPROTO_ICMP
/* Dummy protocol for TCP.  */	IPPROTO_IP
/* Standard well-defined IP protocols.  */	definition of (unnamed enum)
/* Internet address.  */	declaration of in_addr_t
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _NETINET_IN_H
/* arpa/inet.h */	#endif
"/* Convert internet address in binary form in LEN bytes starting at CP
   a presentation form and place result in BUF.  */"	declaration of inet_nsap_ntoa
"/* Convert ASCII representation in hexadecimal form of the Internet
   address to binary form and place result in buffer of length LEN
   starting at BUF.  */"	declaration of inet_nsap_addr
"/* Convert network number for interface type AF from presentation in
   buffer starting at CP to network format and store result int
   buffer starting at BUF of size LEN.  */"	declaration of inet_net_pton
"/* Convert network number for interface type AF in buffer starting at
   CP to presentation format.  The result will specifiy BITS bits of
   the number.  */"	declaration of inet_net_ntop
"/* Format a network number NET into presentation format and place result
   in buffer starting at BUF with length of LEN bytes.  */"	declaration of inet_neta
"/* Convert Internet host address from numbers-and-dots notation in CP
   into binary data and store the result in the structure INP.  */"	declaration of inet_aton
/* The following functions are not part of XNS 5.2.  */	#ifdef __USE_MISC
"/* Convert a Internet address in binary network format for interface
   type AF in buffer starting at CP to presentation form and place
   result in buffer of length LEN astarting at BUF.  */"	declaration of inet_ntop
"/* Convert from presentation format of an Internet number in buffer
   starting at CP to the binary network format and store result for
   interface type AF in buffer starting at BUF.  */"	declaration of inet_pton
"/* Convert Internet number in IN to ASCII representation.  The return value
   is a pointer to an internal array containing the string.  */"	declaration of inet_ntoa
"/* Extract the network number in network byte order from the address
   in numbers-and-dots natation starting at CP.  */"	declaration of inet_network
/* Return network number part of the Internet address IN.  */	declaration of inet_netof
"/* Make Internet host address in network byte order by combining the
   network number NET with the local address HOST.  */"	declaration of inet_makeaddr
/* Return the local host address part of the Internet address in IN.  */	declaration of inet_lnaof
"/* Convert Internet host address from numbers-and-dots notation in CP
   into binary data in network byte order.  */"	declaration of inet_addr
/* Type for length arguments in socket calls.  */	#ifndef __socklen_t_defined
"/* Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _ARPA_INET_H
/* sys/file.h  */	#endif
"/* Apply or remove an advisory lock, according to OPERATION,
   on the file FD refers to.  */"	declaration of flock
/* Don't block when locking.  */	#define LOCK_NB 4
/* Can be OR'd in to one of the above.  */	#define LOCK_NB 4
/* Atomic update.  */	#define __LOCK_ATOMIC 16
/* Unlock.  */	#define LOCK_UN 8
/* Exclusive lock.  */	#define LOCK_EX 2
/* Shared lock.  */	#define LOCK_SH 1
/* Operations for the `flock' call.  */	#define LOCK_SH 1
/* Seek from end of file.  */	#define L_XTND 2
/* Seek from current position.  */	#define L_INCR 1
/* Seek from beginning of file.  */	#define L_SET 0
"/* Alternate names for values for the WHENCE argument to `lseek'.
   These are the same as SEEK_SET, SEEK_CUR, and SEEK_END, respectively.  */"	#ifndef L_SET
"/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_FILE_H
/* !_UTF8_H_ */	#endif
/// successful, storing the result of the conversion in *out*.	declaration of wchar_to_utf8
/// successful, storing the result of the conversion in *out*.	declaration of utf8_to_wchar
/// successful, storing the result of the conversion in *result*.	declaration of wchar_to_utf8_string
// Implementation of UTF-8 charset encoding (RFC3629).	#ifndef _UTF8_H_
/* net/if.h */	#endif
/* Free the data returned from if_nameindex.  */	declaration of if_freenameindex
/* Return a list of all interfaces and their indices.  */	declaration of if_nameindex
/* Convert an interface name to an index, and vice versa.  */	declaration of if_indextoname
/* Convert an interface name to an index, and vice versa.  */	declaration of if_nametoindex
/* Misc.  */	#endif
/* not right */	#define _IOT_ifconf _IOT(_IOTS(struct ifconf),1,0,0,0,0)
/* Array of structures.  */	#define ifc_req ifc_ifcu.ifcu_req
/* Buffer address.  */	#define ifc_buf ifc_ifcu.ifcu_buf
/* Size of buffer.  */	definition of ifc_len
"/* Structure used in SIOCGIFCONF request.  Used to retrieve interface
   configuration for machine (useful for programs which must know all
   networks accessible).  */"	definition of ifconf
"/* New name		*/"	#define ifr_newname ifr_ifru.ifru_newname
"/* queue length		*/"	#define ifr_qlen ifr_ifru.ifru_ivalue
"/* link bandwidth	*/"	#define ifr_bandwidth ifr_ifru.ifru_ivalue
/* interface index      */	#define ifr_ifindex ifr_ifru.ifru_ivalue
"/* for use by interface	*/"	#define ifr_data ifr_ifru.ifru_data
"/* slave device		*/"	#define ifr_slave ifr_ifru.ifru_slave
"/* device map		*/"	#define ifr_map ifr_ifru.ifru_map
"/* mtu			*/"	#define ifr_mtu ifr_ifru.ifru_mtu
"/* metric		*/"	#define ifr_metric ifr_ifru.ifru_ivalue
"/* flags		*/"	#define ifr_flags ifr_ifru.ifru_flags
"/* interface net mask	*/"	#define ifr_netmask ifr_ifru.ifru_netmask
"/* broadcast address	*/"	#define ifr_broadaddr ifr_ifru.ifru_broadaddr
"/* other end of p-p lnk	*/"	#define ifr_dstaddr ifr_ifru.ifru_dstaddr
"/* address		*/"	#define ifr_addr ifr_ifru.ifru_addr
"/* MAC address 		*/"	#define ifr_hwaddr ifr_ifru.ifru_hwaddr
"/* interface name 	*/"	#define ifr_name ifr_ifrn.ifrn_name
/* Just fits the size */	definition of ifru_slave
"/* Interface name, e.g. ""en0"".  */"	definition of ifrn_name
"/* Interface request structure used for socket ioctl's.  All interface
   ioctl's must have parameter definitions which begin with ifr_name.
   The remainder may be interface specific.  */"	definition of ifreq
"/* Device mapping structure. I'd just gone off and designed a
   beautiful scheme using only loadable modules with arguments for
   driver options and along come the PCMCIA people 8)

   Ah well. The get() side of this is good for WDSETUP, and it'll be
   handy for debugging things. The set side is fine for now and being
   very small might be worth keeping for clean configuration.  */"	definition of ifmap
"/* other end of link	*/"	#define ifa_dstaddr ifa_ifu.ifu_dstaddr
"/* broadcast address	*/"	#define ifa_broadaddr ifa_ifu.ifu_broadaddr
/* Next address for interface.  */	definition of ifa_next
/* Back-pointer to interface.  */	definition of ifa_ifp
/* Address of interface.  */	definition of ifa_addr
"/* The ifaddr structure contains information about one address of an
   interface.  They are maintained by the different address families,
   are allocated and attached when an address is set, and are linked
   together so all addresses for an interface can be located.  */"	definition of ifaddr
/* Dialup device with changing addresses.  */	IFF_DYNAMIC
/* Auto media select active.  */	IFF_AUTOMEDIA
/* Can set media type.  */	IFF_PORTSEL
/* Supports multicast.  */	IFF_MULTICAST
/* Slave of a load balancer.  */	IFF_SLAVE
/* Master of a load balancer.  */	IFF_MASTER
/* Receive all multicast packets.  */	IFF_ALLMULTI
/* Not supported */	IFF_ALLMULTI
/* Receive all packets.  */	IFF_PROMISC
/* No address resolution protocol.  */	IFF_NOARP
/* Resources allocated.  */	IFF_RUNNING
/* Avoid use of trailers.  */	IFF_NOTRAILERS
/* Interface is point-to-point link.  */	IFF_POINTOPOINT
/* Is a loopback net.  */	IFF_LOOPBACK
/* Turn on debugging.  */	IFF_DEBUG
/* Broadcast address valid.  */	IFF_BROADCAST
/* Interface is up.  */	IFF_UP
/* Standard interface flags. */	definition of (unnamed enum)
"/* null terminated name: ""eth0"", ... */"	definition of if_name
/* 1, 2, ... */	definition of if_index
/* Length of interface name.  */	#define IF_NAMESIZE 16
"/* net/if.h -- declarations for inquiring about network interfaces
   Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _NET_IF_H
/// so does not need to be cached.	definition of default_named_pipe_path
// Default implementations.	definition of universal_notifier_t
// this class isn't valid on this system	#else
// lingering data on the pipe.	if (...) ... 
// No longer readable, no longer polling.	ExprStmt
// See if this is still readable.	declaration
// Check to see if we are doing readability polling.	if (...) ... 
// Read back what we wrote. We do nothing with the value.	while (...) ...
// Check if we are past the readback time.	if (...) ... 
// need to poll; in that case return 0.	declaration
// We're in polling mode. Don't return a value less than our polling interval.	ExprStmt
// Oops, it already passed! Return something tiny.	ExprStmt
// How long until the readback?	declaration
// Now schedule a read for some time in the future.	ExprStmt
// Very unsual: the pipe is full!	ExprStmt
//!OCLINT(constant cond op)	definition of pid_nbo
// it back. Nobody is expected to read it except us.	declaration
// up!)	do (...) ...
// We are not in polling mode. Return the fd so it can be watched.	return ...
// return it to be select()'d on, we'll be called back immediately. So don't return it.	return ...
// would cause us to hang!	declaration
// attempt to read data out of it (to render it no longer readable).	definition of universal_notifier_named_pipe_t
// this class isn't valid on this system	#else
// ourselves as non-blocking, so just read until we can't read any more.	#else
/// A notifyd-based notifier. Very straightforward.	definition of universal_notifier_notifyd_t
// this class isn't valid on this system	#else
// 3 times a second	#else
// fallback to a dummy value	ExprStmt
/// hostname; if that fails, pick something.	definition of get_machine_identifier
// the result.	declaration
/// Function to get an identifier based on the hostname.	definition of get_hostname_identifier
// Unsupported	#endif
// BSD, Mac OS X	#else
// Thanks to Jan Brittenson, http://lists.apple.com/archives/xcode-users/2009/May/msg00062.html	#ifdef SIOCGIFHWADDR
/// Length of a MAC address.	#define MAC_ADDRESS_MAX_LEN 6
/// Maximum length of hostname. Longer hostnames are truncated.	#define HOSTNAME_LEN 255
/// Parse message msg per fish 2.x format.	definition of parse_message_2x_internal
// Populate the variable with these flags.	if (...) ... 
// Skip this unknown flag, for future proofing.	while (...) ...
// Parse out flags.	declaration
/// Parse message msg per fish 3.0 format.	definition of parse_message_30_internal
// Parse out the key and write into the map.	ExprStmt
// For future formats, just try with the most recent one.	case ...:
// Skip empties and constants.	if (...) ... 
// Decide on the format.	declaration
// No version found, assume 2.x	return ...
// Unknown future version.	return ...
// Note scanf %s is max characters to write; add 1 for null terminator.	declaration
// Exhausted leading comments.	break;
// Walk over leading comments, looking for one like '# version'	declaration
/// \return the format corresponding to file contents \p s.	definition of format_for_contents
// Back up to a newline.	declaration
// Handle overlong files.	if (...) ... 
// Read everything from the fd. Put a sane limit on it.	declaration
// All of our modified variables have now been written out.	ExprStmt
// Clean up.	if (...) ... 
// Since we moved the new file into place, clear the path so we don't try to unlink it.	ExprStmt
// Apply new file.	ExprStmt
// don't change ctime	ExprStmt
// unlikely to affect users.	#if HAVE_CLOCK_GETTIME && HAVE_FUTIMENS
// Ensure we maintain ownership and permissions (#2176).	declaration
// Open adjacent temporary file.	declaration
// \return true on success, false on failure.	definition of save
// Read from it.	if (...) ... 
// Open the file.	if (...) ... 
// If we have no changes, just load.	if (...) ... 
// FIXME: Why don't we initialize()?	declaration
// with fire anyways.	if (...) ... 
// changes due to other processes on a false return).	definition of sync
// Oops, it changed! Try again.	ExprStmt
// while we were waiting for the lock. Make sure that didn't happen.	if (...) ... 
// case we pretend we succeeded. See the comment in save_to_path for the rationale.	if (...) ... 
// symbols have the same value but on BSD they're different.	#endif
// signaled; try again	continue;
// have something to lock on.	declaration
// do nothing per issue #2149	return ...
/// by the universal variable lock.	definition of lock_uvar_file
/// Returns false if it took too long else true.	definition of check_duration
//!OCLINT(multiple unary operator)	ExprStmt
// This should almost always succeed on the first try.	ExprStmt
// If we succeeded, we store the *default path*, not the legacy one.	if (...) ... 
// aren't present.	for(...:...) ...
// We failed to load, because the file was not found. Attempt to load from our legacy paths.	if (...) ... 
// Get the variables path; if there is none (e.g. HOME is bogus) it's hopeless.	declaration
// We don't close the file.	return ...
// Since we just wrote out this file, it matches our internal state; pretend we read from it.	ExprStmt
/// Writes our state to the fd. path is provided only for error reporting.	definition of write_to_fd
// variable; soldier on.	declaration
// Preserve legacy behavior by sorting the values first	declaration
/// Serialize the contents to a string.	definition of serialize_with_vars
// opening the file unnecessarily.	if (...) ... 
// Acquire the new variables.	ExprStmt
// Announce changes and update our exports generation.	ExprStmt
// save.	if (...) ... 
// Read a variables table from the file.	declaration
// Get the dev / inode.	declaration
// We have constructed all the callbacks and updated vars_to_acquire. Acquire it!	ExprStmt
// source entry in vars since we are about to get rid of this->vars entirely.	declaration
/* The value has been deleted. */	ExprStmt
// Copy modified values from existing vars to vars_to_acquire.	for(...:...) ...
// Value is set for the first time, or has changed.	ExprStmt
// See if the value has changed.	declaration
// Skip modified values.	if (...) ... 
// Construct callbacks for newly inserted or changed values.	for(...:...) ...
// If the value is not present in new_vars, it has been erased.	if (...) ... 
// Skip modified values.	if (...) ... 
// Construct callbacks for erased values.	for(...:...) ...
// new vars. Update our exports generation.	definition of generate_callbacks_and_update_exports
/// Decode a a list into a serialized universal variable value.	definition of encode_serialized
/// Decode a serialized universal variable value into a list.	definition of decode_serialized
/// This is 30, the ASCII record separator.	definition of UVAR_ARRAY_SEP
/// Encoding of a null string.	definition of ENV_NULL
// append to it.	if (...) ... 
// Append newline.	if (...) ... 
// Append value.	if (...) ... 
"// Append "":""."	if (...) ... 
"// Append variable name like ""fish_color_cwd""."	if (...) ... 
// Append flags.	if (...) ... 
// Append SETVAR header.	ExprStmt
// Record the length on entry, in case we need to back up.	declaration
/// Returns true on success. storage may be used for temporary storage, to avoid allocations.	definition of append_file_entry
/// Converts input to UTF-8 and appends it to receiver, using storage as temp storage.	definition of append_utf8
// See #1225 for discussion of use of ASCII_MAX here.	ExprStmt
/// Escape specified string.	definition of full_escape
/// The universal variable format has some funny escaping requirements; here we try to be safe.	definition of is_universal_safe_to_encode_directly
/// On success, updates the cursor to just past the command.	definition of match
// Paths used in 2.x.	ExprStmt
// A path used during fish 3.0 development.	ExprStmt
/// return a list of paths where the uvars file has been historically stored.	definition of get_legacy_paths
/// The different types of messages found in the fishd file.	definition of uvar_message_type_t
// Fields used in fish 3.0 uvars	fish3_uvars
// Fields used in fish 2.x uvars.	fish2x_uvars
// Maximum file size we'll read.	definition of k_max_read_size
/// Version for fish 3.0	"#define UVARS_VERSION_3_0 ""3.0"""
/// Small note about not editing ~/.fishd manually. Inserted at the top of all .fishd files.	"#define SAVE_MSG ""# This file contains fish universal variable definitions.\n"""
/// Error message.	"#define PARSE_ERR L""Unable to parse universal variable message: '%ls'"""
// Haiku	#endif
// IWYU pragma: keep	#endif
// If we have a filter, skip events that don't match.	if (...) ... 
/// Note we don't bother to sort this.	definition of event_type_name_t
// Fire events triggered by signals.	ExprStmt
// Beware, we are in a signal handler	ExprStmt
// Fire or re-block all events.	for(...:...) ...
// Append all signal events to to_send.	declaration
// Do not invoke new event handlers from within event handlers.	if (...) ... 
/// Handle all pending signal events.	definition of event_fire_delayed
// non-interactive.	declaration
// arguments.	declaration
// can we make this less silly?	if (...) ... 
// Iterate over our list of matching events. Fire the ones that are still present.	for(...:...) ...
// Check if this event is a match.	if (...) ... 
// Capture the event handlers that match this event.	declaration
// Suppress fish_trace during events.	declaration
/// allocated/initialized unless needed.	definition of event_fire_internal
// We are in a signal handler! Don't allocate memory, etc.	declaration
// In events, PGIDs are stored as negative PIDs	declaration
/// Test if specified event is blocked.	definition of event_is_blocked
/// Tests if one event instance matches the definition of a event class.	definition of handler_matches
/// Variables (one per signal) set when a signal is observed. This is inspected by a signal handler.	definition of s_observed_signals
/// List of event handlers.	definition of s_event_handlers
// set.	ExprStmt
// Check the counter first. If it hasn't changed, no signals have been received.	declaration
/// \return the list of signals that were set, clearing them.	definition of acquire_pending
// Must mark our received first, then pending.	ExprStmt
/// Also note that these may be coalesced.	definition of mark
/// No copying.	declaration of operator=
/// No copying.	declaration of pending_signals_t
/// This is not accessed from a signal handler.	definition of last_counter_
/// List of pending signals.	definition of received_
/// A counter that is incremented each time a pending signal is received.	definition of counter_
/* spawn.h */	#endif
"/* Add an action changing the directory to FD during spawn.  This
   affects the subsequent file actions.  FD is not duplicated and must
   be open when the file action is executed.  */"	declaration of posix_spawn_file_actions_addfchdir_np
"/* Add an action changing the directory to PATH during spawn.  This
   affects the subsequent file actions.  */"	declaration of posix_spawn_file_actions_addchdir_np
"/* Add an action to FILE-ACTIONS which tells the implementation to call
   `dup2' for the given file descriptors during the `spawn' call.  */"	declaration of posix_spawn_file_actions_adddup2
"/* Add an action to FILE-ACTIONS which tells the implementation to call
   `close' for the given file descriptor during the `spawn' call.  */"	declaration of posix_spawn_file_actions_addclose
"/* Add an action to FILE-ACTIONS which tells the implementation to call
   `open' for the given file during the `spawn' call.  */"	declaration of posix_spawn_file_actions_addopen
/* Free resources associated with FILE-ACTIONS.  */	declaration of posix_spawn_file_actions_destroy
/* Initialize data structure for file attribute for `spawn' call.  */	declaration of posix_spawn_file_actions_init
/* Store scheduling parameters in the attribute structure.  */	declaration of posix_spawnattr_setschedparam
/* Get scheduling parameters from the attribute structure.  */	declaration of posix_spawnattr_getschedparam
/* Store scheduling policy in the attribute structure.  */	declaration of posix_spawnattr_setschedpolicy
/* Get scheduling policy from the attribute structure.  */	declaration of posix_spawnattr_getschedpolicy
/* Store process group ID in the attribute structure.  */	declaration of posix_spawnattr_setpgroup
/* Get process group ID from the attribute structure.  */	declaration of posix_spawnattr_getpgroup
/* Store flags in the attribute structure.  */	declaration of posix_spawnattr_setflags
/* Get flag word from the attribute structure.  */	declaration of posix_spawnattr_getflags
/* Set signal mask for the new process in ATTR to SIGMASK.  */	declaration of posix_spawnattr_setsigmask
/* Store signal mask for the new process from ATTR in SIGMASK.  */	declaration of posix_spawnattr_getsigmask
/* Set signal mask for signals with default handling in ATTR to SIGDEFAULT.  */	declaration of posix_spawnattr_setsigdefault
"/* Store signal mask for signals with default handling from ATTR in
   SIGDEFAULT.  */"	declaration of posix_spawnattr_getsigdefault
/* Free resources associated with ATTR.  */	declaration of posix_spawnattr_destroy
/* Initialize data structure with attributes for `spawn' to default values.  */	declaration of posix_spawnattr_init
"/* Similar to `posix_spawn' but search for FILE in the PATH.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of posix_spawnp
"/* Spawn a new process executing PATH with the attributes describes in *ATTRP.
   Before running the process perform the actions described in FILE-ACTIONS.

   This function is a possible cancellation point and therefore not
   marked with __THROW. */"	declaration of posix_spawn
/* Flags to be set in the `posix_spawnattr_t'.  */	#define POSIX_SPAWN_RESETIDS 0x01
"/* Data structure to contain information about the actions to be
   performed in the new process with respect to file descriptors.  */"	definition of posix_spawn_file_actions_t
/* Data structure to contain attributes for thread creation.  */	definition of posix_spawnattr_t
"/* Definitions for POSIX spawn interface.
   Copyright (C) 2000-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SPAWN_H
/* _STL_STACK_H */	#endif
// namespace	#endif
// __cplusplus >= 201103L	#endif
// Constrained free swap overload, see p0185r1	#else
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
/// Based on operator<	definition of operator>=
/// Based on operator<	definition of operator<=
/// Based on operator<	definition of operator>
/// Based on operator==	definition of operator!=
"/**
   *  @brief  Stack ordering relation.
   *  @param  __x  A %stack.
   *  @param  __y  A %stack of the same type as @a x.
   *  @return  True iff @a x is lexicographically less than @a __y.
   *
   *  This is an total ordering relation.  Complexity and semantics
   *  depend on the underlying sequence type, but the expected rules
   *  are: this relation is linear in the size of the sequences, the
   *  elements must be comparable with @c <, and
   *  std::lexicographical_compare() is usually used to make the
   *  determination.
  */"	definition of operator<
"/**
   *  @brief  Stack equality comparison.
   *  @param  __x  A %stack.
   *  @param  __y  A %stack of the same type as @a __x.
   *  @return  True iff the size and elements of the stacks are equal.
   *
   *  This is an equivalence relation.  Complexity and semantics
   *  depend on the underlying sequence type, but the expected rules
   *  are: this relation is linear in the size of the sequences, and
   *  stacks are considered equivalent if their sequences compare
   *  equal.
  */"	definition of operator==
// c++1z or gnu++11	#if __cplusplus > 201402L || !defined(__STRICT_ANSI__)
"/**
       *  @brief  Removes first element.
       *
       *  This is a typical %stack operation.  It shrinks the %stack
       *  by one.  The time complexity of the operation depends on the
       *  underlying sequence.
       *
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Add data to the top of the %stack.
       *  @param  __x  Data to be added.
       *
       *  This is a typical %stack operation.  The function creates an
       *  element at the top of the %stack and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */"	#if __cplusplus >= 201103L
"/**
       *  @brief  Default constructor creates no elements.
       */"	#if __cplusplus < 201103L
// C++11	#endif
// C++17	#endif
// adaptors	#endif
// concept requirements	#if __cplusplus < 201103L
"/**
   *  @brief  A standard container giving FILO behavior.
   *
   *  @ingroup sequences
   *
   *  @tparam _Tp  Type of element.
   *  @tparam _Sequence  Type of underlying sequence, defaults to deque<_Tp>.
   *
   *  Meets many of the requirements of a
   *  <a href=""tables.html#65"">container</a>,
   *  but does not define anything to do with iterators.  Very few of the
   *  other standard container interfaces are defined.
   *
   *  This is not a true container, but an @e adaptor.  It holds
   *  another container, and provides a wrapper interface to that
   *  container.  The wrapper is what enforces strict
   *  first-in-last-out %stack behavior.
   *
   *  The second template parameter defines the type of the underlying
   *  sequence/container.  It defaults to std::deque, but it can be
   *  any type that supports @c back, @c push_back, and @c pop_back,
   *  such as std::list, std::vector, or an appropriate user-defined
   *  type.
   *
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c
   *  push, @c pop, and @c top, which are standard %stack/FILO
   *  operations.
  */"	definition of stack<_Tp, _Sequence>
"/** @file bits/stl_stack.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{stack}
 */"	#ifndef _STL_STACK_H
/* _GLIBCXX_STACK */	#endif
"/** @file include/stack
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_STACK
/// \return the pid, or none() on failure, in which case our error will be set.	declaration of spawn
/// \return the last error code, or 0 if there is no error.	definition of get_error
/// The caller must check the error function, as this may fail.	declaration of posix_spawner_t
/// A RAII type which wraps up posix_spawn's data structures.	definition of posix_spawner_t
/// Report an error from failing to exec or posix_spawn a command.	declaration of safe_report_exec_error
/// Call fork(), retrying on failure a few times.	declaration of execute_fork
/// On failure, signal handlers, io redirections and process group of the process is undefined.	declaration of child_setup_process
/// parent only.	declaration of report_setpgid_error
/// \return 0 on success, an errno error code on failure.	declaration of execute_setpgid
// cannot allocate memory, since we're insane enough to call fork from a multithreaded process.	#ifndef FISH_POSTFORK_H
// Prototypes for executing builtin_time function.	#ifndef FISH_TIMER_H
/// Convenience helper to trace a single string if tracing is enabled.	declaration of trace_if_enabled
/// \return whether tracing is enabled.	declaration of trace_enabled
/// If \p command is not null, it is traced first (and not escaped)	declaration of trace_argv
/// Support for fish_trace.	#ifndef FISH_TRACE_H
// Only return an error code if we should break expansion.	return ...
// be null.	declaration
/// of $status.	definition of exec_subshell_internal
// We're not splitting output, but we still want to trim off a trailing newline.	if (...) ... 
// If we hit a separator, skip over it; otherwise we're at the end.	ExprStmt
// Stop now points at the first character we do not want to copy.	ExprStmt
// If it's not found, just use the end.	ExprStmt
// Look for the next separator.	declaration
// Not explicitly separated. We have to split it explicitly.	ExprStmt
// Just append this one.	ExprStmt
// Walk over all the elements.	for(...:...) ...
/// Populate \p lst with the output of \p buffer, perhaps splitting lines according to \p split.	definition of populate_subshell_output
// Now execute any deferred process.	if (...) ... 
// output to the next process (if any).	declaration
//	declaration
// Get the deferred process, if any. We will have to remember its pipes.	declaration
// A false return tells the caller to remove the job from the list.	return ...
// In case of an successful exec, this code is not reached.	declaration
// If we are interactive, perhaps disallow exec if there are background jobs.	if (...) ... 
// Handle an exec call.	if (...) ... 
// Get the list of all FDs so we can ensure our pipes do not conflict.	declaration
// Check to see if we should reclaim the foreground pgrp after the job finishes or stops.	declaration
// If fish was invoked with -n or --no-execute, then no_exec will be set and we do nothing.	if (...) ... 
// code will kick in.	declaration
// If we're not interactive, we cannot warn.	if (...) ... 
// \return true if we should allow exec, false to disallow it.	definition of allow_exec_with_background_jobs
// No tail reordering for execs.	return ...
// By enumerating in reverse order, we can avoid walking the entire list	for(...;...;...) ...
"// Any such process (only one per job) will be called the ""deferred"" process."	definition of get_deferred_process
// We should have handled exec up above.	ExprStmt
// were already launched, so they are ready to receive (or reject) our output.	declaration
// Execute the process.	ExprStmt
// A simple `begin ... end` should not be considered an execution of a command.	ExprStmt
// If we have stashed pipes, make sure those get closed in the child.	for(...:...) ...
/* input */	ExprStmt
// Read pipe goes last.	declaration
// It's OK to abort here	return ...
// trying to resume execution without control of the terminal.	if (...) ... 
// This may fail.	if (...) ... 
// The IO chain for this process.	declaration
// TODO: 'and' and 'or' will not show.	if (...) ... 
/// certain buffering works. \returns true on success, false on exec error.	definition of exec_process_in_job
/* errdata */	return ...
// claimed it (background write) or another process has inherited it.	ExprStmt
// If we have a block output buffer, populate it now.	declaration
// its captured io chain.	if (...) ... 
// Teach the job about its bufferfill, and add it to our io chain.	ExprStmt
// Be careful to handle failure, e.g. too many open fds.	ExprStmt
// Create an output buffer if we're piping to another process.	declaration
/// \return true on success, false on error.	definition of exec_block_or_func_process
// We want to capture the job group.	declaration
// properties.	definition of get_performer_for_process
// This is factored out in this funny way in preparation for concurrent execution.	declaration of proc_performer_t
// If we returned due to a return statement, then stop returning now.	ExprStmt
// Given that we are done executing a function, restore the environment.	definition of function_restore_environment
// 3. argv	declaration
// Extract and remove the function name from argv.	ExprStmt
// Extract the function name and remaining arguments.	declaration
// variable environment.	definition of function_prepare_environment
/* is parent */	ExprStmt
// Ensure it gets set. See #4715, also https://github.com/Microsoft/WSL/issues/2997.	ExprStmt
// these are all things do_fork() takes care of normally (for forked processes):	ExprStmt
// usleep(10000);	do (...) ...
// spawn counts as a fork+exec	ExprStmt
// Prefer to use posix_spawn, since it's faster on some systems like OS X.	declaration
// (/dev/tty?).	ExprStmt
// Convert our IO chain to a dup2 sequence.	declaration
// Get argv and envv before we fork.	declaration
/// \return true on success, false if there is an exec error.	definition of exec_external_command
// Some historical behavior.	if (...) ... 
// Clear the buffers to indicate we finished.	ExprStmt
// workaround glibc bug	ExprStmt
// If we have no redirections for stdout/stderr, just write them directly.	if (...) ... 
// Figure out any data remaining to write. We may have none in which case we can short-circuit.	declaration
// need for a similar check for stderr.	declaration
// Mark if we discarded output.	if (...) ... 
/// given in io_chain.	definition of handle_builtin_output
"// ""success"""	return ...
// Note this call may block for a long time, while the builtin performs I/O.	ExprStmt
// Set up our streams.	ExprStmt
// Pull out the IOs for stdout and stderr.	declaration
// that's not io_mode_t::close.	for(...:...) ...
// We must have a pipe	ExprStmt
// and therefore this is not an error.	declaration
// be reading from.	if (...) ... 
/// \return true on success, false if there is an exec error.	definition of exec_internal_builtin_proc
/* is parent */	definition of err
// EACCESS is an expected benign error as the child may have called exec().	if (...) ... 
// possibly give it control over the terminal.	ExprStmt
/* not parent */	definition of err
// The child attempts to join the pgroup.	if (...) ... 
// stdout and stderr, and then exit.	ExprStmt
/// context of the child. Returns true if fork succeeded, false if fork failed.	definition of fork_child_for_process
// Block some signals in background jobs for which job control is turned off (#6828).	if (...) ... 
/// Otherwise, run an internal process.	definition of run_internal_process_or_short_circuit
// builtin_run provide this directly, rather than setting it in the process.	ExprStmt
// Ensure that ios stays alive, it may own fds.	ExprStmt
// TODO: support eliding output to /dev/null.	if (...) ... 
// successfully.	ExprStmt
// list resolution will ensure this happens.	ExprStmt
// Construct and assign the internal process to the real process.	ExprStmt
// Construct a little helper struct to make it simpler to move into our closure without copying.	declaration
/// process.	definition of run_internal_process
/// \returns the job's pgid, which should always be set to something valid after this call.	definition of maybe_assign_pgid_from_child
// launch_process _never_ returns.	ExprStmt
"// Decrement SHLVL as we're removing ourselves from the shell ""stack""."	declaration
// child_setup_process makes sure signals are properly set up.	declaration
// Do a regular launch -  but without forking first...	declaration
// posix_spawn.	return ...
// process group ID. But will it be foregrounded?	if (...) ... 
//!OCLINT(collapsible if statements)	{ ... }
// posix_spawn in this case; instead we'll call fork() and clear the CLO_EXEC bit manually.	for(...:...) ...
// we use fork(), we can call tcsetpgrp after the fork, before the exec, and avoid the race).	definition of can_use_posix_spawn_for_job
// Bounce to launch_process. This never returns.	ExprStmt
// Ensure the terminal modes are what they were before we changed them.	ExprStmt
/// calls exec) and therefore it can allocate memory.	definition of launch_process_nofork
// somehow.	declaration
// immediately closed.	declaration
// This function never returns, so we take certain liberties with constness.	declaration
/// specified in \c p. It never returns. Called in a forked child! Do not allocate memory, etc.	definition of safe_launch_process
/// Number of calls to fork() or posix_spawn().	definition of s_fork_count
// remaining arguments escaped.	declaration
// Escape backslashes and single quotes only.	if (...) ... 
"// ""I came like Water, and like Wind I go."""	definition of escape_single_quoted_hack_hack_hack_hack
// The first completion is the command, any remaning are arguments.	declaration
// Fast path.	if (...) ... 
// namespace	definition of expand_string
// Hack to un-expand tildes (see #647).	if (...) ... 
// wildcard. So swallow failed-wildcard errors if we got any output.	if (...) ... 
// Output becomes our next stage's input.	ExprStmt
// Load up our single initial completion.	declaration
// Our expansion stages.	declaration
// Early out. If we're not completing, and there's no magic in the input, we're done.	if (...) ... 
// completion on the floor.	if (...) ... 
// implies just the current directory, while an empty PATH is left empty.	declaration
// PATH.	if (...) ... 
// Common case.	ExprStmt
// which may be CDPATH if the special flag is set.	declaration
/* internal, i.e. ANY_STRING */	definition of has_wildcard
// strings from the commandline.	declaration
/* intentionally falls through */	case ...:
/// completions by reference. It may return an error, which halts expansion.	declaration of stage_t
/// List to receive any errors generated during expansion, or null to ignore errors.	definition of errors
/// Flags to use during expansion.	definition of flags
/// Operation context for this expansion.	definition of ctx
/// A type that knows how to perform expansions.	definition of expander_t
// we ignore all other characters	break;
// ANY_STRING_RECURSIVE with '*'.	if (...) ... 
// Remove all instances of INTERNAL_SEPARATOR.	ExprStmt
/// equivalents. This is done to support skip_wildcards.	definition of remove_internal_separator
// Success	ExprStmt
// Now check if the home_directory prefixes the string.	if (...) ... 
// Only absolute paths get this treatment.	declaration
// be smart about case insensitivity, etc.	definition of replace_home_directory_with_tilde
// And mark that our tilde is literal, so it doesn't try to escape it.	ExprStmt
// Now for each completion that starts with home, replace it with the username_with_tilde.	for(...:...) ...
// Expand username_with_tilde.	declaration
// with the tilde. If it does not, there's nothing to do.	if (...) ... 
// Avoid needless COW behavior by ensuring we use const at.	declaration
/// Expand the %self escape. Note this can only come at the beginning of the string.	definition of expand_percent_self
// Some other user's home directory.	declaration
// Current users home directory.	declaration
/// Attempts tilde expansion of the string specified, modifying it in place.	definition of expand_home_directory
// We get the position of the /, but we need to remove it as well.	if (...) ... 
// remaining part of the string (e.g. the subsequent slash).	definition of get_home_directory_name
// expansion.	for(...:...) ...
// recursive call using the tail of the string is inserted into the tail_expand array list	declaration
// -1 to convert from 1-based slice index to C++ 0-based vector index.	ExprStmt
// Expand slices like (cat /var/words)[1]	declaration
// TODO: Ad-hoc switch, how can we enumerate the possible errors more safely?	declaration
/// \p out_list, or any errors into \p errors. \return an expand result.	definition of expand_cmdsubst
// Note: this code looks very fishy, apparently it has never worked.	return ...
// that.	declaration
// we ignore all other characters here	break;
// Locate the first non-nested brace pair.	for(...;...;...) ...
/// Perform brace expansion, placing the expanded strings into \p out.	definition of expand_braces
// Normal cartesian-product expansion.	for(...:...) ...
// Append all entries in var_item_list, separated by the delimiter.	ExprStmt
// First expansion is empty, but we need to recursively expand.	ExprStmt
// Note history always has a space delimiter.	declaration
// Note we are 1-based.	if (...) ... 
// Note this may have missing entries for out-of-bounds.	declaration
// We have to respect the slice.	if (...) ... 
// Start by respecting the sliced elements.	ExprStmt
// Replace the variable name and slice with VARIABLE_EXPAND_EMPTY.	declaration
// Normal expansions of missing variables successfully expand to nothing.	return ...
// Expanding a non-existent variable.	if (...) ... 
// works.	declaration
// web_config).	if (...) ... 
// this way (it cannot be shadowed, etc).	declaration
// Get the variable name as a string, then try to get the variable from env.	declaration
/* global_token_pos */	ExprStmt
// It's an error if the name is empty.	if (...) ... 
// Get the variable name.	declaration
// No variable expand char, we're done.	ExprStmt
// Locate the last VARIABLE_EXPAND or VARIABLE_EXPAND_SINGLE	declaration
// last_idx may be 1 past the end of the string, but no further.	ExprStmt
/// as last_idx instead of string.size()-1.	definition of expand_variables
"// FLOGF(error, L""Expand range [subst]: %i\n"", jjj);"	ExprStmt
"// - otherwise ""2..-1"" clamps both to 1 and then becomes ""1..1""."	ExprStmt
// Prevents `[x..-1]` from going reverse if less than x elements are there.	if (...) ... 
"// This means ""17..18"" expands to nothing if there are less than 17 elements."	if (...) ... 
// Ignore the case of errno==-1 because it means the end char wasn't the null char.	if (...) ... 
// last index	ExprStmt
// range spans until the last item.	if (...) ... 
"// Allow the space in ""[.. ]""."	ExprStmt
// char.	return ...
// first index	ExprStmt
// at the first item.	ExprStmt
// to fish avoid a common off-by-one error. See #4862.	if (...) ... 
// skip past the opening square brace	definition of pos
/// with [.	definition of parse_slice
/// string.	definition of is_quotable
/// could consequently be recorded more than once.	definition of append_cmdsub_error
/// Append a syntax error to the given error list.	definition of append_syntax_error
/// \param in the string to test	definition of expand_is_clean
/// Unclean characters. See \c expand_is_clean().	"#define UNCLEAN L""$*?\\\""'({})"""
/// expand_is_clean().	"#define UNCLEAN_FIRST L""~%"""
// proc.h needs to be included *after* time.h, this comment stops clang-format from reordering.	#else
/* libintl.h */	#endif
/* Optimizing.  */	#endif
"/* These must be macros.  Inlined functions are useless because the
   `__builtin_constant_p' predicate in dcgettext would always return
   false.  */"	#endif
/* Optimized version of the function above.  */	#if defined __OPTIMIZE__ && !defined __cplusplus
"/* Specify the character encoding in which the messages from the
   DOMAINNAME message catalog will be returned.  */"	declaration of bind_textdomain_codeset
"/* Specify that the DOMAINNAME message catalog will be found
   in DIRNAME rather than in the system locale data base.  */"	declaration of bindtextdomain
"/* Set the current default message catalog to DOMAINNAME.
   If DOMAINNAME is null, return the current default.
   If DOMAINNAME is """", reset to the default of ""messages"".  */"	declaration of textdomain
"/* Similar to `dcgettext' but select the plural form corresponding to the
   number N.  */"	declaration of dcngettext
"/* Similar to `dgettext' but select the plural form corresponding to the
   number N.  */"	declaration of dngettext
"/* Similar to `gettext' but select the plural form corresponding to the
   number N.  */"	declaration of ngettext
"/* Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY
   locale.  */"	declaration of dcgettext
"/* Look up MSGID in the DOMAINNAME message catalog for the current
   LC_MESSAGES locale.  */"	declaration of dgettext
"/* Look up MSGID in the current default message catalog for the current
   LC_MESSAGES locale.  If not found, returns MSGID itself (the default
   text).  */"	declaration of gettext
"/* Provide information about the supported file formats.  Returns the
   maximum minor revision number supported for a given major revision.  */"	#define __GNU_GETTEXT_SUPPORTED_REVISION(major) ((major) == 0 ? 1 : -1)
"/* We define an additional symbol to signal that we use the GNU
   implementation of gettext.  */"	#define __USE_GNU_GETTEXT 1
"/* Message catalogs for internationalization.
   Copyright (C) 1995-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.
   This file is derived from the file libgettext.h in the GNU gettext package.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _LIBINTL_H
// WIDECHAR_WIDTH_H	#endif
// namespace	#endif
/* Return the width of character c, or a special negative value. */	definition of widechar_wcwidth
/* Characters that were widened from with 1 to 2 in Unicode 9. */	definition of widechar_widened_table
/* Unassigned characters. */	definition of widechar_unassigned_table
/* Ambiguous-width characters. */	definition of widechar_ambiguous_table
/* Width.2 characters. */	definition of widechar_doublewide_table
/* Width 0 combining marks. */	definition of widechar_combining_table
/* Nonprinting characters. */	definition of widechar_nonprint_table
/* Private usage range. */	definition of widechar_private_table
/* Simple ASCII characters - used a lot, so we check them first. */	definition of widechar_ascii_table
/* An inclusive range of characters. */	definition of widechar_range
// Width is 1 in Unicode 8, 2 in Unicode 9+.	widechar_widened_in_9
// The character is unassigned.	widechar_unassigned
// The character is for private use.	widechar_private_use
// The character is East-Asian ambiguous width.	widechar_ambiguous
// The character is a zero-width combiner.	widechar_combining
// The character is not printable.	widechar_nonprint
/* Special width values */	definition of (unnamed enum)
"/**
 * widechar_width.h, generated on 2020-01-30.
 * See https://github.com/ridiculousfish/widecharwidth/
 *
 * SHA1 file hashes:
 *  UnicodeData.txt:     dc973c0fc93d6f09d9ab9f70d1c9f89c447f0526
 *  EastAsianWidth.txt:  0a02c7d91d0af68b7608a5bccc71ee6a81d19277
 *  emoji-data.txt:      11fd60a01e17df80035c459728350073cd9ed37b
 */"	#ifndef WIDECHAR_WIDTH_H
// defined(wcstod_l)	#endif
// thread-specific locale.	#endif
// HAVE_FLOCK	#endif
"/*
 * Emulate flock() with fcntl().
 */"	#endif
"// TR11: ""All private-use characters are by default classified as Ambiguous""."	return ...
// Fall back to system wcwidth in this case.	return ...
// VS15 selects text presentation.	declaration
// or ttys. Use it from the start only if we are logged in to the physical console.	if (...) ... 
// back to wcwidth(), it's hopeless.	if (...) ... 
// 1 is the typical emoji width in Unicode 8.	definition of g_guessed_fish_emoji_width
// Width of emoji characters.	definition of g_fish_emoji_width
// Width of ambiguous characters. 1 is typical default.	definition of g_fish_ambiguous_width
// count does not include NUL	return ...
// ignore rest of src	;
// NUL-terminate dst	ExprStmt
// Not enough room in dst, add NUL and traverse rest of src.	if (...) ... 
// Copy as many bytes as will fit.	if (...) ... 
"/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */"	definition of wcslcpy
// cppcheck-suppress unusedFunction	definition of wcsdup_fallback
// null check because mkostemp may be a weak symbol	if (...) ... 
// Re-defining just to make sure nothing breaks further down in this file.	#endif
// IWYU pragma: keep	#elif HAVE_NCURSES_CURSES_H
/// The write end of our self-pipe.	definition of notify_write_fd_
/// Whether the thread is running.	definition of running
/// Pending items.	definition of pending
// in the destructor and so should terminate.	definition of terminate_
// Set to true by the background thread when our self-pipe becomes readable.	definition of has_pending_
// The list of items to monitor. This is only accessed on the background thread.	definition of items_
// \return true if we should start the thread.	declaration of add_pending_get_start_thread
// The background thread runner.	declaration of run_in_background
/// Add an item to monitor.	declaration of add
/// per-item-configurable timeouts are hit.	definition of fd_monitor_t
// \return true to retain the item, false to remove it.	declaration of service_item
// A 0 return means we are at or past the timeout.	declaration of usec_remaining
// The last time we were called, or the initialization point.	definition of last_time
// Fields and methods for the private use of fd_monitor_t.	declaration of time_point_t
/// Construct from a file, callback, and optional timeout.	definition of fd_monitor_item_t
/// 0 timeouts are unsupported.	definition of timeout_usec
/// If the fd is invalid on return from the function, then the item is removed.	definition of callback
/// The fd to monitor.	definition of fd
/// A sentinel value meaning no timeout.	definition of kNoTimeout
/// It will be invoked when either \p fd is readable, or if the timeout was hit.	declaration of callback_t
/// and invoke the callback.	definition of fd_monitor_item_t
// items being added.	ExprStmt
// Move from 'pending' to 'items'.	ExprStmt
// lap, in which case we might want to commit to exiting.	if (...) ... 
// Time to go.	ExprStmt
// so.	ExprStmt
// A predicate which services each item in turn, returning true if it should be removed.	declaration
// Surprising error.	ExprStmt
// Call select().	declaration
// We refer to this as the wait-lap.	declaration
// If the usec count is kNoTimeout, return nullptr.	definition of usec_to_tv_or_null
// Tickle our notifier.	declaration
// In fish shell, we never invoke the dtor so it doesn't matter that this is very dumb.	definition of ~fd_monitor_t
// Read some to take data off of the notifier.	ExprStmt
// want to yet.	declaration
// Ensure the write side is nonblocking to avoid deadlock.	ExprStmt
/* getopt_ext.h */	#endif
/* Names for the values of the 'has_arg' field of 'struct option'.  */	#define no_argument 0
"/* has_arg can't be an enum because some compilers complain about
     type mismatches in all the code that assumes it is an int.  */"	definition of has_arg
"/* Describe the long-named options requested by the application.
   The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector
   of 'struct option' terminated by an element containing a name which is
   zero.

   The field 'has_arg' is:
   no_argument		(or 0) if the option does not take an argument,
   required_argument	(or 1) if the option requires an argument,
   optional_argument 	(or 2) if the option takes an optional argument.

   If the field 'flag' is not NULL, it points to a variable that is set
   to the value given in the field 'val' when the option is found, but
   left unchanged if the option is not found.

   To have a long-named option do something other than set an 'int' to
   a compiled-in constant, such as set a value from 'optarg', set the
   option's 'flag' field to zero and its 'val' field to a nonzero
   value (the equivalent single-letter option character, if there is
   one).  For long options that have a zero 'flag' field, 'getopt'
   returns the contents of the 'val' field.  */"	definition of option
"/* Declarations for getopt (GNU extensions).
   Copyright (C) 1989-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library and is also part of gnulib.
   Patches to this file should be submitted to both projects.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _GETOPT_EXT_H
/* getopt.h */	#endif
"/* The type of the 'argv' argument to getopt_long and getopt_long_only
   is properly 'char **', since both functions may write to the array
   (in order to move all the options to the beginning).  However, for
   compatibility with old versions of LSB, glibc has to use 'char *const *'
   instead.  */"	#ifndef __getopt_argv_const
"/* Declarations for getopt.
   Copyright (C) 1989-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.
   Unlike the bulk of the getopt implementation, this file is NOT part
   of gnulib; gnulib also has a getopt.h but it is different.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _GETOPT_H
// above line should always exit	return ...
// Trigger any exit handlers.	declaration
// Implicitly interactive mode.	ExprStmt
// Do something nasty to support OpenSUSE assuming we're bash. This may modify cmds.	ExprStmt
// Run the commands specified as arguments, if any.	if (...) ... 
// Run post-config commands specified as arguments, if any.	if (...) ... 
// Stomp the exit status of any initialization commands (issue #635).	ExprStmt
// command line takes precedence).	if (...) ... 
// Apply our options.	if (...) ... 
// No-exec is prohibited when in interactive mode.	if (...) ... 
// Direct any debug output right away.	declaration
//!OCLINT(parameter reassignment)	ExprStmt
//!OCLINT(parameter reassignment)	ExprStmt
"// stat(""----------FISH_HIT_MAIN----------"", &tmp);"	declaration
// --interactive options also force interactive mode.	if (...) ... 
// If our command name begins with a dash that implies we're a login shell.	ExprStmt
// We assume getopt_long() has already emitted a diagnostic msg.	ExprStmt
// Negating the name width left-justifies.	ExprStmt
// A little extra space.	ExprStmt
// Compute width of longest name.	declaration
/// Parse the argument list, return the index of the first non-flag arguments.	definition of fish_parse_opt
// to load.	declaration
/// Parse init files. exec_path is the path of fish executable as determined by argv[0].	definition of read_init
// this context so we ignore it.	declaration
// Source the file config.fish in the given directory.	definition of source_config_in_directory
// Fall back to what got compiled in.	do (...) ...
// The docs dir may not exist; in that case fall back to the compiled in path.	if (...) ... 
// directories separately.	declaration
// The next check is that we are in a reloctable directory tree	declaration
// Detect if we're running right out of the CMAKE build directory	if (...) ... 
// TODO: we should determine program_name from argv0 somewhere in this file	#ifdef CMAKE_BINARY_DIR
/// otherwise.	definition of get_realpath
// Everyone else uses KB.	declaration
// Macs use bytes.	#else
// microseconds per millisecond	ExprStmt
// milliseconds per second	definition of msec
/// \return a timeval converted to milliseconds.	definition of tv_to_msec
/// If we are doing profiling, the filename to output to.	definition of s_profiling_output_filename
/// Whether to enable private mode.	definition of enable_private_mode
/// Whether this is an interactive session.	definition of is_interactive_session
/// Whether this is a login shell.	definition of is_login
/// Whether no-exec is set.	definition of no_exec
/// Whether to print rusage-self stats after execution.	definition of print_rusage_self
// Commands to execute after the shell's config has been read.	definition of postconfig_cmds
// Commands to be executed in place of interactive shell.	definition of batch_cmds
// File path for debug output.	definition of debug_output
// Future feature flags values string	definition of features
// container to hold the options specified within the command line	definition of fish_cmd_opts_t
/// Print help message for the specified command.	declaration of print_help
// Print help message for the specified command.	#ifndef FISH_PRINT_HELP_H
// Maybe colorize.	declaration
// We assume getopt_long() has already emitted a diagnostic msg.	ExprStmt
// Types of output we support.	declaration
"// (e.g., ""# -*- coding: <encoding-name> -*-"")."	ExprStmt
// Handle text.	declaration
// Handle colors.	declaration
/// for the various colors.	definition of html_class_name_for_color
// Entry point for prettification.	definition of prettify
// Now render these to a string.	declaration
// We need a new range.	ExprStmt
// See if we can extend the last range.	if (...) ... 
// 3,7,command	definition of make_pygments_csv
// namespace	definition of highlight_role_to_string
// The flags we use to parse.	definition of parse_flags
// 'begin' does not require a newline after it, but we insert one.	ExprStmt
// Treat it as gap text.	if (...) ... 
// No space between a redirection operator and its target (#2899).	ExprStmt
// If it was a semi but we emitted a newline, swallow a subsequent newline.	if (...) ... 
// Don't emit anything if the gap text put us on a newline (because it had a comment).	if (...) ... 
// Check if we should prefer a semicolon.	declaration
// Leaf nodes we just visit their text.	definition of visit
// For branch and list nodes, default is to visit their children.	definition of visit
// Emit a semicolon.	definition of emit_semi
// Emit one newline.	definition of emit_newline
// lines.	definition of emit_text
// people feel more at ease.	declaration
// Remove INTERNAL_SEPARATOR because that's a quote.	declaration
// like \U or \x, because we want to leave them intact.	declaration
/// Given a string \p input, remove unnecessary quotes, etc.	definition of clean_text
// Always clear gap_text_mask_newline after emitting even empty gap text.	ExprStmt
// We don't want to mess with the quote.	if (...) ... 
// Emit the gap text before a source range.	definition of emit_gap_text_before
/// \return whether a range \p r overlaps an error range from our ast.	definition of range_contained_error
// Not found.	return ...
/// \return the gap text ending at a given index into the string, or empty if none.	definition of gap_text_to
// Newlines are preserved unless mask_newline is set.	if (...) ... 
// We only respect mask_newline the first time through the loop.	ExprStmt
// always emit one.	declaration
// Emit a space before the escaped newline.	if (...) ... 
// Common case: if we are only spaces, do nothing.	if (...) ... 
//  We do not handle errors here - instead our caller does.	definition of emit_gap_text
// Emit a space or indent as necessary, depending on the previous output.	definition of emit_space_or_indent
// We're going to allow the previous semi_nl to be a semi.	ExprStmt
// Is this an 'and' or 'or' job?	if (...) ... 
// Set up prev_job_semi_nl for the next iteration to make control flow easier.	declaration
// `x ; and y` gets semis if it has them already, and they are on the same line.	for(...:...) ...
// See if we have a condition and an andor_job_list.	declaration
// andor_job_lists get semis if they are short enough.	for(...:...) ...
// Return sorted list of semi-preferring semi_nl nodes.	definition of compute_preferred_semi_locations
// For each range, add a gap range between the previous range and this range.	declaration
// Our tokens should be sorted.	ExprStmt
// Place a zero length range at end to aid in our inverting.	ExprStmt
// Collect the token ranges into a list.	declaration
// Return the gap ranges from our ast.	definition of compute_gaps
// \return a substring of source.	definition of substr
// Replace all trailing newlines with just a single one.	while (...) ...
// Trailing gap text.	ExprStmt
// Entry point. Prettify our source code and return it.	definition of prettify
// Not escaped.	return ...
// TODO: this is too tricky, we should factor this better.	while (...) ...
// This ignores escaped spaces and escaped newlines.	definition of has_preceding_space
// \return whether we are at the start of a new line.	definition of at_line_start
// Allow escaped newlines before && and ||, and also pipes.	switch (...) ... 
// Allow escaped newlines in argument and redirection lists.	case ...:
// \return gap text flags for the gap text that comes *before* a given node type.	definition of gap_text_flags_before_node
// No space required between 'a' and ';', or 'b' and ';'.	skip_space
// If this is not set, then split-lines will be joined.	allow_escaped_newlines
// Flags we support.	declaration of gap_flags_t
// This is computed ahead of time for convenience.	definition of preferred_semi_locations
// present in the ast.	definition of gaps
// Whether the next gap text should hide the first newline.	definition of gap_text_mask_newline
// Whether to indent, or just insert spaces.	definition of do_indent
// The indent of the source range which we are currently emitting.	definition of current_indent
// The prettifier output.	definition of output
// The parsed ast.	definition of ast
// This has the same length as 'source' and describes the indentation level.	definition of indents
// Original source.	definition of source
// certain runs, weight line breaks, have a cost model, etc.	definition of pretty_printer_t
/// A character is escaped if it has an odd number of backslashes.	definition of char_is_escaped
"/// \p idx may be ""one past the end."""	definition of count_preceding_backslashes
/// From C++14.	definition of enable_if_t
// for printing the warning, and seeks forward 1 byte.	definition of ch
// Illegal byte sequence. Try to skip past it.	ExprStmt
// Read the entire contents of a file into the specified string.	definition of read_file
// See discussion at https://github.com/fish-shell/fish-shell/pull/6790	#define SPACES_PER_INDENT 4
// above should exit	return ...
// We assume getopt_long() has already emitted a diagnostic msg.	ExprStmt
// in fish-proper this is done once a command is run.	ExprStmt
/// Setup our environment (e.g., tty modes), process key strokes, then reset the environment.	definition of setup_and_process_keys
// this key (nul) elsewhere.	if (...) ... 
/// Process the characters we receive as the user presses keys.	definition of process_input
// How much time has passed since the previous char was received in microseconds.	declaration
// Non-BMP Unicode chararacter	{ ... }
// BMP Unicode chararacter	{ ... }
// ASCII characters that are not control characters	{ ... }
"// the ""del"" character"	{ ... }
"// the ""space"" character"	{ ... }
// ASCII control character	{ ... }
/// requires that the returned string be used before we are called again.	definition of char_to_symbol
/// a `bind` command.	definition of must_escape
// Check all nonempty substrings extending to the end.	for(...;...;...) ...
// Terminfo sequences are always ASCII.	ExprStmt
/// Return the name if the recent sequence of characters matches a known terminfo sequence.	definition of sequence_name
/// Return true if the recent sequence of characters indicates the user wants to exit the program.	definition of should_exit
/// Description of what this does.	definition of desc
/// Function to invoke.	definition of func
/// The argument to match against.	definition of arg
/// A thing that fish_test_helper can do.	definition of fth_command_t
// NetBSD taps out at 63, Linux at 64.	for(...;...;...) ...
//.5 secs	ExprStmt
// On some systems getpid is a long, on others it's an int, let's just cast it.	ExprStmt
//.25 secs	ExprStmt
// SIGINT the parent after a time, then exit	declaration
//.25 secs	ExprStmt
/// Return fish shell version.	definition of get_fish_version
// Normalize underscores to dashes, allowing the user to be sloppy.	declaration
/// For each category, if its name matches the wildcard, set its enabled to the given sense.	definition of apply_one_wildcard
// So construct a narrow string in-place and output that via wide functions.	declaration
// See #5900.	ExprStmt
/// This is deliberately leaked to avoid pointless destructor registration.	definition of g_instance
/// When a category is instantiated it adds itself to the 'all' list.	definition of category_t
/// This is not modified after initialization.	definition of s_all_categories
// infrequently.	declaration
// Maybe skip hidden.	if (...) ... 
// TODO: rationalize if this behavior is desired.	ExprStmt
// No such function.	return ...
// Prevent (re-)autoloading this function.	ExprStmt
// Check if we either have the function, or it could be autoloaded.	return ...
// Create and store a new function.	declaration
// Check if this is a function that we are autoloading.	declaration
// Remove the old function.	ExprStmt
// Historical check. TODO: rationalize this.	if (...) ... 
// TODO: justfy this.	declaration
/// Insert a list of all dynamically loaded functions into the specified list.	definition of autoload_names
// Crucially, the lock is acquired *after* do_autoload_file_at_path().	ExprStmt
// Release the lock and perform any autoload, then reacquire the lock and clean up.	if (...) ... 
// Lock around a local region.	{ ... }
/// Note this executes fish script code.	definition of try_autoload
// tombstoned.	declaration
/// The big set of all functions.	definition of function_set
/// \return true if we should allow autoloading a given function.	declaration of allow_autoload
/// Get the info for a function, or nullptr if none.	definition of get_info
/// \return true if successful, false if it doesn't exist.	declaration of remove
/// The autoloader for our functions.	definition of autoloader
/// Tombstones for functions that should no longer be autoloaded.	definition of autoload_tombstones
/// The map of all functions by name.	definition of funcs
/// There's only one of these; it's managed by a lock.	definition of function_set_t
/// Flag for specifying that this function was automatically loaded.	definition of is_autoload
/// File where this function was defined (intern'd string).	definition of definition_file
/// Function description. This may be changed after the function is created.	definition of description
/// Immutable properties of the function.	definition of props
// IWYU pragma: keep	definition of function_info_t
// The special name 'all' may be used for those who like to live on the edge.	if (...) ... 
"// std::wcslen(L""no-"")"	ExprStmt
"// A ""no-"" prefix inverts the sense."	if (...) ... 
/// The set of features applying to this instance.	definition of global_features
// Highlight matching parenthesis.	declaration
// we ignore all other characters	break;
// Highlight matching quotes.	if (...) ... 
/// Perform quote and parenthesis highlighting on the specified string.	definition of highlight_universal_internal
/* no IO allowed */	definition of highlighter
/* can do IO */	definition of highlighter
/// representing the colors.	definition of colorize
// trying to cd into a non-directory would show an underline and also red.	for(...;...;...) ...
// Underline every valid path.	if (...) ... 
// Color every error range.	for(...:...) ...
// Color every extra semi.	for(...:...) ...
// If we are doing I/O, we must be in a background thread.	if (...) ... 
// Return what we got.	return ...
// Builtins	if (...) ... 
// Determine which types we check, based on the decoration.	declaration
/// Determine if a command is valid.	definition of command_is_valid
// ENOTDIR.	ExprStmt
// directory.	if (...) ... 
// File does not exist. Check if its parent directory is writable.	declaration
// permission.	ExprStmt
// allowed.	ExprStmt
// creating it). access() returns failure if the file does not exist.	declaration
// Input redirections must have a readable non-directory.	declaration
// redirections). Note that the target is now unescaped.	declaration
// Could not be expanded.	ExprStmt
// errors. Assume it's valid.	ExprStmt
// disallow redirections into a non-existent directory.	declaration
// even though it's a command redirection, and don't try to do any other validation.	if (...) ... 
// Color the operator part like 2>.	ExprStmt
// If so, color the whole thing invalid and stop.	if (...) ... 
// like &1 or file path	definition of target
// like 2>	declaration
/// \return whether a string contains a command substitution.	definition of has_cmdsub
// Except if our command is 'cd' we have special logic for how arguments are colored.	declaration
// Try expanding it. If we cannot, it's an error.	declaration
// We cannot check if the command is invalid, so just assume it's valid.	ExprStmt
// Color any decoration.	if (...) ... 
// Mark this as an error if it's not 'help' and not a valid cd path.	declaration
// handling, which occurs in their respective overrides of visit().	ExprStmt
// Put it back.	if (...) ... 
// working directory (as a one element list).	declaration
/// working_directory.	definition of range_is_potential_path
// Copy out the subcolors back into our array.	ExprStmt
// Highlight it recursively.	declaration
// The -1 because the cmdsub_contents does not include the open paren.	ExprStmt
// incomplete.	ExprStmt
// contents, within our overall src.	declaration
// the string. cmdsub_contents extends from one past cmdsub_start to cmdsub_end.	ExprStmt
/* accept incomplete */	{ ... }
// Now do command substitutions.	declaration
// Color this argument without concern for command substitutions.	ExprStmt
// Get an iterator to the colors associated with the argument.	declaration
// node does not necessarily have type symbol_argument here.	definition of color_as_argument
// Get an iterator to the colors associated with the argument.	declaration
// Perform highlighting, returning an array of colors.	declaration of highlight
// Constructor	definition of highlighter_t
// Default implementation is to just visit children.	definition of visit
// Visit an argument, perhaps knowing that our command is cd.	declaration of visit
// AST visitor implementations.	declaration of visit
// AST visitor implementations.	declaration of visit
// AST visitor implementations.	declaration of visit
// AST visitor implementations.	declaration of visit
// AST visitor implementations.	declaration of visit
// AST visitor implementations.	declaration of visit
// Visit the children of a node.	definition of visit_children
/// \return a substring of our buffer.	declaration of get_source
// return whether a plain statement is 'cd'.	declaration of is_cd
// Colors a range with a given color.	declaration of color_range
// Colors the source range of a node with a given color.	declaration of color_node
// Color all the children of the command with the given type.	declaration of color_children
// Color a redirection.	declaration of color_redirection
// Color a node as if it were an argument.	declaration of color_as_argument
// Color a command.	declaration of color_command
// Flags we use for AST parsing.	definition of ast_flags
// The resulting colors.	declaration of color_array_t
// The ast we produced.	definition of ast
// Working directory.	definition of working_directory
// Whether it's OK to do I/O.	definition of io_ok
// The operation context. Again, a reference member variable!	definition of ctx
// Cursor position.	definition of cursor_pos
// We must not outlive this!	definition of buff
/// Syntax highlighter helper.	definition of highlighter_t
// Error on unclosed quotes.	if (...) ... 
// we ignore all other characters	break;
// Subtract one to account for the upcoming increment in the loop.	ExprStmt
// skip over backslash	ExprStmt
// escaped char	ExprStmt
// backslash	ExprStmt
// Backslash	if (...) ... 
// that.	if (...) ... 
"// Mode 2 means double quoted string, i.e. ""foo""."	case ...:
// skip over backslash	ExprStmt
// escaped char	ExprStmt
// backslash	ExprStmt
// backslash	if (...) ... 
// Mode 1 means single quoted string, i.e 'foo'.	case ...:
// we ignore all other characters	break;
// Subtract one to account for the upcoming loop increment.	ExprStmt
// Not a backslash.	switch (...) ... 
// It's an error if we exceeded the max value.	if (...) ... 
// buff_len).	ExprStmt
// Consume	for(...;...;...) ...
// a digit like \12	ExprStmt
// Like \ci. So highlight three characters.	ExprStmt
// Move to the escaped character.	ExprStmt
// may be set to highlight_error	definition of fill_color
// Hacky support for %self which must be an unquoted literal argument.	if (...) ... 
// Clarify what we expect.	ExprStmt
/// without regard to command substitutions.	definition of color_string_internal
// detect where the double-quoted string ends, and I'd rather not do that.	ExprStmt
// not a slice	break;
// the slice's contents, e.g. $foo[blah] will not show an error even though it's invalid.	for(...;...;...) ...
// Handle a sequence of variable characters.	while (...) ...
// Our color depends on the next char.	declaration
// Handle an initial run of $s.	declaration
// number of characters consumed.	definition of color_variable
// Not handled specially so handle it here.	declaration
// We can possibly handle this specially.	if (...) ... 
// This is for autosuggestions which are not decorated commands, e.g. function declarations.	if (...) ... 
// Parse the string.	declaration
// Check if the first argument or redirection is, in fact, an argument.	if (...) ... 
// Find the first statement.	declaration
// command (as a string), if any. This is used to validate autosuggestions.	definition of autosuggest_parse_command
// TODO: rationalize this principal_vars.	declaration
// Get the command. Try expanding it. If we cannot, it's an error.	declaration
// appropriately for commands. If we succeed, return true.	definition of statement_get_expanded_command
// Call is_potential_path with all of these directories.	return ...
// Get the CDPATH.	declaration
// Ignore the CDPATH in this case; just use the working directory.	ExprStmt
// out_path. Expects path to be unescaped.	definition of is_potential_cd_path
// access.	declaration
// Check if we're case insensitive.	declaration
// cd ///.... No autosuggestion.	return ...
// We do not end with a slash; it does not have to be a directory.	declaration
// If we end with a slash, then it must be a directory.	declaration
// Skip this if it's empty or we've already checked it.	if (...) ... 
// Keep a cache of which paths / filesystems are case sensitive.	declaration
// CDPATH contains multiple entries.	declaration
/// We expect the path to already be unescaped.	definition of is_potential_path
// Silence lint tools about the unused parameters.	do (...) ...
// sensitive, and a 0 value means case insensitive.	#else
///     true: the file system is case insensitive	declaration of case_sensitivity_cache_t
// wasn't set.	definition of get_fallback
// IWYU pragma: keep	#define CURSOR_POSITION_INVALID static_cast<size_t>(-1)
"/* MAP_FIXED but do not unmap
					   underlying mapping.  */"	#define MAP_FIXED_NOREPLACE 0x100000
"/* Perform synchronous page
					   faults for the mapping.  */"	#define MAP_SYNC 0x80000
/* Create huge page mapping.  */	#define MAP_HUGETLB 0x40000
/* Allocation is for a stack.  */	#define MAP_STACK 0x20000
/* Do not block on IO.  */	#define MAP_NONBLOCK 0x10000
/* Populate (prefault) pagetables.  */	#define MAP_POPULATE 0x08000
/* Don't check for reservations.  */	#define MAP_NORESERVE 0x04000
/* Lock the mapping.  */	#define MAP_LOCKED 0x02000
/* Mark it as an executable.  */	#define MAP_EXECUTABLE 0x01000
/* ETXTBSY.  */	#define MAP_DENYWRITE 0x00800
/* Stack-like segment.  */	#define MAP_GROWSDOWN 0x00100
"/* These definitions are appropriate for architectures that, in the
   Linux kernel, either have no uapi/asm/mman.h, or have one that
   includes asm-generic/mman.h without any changes to the values of
   the MAP_* flags defined in that header.  */"	#ifdef __USE_MISC
"/* Definitions for POSIX memory map interface.  Linux/generic version.
   Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library.  If not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_MMAN_H
/* __USE_GNU */	#endif
"/* Apply memory protection flags for KEY to the specified address
   range.  */"	declaration of pkey_mprotect
"/* Free an allocated protection key, which must have been allocated
   using pkey_alloc.  */"	declaration of pkey_free
"/* Return the access rights for the current thread for KEY, which must
   have been allocated using pkey_alloc.  */"	declaration of pkey_get
"/* Update the access rights for the current thread for KEY, which must
   have been allocated using pkey_alloc.  */"	declaration of pkey_set
"/* Allocate a new protection key, with the PKEY_DISABLE_* bits
   specified in ACCESS_RIGHTS.  The protection key mask for the
   current thread is updated to match the access privilege for the new
   key.  */"	declaration of pkey_alloc
"/* Lock pages from ADDR (inclusive) to ADDR + LENGTH (exclusive) into
   memory.  FLAGS is a combination of the MLOCK_* flags above.  */"	declaration of mlock2
"/* Create a new memory file descriptor.  NAME is a name for debugging.
   FLAGS is a combination of the MFD_* constants.  */"	declaration of memfd_create
/* Access rights for pkey_alloc.  */	#ifndef PKEY_DISABLE_ACCESS
/* Flags for mlock2.  */	#ifndef MLOCK_ONFAULT
/* Flags for memfd_create.  */	#ifndef MFD_CLOEXEC
/* Flags for mremap.  */	#define MREMAP_MAYMOVE 1
"/* Memory-mapping-related declarations/definitions, not architecture-specific.
   Copyright (C) 2017-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_MMAN_H
"/* Lock all pages that are
					   faulted in.  */"	#define MCL_ONFAULT 4
"/* Lock all additions to address
					   space.  */"	#define MCL_FUTURE 2
/* Lock all currently mapped pages.  */	#define MCL_CURRENT 1
/* Flags for `mlockall'.  */	#ifndef MCL_CURRENT
/* Don't need these pages.  */	#define POSIX_MADV_DONTNEED 4
/* Will need these pages.  */	#define POSIX_MADV_WILLNEED 3
/* Expect sequential page references.  */	#define POSIX_MADV_SEQUENTIAL 2
/* Expect random page references.  */	#define POSIX_MADV_RANDOM 1
/* No further special treatment.  */	#define POSIX_MADV_NORMAL 0
/* The POSIX people had to invent similar names for the same things.  */	#ifdef __USE_XOPEN2K
/* Poison a page for testing.  */	#define MADV_HWPOISON 100
/* Undo MADV_WIPEONFORK.  */	#define MADV_KEEPONFORK 19
/* Zero memory on fork, child only.  */	#define MADV_WIPEONFORK 18
/* Clear the MADV_DONTDUMP flag.  */	#define MADV_DODUMP 17
"/* Explicity exclude from the core dump,
                                   overrides the coredump filter bits.  */"	#define MADV_DONTDUMP 16
/* Not worth backing with hugepages.  */	#define MADV_NOHUGEPAGE 15
/* Worth backing with hugepages.  */	#define MADV_HUGEPAGE 14
/* KSM may not merge identical pages.  */	#define MADV_UNMERGEABLE 13
/* KSM may merge identical pages.  */	#define MADV_MERGEABLE 12
/* Do inherit across fork.  */	#define MADV_DOFORK 11
/* Do not inherit across fork.  */	#define MADV_DONTFORK 10
/* Remove these pages and resources.  */	#define MADV_REMOVE 9
/* Free pages only if memory pressure.  */	#define MADV_FREE 8
/* Don't need these pages.  */	#define MADV_DONTNEED 4
/* Will need these pages.  */	#define MADV_WILLNEED 3
/* Expect sequential page references.  */	#define MADV_SEQUENTIAL 2
/* Expect random page references.  */	#define MADV_RANDOM 1
/* No further special treatment.  */	#define MADV_NORMAL 0
/* Advice to `madvise'.  */	#ifdef __USE_MISC
/* Invalidate the caches.  */	#define MS_INVALIDATE 2
/* Synchronous memory sync.  */	#define MS_SYNC 4
/* Sync memory asynchronously.  */	#define MS_ASYNC 1
/* Flags to `msync'.  */	#define MS_ASYNC 1
/* When MAP_HUGETLB is set bits [26:31] encode the log2 of the huge page size.  */	#define MAP_HUGE_SHIFT 26
/* Don't use a file.  */	#define MAP_ANONYMOUS 0x20
/* Don't use a file.  */	#else
/* Interpret addr exactly.  */	#define MAP_FIXED 0x10
/* Other flags.  */	#define MAP_FIXED 0x10
/* Mask for type of mapping.  */	#define MAP_TYPE 0x0f
"/* Share changes and validate
					   extension flags.  */"	#define MAP_SHARED_VALIDATE 0x03
/* Changes are private.  */	#define MAP_PRIVATE 0x02
/* Share changes.  */	#define MAP_SHARED 0x01
/* Sharing types (must choose one and only one of these).  */	#define MAP_SHARED 0x01
"/* Extend change to start of
					   growsup vma (mprotect only).  */"	#define PROT_GROWSUP 0x02000000
"/* Extend change to start of
					   growsdown vma (mprotect only).  */"	#define PROT_GROWSDOWN 0x01000000
/* Page can not be accessed.  */	#define PROT_NONE 0x0
/* Page can be executed.  */	#define PROT_EXEC 0x4
/* Page can be written.  */	#define PROT_WRITE 0x2
/* Page can be read.  */	#define PROT_READ 0x1
"/* Protections are chosen from these bits, OR'd together.  The
   implementation does not necessarily support PROT_EXEC or PROT_WRITE
   without PROT_READ.  The only guarantees are that no writing will be
   allowed without PROT_WRITE and no access will be allowed for PROT_NONE. */"	#define PROT_READ 0x1
"/* Definitions for POSIX memory map interface.  Linux generic version.
   Copyright (C) 2001-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_MMAN_H
/* Only give out 32-bit addresses.  */	#define MAP_32BIT 0x40
/* Other flags.  */	#ifdef __USE_MISC
"/* Definitions for POSIX memory map interface.  Linux/x86_64 version.
   Copyright (C) 2001-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_MMAN_H
/* sys/mman.h */	#endif
/* Remove shared memory segment.  */	declaration of shm_unlink
/* Open shared memory segment.  */	declaration of shm_open
"/* Remap arbitrary pages of a shared backing store within an existing
   VMA.  */"	declaration of remap_file_pages
"/* Remap pages mapped by the range [ADDR,ADDR+OLD_LEN) to new length
   NEW_LEN.  If MREMAP_MAYMOVE is set in FLAGS the returned address
   may differ from ADDR.  If MREMAP_FIXED is set in FLAGS the function
   takes another parameter which is a fixed address at which the block
   resides after a successful call.  */"	declaration of mremap
"/* mincore returns the memory residency status of the pages in the
   current process's address space specified by [start, start + len).
   The status is returned in a vector of bytes.  The least significant
   bit of each byte is 1 if the referenced page is in memory, otherwise
   it is zero.  */"	declaration of mincore
"/* All currently mapped pages of the process' address space become
   unlocked.  */"	declaration of munlockall
"/* Cause all currently mapped pages of the process to be memory resident
   until unlocked by a call to the `munlockall', until the process exits,
   or until the process calls `execve'.  */"	declaration of mlockall
/* Unlock whole pages previously mapped by the range [ADDR,ADDR+LEN).  */	declaration of munlock
"/* Guarantee all whole pages mapped by the range [ADDR,ADDR+LEN) to
   be memory resident.  */"	declaration of mlock
/* This is the POSIX name for this function.  */	declaration of posix_madvise
"/* Advise the system about particular usage patterns the program follows
   for the region starting at ADDR and extending LEN bytes.  */"	declaration of madvise
"/* Synchronize the region starting at ADDR and extending LEN bytes with the
   file it maps.  Filesystem operations on a file being mapped are
   unpredictable before this is done.  Flags are from the MS_* set.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of msync
"/* Change the memory protection of the region starting at ADDR and
   extending LEN bytes to PROT.  Returns 0 if successful, -1 for errors
   (and sets errno).  */"	declaration of mprotect
"/* Deallocate any mapping for the region starting at ADDR and extending LEN
   bytes.  Returns 0 if successful, -1 for errors (and sets errno).  */"	declaration of munmap
"/* Map addresses starting near ADDR and extending for LEN bytes.  from
   OFFSET into the file FD describes according to PROT and FLAGS.  If ADDR
   is nonzero, it is the desired mapping address.  If the MAP_FIXED bit is
   set in FLAGS, the mapping will be at ADDR exactly (which must be
   page-aligned); otherwise the system chooses a convenient nearby address.
   The return value is the actual mapping address chosen or MAP_FAILED
   for errors (in which case `errno' is set).  A successful `mmap' call
   deallocates any previous mapping for the affected region.  */"	#ifndef __USE_FILE_OFFSET64
/* Return value of `mmap' in case of an error.  */	#define MAP_FAILED ((void *) -1)
"/* Definitions for BSD-style memory management.
   Copyright (C) 1994-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_MMAN_H
/// Append a history item to a buffer, in preparation for outputting it to the history file.	declaration of append_history_item_to_buffer
// Private constructor; use the static create() function.	declaration of history_file_contents_t
// The type of the mapped file.	definition of type_
// The mapped length.	definition of length_
// The memory mapped pointer.	definition of start_
/// Access the address at a given offset.	definition of address_at
/// Return a pointer to one-past-the-end.	definition of end
/// Return a pointer to the beginning.	definition of begin
/// Get the size of the contents.	definition of length
/// Get the file type.	definition of type
/// \return the offset of the next item, or none() on end.	declaration of offset_of_next_item
/// Decode an item at a given offset.	declaration of decode_item
/// Construct a history file contents from a file descriptor. The file descriptor is not closed.	declaration of create
/// history_file_contents_t holds the read-only contents of a file.	definition of history_file_contents_t
// History file types.	definition of history_file_type_t
// using something like shared_ptr	declaration
/// The set of all histories.	definition of s_histories
// Output any items we collected (which only happens in reverse).	for(...;...;...) ...
// The user had no search terms; just append everything.	ExprStmt
// We can output this immediately.	if (...) ... 
// The function we use to act on each item.	declaration
// Searches history.	definition of search
/// \p func returns true, continue the search; else stop it.	definition of do_1_history_search
/* pending */	ExprStmt
// cause us to lose file hinting for some commands, but it beats losing history items.	ExprStmt
/* pending */	ExprStmt
// Don't hold the lock while we perform this file detection.	ExprStmt
// Grab the next identifier.	declaration
// If we got a path, we'll perform file detection for autosuggestion hinting.	declaration
// immediately after running them, so it can't tolerate the asynchronous file detection.	if (...) ... 
// Find all arguments that look like they could be file paths.	declaration
// Do not allow them to be added (#6032).	if (...) ... 
/// Very simple, just mark that we have no more pending items.	definition of resolve_pending
/// the .h file; see #7023.	definition of impl_wrapper_t
// Assume that things with leading dashes aren't paths.	return ...
/// Return the prefix for the files to be used for command and read history.	definition of history_session_id
// We'll pick them up from the file (#2312)	ExprStmt
// we only do work if time has progressed. This also makes multiple calls cheap.	if (...) ... 
// *deleted* in other instances would not show up here).	declaration
/* pending */	ExprStmt
// Add this line if it doesn't contain anything we know we can't handle.	if (...) ... 
// Deal with the newline if present.	declaration
// Loop until we've read a line or EOF is observed.	while (...) ...
// Process the entire history file until EOF is observed.	declaration
/// encode multiline commands.	definition of populate_from_bash
/// Decide whether we ought to import a bash history line into fish. This is a very crude heuristic.	definition of should_import_bash_history_line
// This message does not have high enough priority to be shown by default.	do (...) ...
// destination file descriptor, since it destroys the name and the file.	ExprStmt
/// The new contents will automatically be re-mapped later.	definition of populate_from_config_path
// We're empty if the file is empty.	ExprStmt
// Access failed, assume missing.	ExprStmt
// stat the file and see if it exists and is nonempty.	declaration
// If we've loaded old items, see if we have any offsets.	ExprStmt
// If we have new items, we're not empty.	if (...) ... 
// underflow	ExprStmt
// overflow!	ExprStmt
// simply omit the timestamp from the output.	definition of format_history_record
"// We did not or could not append; rewrite the file (""vacuum"" it)."	ExprStmt
// Try doing a fast append.	ExprStmt
// append to it.	declaration
// Compact our new items so we don't have duplicates.	ExprStmt
"// We're in the ""incognito"" mode. Pretend we've saved the history."	ExprStmt
// Nothing to do if there's no new items.	if (...) ... 
/// Save the specified mode to file; optionally also vacuums.	definition of save
// If someone has replaced the file, forget our file state.	if (...) ... 
// appended remains in our new_items	ExprStmt
// Use a small buffer size for appending, we usually only have 1 item	declaration
// TODO: consider filling the buffer ahead of time, so we can just lock, splat, and unlock?	declaration
// We're going to use this fd	if (...) ... 
// Simulate a failing lock in chaos_mode	if (...) ... 
// can't open, we're hosed	break;
// Limit our max tries so we don't do this forever.	declaration
// Get the path to the real history file.	declaration
// If the file is different (someone vacuumed it) then we need to update our mmap.	declaration
// No deleting allowed.	ExprStmt
// Returns true on success, false on failure.	definition of save_internal_via_appending
// file.	ExprStmt
// We deleted our deleted items.	ExprStmt
// We've saved everything, so we have no more unsaved items.	ExprStmt
// Ensure we never leave the old file around	ExprStmt
// We did it	ExprStmt
// Slide it into place	if (...) ... 
// case right either).	declaration
// Truncate our tmp_fd so we can reuse it	if (...) ... 
// It's only OK to replace the file while holding the lock	ExprStmt
// If the open fails, then proceed; this may be because there is no current history	declaration
// Failed to write, no good	break;
// possibly invalid	definition of orig_file_id
// Open any target file, but do not lock it right away	declaration
// Remember that we have to close this fd!	declaration
// Repeat until we succeed or give up	declaration
// Returns the fd of an opened temporary file, or an invalid fd on failure.	definition of create_temporary_file
// Write them out.	declaration
// This is the essential step that roughly orders items by history	ExprStmt
// Insert any unwritten new items	for(...;...;...) ...
// Add this old item.	ExprStmt
// Try decoding an old item.	declaration
// old file contents).	if (...) ... 
// Make an LRU cache to save only the last N elements.	declaration
// dst_fd must be valid; existing_fd does not need to be	ExprStmt
// on error	definition of rewrite_to_temporary_file
// item.	ExprStmt
// this index.	ExprStmt
// efficient, but likely would consume more memory too.	declaration
// Erase everything we know about our file.	ExprStmt
// This is our new item.	ExprStmt
// Skip if deduplicating.	if (...) ... 
// Look for an item that matches and (if deduping) that we haven't seen before.	if (...) ... 
// We're done if it's empty or we cancelled.	if (...) ... 
// Backwards means increasing our index.	declaration
//!OCLINT(side-effect)	definition of profiler
// Simulate a failing lock in chaos_mode.	if (...) ... 
//!OCLINT(side-effect)	definition of profiler
// Remember this item.	ExprStmt
// New key.	declaration
// we have to go fetch the item.	declaration
// Skip non-positive entries.	continue;
// Index past the valid range, so return an empty history item.	return ...
// idx == 0 corresponds to last item in old_item_offsets.	declaration
// Now look in our old items.	ExprStmt
// idx == 0 corresponds to the last resolved item.	if (...) ... 
// item, and it's always the last one.	declaration
// 0 is considered an invalid index.	ExprStmt
// Append old items.	ExprStmt
// Skip a pending item if we have one.	if (...) ... 
// Append new items.	for(...;...;...) ...
// If we have a pending item, we skip the first encountered (i.e. last) new item.	declaration
// found it	{ ... }
// Look for an item with the given identifier. It is likely to be at the end of new_items.	for(...;...;...) ...
"// 0 identifier is used to mean ""not necessary""."	if (...) ... 
// we have not yet written this item, so we don't have to adjust the index.	if (...) ... 
// Add to our list of deleted items.	ExprStmt
// case-sensitive, matches.	definition of remove
// as old items, if we wrote them in the same second as our birthdate.	if (...) ... 
// Update our countdown.	ExprStmt
//!OCLINT(side-effect)	ExprStmt
//!OCLINT(unused var)	definition of profiler
// This might be a good candidate for moving to a background thread.	declaration
// Determine if we're going to vacuum.	declaration
// Generate a number in the range [0, kVacuumFrequency).	declaration
// the counter.	declaration
// Respect disable_automatic_save_counter.	if (...) ... 
// We have to add a new item.	ExprStmt
// merged with an item that is not pending, so pending just becomes false.	ExprStmt
// Try merging with the last item.	if (...) ... 
// Do not allow them to be added (#6032).	if (...) ... 
// Return the number of history entries.	declaration of size
// commandline. (So the most recent item is at index 1.)	declaration of item_at_index
// Sets the valid file paths for the history item with the given identifier.	declaration of set_valid_file_paths
// are skipped. Return a mapping from index to history item text.	declaration of items_at_indexes
// This may be long!	declaration of get_history
// Incorporates the history of other shells into this history.	declaration of incorporate_external_changes
// Populates from a bash history file.	declaration of populate_from_bash
// Populates from older location ()in config path, rather than data path).	declaration of populate_from_config_path
// Irreversibly clears history.	declaration of clear
// Enable / disable automatic saving. Main thread only!	declaration of enable_automatic_saving
// Enable / disable automatic saving. Main thread only!	declaration of disable_automatic_saving
// Resolves any pending history items, so that they may be returned in history searches.	declaration of resolve_pending
// determine which arguments are paths	declaration of add_pending_with_file_detection
// Remove a history item.	declaration of remove
// pending items.	declaration of add
// require populating the history.	declaration of is_empty
/// Returns whether this is using the default name.	declaration of is_default
// Saves history unless doing so is disabled.	declaration of save_unless_disabled
// Saves history.	declaration of save
// Saves history by appending to the file.	declaration of save_internal_via_appending
// Saves history by rewriting the file.	declaration of save_internal_via_rewrite
// Returns false on error, true on success	declaration of rewrite_to_temporary_file
// Deletes duplicates in new_items.	declaration of compact_new_items
// Loads old items if necessary.	declaration of load_old_if_needed
// Figure out the offsets of our file contents.	declaration of populate_from_file_contents
// List of old items, as offsets into out mmap data.	definition of old_item_offsets
// Whether we've loaded old items.	definition of loaded_old
// How many items we add until the next vacuum. Initially a random value.	definition of countdown_to_vacuum
// by incorporate_external_changes().	definition of boundary_timestamp
// The file ID of the history file.	definition of history_file_id
// The buffer containing the history file contents.	definition of file_contents
// Deleted item contents.	definition of deleted_items
// Whether we should disable saving to the file for a time.	definition of disable_automatic_save_counter
// item_at_index.	definition of has_pending_item
// The index of the first new item that we have not yet written.	definition of first_unwritten_new_item_index
// started after we were started.	definition of new_items
// The name of this list. Used for picking a suitable filename and for switching modes.	definition of name
// Internal function.	declaration of clear_file_state
// call to resolve_pending.	declaration of add
// search object if we're doing a case insensitive search.	declaration
/// recent identifier, and the longer list of required paths.	definition of merge
// Skip empty items.	if (...) ... 
/// Function to add a history item.	definition of add_item
// anonymous namespace	definition of history_lru_cache_t
// but make sure we don't leave the file locked!	if (...) ... 
/// Returns true on success, false on failure.	definition of history_file_lock
/// loaded. If suffix is provided, append that suffix to the path; this is used for temporary files.	definition of history_filename
/// fd, and clear the string. \return 0 on success, an error code on failure.	definition of flush_to_fd
// the file and taking the lock	definition of max_save_tries
// The file access mode we use for creating history files	definition of history_file_mode
// Default buffer size for flushing to the history file.	#define HISTORY_OUTPUT_BUFFER_SIZE (64 * 1024)
// When we rewrite the history, the number of items we keep.	#define HISTORY_SAVE_MAX (1024 * 256)
// This is the history session ID we use by default if the user has not set env var fish_history.	"#define DFLT_FISH_HISTORY_SESSION_ID L""fish"""
// pos will be left pointing just after this newline, because of the ++ in the loop.	ExprStmt
/// Adapted from history_populate_from_mmap in history.c	definition of offset_of_next_item_fish_1_x
// single-byte locale	{ ... }
/// Decode an item via the fish 1.x format. Adapted from fish 1.x's item_get().	definition of decode_item_fish_1_x
/// for on screen display.	definition of history_unescape_newlines_fish_1_x
//!OCLINT(avoid branching statement as last in loop)	break;
// We made it through the gauntlet.	ExprStmt
// Skip this item if the timestamp is past our cutoff.	if (...) ... 
// Try parsing a timestamp from this line. If we succeed, the loop will break.	ExprStmt
// If the first character is not a space, it's not an interior line, so we're done.	if (...) ... 
// are guaranteed to contain a newline.	declaration
// try parsing out a timestamp.	if (...) ... 
"// 123456"". Ignore those."	declaration
// Skip over just one of the - cmd. In the end there will be just one left.	ExprStmt
// Skip lines with a leading space, since these are in the interior of one of our items.	if (...) ... 
// Advance the cursor to the next line.	declaration
/// Returns (size_t)-1 when done.	definition of offset_of_next_item_fish_2_0
"// Make sure this new line is itself ""newline terminated"". If it's not, return NULL."	declaration
// Skip past the newline character itself.	if (...) ... 
// Handle the hopeless case.	if (...) ... 
/// newline. Note that the string is not null terminated.	definition of next_line
// Advance past spaces.	while (...) ...
// Advance past spaces.	while (...) ...
/// reach it.	definition of parse_timestamp
// Skip the leading dash-space and then store this path it.	ExprStmt
"// Read lines starting with "" - "" until we can't read any more."	for(...;...;...) ...
// acceptable.	declaration
// Read the remaining lines.	for(...;...;...) ...
//!OCLINT(goto is the cleanest way to handle bad input)	goto ...
"// Read the ""- cmd:"" line."	declaration
/// Decode an item via the fish 2.0 format.	definition of decode_item_fish_2_0
// Skip a space after the : if necessary.	declaration
/// Trims leading spaces in the given string, returning how many there were.	definition of trim_leading_spaces
// We ran off the end.	ExprStmt
// Return the amount to advance the cursor; skip over the newline.	return ...
// we found a newline	{ ... }
// Locate the newline.	ExprStmt
/// null terminated; it's just a memory mapped file.	definition of read_line
// Check the file type.	declaration
// mmap instead of malloc so that the destructor can always munmap().	ExprStmt
// process truncates the file we risk SIGBUS.	ExprStmt
// Check that the file is seekable, and its size.	declaration
// Backslash + n. Replace with a newline.	ExprStmt
// Two backslashes in a row. Delete the second one.	ExprStmt
// version of at().	declaration
// Either not found, or found as the last character.	break;
// Look for a backslash.	declaration
// Operate on a const version of str, to avoid needless COWs that at() does.	declaration
/// This function is called frequently, so it ought to be fast.	definition of unescape_yaml_fish_2_0
// replace newline with backslash + literal n	ExprStmt
// replace one backslash with two	ExprStmt
"// Support for escaping and unescaping the nonstandard ""yaml"" format introduced in fish 2.0."	definition of escape_yaml_fish_2_0
// assume new fish	{ ... }
// old fish started with a #	{ ... }
/// Try to infer the history file type based on inspecting the data.	definition of infer_file_type
// Return true on success, false on failure.	definition of read_from_fd
// Don't try mmap() on non-local filesystems.	definition of should_mmap
// Some forward declarations.	declaration of decode_item_fish_1_x
// Some forward declarations.	declaration of decode_item_fish_2_0
// Found the mapping.	if (...) ... 
// #3189. This can typically be generated via control-space.	#undef TERMINFO_ADD
// but with no benefit.	#endif
// setupterm() failed so we can't referency any key definitions	return ...
/// Create a list of terminfo mappings.	definition of create_input_terminfo
// Populate the cache if needed.	if (...) ... 
// Clear cached mappings.	ExprStmt
// that the user specified them in.	declaration
// There's no need to go through the input functions.	return ...
// Hackish: mark the input style.	ExprStmt
// common case is that this will be empty.	declaration
// However if it is generated by a real sequence, then insert that sequence.	for(...;...;...) ...
// Search for sequence in mapping tables.	while (...) ...
// Clear the interrupted flag.	ExprStmt
// Restore any readline functions, in reverse to preserve their original order.	for(...;...;...) ...
/// readline function.	definition of read_characters_no_readline
/// preset list. \return null if nothing matches.	definition of find_mapping
"// to distinguish between the actual escape key and an ""alt""-modifier."	ExprStmt
// bind sequence and abort.	ExprStmt
/// Try reading the specified function mapping.	definition of mapping_is_match
// one.	ExprStmt
// see that until all other commands have also been run.	declaration
// Functions are added at the head of the input queue.	for(...;...;...) ...
// skip the input_set_bind_mode	return ...
// We don't want to run commands yet. Put the characters back and return check_exit.	for(...;...;...) ...
// !has_functions && !has_commands: only set bind mode	if (...) ... 
// has_commands: there are shell commands that need to be evaluated	declaration
/// should be executed, or should be deferred until later.	definition of mapping_execute
// Push the function codes back into the input stream.	declaration
// Skip and queue up any function codes. See issue #2357.	declaration
// Arrows - can't have functions, so *-or-search isn't available.	ExprStmt
// If we have no keybindings, add a few simple defaults.	if (...) ... 
/// initializations for our input subsystem.	definition of init_input
// TODO: shouldn't need this parser here.	if (...) ... 
// TODO: eliminate this principal_parser().	declaration
/// the reader.	definition of interrupt_handler
// Add a new mapping, using the next order.	declaration
// Remove existing mappings with this sequence.	declaration
// Clear cached mappings.	ExprStmt
/// Adds an input mapping.	definition of add
/// that we test longer sequences first.	definition of input_mapping_insert_sorted
/// Helper function to compare the lengths of sequences.	definition of length_is_greater_than
/// Returns the arity of a given input function.	definition of input_function_arity
// Must send events here - see #6653.	ExprStmt
// modes may not be empty - empty is a sentinel value meaning to not change the mode	ExprStmt
/// Set the current bind mode.	definition of input_set_bind_mode
/// Return the current bind mode.	definition of input_get_bind_mode
/// \return the input terminfo.	declaration of create_input_terminfo
/// Terminfo map list.	definition of s_terminfo_mappings
/// input_common.h.	definition of input_function_metadata_t
// character sequence generated on keypress, or none if there was no mapping.	definition of seq
// name of key	definition of name
/// A struct representing the mapping from a terminfo key name to a terminfo character sequence.	definition of terminfo_mapping_t
/// \return true if this is a generic mapping, i.e. acts as a fallback.	definition of is_generic
/// New mode that should be switched to after command evaluation.	definition of sets_mode
/// Mode in which this command should be evaluated.	definition of mode
/// We wish to preserve the user-specified order. This is just an incrementing value.	definition of specification_order
/// Commands that should be evaluated by this mapping.	definition of commands
/// Character sequence which generates this event.	definition of seq
/// Struct representing a keybinding. Returned by input_get_mappings.	definition of input_mapping_t
/// A name for our own key mapping for nul.	definition of k_nul_mapping_name
// If we got a timeout, either through dequeuing or creating, ensure it stays on the queue.	if (...) ... 
// single-byte locale, all values are legal	return ...
// set.	definition of update_wait_on_escape_ms
// This gives priority to the foreground.	if (...) ... 
// We read from stdin, so don't loop.	return ...
// The teminal has been closed.	return ...
// A variable change may have triggered a repaint, etc.	if (...) ... 
// Check to see if we want a universal variable barrier.	declaration
// The terminal has been closed.	return ...
// Get its suggested delay (possibly none).	declaration
// Get the notification fd (possibly none).	declaration
// Get our uvar notifier.	declaration
/// only be called by input_common_readch().	definition of readb
/// Callback function for handling interrupts on reading.	definition of interrupt_handler
/// escape sequence.	#define WAIT_ON_ESCAPE_DEFAULT 30
/// The table of intern'd strings.	definition of string_table
// Ok, we have a new candidate fd. Recurse.	ExprStmt
// Likely fd exhaustion.	return ...
// anything is closed; this forces the kernel to give us a new one (or report fd exhaustion).	declaration
// the shell a chance to gracefully regain control of the shell (see #7038).	ExprStmt
// Mark it as CLO_EXEC because we don't want it to be open in any child.	declaration
// Ensure we never push back NULL.	ExprStmt
// See if you can guess why std::find doesn't work here.	for(...;...;...) ...
// Then allow the buffer to finish.	ExprStmt
// Our fillthread gets the read end of the pipe; out_pipe gets the write end.	declaration
// from direct buffer transfers.	if (...) ... 
// Construct our pipes.	declaration
// longer have one.	ExprStmt
// This will stop when the fd is closed or if we get EAGAIN.	ExprStmt
// It's OK to capture 'this' by value because 'this' waits for the promise in its dtor.	declaration
// launched in a command substitution.	declaration
// Note this should only ever be called once.	ExprStmt
// Construct a promise that can go into our background thread.	declaration
// We want to swallow EINTR only; in particular EAGAIN needs to be returned back to the caller.	declaration
// Deliberately leaked to avoid shutdown dtors.	declaration
/// Provide the fd monitor used for background fillthread operations.	definition of fd_monitor
/// Base open mode to pass to calls to open.	#define OPEN_MASK 0666
/// File redirection error message.	"#define FILE_ERROR _(L""An error occurred while redirecting file '%ls'"")"
// Equip our background thread with a reference to impl, to keep it alive.	declaration
// Mark the current time so that a new request won't immediately abandon us.	ExprStmt
// Abandon this thread by marking nothing as active.	ExprStmt
// If we have a timeout, and our running thread has exceeded it, abandon that thread.	if (...) ... 
// Local lock.	{ ... }
// There is no request. If we are active, mark ourselves as no longer running.	if (...) ... 
// The value was dequeued, we are going to execute it.	ExprStmt
// Note we are on a background thread.	declaration
/// \return true if we handled a request, false if there were none.	declaration of run_next
// The start time of the most recently run thread spawn, or request (if any).	definition of start_time
// The next token to use when spawning a thread.	definition of next_token
// The token of the current non-abandoned thread, or 0 if no thread is running.	definition of active_token
// The (at most 1) next enqueued request, or none if none.	definition of next_req
// Synchronized data from debounce_t.	definition of data_t
// token to the active token; if they differ then this thread was abandoned.	definition of impl_t
// Note 0 is an invalid thread id.	declaration
// Thread spawning failed, clean up our heap allocation.	ExprStmt
// Copy the function into a heap allocation.	declaration
// Acquire a thread id for this thread.	ExprStmt
// Restore our sigmask.	do (...) ...
// Success, return the thread.	do (...) ...
// extant requests. So we can ignore failure with some confidence.	declaration
// it.	declaration
// Ok, the request must now be done.	ExprStmt
// deterministic way to clean up to avoid leaks	ExprStmt
// Wait on the condition, until we're done.	declaration
// Tell the pipe.	declaration
// Append it. Ensure we don't hold the lock after.	ExprStmt
// Make a new request. Note we are synchronous, so this can be stack allocated!	declaration
// ensure we don't invoke empty functions, that raises an exception	if (...) ... 
// Perform each completion in order	while (...) ...
// Move the queue to a local variable.	declaration
// Service the queue of results	definition of iothread_service_result_queue
// TODO: revisit this logic, this feels sketchy.	declaration
// stack allocated in their respective threads!	while (...) ...
// Move the queue to a local variable.	declaration
"/// ""Do on main thread"" support."	definition of iothread_service_main_thread_requests
// is set.	{ ... }
// Nasty polling via select().	while (...) ...
// Wake everyone up.	ExprStmt
// Set the drain flag.	{ ... }
/// it's terrible.	definition of iothread_drain_all
// The order is important.	declaration
// We failed to spawn a thread; decrement the thread count.	ExprStmt
// handle extant requests. So we can ignore failure with some confidence.	if (...) ... 
// Kick off the thread if we decided to do so.	if (...) ... 
// No threads are waiting but we can or must spawn a new thread.	ExprStmt
// There's enough waiting threads, wake one up.	ExprStmt
// Lock around a local region.	declaration
// Note we permit an empty completion.	declaration
/// Spawn another thread. No lock is held when this is called.	definition of spawn
// Enqueue the result, and tell the main thread about it.	ExprStmt
// Note we're using std::function's weirdo operator== here	if (...) ... 
// Perform the work	ExprStmt
// while holding the lock as we are effectively exited.	if (...) ... 
// Now that we've perhaps waited, see if there's something on the queue.	declaration
// We should wait if our exiting would drop us below the soft min.	if (...) ... 
/// reducing the active thread count.	definition of dequeue_work_or_commit_to_exit
// Mark both ends as non-blocking.	return ...
/// \return the (immortal) set of pipes used for notifying of completions.	definition of get_notify_pipes
// Pipes used for notifying.	definition of notify_pipes_t
/// stack-allocated on the requesting thread.	definition of s_main_thread_request_queue
// protects the main thread requests	definition of s_main_thread_performer_cond
// protects the main thread requests	definition of s_main_thread_performer_lock
"// ""Do on main thread"" support."	definition of s_main_thread_performer_lock
/// These are used for completions, etc.	definition of s_io_thread_pool
/// No copying or moving.	definition of thread_pool_t
/// Attempt to spawn a new pthread.	declaration of spawn
/// Trampoline function for pthread_spawn compatibility.	declaration of run_trampoline
/// This runs in the background thread.	declaration of dequeue_work_or_commit_to_exit
/// The worker loop for this thread.	declaration of run
/// want to wait for new threads.	declaration of perform
/// Construct with a soft minimum and maximum thread count.	definition of thread_pool_t
/// Note that the pool is initially empty and threads may decide to exit based on a time wait.	definition of soft_min_threads
/// Note this is tied to data's lock.	definition of queue_cond
/// Data which needs to be atomically accessed.	definition of req_data
/// A flag indicating we should not process new requests.	definition of drain
/// The number of threads which are waiting for more work.	definition of waiting_threads
/// The number of threads that exist in the pool.	definition of total_threads
/// The queue of outstanding, unclaimed requests.	definition of request_queue
// main_thread_requests are always stack allocated, and we deal in pointers to them	definition of operator=
// Move-only	definition of operator=
// The amount of time an IO thread many hang around to service requests, in milliseconds.	#define IO_WAIT_FOR_WORK_DURATION_MS 500
// Values for the wakeup bytes sent to the ioport.	#define IO_SERVICE_MAIN_THREAD_REQUEST_QUEUE 99
// which is too low, even tho the system can handle more than 64 threads.	#define IO_MAX_THREADS 1024
// Move the first element to the end.	if (...) ... 
/// Remove first match for specified string from circular list.	definition of kill_remove
/** Kill ring */	declaration of kill_list_t
// Make sure we know what we're doing.	definition of make_null_terminated_array
/// Write specified multibyte string.	definition of writembs_check
// Reverse should be meaningful in either context	if (...) ... 
"// Look for something like ""--background=red""."	if (...) ... 
// wcslen is not available as constexpr	declaration
/// TODO: This code should be refactored to enable sharing with builtin_set_color.	definition of parse_color
// If we have both RGB and named colors, then prefer rgb if term256 is supported.	declaration
/// rgb_color_t::none() if empty.	definition of best_color
// Convert the string.	ExprStmt
// figure amount of space needed	definition of len
// Single-byte locale (C/POSIX/ISO-8859).	while (...) ...
/// is needed because those strings may contain chars specially encoded using ENCODE_DIRECT_BASE.	definition of writestr
// If `wc` contains a wide character we emit a question-mark.	ExprStmt
/// supplied characters.	definition of writech
// Like tparm, we just cast it to unconst, that should work everywhere.	return ...
// scoped_push will restore it.	declaration
// recursive.	definition of s_tputs_receiver_lock
// Some terms do not have a reverse mode set, so standout mode is a fallback.	if (...) ... 
// The unconst cast is for NetBSD's benefit. DO NOT REMOVE!	ExprStmt
// Lastly, we set bold, underline, italics, dim, and reverse modes correctly.	if (...) ... 
/* not foreground */	ExprStmt
/* foreground */	ExprStmt
/* foreground */	ExprStmt
// We don't know if exit_attribute_mode resets colors, so we set it to something known.	if (...) ... 
// Background color changed and is no longer set, so we exit bold mode.	ExprStmt
// This means bold mode is _always_ on when the background color is set.	ExprStmt
// Background is set.	ExprStmt
// Background was set.	ExprStmt
// Only way to exit reverse mode is a reset of all attributes.	ExprStmt
// Only way to exit dim mode is a reset of all attributes.	ExprStmt
// Only way to exit bold mode is a reset of all attributes.	ExprStmt
// lose it's color. Terminals are weird...	ExprStmt
// just give up...	if (...) ... 
/// \param c2 Background color.	definition of set_color
// Background: ^[48;2;<r>;<g>;<b>m	declaration
// Indexed or non-24 bit color.	declaration
// Exported for builtin_set_color's usage only.	definition of write_color
// emulators.	if (...) ... 
// We are attempting to bypass the term here. Generate the ANSI escape sequence ourself.	declaration
// Use tparm to emit color escape.	ExprStmt
/// Returns true if we think tparm can handle outputting a color index	definition of term_supports_color_natively
/// Whether term256 and term24bit are supported.	definition of color_support
// Constructor	declaration of pager_t
// Position of the cursor.	declaration of cursor_position
// Become fully disclosed.	declaration of set_fully_disclosed
// Indicates if we are navigating our contents.	declaration of is_navigating_contents
// Gets whether the search field shown.	declaration of is_search_field_shown
// Sets whether the search field is shown.	declaration of set_search_field_shown
// Updates the completions list per the filter.	declaration of refilter_completions
// Clears all completions and the prefix.	declaration of clear
// Indicates if there are no completions, and therefore nothing to render.	declaration of empty
// Updates the rendering if it's stale.	declaration of update_rendering
// Produces a rendering of the completions, at the given term size.	declaration of render
// Indicates the row and column for the given rendering. Returns -1 if no selection.	declaration of get_selected_column
// Indicates the row and column for the given rendering. Returns -1 if no selection.	declaration of get_selected_row
// Returns the currently selected completion for the given rendering.	declaration of selected_completion
// rendering. Returns true if the selection changed.	declaration of select_next_completion_in_direction
// Sets the terminal size.	declaration of set_term_size
// Sets the prefix.	declaration of set_prefix
// Sets the set of completions.	declaration of set_completions
// The text of the search field.	definition of search_field_line
// The unfiltered list. Note there's a lot of duplication here.	definition of unfiltered_completion_infos
// The filtered list of completion infos.	definition of completion_infos
// width of the completion, separator, description	definition of preferred_width
// but only if we have a description of course	definition of description_punctuated_width
// size_t min_width;	definition of comp_t
/// On-screen width of the description information.	definition of desc_width
/// On-screen width of the completion string.	definition of comp_width
/// The representative completion.	definition of representative
/// The description.	definition of desc
/// The list of all completion strings this entry applies to.	definition of comp
/// Data structure describing one or a group of related completions.	definition of comp_t
// columns.	declaration of visual_selected_completion_index
// Whether we show the search field.	definition of search_field_shown
// Fully disclosed means that we show all completions.	definition of fully_disclosed
"// How many rows we will show in the ""initial"" pager."	#define PAGER_UNDISCLOSED_MAX_ROWS 4
// The space between adjacent completions.	"#define PAGER_SPACER_STRING L""  """
// Special value that means deselect.	deselect
// Logical directions.	next
// Visual directions.	north
"// Returns a rendering with invalid data, useful to indicate ""no rendering""."	declaration of page_rendering_t
/// Represents rendering from the pager.	definition of page_rendering_t
// Pager support.	#ifndef FISH_PAGER_H
// Constructor	definition of page_rendering_t
// Clamp it to the right edge.	if (...) ... 
/// and our column is 1 (divide by N).	definition of get_selected_row
// completion is filtered.	definition of is_navigating_contents
// If we are still beyond the last selection, clamp it.	if (...) ... 
"// within it. This is how we implement ""column memory""."	while (...) ...
// No completions -> no selection.	if (...) ... 
// resizes the window - we don't want to drop back to the disclosed style.	ExprStmt
// Scroll	ExprStmt
// perform disclosure	ExprStmt
// The user moved south past the bottom completion.	if (...) ... 
// Ensure our suggested row start is not too early before it.	if (...) ... 
// Ensure our suggested row start is not past the selected row.	declaration
// this should never happen but be paranoid	return ...
// count to that to get the last one.	declaration
// Compute the new index based on the changed row.	ExprStmt
// Go west, wrapping to the previous row.	if (...) ... 
// end, wrap.	if (...) ... 
// If we go over the last element, wrap to the first.	if (...) ... 
// Go up a whole row. If we cycle, go to the previous column.	if (...) ... 
// Cardinal directions. We have a completion index; we wish to compute its row and column.	declaration
// Next, previous, or deselect, all easy.	if (...) ... 
// Ok, we had something selected already. Select something different.	declaration
// These do nothing.	return ...
// These directions do something sane.	if (...) ... 
// Handle the case of nothing selected yet.	if (...) ... 
// Must have something to select.	if (...) ... 
// Next iteration will be better, so skip this one.	continue;
// number of rows is better, skip cases where we know we can do better.	declaration
// Initially empty rendering.	ExprStmt
/// never fails.	declaration
// We limit the width to term_width - 1.	declaration
// Append spaces to make it at least the required width.	if (...) ... 
// Add the search field.	declaration
/* has_more */	ExprStmt
// Everything is filtered.	ExprStmt
"// these are the ""past the last value""."	ExprStmt
// We should never have one row remaining to disclose (else we would have just disclosed it)	declaration
// suggested_start_row.	ExprStmt
// Easy, we can show everything.	ExprStmt
// Determine the starting and stop row.	declaration
// no need to continue	return ...
// Compute total preferred width, plus spacing	declaration
// Force fit if one column.	if (...) ... 
// Calculate how wide the list would be.	for(...;...;...) ...
"// from consuming a line to show ""...and 1 more row""."	if (...) ... 
// our term height.	if (...) ... 
// we always subtract 1 to make room for a comment row	if (...) ... 
// Skip completions on tiny terminals.	if (...) ... 
// The calculated preferred width of each column.	declaration
/// the specified number of columns. Always succeeds if cols is 1.	definition of completion_try_print
// Refilter them.	ExprStmt
// Maybe join them.	if (...) ... 
// Get completion infos out of it.	ExprStmt
// Update completion_infos from unfiltered_completion_infos, to reflect the filter.	definition of refilter_completions
// no match	return ...
// Match against the completion strings.	for(...:...) ...
// Match against the description.	if (...) ... 
// We do full fuzzy matching just like the completion code itself.	declaration
// If we have no filter, everything passes.	if (...) ... 
// Indicates if the given completion info passes any filtering we have.	definition of completion_info_passes_filter
// fish_wcswidth() can return -1 if it can't calculate the width. So be cautious.	declaration
// If there's more than one, append the length of ', '.	if (...) ... 
// Set the representative completion.	ExprStmt
// Append the mangled description.	ExprStmt
// Append the single completion string. We may later merge these into multiple.	ExprStmt
// Make the list of the correct size up-front.	declaration
/// Generate a list of comp_t structures from a list of completions.	definition of process_completions_into_infos
// Erase the element at this index, and decrement the index to reflect that fact.	ExprStmt
// There's a prior completion with this description. Append the new ones to it.	declaration
// We're the first with this description.	ExprStmt
// Note that we mutate the completion list as we go, so the size changes.	for(...;...;...) ...
// The indexes are stored +1.	declaration
// leading is now at len, trailing is the new length of the string. Delete trailing spaces.	while (...) ...
// initial space in a run	{ ... }
// normal character	{ ... }
// Compress runs of spaces to a single space.	declaration
// Skip leading spaces.	for(...;...;...) ...
/// Trim leading and trailing whitespace, and compress other whitespace runs into a single space.	definition of mangle_1_completion_description
// Append this to the real line.	ExprStmt
// If there's more to come, append two spaces.	if (...) ... 
"// Print this completion on its own ""line""."	declaration
// Teach the rendering about the rows it printed.	ExprStmt
/// \param lst The list of completions to print	definition of completion_print
// No description, or it won't fit. Just add spaces.	ExprStmt
// the 2 here refers to the parenthesis below	while (...) ...
// always have at least two spaces to separate completion and description	ExprStmt
// Print the completion part	declaration
// The description gets what's left	ExprStmt
// If the description is short, give the completion the remaining space	declaration
// This expression is an overflow-safe way of calculating (width-4)*2/3	declaration
// The entry fits, we give it as much space as it wants.	ExprStmt
/// Print the specified item using at the specified amount of space.	definition of completion_print_item
// return how much we consumed	ExprStmt
// skip non-printable characters	continue;
/// ellipsized even if the string fits but takes up the whole space.	definition of print_max
"/// Returns numer / denom, rounding up. As a ""courtesy"" 0/0 is 0."	definition of divide_round_up
/// Text we use for the search field.	"#define SEARCH_FIELD_PROMPT _(L""search: "")"
/// Width of the search field.	#define PAGER_SEARCH_FIELD_WIDTH 12
/// The maximum number of columns of completion to attempt to fit onto the screen.	#define PAGER_MAX_COLS 6
/// Minimum height to show completions	#define PAGER_MIN_HEIGHT 4
/// The minimum width (in characters) the terminal must to show completions at all.	#define PAGER_MIN_WIDTH 16
// The offset is 0 based; the number is 1 based.	ExprStmt
// Subtract one for every newline we find in the range [offset, cached_lineno_offset).	for(...;...;...) ...
// Add one for every newline we find in the range [cached_lineno_offset, offset).	if (...) ... 
// cached_lineno_count is the number of newlines at indexes less than cached_lineno_offset.	declaration
// Easy hack to handle 0.	if (...) ... 
// Count the number of newlines, leveraging our cache.	ExprStmt
// If for some reason we're executing a node without source, return -1.	declaration
// If we're not executing anything, return -1.	if (...) ... 
// Check for stack overflow. The TOP check ensures we only do this for function calls.	if (...) ... 
// We have an infinite recursion.	return ...
// Check for infinite recursion: a function which immediately calls itself..	declaration
// Note we only expect block-style statements here. No not statements.	declaration
// Returns the result of the last job executed or skipped.	return ...
// Returns the result of the last job executed or skipped.	return ...
// Skipping is treated as success.	if (...) ... 
// OR. Skip if the last job succeeded.	ExprStmt
// AND. Skip if the last job failed.	ExprStmt
// Maybe skip the job if it has a leading and/or.	declaration
// If it passes, then run it.	if (...) ... 
// OR. Skip if the last job succeeded.	ExprStmt
// AND. Skip if the last job failed.	ExprStmt
// Check the conjunction type.	declaration
// clean up jobs	ExprStmt
// TODO: justify this, why not on every command?	if (...) ... 
// Actually execute the job.	if (...) ... 
// Check to see if this contained any external commands.	declaration
// Success. Give the job to the parser - it will clean it up.	ExprStmt
// Set the pgroup assignment mode and job group, now that the job is populated.	ExprStmt
// Clean up the job on failure or cancellation.	if (...) ... 
// Store time it took to 'parse' the command.	if (...) ... 
// will have been printed.	declaration
// the job ID here.	declaration
// just the block type.	ExprStmt
// specific_statement_type_is_redirectable_block check.	do (...) ...
// If no-exec has been given, there is nothing to time.	declaration
// is significantly faster.	if (...) ... 
// Profiling support.	declaration
// Save the node index.	declaration
// Increment the eval_level for the duration of this command.	declaration
// Need real error handling here.	ExprStmt
// We definitely do not want to execute anything if we're told we're --no-execute!	if (...) ... 
//!OCLINT(multiple unary operator)	ExprStmt
// Link up the processes.	ExprStmt
// Return what happened.	if (...) ... 
// Inform our processes of who is first and last	ExprStmt
// Store the new process (and maybe with an error).	ExprStmt
// Also redirect stderr to stdout.	declaration
// Handle the pipe, whose fd may not be the obvious stdout.	declaration
// Construct process_ts for job continuations (pipelines).	for(...:...) ...
// Create processes. Each one may fail.	declaration
"// Get the ""specific statement"" which is boolean / block / if / switch / decorated."	declaration
// nullglob (equivalent to set)	case ...:
// TODO this is mostly copied from expand_arguments_from_nodes, maybe extract to function	declaration
// Upcast to permit dropping the 'template' keyword.	definition of apply_variable_assignments
// Also redirect stderr to stdout.	ExprStmt
// Validate this spec.	if (...) ... 
// Make a redirection spec from the redirect token.	ExprStmt
// TODO: Improve this error message.	return ...
// PCA: I can't justify this skip_variables flag. It was like this when I got here.	declaration
// TODO: figure out if this can ever happen. If so, improve this error message.	return ...
// Get all redirection nodes underneath the statement.	for(...:...) ...
// We may have received a cancellation during this expansion.	if (...) ... 
// is called very frequently.	ExprStmt
// For no_exec, ignore the error - this might work at runtime.	if (...) ... 
// Expand this string.	declaration
// Expect all arguments to have source.	ExprStmt
// may have more or fewer, if there are wildcards involved).	ExprStmt
// have a wildcard that could not be expanded, report the error and continue.	definition of expand_arguments_from_nodes
// Populate the process.	ExprStmt
// Determine the process type.	ExprStmt
// The set of IO redirections that we construct for the process.	declaration
// command is '$gco foo' and $gco is git checkout.	ExprStmt
// Not implicit cd.	declaration
// If we have defined a wrapper around cd, use it, otherwise use the cd builtin.	ExprStmt
// Implicit cd is simple.	ExprStmt
// Produce the full argument list and the set of IO redirections.	declaration
// No command. If we're --no-execute return okay - it might be a function.	if (...) ... 
// Ok, no arguments or redirections; check to see if the command is a directory.	ExprStmt
// Implicit cd requires an empty argument and redirection list.	if (...) ... 
// If the specified command does not exist, and is undecorated, try using an implicit cd.	if (...) ... 
// distinguish between e.g. no file vs permissions problem.	declaration
// Determine the actual command. This may be an implicit cd.	declaration
// Determine the process type.	declaration
// For no-exec, having an empty command is okay. We can't do anything more with it tho.	if (...) ... 
// Get the command and any arguments due to expanding the command.	declaration
// We may decide that a command should be an implicit cd.	declaration
/// Creates a 'normal' (non-block) process.	definition of populate_plain_process
// For no-exec it's okay, as we can't really perform the expansion.	if (...) ... 
// of the token; we need to make them relative to the original source.	ExprStmt
// Expand the string to produce completions, and report errors.	declaration
// Get the unexpanded command string. We expect to always get it here.	declaration
// substitutions are not supported.	declaration
// Here we want to report an error (so it shows a backtrace), but with no text.	return ...
// error messages.	declaration
// status to 127, which is the standard number used by other shells like bash and zsh.	declaration
/// Handle the case of command not found.	definition of handle_command_not_found
// static	definition of get_argument_nodes
// static	definition of get_argument_nodes
// Mark status.	ExprStmt
// Print it.	if (...) ... 
// Get a backtrace.	declaration
// hackish	ExprStmt
// Create an error.	declaration
// Reports an error. Always returns end_execution_reason_t::error.	definition of report_error
// not-execute once so its contents can be checked, and then break.	if (...) ... 
// Handle break or continue.	declaration
// Push a while block and then check its cancellation reason.	declaration
// exit the loop.	if (...) ... 
// Check the condition.	declaration
// is false.	declaration
// Run while the condition is true.	for(...;...;...) ...
// affordance for the first condition.	declaration
// Success, evaluate the job list.	ExprStmt
// If this matched, we're done.	if (...) ... 
// Unescape wildcards so they can be expanded again.	declaration
// contains an unexpandable process will report and then fail to match.	declaration
// Expand case statements.	declaration
// If we expanded to nothing, match the empty string.	ExprStmt
// Expand it. We need to offset any errors by the position of the string.	declaration
// Get the switch variable.	declaration
// Handle break or continue.	declaration
// Now drive the for loop.	for(...:...) ...
// Get the contents to iterate over.	declaration
// in just one.	declaration
// no limit on the amount of output from builtin_function()	definition of streams
// Get arguments.	declaration
// Define a function.	definition of run_function_statement
// Basic begin/end block. Push a scope block, run jobs, pop it	ExprStmt
// Otherwise, take the exit status of the job list. Reversal of issue #1061.	return ...
// It's possible there's a last-minute cancellation (issue #1297).	if (...) ... 
// Execute the job list we got.	declaration
// No job list means no successful conditions, so return 0 (issue #1443).	ExprStmt
// Check our else body.	if (...) ... 
// See if we have an elseif.	declaration
// Condition succeeded.	ExprStmt
// in accordance with historic behavior.	declaration
// We start with the 'if'.	ExprStmt
// Index of the *next* elseif_clause to test.	declaration
// execute.	declaration
// not block statements	return ...
// type safety (in case we add more specific statement types).	declaration
// Helper to check if an argument_or_redirection_list_t has no redirections.	declaration
// Must be no pipes.	if (...) ... 
/// Return whether the job contains a single statement, of block type, with no redirections.	definition of job_is_simple_block
// etc).	switch (...) ... 
// may be null	return ...
// Check piped remainder.	if (...) ... 
// Check main statement.	ExprStmt
// Check the command.	declaration
// Helper to return if a statement is infinitely recursive in this function.	declaration
// Get the first job in the job list.	declaration
// Get the function name of the immediate block.	declaration
// on function invocation changes, then this check will break.	declaration
// Utilities	definition of get_source
/// Get a redirection from stderr to stdout (i.e. 2>&1).	definition of get_stderr_merge
// Get the source for the block, and cut it at the next statement terminator.	declaration
/// Get the name of a redirectable block, for profiling purposes.	definition of profiling_cmd_name_for_redirectable_block
/// These are the specific statement types that support redirections.	definition of type_is_redirectable_block
/// A string description appropriate for presentation to the user.	definition of user_presentable_description
/// Returns a string description of the given parse token.	definition of describe
/// Returns a string description for the given token type.	definition of token_type_description
// Preserve the special meaning of -1 as 'unknown'.	if (...) ... 
// pretend it's a space. We only expect this to be at the end of the string.	ExprStmt
"// construct a ""caret line"" that has tabs in corresponding positions."	declaration
// Append the line of text.	if (...) ... 
// then it's obvious.	declaration
// newline, that's the one we want, so start just before the end of the range.	declaration
// at a newline; we want to find the newline before it.	if (...) ... 
// Locate the beginning of this line of source.	declaration
/// Returns a string description of this parse error.	definition of describe_with_prefix
// Test each of these.	for(...:...) ...
// Helper to return a description of the first error.	declaration
// Defer to the tree-walking version.	return ...
// Early parse error, stop here.	if (...) ... 
// We do not bother to validate the rest of the tree in this case.	return ...
// has_unclosed_quote_or_subshell may only be set if allow_incomplete is true.	ExprStmt
// Remove this error, since we don't consider it a real error.	ExprStmt
// successfully.	declaration
// allow_incomplete is set.	declaration
// If our 'end' had no source, we are unsourced.	if (...) ... 
// If our 'end' had no source, we are unsourced.	if (...) ... 
// If our 'end' had no source, we are unsourced.	if (...) ... 
// If it's not a background job, nothing to do.	if (...) ... 
// See if our pipe has source but our statement does not.	if (...) ... 
// Verify no variable expansions.	declaration
// detecting job_continuations that have source for pipes but not the statement.	declaration
// source.	declaration
// Whether we encountered a parse error.	declaration
// there are no arguments in the list.	definition of detect_errors_in_block_redirection_list
// Check that we don't do an invalid builtin (issue #1252).	if (...) ... 
// continue. We stop our search here.	ExprStmt
// This is a loop header, so we can break or continue.	ExprStmt
// block_statement, and have to check its header.	declaration
// Check that we don't break or continue from outside a loop.	if (...) ... 
// See if we are in a function.	declaration
// 'return --help'.	if (...) ... 
// Check that pipes are sound.	if (...) ... 
// Check that we can expand the command.	if (...) ... 
// commands.	declaration
// --help', etc.	if (...) ... 
// Check our pipeline position.	declaration
// Walk up to the job.	declaration
// Get the statement we are part of.	declaration
// Determine if the first argument is help.	declaration
/// is an error and false if not. \p storage may be used to reduce allocations.	definition of detect_errors_in_decorated_statement
// Try getting the next job and check its decorator.	if (...) ... 
// Find the index of ourselves in the job list.	declaration
// while foo & ; end	declaration
/// Given that the job given by node should be backgrounded, return true if we detect any errors.	definition of detect_errors_in_backgrounded_job
// We have something like $$$^....  Back up until we reach the first $.	declaration
// Check for invalid variable expansions.	declaration
// As an optimization, this is only necessary if the last character is a $.	if (...) ... 
// within the string, and the offset of the node.	declaration
/// operator.	definition of parse_util_detect_errors_in_argument
// e.g. $(). Report somthing.	ExprStmt
/// bar. If arg ends with VARIABLE_EXPAND, then report an error.	definition of detect_dollar_cmdsub_errors
// We should have appended exactly one error.	ExprStmt
// Unescape (see issue #50).	if (...) ... 
// Make sure we always show something.	if (...) ... 
// Try to determine what's in the parens.	declaration
// handled earlier.	ExprStmt
// report a bracket error. Otherwise just complain about the ${.	declaration
// dollar sign.	ExprStmt
/// For example, if wc is @, then the variable name was $@ and we suggest $argv.	definition of error_format_for_character
// there are no arguments.	definition of get_first_arg
/// Returns 1 if the specified command is a builtin that may not be used in a pipeline.	definition of forbidden_pipe_commands
/// Append a syntax error to the given error list.	definition of append_syntax_error
// Here the middle newline should be indented by 1.	declaration
// willÂ immediately increment it.	definition of indent
// List of indents, which we populate.	definition of indents
// The last indent which we assigned.	definition of last_indent
// We use this to populate the indents even if there's no tokens in the range.	definition of last_leaf_end
// Later nodes will come along and overwrite these.	ExprStmt
// If this is a leaf node, apply the current indentation.	if (...) ... 
// we want to indent the newline.	if (...) ... 
// decrement the indent afterwards.	ExprStmt
// Increment indents for piped remainders.	case ...:
// Increment indents for conditions in headers (#1665).	case ...:
// Job lists are never unwound.	ExprStmt
// visiting its children.	declaration
// Simple trick: if our source does not contain a newline, then all indents are 0.	if (...) ... 
// to 0.	declaration
// terminate the quote and then re-enter it.	ExprStmt
"// std::fwprintf( stderr, L""Jump %d\n"",  end-cmd );"	if (...) ... 
/// Find the outermost quoting style of current token. Returns 0 if token is not quoted.	definition of get_quote
// Not a wildcard, but ensure the next iteration doesn't see this escaped backslash.	ExprStmt
// Remember previous string token.	if (...) ... 
// and break.	if (...) ... 
// so we set it to a zero element string and break.	if (...) ... 
// Calculate end of token.	if (...) ... 
// pos is equivalent to cursor_pos within the range of the command substitution {begin, end}.	declaration
// Do not add this to tokens	continue;
// Statement at cursor might start after this token.	if (...) ... 
/* FALLTHROUGH */	case ...:
/// Get the beginning and end of the job or process definition under the cursor.	definition of job_or_process_extent
// This command substitution ends before the cursor. Skip it.	ExprStmt
// command substitution in the string, we're done.	break;
// next one.	if (...) ... 
// This command substitution surrounds the cursor, so it's a tighter fit.	ExprStmt
// Interpret NULL to mean the end.	if (...) ... 
// No subshell found, all done.	break;
// ap and bp are the beginning and end of the tightest command substitution found so far.	declaration
// overflow is not likely.	ExprStmt
// Return the start and end.	ExprStmt
// Assign the substring to the out_contents.	declaration
// the end must be bigger than the beginning.	ExprStmt
// Nothing to do if the offset is at or past the end of the string.	if (...) ... 
// Clear the return values.	if (...) ... 
// open_type is typically ( or [, and close type is the corresponding value.	declaration
//!OCLINT(parameter reassignment)	ExprStmt
//!OCLINT(parameter reassignment)	ExprStmt
/// Maximum length of a variable name to show in error reports before truncation	definition of var_err_len
/// Error message for arguments to 'end'	"#define END_ARG_ERR_MSG _(L""'end' does not take arguments. Did you forget a ';'?"")"
/// Error message for backgrounded commands as conditionals.	"#define BACKGROUND_IN_CONDITIONAL_ERROR_MSG _(L""Backgrounded commands can not be used as conditionals"")"
/// Error message for use of backgrounded commands before and/or.	"#define BOOL_AFTER_BACKGROUND_ERROR_MSG _(L""The '%ls' command can not be used immediately after a backgrounded job"")"
/// \param null_ok Whether the pointer is allowed to point to 0	declaration of validate_pointer
/// Call this function to tell the program it is not in a sane state.	declaration of sanity_lose
// Prototypes for functions for performing sanity checks on the program state.	#ifndef FISH_SANITY_H
// Various block constructors.	definition of if_block
// source is at its beginning, because then it's obvious.	ExprStmt
// Determine which line we're on.	ExprStmt
// by rewriting the source.	declaration
// Execute the top job list.	return ...
// Set a valid status.	ExprStmt
// Print it.	ExprStmt
// Get a backtrace. This includes the message.	declaration
// Parse the source into a tree, if we can.	declaration
// Move the job to the beginning.	ExprStmt
// Use an error with empty text.	ExprStmt
// If we are not going to print a stack trace, at least print the line number and filename.	if (...) ... 
// Count the functions.	declaration
// fast path through the eval_level. If the eval_level is in bounds, so must be the stack depth.	if (...) ... 
// Fall back to the file being sourced.	return ...
// couldn't find that function level	return ...
// Return the function name for the current level.	return ...
// couldn't find a breakpoint frame	return ...
// Walk until we find a breakpoint, then take the next function.	declaration
/// The special value zero means the function frame immediately above the closest breakpoint frame.	definition of get_function_name
// contribute.	break;
// PCA: Have to make this a string somehow.	ExprStmt
/// begin with the current block.	definition of is_function
// detect that.	if (...) ... 
// Print where the function is called.	declaration
// TODO: Escape these.	ExprStmt
// Print arguments on the same line.	declaration
/// Append stack trace info for the block \p b to \p trace.	definition of append_block_description_to_stack_trace
// failed to expand a string	break;
// Get the root argument list and extract arguments from it.	declaration
// Failed to parse. Here we expect to have reported any errors in test_args.	return ...
// Parse the string as an argument list.	declaration
// dying (and hence will not fork).	declaration
/// Print profiling information to the specified stream.	definition of print_profile
// TODO: Lint says this isn't used (which is true). Should this be removed?	#endif
// Are we still in a breakpoint?	declaration
// Acquire ownership out of the block list.	declaration
// Note that deques do not move their contents so this is safe.	ExprStmt
// Types top and subst are not considered blocks for the purposes of `status is-block`.	if (...) ... 
// Given a new-allocated block, push it onto our block list, acquiring ownership.	definition of push_block
// Out of line destructor to enable forward declaration of parse_execution_context_t	definition of ~parser_t
"// Given a file path, return something nicer. Currently we just ""unexpand"" tildes."	definition of user_presentable_path
/// Unknown block description.	"#define UNKNOWN_BLOCK N_(L""unknown/invalid block"")"
/// Source block description.	"#define EVENT_BLOCK N_(L""event handler block"")"
/// Source block description.	"#define SOURCE_BLOCK N_(L""block created by the . builtin"")"
/// Begin block description.	"#define BEGIN_BLOCK N_(L""'begin' unconditional block"")"
/// Command substitution block description.	"#define SUBST_BLOCK N_(L""command substitution block"")"
/// Top block description.	"#define TOP_BLOCK N_(L""global root block"")"
/// Switch block description.	"#define SWITCH_BLOCK N_(L""'switch' block"")"
/// Function invocation block description.	"#define FUNCTION_CALL_NO_SHADOW_BLOCK N_(L""function invocation block with no variable shadowing"")"
/// Function invocation block description.	"#define FUNCTION_CALL_BLOCK N_(L""function invocation block"")"
/// If block description.	"#define IF_BLOCK N_(L""'if' conditional block"")"
/// Variable assignment block.	"#define VARIABLE_ASSIGNMENT_BLOCK N_(L""block created by variable assignment prefixing a command"")"
/// Breakpoint block.	"#define BREAKPOINT_BLOCK N_(L""block created by breakpoint"")"
/// For block description.	"#define FOR_BLOCK N_(L""'for' block"")"
/// While block description.	"#define WHILE_BLOCK N_(L""'while' block"")"
/// Error for evaluating in illegal scope.	"#define INVALID_SCOPE_ERR_MSG _(L""Tried to evaluate commands using invalid block type '%ls'"")"
// Everything above is executed only at startup, this is the actual optimized search routine:	return ...
// Everything above is executed only at startup, this is the actual optimized search routine:	return ...
// Everything above is executed only at startup, this is the actual optimized search routine:	return ...
// functions below require them to contain.	definition of list_max_length
// Too many slashes.	ExprStmt
// Need a slash	ExprStmt
// Simple check.	ExprStmt
// Prepend the working directory. Note that we know path is not empty here.	declaration
// Some special paths are always valid.	if (...) ... 
// We matched if we consumed all of the characters in both strings.	return ...
// non-slash. Note the first condition is invariant within the loop.	while (...) ...
// If the characters are different, the strings are not equivalent.	if (...) ... 
// Ignore trailing slashes after the first character.	while (...) ...
// This is either the first slash in a run, or not a slash at all.	ExprStmt
// Ignore trailing slashes, unless it's the first character.	declaration
// uvars are available.	declaration
/// result; see the base_directory_t fields.	definition of make_base_directory
/// whether an XDG variable was used in resolving the directory.	definition of used_xdg
/// the error code if creating the directory failed.	definition of err
/// whether creating the directory succeeded.	definition of success
/// the path where we attempted to create the directory.	definition of path
/// actually) to XDG spec.	definition of base_directory_t
/// \return 0 if, at the time of function return the directory exists, -1 otherwise.	definition of create_directory
/// a function) we don't want that subshell to issue the same warnings.	definition of maybe_issue_path_warning
// Construct and return a new path.	declaration
// Removing leading /s.	while (...) ...
"// Remove up to one ""./""."	declaration
// No need to prepend the wd, so just return the path we were given.	return ...
// directory. This operates on unescaped paths only (so a ~ means a literal ~).	definition of path_apply_working_directory
// cannot (that's used for sourcing files anyways).	return ...
// We want to return an absolute path (see issue 6220)	if (...) ... 
// next_path is just '.', and we have a working directory, so use the wd instead.	ExprStmt
// Always append $PWD	ExprStmt
// Respect CDPATH.	declaration
// Path is relative to the working directory.	ExprStmt
// Absolute path.	ExprStmt
// looking for matching commands in the PATH var.	if (...) ... 
// mode was specified, but we have X_OK hard-coded above.	case ...:
// does not exist. Yes, even 0. No, none of this is documented.	#endif
// looking for a matching command.	if (...) ... 
// we've already tested.	definition of dflt_pathsv
/// Unexpected error in path_get_path().	"#define MISSING_COMMAND_ERR_MSG _(L""Error while searching for command '%ls'"")"
// OK to not use CLO_EXEC here because this is only called after fork.	declaration
/// shebang.	definition of get_interpreter
// find must be errors from exec().	declaration
// print the real limit.	ExprStmt
// FISH_USE_POSIX_SPAWN	#endif
// Apply our dup2s.	for(...:...) ...
// No signals blocked.	if (...) ... 
// Everybody gets default handlers.	if (...) ... 
// Set our flags.	declaration
// Remove all signal blocks.	declaration
// Set the handling for job control signals back to the default.	declaration
// should creating a new process group.	ExprStmt
// If it is zero, create a new pgroup from the pid. If it is >0, join that pgroup.	declaration
// Initialize our fields. This may fail.	{ ... }
// \return whether we have any error.	definition of check_fail
// the error reporting below.	if (...) ... 
// completion handlers may do unexpected things.	ExprStmt
/// will exit with an error message.	definition of execute_fork
// Do this after any tcsetpgrp call so that we swallow SIGTTIN.	ExprStmt
// Ensure this doesn't send us to the background (see #5963)	ExprStmt
// stdin.	if (...) ... 
// We need to unset the CLO_EXEC flag.	ExprStmt
// Normal redirection.	ExprStmt
// Note we are called in a forked child.	for(...:...) ...
// we see the same with tcsetpgrp(2) in other places and it disappears on retry.	ExprStmt
// Paranoia.	continue;
// This is an unavoidable benign race.	return ...
// Historically we have looped here to support WSL.	declaration
/// Report the error code \p err for a failed setpgid call.	definition of report_setpgid_error
/// Fork error message.	"#define FORK_ERROR ""Could not create child process - exiting"""
/// The number of nanoseconds to sleep between attempts to call fork().	#define FORK_SLEEP_TIME 1000000
/// The number of times to try to call fork() before giving up.	#define FORK_LAPS 5
/* block_ok */	ExprStmt
// Internal block nodes do not have argv - see issue #1545.	declaration
// finished and is not a short-circuited builtin.	declaration
// Wait for the status of our own job to change.	while (...) ...
// reset the status of each process instance	for(...:...) ...
// This returns without bubbling up the error. Presumably that is OK.	return ...
// to make that distinction.	if (...) ... 
// If both requested and necessary, send the job a continue signal.	if (...) ... 
// terminal_maybe_give_to_job prints an error.	return ...
// https://github.com/fish-shell/fish-shell/issues/2114	if (...) ... 
// Make sure we retake control of the terminal before leaving this function.	declaration
// Put job first in the job list.	ExprStmt
// See: https://github.com/fish-shell/fish-shell/issues/2114	if (...) ... 
// If it's not a tty, it's not a tty, and there are no attributes to save (or restore)	if (...) ... 
// Save jobs terminal modes.	declaration
/// group, so that we can restore the terminal ownership to the job at a later time.	definition of terminal_return_from_job_group
// it would have hung waiting for terminal IO (SIGTTIN). We can safely ignore this.	do (...) ...
// call's EBADF handler above.	return ...
// then retry until not EPERM or the process group has exited.	do (...) ...
// state or the other.	ExprStmt
// Retry so long as this isn't because the process group is dead.	declaration
// terminated.	ExprStmt
// stdin has been closed. Workaround a glibc bug - see #3644.	ExprStmt
// not a tty - see #6573.	return ...
// a significant cost when running process groups in quick succession.	declaration
// block indefinitely).	while (...) ...
// If we are continuing, ensure that stdin is marked as blocking first (issue #176).	if (...) ... 
// Get the pgid; we may not have one.	declaration
// The job doesn't want the terminal.	return ...
// restoring a previously-stopped job, in which case we need to restore terminal attributes.	definition of terminal_maybe_give_to_job_group
/// Update the CPU time for all jobs.	definition of proc_update_jiffies
// Don't use autoclose_fd here, we will fdopen() and then fclose() instead.	declaration
/// Maximum length of a /proc/[PID]/stat filename.	declaration
/// Get the CPU time for the specified process.	definition of proc_get_jiffies
// Restore the exit status.	ExprStmt
// Preserve the exit status.	declaration
// Post pending exit events.	for(...:...) ...
// handler doesn't remove jobs on our behalf.	declaration
// handlers.	if (...) ... 
// Print the message if we need to.	if (...) ... 
// Print status messages for completed or stopped jobs.	for(...:...) ...
// A helper to indicate if we should process a job.	declaration
// complete.	declaration
// Remove all disowned jobs.	ExprStmt
// Don't try to print in that case (#3222)	declaration
// avoid infinite recursion).	if (...) ... 
/// \return whether something was printed.	definition of process_clean_after_marking
// Did we already print a status message?	if (...) ... 
/// \return whether this job wants a status message printed when it stops or completes.	definition of job_wants_message
// TODO: this seems like a clumsy way to ensure that.	ExprStmt
// Ignore SIGPIPE. We issue it ourselves to the pipe writer when the pipe reader dies.	if (...) ... 
// Add an exit event if the process did not come from a job handler.	if (...) ... 
/// \return true if we printed a status message, false if not.	definition of try_clean_process_in_job
/// jobs that still have an in-flight parent job). Note we never print statuses for such jobs.	definition of remove_disowned_jobs
/// Format information about job status for the user to look at.	definition of job_status_t
/// Call the fish_job_summary function with the given args.	definition of print_job_summary
// Remove any zombies.	ExprStmt
// Try reaping an external process.	declaration
// Try reaping an internal process.	if (...) ... 
// Potentially reapable. Update its gen count and try reaping it.	ExprStmt
// Update the signal hup/int gen.	ExprStmt
// Now check for changes, optionally waiting.	declaration
// No reapable processes, nothing to wait for.	return ...
// Get the gen count of all reapable processes.	declaration
/// signal).	definition of process_mark_finished_children
// Reap any pids in our disowned list that have exited. This is used to avoid zombies.	definition of reap_disowned_pids
// process id by using the negative of its value.	ExprStmt
// one job, and may result in a deadlock if we attempt the wait.	if (...) ... 
/// we exit. Poll these from time-to-time to prevent zombie processes from happening (#5342).	definition of s_disowned_pids
// Deliver the SIGINT or SIGQUIT signal to ourself since we're not interactive.	declaration
// Mark the job group as cancelled.	ExprStmt
/// Set the status of \p proc to \p status.	definition of handle_child_status
// valid pid. Mark it and everything after it as dead.	declaration
//  2. The first process in the job is internal to fish; this needs to own the tty.	if (...) ... 
// Mark if it's foreground.	ExprStmt
// We cannot use the internal group for this job.	ExprStmt
// Background jobs always get a new group.	ExprStmt
// We don't have a group yet.	ExprStmt
// This is true if it's a simple foreground execution of an internal proc.	declaration
// across threads, but their pgid should always have been set beforehand.	ExprStmt
// a pgid with the shell.	declaration
// Return whether we have an external process.	for(...:...) ...
// For example in `ls | begin ; cat ; end` we don't need to report the cat sub-job.	if (...) ... 
// If we never got a pgid then we never launched the external process, so don't report it.	if (...) ... 
/// Return true if the last processes in the job has completed.	definition of is_completed
/// Return true if all processes in the job have stopped or completed.	definition of is_stopped
// isn't worth it.	declaration
// The new job ID should be larger than the largest currently used ID (#6053).	declaration
// This is deliberately leaked to avoid dtor ordering issues - see #6539.	definition of locked_consumed_job_ids
// Note that if we become interactive, we also ignore SIGTTOU.	if (...) ... 
// Check for /proc/self/stat to see if we are running with Linux-style procfs.	declaration
/// The signals that signify crashes to us.	definition of crashsignals
/// Paste from the killring.	declaration of kill_yank
/// Rotate the killring.	declaration of kill_yank_rotate
/// Add a string to the top of the killring.	declaration of kill_add
/// Replace the specified string in the killring.	declaration of kill_replace
// previous cuts.	#ifndef FISH_KILL_H
// If the exit command was called in a script, only exit the script, not the program.	ExprStmt
// int inter = ((fd == STDIN_FILENO) && isatty(STDIN_FILENO));	if (...) ... 
// proc_push_interactive/proc_pop_interactive.	declaration
// Be careful to transfer ownership, this could be a very large string.	declaration
// Parse into an ast and detect errors.	declaration
// Swallow a BOM (issue #1518).	if (...) ... 
// Eagerly deallocate to save memory.	ExprStmt
// Reset buffer on error. We won't evaluate incomplete files.	ExprStmt
// Fatal error.	do (...) ...
// We succeeded in making the fd blocking, keep going.	continue;
// EOF.	break;
// Read all data into a std::string.	declaration
/// The file is not closed.	definition of read_ni
/// Sets the command line contents, clearing the pager.	definition of reader_set_buffer
// We handled the interrupt ourselves, our caller doesn't need to handle it.	return ...
// return to previous mode	ExprStmt
// in all cases, but only complain if interactive.	if (...) ... 
// TODO: this may fail if eos doesn't exist, in which case we should emit newlines.	ExprStmt
// Ensure we have no pager contents when we exit.	if (...) ... 
// But do not emit a newline if the cursor has wrapped onto a new line all its own - see #6826.	if (...) ... 
// reason to report this to the user unless they've enabled debugging output.	do (...) ...
// End paging upon inserting into the normal command line.	if (...) ... 
// Regular character.	declaration
// Ordinary char.	declaration
// See #6937.	ExprStmt
// Go back to the search string by simply undoing the history-search edit.	ExprStmt
// search.	if (...) ... 
// Clear the pager if necessary.	declaration
// If we get something other than a repaint, then stop coalescing them.	if (...) ... 
// We've already hit the specified character limit.	ExprStmt
// Perhaps update the termsize. This is cheap if it has not changed.	ExprStmt
// mode. See #4178 for one such example.	if (...) ... 
// Get the current terminal modes. These will be restored when the function returns.	if (...) ... 
// The command line before completion.	ExprStmt
// SIZE_MAX.	if (...) ... 
// This is simply to reduce noise.	declaration
// Some commands should have been handled internally by inputter_t::readch().	case ...:
// lowercase (false).	declaration
// We apply the operation from the current location to the end of the word.	declaration
// For capitalize_word, whether we've capitalized a character so far.	declaration
// the buffer position ahead of the replaced text.	ExprStmt
// Toggle the case of the current character.	declaration
// Loop through the selected characters and toggle their case.	for(...;...;...) ...
// Check that we have an active selection and get the bounds.	declaration
// the buffer position ahead of the replaced text.	ExprStmt
// Toggle the case of the current character	declaration
// Check that the cursor is on a character	if (...) ... 
// Put cursor right after the second token.	ExprStmt
// Compose new command line with swapped tokens.	declaration
// Make sure we have two tokens.	if (...) ... 
// ...retry beginning from the previous token.	declaration
// In case we didn't find a token at or after the cursor...	if (...) ... 
// If we are not in a token, look for one ahead.	declaration
// moving the cursor forward as well.	if (...) ... 
// If the cursor is at the end, transpose the last two characters of the line.	if (...) ... 
// Not navigating the pager contents.	declaration
// We pressed a direction with a non-empty pager, begin navigation.	ExprStmt
// Up arrow, go north.	ExprStmt
// Up arrow, but we are in the first column and first row. End navigation.	ExprStmt
// Down arrow is always south.	ExprStmt
// We are already navigating pager contents.	declaration
/* do not erase */	ExprStmt
/* do not erase */	ExprStmt
/* same kill item if same movement */	break;
/* erase */	ExprStmt
// punctuation.	declaration
/* erase */	ExprStmt
// Is this the same killring item as the last kill?	declaration
// Skip the autosuggestion in the history unless it was truncated.	declaration
// Searching by line.	ExprStmt
// No current token, refuse to do a token search.	ExprStmt
// Searching by token.	declaration
// already be printed, all we need to do is repaint.	declaration
// We are incomplete, continue editing.	ExprStmt
// space.	declaration
// as not to block the user.	declaration
// below triggers a repaint.	ExprStmt
// will have to test again.	declaration
// See if this command is valid.	declaration
// If the conditions are met, insert a new line at the position of the cursor.	if (...) ... 
// Move the cursor to the end of the line.	ExprStmt
// Allow mid line split if the following character is whitespace (issue #613).	if (...) ... 
// We're at the end of the text and not in a comment (issue #1225).	ExprStmt
// Allow backslash-escaped newlines.	declaration
// We only execute the command line.	declaration
// Clear the pager in that event.	ExprStmt
// Delete any autosuggestion.	ExprStmt
// If the user hits return while navigating the pager, it only clears the pager.	if (...) ... 
// using a backslash, insert a newline.	case ...:
/* backward */	ExprStmt
// syntax highlighting, etc.	declaration
// Push end forwards to just past the next newline, or just past the last char.	declaration
// beginning of a line; this justifies the -1 check.	declaration
"// newline""."	declaration
// Delete until we hit a newline, or the beginning of the string.	while (...) ...
// make sure we delete at least one character (see issue #580)	ExprStmt
// Toggle search, and begin navigating if we are now searching.	declaration
// Show the search field if requested and if we printed a list of completions.	if (...) ... 
// Record our cycle_command_line.	ExprStmt
// overflow.	if (...) ... 
"// std::fwprintf(stderr, L""Complete (%ls)\n"", buffcpy.c_str());"	declaration
// (echo foo) the last token is 'foo)'. Don't let that happen.	if (...) ... 
// pass cmdsub_begin here, not buff.	declaration
// completions - stuff happening outside of it is not interesting.	declaration
// Get the string; we have to do this after removing any trailing backslash.	declaration
// rare.	if (...) ... 
// disclosed, then become so; otherwise cycle through our available completions.	if (...) ... 
/* redraw prompt */	ExprStmt
/* redraw prompt */	ExprStmt
// elsewhere, we detect if the mode output is empty.	ExprStmt
// The only thing we can cancel right now is paging, which we handled up above.	break;
// We print a newline last so the prompt_sp hack doesn't get us.	ExprStmt
// Repaint also changes the actual cursor position	ExprStmt
// Move cursor to the end of the line.	ExprStmt
// Go to beginning of line.	case ...:
/// Handle a readline command \p c, updating the state \p rls.	definition of handle_readline_command
// Since we handled a normal character, we don't have a last command.	ExprStmt
// End paging upon inserting into the normal command line.	if (...) ... 
// The cursor is at the beginning and nothing is accumulated, so skip this character.	continue;
/// \return the next unhandled event.	definition of read_normal_chars
/// Maximum number of characters to read.	definition of nchars
/// command.	definition of finished
/// Whether we are skipping redundant repaints.	definition of coalescing_repaints
/// List of completions.	definition of comp
"/// If the last ""complete"" readline command has inserted text into the command line."	definition of complete_did_insert
/// If the last command was a yank, the length of yanking that occurred.	definition of yank_len
/// The last command that was executed.	definition of last_cmd
/// state should be in reader_data_t.	definition of readline_loop_state_t
/// \return true if an event is a normal character that should be inserted into the buffer.	definition of event_is_normal_char
/// Returns true if the last token is a comment.	definition of text_ends_in_comment
// note pos == str.size() is OK.	if (...) ... 
/// the string, which indicates if there is a trailing backslash.	definition of is_backslashed
/// Test if there are bytes available for reading on the specified file descriptor.	definition of can_read
// Allow any pending history items to be returned in the history array.	if (...) ... 
// reader_set_buffer during evaluation.	declaration
/// Read interactively. Read input from stdin while providing editing facilities.	definition of read_i
/// Returns the current interactive loop count	definition of reader_run_count
// Kill remaining jobs before exiting.	ExprStmt
// Perhaps print a warning before exiting.	declaration
// kill background jobs.	return ...
/// interactive mode. It checks if it is ok to exit.	definition of handle_end_loop
// itself. But this is better than nothing.	declaration
// history.	if (...) ... 
// Import history from older location (config path) if our current history is empty.	declaration
// We don't need to _change_ if we're not initialized yet.	declaration
/// Access the top level reader data.	definition of current_data_or_null
/// The stack of current interactive reading contexts.	definition of reader_data_stack
// the autosuggestion.	declaration
// Highlighting including I/O proceeds in the background.	declaration
// Highlighting without IO, we just do it.	ExprStmt
///        an asynchronous highlight in the background, which may perform disk I/O.	definition of super_highlight_me_plenty
// return a function that performs highlighting. The function may be invoked on a background thread.	definition of get_highlight_performer
// nothing if they have not.	ExprStmt
/// Called to set the highlight flag for search results.	definition of highlight_search
// just hit enter and so there's junk on the current line.	if (...) ... 
/* do accept incomplete */	if (...) ... 
// Append a newline, to act as a statement terminator.	ExprStmt
// For compatibility with fish 2.0's $_, now replaced with `status current-command`	ExprStmt
// issue - #4926	if (...) ... 
// For compatibility with fish 2.0's $_, now replaced with `status current-command`	if (...) ... 
// Clear history search and pager contents.	ExprStmt
//!OCLINT(parameter reassignment)	ExprStmt
// Don't set a position past the command line length.	if (...) ... 
// operator= with a pointer to our interior, so use an intermediate.	declaration
/// Sets the command line contents, without clearing the pager.	definition of set_buffer_maintaining_pager
// Don't autosuggest after a kill.	if (...) ... 
// Always consume at least one character.	if (...) ... 
// Return if we are already at the edge.	declaration
/// \param newv if the new kill item should be appended to the previous kill item or not.	definition of move_word
/// Apply the history search to the command line.	definition of update_command_line_from_history_search
// Find current token.	declaration
/// Undo the transient edit und update commandline accordingly.	definition of clear_transient_edit
/// Set the specified string as the current buffer.	definition of set_command_line_and_position
/// Destroy data for interactive use.	definition of reader_interactive_destroy
// For compatibility with fish 2.0's $_, now replaced with `status current-command`	ExprStmt
// Configure terminal attributes	if (...) ... 
// Take control of the terminal	if (...) ... 
// This should be harmless, so we ignore it.	if (...) ... 
// Also become the process group leader if flag -i/--interactive was given (#5909).	if (...) ... 
// Wait until we own the terminal.	ExprStmt
// Ensure interactive signal handling is enabled.	ExprStmt
// Set up key bindings.	ExprStmt
/// Initialize data for interactive use.	definition of reader_interactive_init
// Try stopping us.	declaration
// We're orphaned, so we just die. Another sad statistic.	declaration
// success	break;
// No TTY, cannot be interactive?	ExprStmt
// the fallout from this in a few other places.	break;
// avoid a second pass through this loop.	ExprStmt
"// just an ""invalid"" pid for all intents and purposes."	if (...) ... 
// Eventually we just give up and assume we're orphaend.	for(...;...;...) ...
// signals.	ExprStmt
// Common case.	if (...) ... 
// report an error and exit.	definition of acquire_tty_or_exit
// Just give up if we've done it a lot times.	if (...) ... 
// Open the tty. Presumably this is stdin, but maybe not?	declaration
// may block.	if (...) ... 
// it no longer exists, and we are orphaned.	if (...) ... 
/// stop ourselves via SIGGTIN.	definition of check_for_orphaned_process
// Modify the command line to reflect the new pager.	ExprStmt
// Invalidate our rendering.	ExprStmt
// Append just the end of the string.	ExprStmt
// no prefix	ExprStmt
// Print the completion list.	declaration
// a prefix; don't insert a space after it.	if (...) ... 
// the token but being longer than it.	ExprStmt
// Early out if we decide there's no common prefix.	if (...) ... 
// idx is now the length of the new common prefix.	ExprStmt
// hopefully better than towlower().	ExprStmt
// If we are replacing the token, allow case to vary.	if (...) ... 
// Determine the shared prefix length.	declaration
// First entry, use the whole string.	ExprStmt
// Try to find a common prefix to insert among the surviving completions.	declaration
// Ignore completions with a less suitable match type than the best.	if (...) ... 
// figure out how to avoid copying them here.	declaration
// type do not require replacement, then ignore all those that want to use replacement.	declaration
// the token doesn't contain evil operators like {}.	if (...) ... 
// Exactly one suitable completion found - insert it.	declaration
// No suitable completions found, flash screen and return.	ExprStmt
// Check trivial cases.	declaration
/// Return true if we inserted text into the command line, false if we did not.	definition of handle_completions
// will only show one match if it matches a file exactly. (see issue #959).	if (...) ... 
/// Determine the best match type for a set of completions.	definition of get_best_match_type
// Test characters that have a special meaning in any character position.	while (...) ...
/// flag is set.	definition of reader_can_replace
/// completion.	"#define REPLACE_UNCLEAN L""$*?({})"""
// See #3693.	ExprStmt
/// BEL to maybe flash the screen or emite a sound, depending on how it is configured.	definition of flash
// Ensure we have no pager contents.	definition of clear_pager
// Accept characters according to the specified style.	declaration
// Just take the whole thing.	ExprStmt
// Accept the autosuggestion.	if (...) ... 
// Accepting an autosuggestion clears the pager.	ExprStmt
// thing; if it's false, then respect the passed in style.	definition of accept_autosuggestion
// we're not doing a history search.	ExprStmt
// Autosuggestion is active and the search term has not changed, so we're good to go.	ExprStmt
// Called after an autosuggestion has been computed on a background thread	definition of autosuggest_completed
// and our command line contains a non-whitespace character.	declaration
// this should use shared_ptr	return ...
// on a background thread) to determine the autosuggestion	definition of get_autosuggestion_performer
/* not append only */	ExprStmt
// repaint() is done later	ExprStmt
// Move the cursor to the end of the token.	if (...) ... 
/// struct for more information on possible values.	definition of completion_insert
// This is a quoted parameter, first print a quote.	ExprStmt
// Perform the insertion and compute the new location.	declaration
// Move the character back one so we enter the terminal quote.	ExprStmt
// unescaped quote.	declaration
// the quotes instead of after them. See issue #552.	if (...) ... 
// substitution as one token.	ExprStmt
// innermost command substitution.	declaration
/// \return The completed string	definition of completion_apply_to_command_line
// nonzero to its length.	ExprStmt
/// Returns true if the string changed.	definition of insert_string
/// highlighting, etc.	definition of delete_char
/// Indicates if the given command ends the history search.	definition of command_ends_history_search
// These commands operate on the search field if that's where the focus is.	return ...
// specially.	return ...
// These commands never end paging.	return ...
// These commands always end paging.	return ...
/// Indicates if the given command char ends paging.	definition of command_ends_paging
// Beware, we may be in a signal handler.	ExprStmt
/// namely EOF and SIGHUP.	definition of reader_force_exit
/// Exit the current reader loop. This may be invoked from a signal handler.	definition of reader_set_end_loop
/// restore_foreground_process_group, otherwise we won't think we own the terminal.	definition of restore_term_mode
// setting the COLUMNS and LINES env vars.	ExprStmt
// Set the mode used for the terminal, initialized to the current mode.	ExprStmt
// Disable flow control for external commands by default.	ExprStmt
// Set the mode used for program execution, initialized to the current mode.	ExprStmt
// Save the initial terminal mode.	ExprStmt
// prompt is written.	ExprStmt
// hack to work.	ExprStmt
// Right prompt does not support multiple lines, so just concatenate all of them.	ExprStmt
// Status is ignored.	ExprStmt
// Ignore return status.	ExprStmt
// If we have any prompts, they must be run non-interactively.	if (...) ... 
// This allows prompts to react to $COLUMNS.	ExprStmt
// Do not allow the exit status of the prompts to leak through.	declaration
// Suppress fish_trace while in the prompt.	declaration
// Clear existing prompts.	ExprStmt
/// Reexecute the prompt command. The output is inserted into prompt_buff.	definition of exec_prompt
// them.	for(...:...) ...
// Put the cursor back at the beginning of the line (issue #2453).	ExprStmt
/* ignore exit status */	ExprStmt
// reader_repaint clears repaint_needed	ExprStmt
/* repaint prompt */	ExprStmt
// Try expanding abbreviations.	declaration
/// repaints.	definition of expand_abbreviation_as_necessary
// relative position of the cursor.	declaration
// Now if we found a command node, expand it.	declaration
// Success!	ExprStmt
// Look for plain statements where the cursor is at the end of the command.	declaration
// Determine the offset of this command substitution.	declaration
// extent of the first token.	declaration
/// Expand abbreviations at the given cursor position. Does NOT inspect 'data'.	definition of reader_expand_abbreviation_in_command
// Trigger repaint (see issue #765).	ExprStmt
/* transient */	ExprStmt
// Only update if something changed, to avoid useless edits in the undo history.	if (...) ... 
// Update the cursor and command line.	declaration
// Update the gen count.	ExprStmt
// it will be correct. If it is, it avoids a repaint.	declaration
/// Make sure buffers are large enough to hold the current string length.	definition of command_line_changed
// This is called from a signal handler!	definition of reader_handle_sigint
/// Internal helper function for handling killing parts of text.	definition of kill
// Prepend the mode prompt to the left prompt.	ExprStmt
// Combine the command and autosuggestion into one string.	ExprStmt
// Update the indentation.	ExprStmt
/// perform syntax highlighting, write the commandline and move the cursor.	definition of repaint
/// Update the cursor position.	definition of update_buff_pos
// to the first test above.	ExprStmt
// Use the autosuggestion's case.	ExprStmt
// disagreement. Decide whose case we want to use.	declaration
// No case disagreements, or no extra characters in the autosuggestion.	ExprStmt
// No or useless autosuggestion, or no command line.	ExprStmt
// we use the case of the autosuggestion. This is an idea from issue #335.	declaration
/// Given a command line and an autosuggestion, return the string that gets shown to the user.	definition of combine_command_and_autosuggestion
// These cause other ridiculous behaviors like input not being shown.	ExprStmt
// See #7133.	ExprStmt
// Copy the (potentially changed) terminal modes and use them from now on.	declaration
/// Grab control of terminal.	definition of term_steal
/// Give up control of terminal.	definition of term_donate
// Only now can the flag be set	ExprStmt
// execute anything as our loop will be blocked from running.	ExprStmt
// guarantee runs.	if (...) ... 
// to avoid a user script triggering SIGTTIN or SIGTTOU.	if (...) ... 
// Beware, we are in a signal handler	ExprStmt
/// latches (once set it is never cleared). This should never be reset to false.	definition of s_exit_forced
/// Whether we should exit the current reader loop.	definition of s_end_current_loop
// (these two are already disabled because of IXON/IXOFF)	ExprStmt
// POSIX calls out -1 as a special value which should be ignored.	#ifdef _POSIX_VDISABLE
// Disable flow control in the shell. We don't want to be stopped.	ExprStmt
"// turn on ""implementation-defined post processing"" - this often"	ExprStmt
// turn off handling of discard and lnext characters	ExprStmt
// turn off echo mode	ExprStmt
// turn off canonical mode	ExprStmt
// disable mapping NL (\cJ) to CR (\cM)	ExprStmt
// disable mapping CR (\cM) to NL (\cJ)	ExprStmt
/// Restore terminal settings we care about, to prevent a broken shell.	definition of term_fix_modes
/// Mode we use to execute programs.	definition of tty_modes_for_external_cmds
/// Mode on startup, which we restore on exit.	definition of terminal_mode_on_startup
// Prototypes for a bunch of functions defined later on.	declaration of unescaped_quote
// Prototypes for a bunch of functions defined later on.	declaration of is_backslashed
/// This variable is set to a signal by the signal handler when ^C is pressed.	definition of interrupted
/// Called to update the termsize, including $COLUMNS and $LINES, as necessary.	definition of update_termsize
/// highlighting, etc.	definition of insert_char
/// Access the parser.	definition of parser
/// Return the variable set used for e.g. command duration.	definition of vars
/// Expand abbreviations at the current cursor position, minus backtrack_amt.	declaration of expand_abbreviation_as_necessary
/// Do what we need to do whenever our pager selection changes.	declaration of pager_selection_changed
/// Do what we need to do whenever our command line changes.	declaration of command_line_changed
/// field.	definition of active_edit_line
/// The target character of the last jump command.	definition of last_jump_target
/// Whether the reader should exit on ^C.	definition of exit_on_interrupt
/// Whether a screen reset is needed after a repaint.	definition of screen_reset_needed
/// repaint.	definition of repaint_needed
/// The current contents of the top item in the kill ring.	definition of kill_item
/// ^D twice.	definition of prev_end_loop
/// Function for testing if the string can be returned.	definition of test_func
/// Function for syntax highlighting.	definition of highlight_func
/// Whether tab completion is allowed.	definition of complete_ok
/// An array defining the block level at each character.	definition of indents
/// classification (according to the enum in highlight.h) of buff[i].	definition of colors
/// Completion support.	definition of cycle_command_line
/// The output of the last evaluation of the right prompt command.	definition of right_prompt_buff
/// The output of the last evaluation of the prompt command.	definition of left_prompt_buff
/// The prompt commands.	definition of left_prompt
/// The stop position of the current selection, if one.	definition of sel_stop_pos
/// The start position of the current selection, if one.	definition of sel_start_pos
/// The position of the cursor, when selection was initiated.	definition of sel_begin_pos
/// Indicates whether a selection is currently active.	definition of sel_active
/// The history search.	definition of history_search
/// The history.	definition of history
/// The source of input events.	definition of inputter
/// The representation of the current screen contents.	definition of screen
/// Silent mode used for password input on the read command	definition of silent
/// Whether abbreviations are expanded.	definition of expand_abbreviations
/// When backspacing, we temporarily suppress autosuggestions.	definition of suppress_autosuggestion
/// Whether autosuggesting is allowed at all.	definition of allow_autosuggestion
/// Current page rendering.	definition of current_page_rendering
/// Current pager.	definition of pager
/// String containing the autosuggestion.	definition of autosuggestion
/// old transient change will be removed from the undo history.	definition of command_line_has_transient_edit
/// String containing the whole current commandline.	definition of command_line
/// The parser being used.	definition of parser_ref
/// reader_readline() calls are nested. This happens when the 'read' builtin is used.	definition of reader_data_t
// namespace	declaration of readline_loop_state_t
/// Reset to inactive search.	definition of reset
// We can skip dedup in history_search_t because we do it ourselves in skips_.	ExprStmt
/// Reset, beginning a new line or token mode search.	definition of reset_to_mode
// \return true if it was added, false if already present.	definition of add_skip
/// \return whether we are at the end (most recent) of our search.	definition of is_at_end
/// \return the string we are searching for.	definition of search_string
/// \return the current search result.	definition of current_result
/// Go to the end (most recent) of the search.	definition of go_to_end
/// Go to the beginning (earliest) of the search.	definition of go_to_beginning
/// Move the history search in the given direction \p dir.	definition of move_in_direction
// Here we failed to go backwards past the last history item.	return ...
// Add more items from our search.	while (...) ...
// Try to move backwards within our previously discovered matches.	if (...) ... 
// Try to move within our previously discovered matches.	if (...) ... 
// Make sure tokens are added in reverse order. See #5150	for(...;...;...) ...
/// \return true if something was appended.	definition of append_matches_from_search
/// Adds the given match if we haven't seen it before.	definition of add_if_new
/// Index into our matches list.	definition of match_index_
/// A set of new items to skip, corresponding to matches_ and anything added in skip().	definition of skips_
/// The ordered list of matches. This may grow long.	definition of matches_
/// Our history search itself.	definition of search_
/// The type of search performed.	definition of mode_
// searching by token	token
// searching by prefix	prefix
// searching by line	line
// no search	inactive
/// Encapsulation of the reader's history search functionality.	definition of reader_history_search_t
/// there are no invalid strings, so this function always returns false.	definition of default_test
// Make a new undo group here.	ExprStmt
// nothing to redo	return ...
// linear undo/redo, they will be unreachable.	ExprStmt
// nothing to undo	return ...
//!OCLINT(parameter reassignment)	ExprStmt
//!OCLINT(parameter reassignment)	ExprStmt
// Clamp the range to something valid.	declaration
// Don't add to the last edit if it deleted something.	if (...) ... 
// The previous edit must support coalescing.	if (...) ... 
/// Whether we want to append this string to the previous edit.	definition of want_to_coalesce_insertion_of
/// Compute the position of the cursor after the given edit.	definition of cursor_position_after_edit
/// deletion in the given edit.	definition of chars_deleted_left_of_cursor
/// These are deliberately leaked to avoid shutdown dtor registration.	definition of debounce_autosuggestions
// Cancel if the generation count changed.	return ...
/// It is the caller's responsibility to ensure the environment lives as long as the result.	definition of get_bg_context
/// Helper to get the generation count	definition of read_generation_count
/// background threads to notice it and skip doing work that they would otherwise have to do.	definition of s_generation
/// current contents of the kill buffer.	#define KILL_PREPEND 1
/// current contents of the kill buffer.	#define KILL_APPEND 0
/// more input without repainting.	definition of READAHEAD_MAX
/// The default title for the reader. This is used by reader_readline.	"#define DEFAULT_TITLE L""echo (status current-command) \"" \"" $PWD"""
/// The name of the function for getting the input mode indicator.	"#define MODE_PROMPT_FUNCTION_NAME L""fish_mode_prompt"""
/// The name of the function to use in place of the left prompt if we're in the debugger context.	"#define DEBUG_PROMPT_FUNCTION_NAME L""fish_breakpoint_prompt"""
/// The name of the function that prints the fish right prompt (RPROMPT).	"#define RIGHT_PROMPT_FUNCTION_NAME L""fish_right_prompt"""
/// The name of the function that prints the fish prompt.	"#define LEFT_PROMPT_FUNCTION_NAME L""fish_prompt"""
/// it will work even if fish is not installed. This is used by read_i.	"#define DEFAULT_PROMPT L""echo -n \""$USER@$hostname $PWD \""'> '"""
/// ellipsized.	#define PREFIX_MAX_LEN 9
// interactive command to complete.	"#define ENV_CMD_DURATION L""CMD_DURATION"""
// cursor is closed.	ExprStmt
// cursor is replaced by iter->src	ExprStmt
// Note we can simply walk our action list backwards, looking for src -> target dups.	declaration
// Paranoia.	if (...) ... 
// Test if the pointer data crosses a segment boundary.	if (...) ... 
/// Status from earlier sanity checks.	definition of insane
// Don't consider dumb terminals to have wrapping for the purposes of this function.	return ...
// actual empty line.	if (...) ... 
// spaces from the new line.	ExprStmt
// we might still get that color by setting black and going bold for bright	ExprStmt
// bright black (the ninth color, looks grey)	ExprStmt
// draw the string in a particular grey	ExprStmt
// color and the background of the termianl.	ExprStmt
// We do `>` rather than `>=` because the code below might require one extra space.	if (...) ... 
// omitted_newline_char in common.cpp.	declaration
// Do the PROMPT_SP hack.	declaration
// This should prevent resetting the cursor position during the next repaint.	ExprStmt
// to line 0, but really we're getting back to the initial line of the prompt.	declaration
// wider such that it reduces our desired line count.	ExprStmt
// Append pager_data (none if empty).	ExprStmt
// term size, minus the number of lines consumed by our string.	declaration
// above.	ExprStmt
// Cursor may have been at the end too.	if (...) ... 
// Grab the current cursor's x,y position if this character matches the cursor's offset.	if (...) ... 
// Output the command line.	declaration
// Reconstruct the command line.	declaration
// If overflowing, give the prompt its own line to improve the situation.	declaration
// Append spaces for the left prompt.	for(...;...;...) ...
// Clear the desired screen and set its width.	ExprStmt
// Determine whether, if we have an autosuggestion, it was truncated.	ExprStmt
// Compute a layout.	declaration
// Completely ignore impossibly small screens.	if (...) ... 
// right_prompt not supported.	if (...) ... 
// Turn the command line into the explicit portion and the autosuggestion.	declaration
// own line. A short prompt is 33% or less of the terminal's width.	declaration
// Case 5	if (...) ... 
// Need at least two characters to show an autosuggestion.	declaration
// Case 4	if (...) ... 
// Case 3	if (...) ... 
// Need at least two characters to show an autosuggestion.	declaration
// between the left edge and the rprompt.	if (...) ... 
// Case 1	if (...) ... 
// on, and things turn to chaos very quickly.	declaration
// If we have more than one line, ensure we have no autosuggestion.	declaration
// Get the width of the first line, and if there is more than one line.	declaration
// Now we should definitely fit.	ExprStmt
// Nix right_prompt.	ExprStmt
// Truncate both prompts to screen width (#904).	declaration
// i is the first index that did not fit; i-1 is therefore the last that did.	return ...
// 0.	definition of truncation_offset_for_width
// Whether the prompts get their own line or not.	definition of prompts_get_own_line
// The autosuggestion.	definition of autosuggestion
// The right prompt.	definition of right_prompt
// How much space to leave for it.	definition of left_prompt_space
// The left prompt that we're going to use.	definition of left_prompt
/// Returns true if we are using a dumb terminal.	definition of is_dumb
// assignment!	ExprStmt
// Clear remaining lines (if any) if we haven't cleared the screen.	if (...) ... 
// front of it.	ExprStmt
//!OCLINT(Use early exit/continue)	{ ... }
// Output any rprompt if this is the first line.	if (...) ... 
// That means if it is a prefix of the current one we can skip it.	if (...) ... 
// Already cleared everything.	ExprStmt
// auto_right_margin) means that we'll be clearing the last character we wrote!	if (...) ... 
// wrapping.	if (...) ... 
// Now actually output stuff.	for(...;...;...) ...
// Skip over zero-width characters (e.g. combining marks at the end of the prompt).	for(...;...;...) ...
// Skip over skip_remaining width worth of characters.	declaration
//!OCLINT	{ ... }
// line, don't skip over the last two characters so that we maintain soft-wrapping.	if (...) ... 
// avoid repeatedly outputting it.	if (...) ... 
// Note that skip_remaining is a width, not a character count.	declaration
// Don't issue clr_eos if we think the cursor will end up in the last column - see #6951.	declaration
// Output all lines.	for(...;...;...) ...
// want.	declaration
// Ensure we don't issue a clear screen for the very first output, to avoid issue #402.	if (...) ... 
// Figure out how many following lines we need to clear (probably 0).	declaration
// Determine size of left and right prompt. Note these have already been truncated.	declaration
/// Update the screen to match the desired output.	definition of s_update
/// Make sure we don't soft wrap.	definition of invalidate_soft_wrap
// wraps.	ExprStmt
// We can soft wrap; but do we want to?	if (...) ... 
//!OCLINT	{ ... }
// which means that if you copy and paste the text, it won't have an embedded newline.	definition of perform_any_impending_soft_wrap
// of 0.	if (...) ... 
// We're done if the text or colors are different.	if (...) ... 
/// in the prefix.	definition of line_shared_prefix
/// Convert a wide string to a multibyte string and append it to the buffer.	definition of s_write_str
/// Send the specified string through tputs and append the output to the screen's outputter.	definition of s_write_mbs
/// Convert a wide character to a multibyte string and append it to the buffer.	definition of s_write_char
/// Set the pen color for the terminal.	definition of s_set_color
// Note that this is required to avoid some visual glitches in iTerm (issue #1448).	declaration
// else ... but that doesn't work for unknown reasons.	ExprStmt
// See GitHub issue #4505.	{ ... }
// Either way we're not in the first column.	ExprStmt
// beginning of the next one, depending on what we think is more efficient.	if (...) ... 
// don't know! We can fix it up though.	if (...) ... 
/// \param new_y the new y position	definition of s_move
// avoids wonkiness in the last column.	if (...) ... 
// Current line is soft wrapped (assuming we support it).	ExprStmt
// Check if we are at the end of the line. If so, continue on the next line.	if (...) ... 
// Create the next line.	ExprStmt
/// automatically handles linebreaks and lines longer than the screen width.	definition of s_desired_append_char
/* repaint prompt */	ExprStmt
// modeled cursor y-pos to its earlier value.	declaration
// prompts to work correctly.	return ...
/// Linux.	definition of s_check_status
/// cause output.	definition of s_save_status
// calc_prompt_width_and_lines.	declaration
// Truncation needed on this line.	declaration
// No truncation needed on this line.	ExprStmt
// FIXME: we could avoid allocating trunc_prompt if max_line_width is SIZE_T_MAX.	if (...) ... 
// We simply remove these and start over.	ExprStmt
// Note we modify 'run' inside this loop.	declaration
// index, count, char	ExprStmt
// Ellipsis is always width 1.	declaration
/// desired_width. \return the resulting width and run by reference.	definition of truncate_run
// Ordinary char. Add its width with care to ignore control chars which have width -1.	ExprStmt
// -1 because we are going to increment in the loop.	declaration
/// have embedded newlines, etc.; it's unclear if this is possible but we allow it.	definition of measure_run_from
/// \return whether \p c ends a measuring run.	definition of is_run_terminator
// Found it. Move it to the front if not already there.	if (...) ... 
/// the escape sequence based on querying terminfo and other heuristics.	definition of escape_code_length
/// displayed other than the color.	definition of is_visual_escape_seq
/// the terminfo definition and which might use a different pattern.	definition of is_color_escape_seq
// cursor now indexes just beyond the end of the sequence (or at the terminating zero).	ExprStmt
// If we're not in ASCII, just stop.	if (...) ... 
// Consume a sequence of ASCII characters not in the range [@, ~].	declaration
// Start at 2 to skip over <esc>[	declaration
/// the range [@,_], followed by one character in that range.	definition of is_csi_style_escape_seq
/// Generic VT100 two byte sequence: <esc> followed by something in the range @ through _.	definition of is_two_byte_escape_seq
/// Generic VT100 three byte sequence: CSI followed by something in the range @ through _.	definition of is_three_byte_escape_seq
// Consume a sequence of characters up to <esc>\ or <bel>.	if (...) ... 
// Start at 2 to skip over <esc>].	declaration
/// and https://iterm2.com/documentation-escape-codes.html .	definition of is_osc_escape_seq
// Consider just <esc>k to be the code.	ExprStmt
/// Does this look like the escape sequence for setting a screen name?	definition of is_screen_name_escape_seq
// Should we be looking at eat_newline_glitch as well?	return ...
/// physical line on a wrapped logical line; instead we just output it.	definition of allow_soft_wrap
/// Like fish_wcwidth, but returns 0 for control characters instead of -1.	definition of fish_wcwidth_min_0
// Assume tab stops every 8 characters if undefined.	declaration
/// Returns the number of columns left until the next tab stop, given the current cursor position.	definition of next_tab_stop
// this should never be executed	return ...
/// specified wide character string. All of \c seq must match, but str may be longer than seq.	definition of try_sequence
// Note this is deliberately exported so that init_curses can clear it.	definition of shared
/// RAII class to begin and end buffering around stdoutput().	definition of scoped_buffer_t
/// The number of characters to indent new blocks.	#define INDENT_STEP 4u
/* wait */	ExprStmt
// Call check() to update our generation.	ExprStmt
/// Ensure we did not inherit any blocked signals. See issue #3964.	definition of signal_unblock_all
// affect processes we spawn. They should get the default behavior for those signals.	if (...) ... 
// These should always be handled.	if (...) ... 
// Whether or not we're interactive we want SIGCHLD to not interrupt restartable syscalls.	ExprStmt
// Apply our SIGINT handler.	ExprStmt
// Ignore SIGQUIT.	ExprStmt
// this signal interrupting other syscalls or terminating us.	ExprStmt
/// Sets up appropriate signal handlers.	definition of signal_set_handlers
// SIGALARM as part of our signal torture test	ExprStmt
// SIGTERM restores the terminal controlling process before dying.	ExprStmt
// We don't ignore SIGTTIN because we might send it to ourself.	ExprStmt
// the user.	ExprStmt
// test, to verify that we behave correctly when receiving lots of irrelevant signals.	break;
// A child process stopped or exited.	ExprStmt
/// stopping all loops and conditionals.	ExprStmt
/// Handle sigterm. The only thing we do is restore the front process ID, then die.	ExprStmt
/// in which case we do nothing.	if (...) ... 
/// Respond to a winch signal by telling the termsize container.	ExprStmt
// Do some signal-specific stuff.	switch (...) ... 
// Check if fish script cares about this.	declaration
// Check if we are a forked child.	if (...) ... 
"/// the ""wrong"" signal handler (see #5969)."	definition of fish_signal_handler
/// Of course this is modified from a signal handler.	definition of s_cancellation_signal
// Don't use is_forked_child, that relies on atfork handlers which maybe have not run yet.	if (...) ... 
/// and re-raise the signal. \return whether we re-raised the signal.	definition of reraise_if_forked_child
"/// Store the ""main"" pid. This allows us to reliably determine if we are in a forked child."	definition of s_main_pid
/// Test if \c name is a string describing the signal named \c canonical.	definition of match_signal_name
/// Lookup table used to convert between signal names and signal ids, etc.	definition of signal_table
/// Signal description.	definition of desc
/// Signal name.	definition of name
/// Signal id.	definition of signal
/// ids, etc.	definition of lookup_entry
// static	definition of invalidate_tty
// static	definition of handle_winch
// Store our termsize as an environment override.	ExprStmt
// Do nothing if we are the ones setting it.	if (...) ... 
/// The int must be >0 and <USHRT_MAX (from struct winsize).	definition of var_to_int_or
// Announce any updates.	if (...) ... 
// Apply any updates.	ExprStmt
// This must happen before the TIOCGWINSZ ioctl.	declaration
// Capture the size before and the new size.	{ ... }
// Here we pretend to have an up-to-date tty value so that we will prefer the environment value.	ExprStmt
// what we have seen from the environment.	if (...) ... 
// Heap-allocated to avoid runtime dtor registration.	declaration
// static	definition of shared
/// \return a termsize from ioctl, or none on error or if not supported.	definition of read_termsize_from_tty
// A counter which is incremented every SIGWINCH, or when the tty is otherwise invalidated.	definition of s_tty_termsize_gen_count
// no associated stream for its output!	declaration
// GCC does not recognize the exhaustive switch above	declaration
// GCC does not recognize the exhaustive switch above	declaration
// GCC does not recognize the exhaustive switch above	declaration
// Move to seconds if we would overflow the %6.2 format.	declaration
// incorrectly appear to be negative.	ExprStmt
/* = true */	{ ... }
// when it offers a greater resolution than `steady_clock` it is not fit for use).	definition of micros
// __cplusplus	#endif
// _GLIBCXX_MATH_H	#endif
// C++20	#endif
// _GLIBCXX_USE_STD_SPEC_FUNCS	#endif
// by IS 29124, but not by C++17.	#if __cplusplus >= 201103L && __STDCPP_WANT_MATH_SPEC_FUNCS__ != 0
// C++11 && _GLIBCXX_USE_C99_MATH_TR1	#endif
"/** @file math.h
 *  This is a Standard C++ Library header.
 */"	#if !defined __cplusplus || defined _GLIBCXX_INCLUDE_NEXT_C_HEADERS
"// the ""2"" and the ""4"". So we report TOO_MANY_ARGS on the ""4""."	ExprStmt
/* Evaluates as much as possible. */	if (...) ... 
"/* <expr>      =    <term> {(""+"" | ""-"") <term>} */"	declaration
"/* <term>      =    <factor> {(""*"" | ""/"" | ""%"") <factor>} */"	declaration
/* Make exponentiation go right-to-left. */	declaration
"/* <factor>    =    <power> {""^"" <power>} */"	declaration
"/* <power>     =    {(""-"" | ""+"")} <base> */"	declaration
"// ""too few args""."	ExprStmt
"/* <base>      =    <constant> | <function-0> {""("" "")""} | <function-1> <power> |
     * <function-X> ""("" <expr> {"","" <expr>} "")"" | ""("" <list> "")"" */"	declaration
// We've already checked for whitespace above.	ExprStmt
"// The ""te_fun2"" casts are necessary to pick the right overload."	case ...:
/* Look for an operator or special character. */	switch (...) ... 
// Our error is more specific, so it takes precedence.	ExprStmt
// - that's the alternative multiplication operator.	if (...) ... 
/* Try reading a number. */	if (...) ... 
// Else, return NAN.	return ...
"// We need to compare again because we might have gotten the first ""larger"" element."	if (...) ... 
/* must be in alphabetical order */	definition of find_builtin
/* simplest version of fac */	{ ... }
// Free all parameters from the back to the front.	while (...) ...
// We rely on IEEE-754 floats anyway, so it's okay.	ExprStmt
// TODO: That move there? Ouch. Replace with a proper class with a constructor.	#define NEW_EXPR(type,__VA_ARGS__...) new_expr((type), std::move((const te_expr *[]){__VA_ARGS__}))
/* This is safe to call on NULL pointers. */	declaration of te_free
/* Evaluates the expression. */	declaration of te_eval
/* Returns NULL on error. */	declaration of te_compile
// functions with two args.	declaration of te_fun2
// TODO bracket indexing	for(...;...;...) ...
// allowed on the left hand side, no quotes or escaping.	definition of variable_assignment_equals_pos
// silence some compiler errors about not returning	ExprStmt
// consumed printable non-space	ExprStmt
// consumed whitespace	ExprStmt
// always consume the first character	ExprStmt
// consumed string character except slash	ExprStmt
// consumed slash	ExprStmt
// consumed separator	ExprStmt
// path separator	ExprStmt
// path component	ExprStmt
// consumed whitespace	ExprStmt
"// std::fwprintf(stdout, L""state %d, consume '%lc'\n"", state, c);"	declaration
// desired.	return ...
// consumed alphanumeric	ExprStmt
// Consumed whitespace.	ExprStmt
"// ""whitespace_rest"" only consumes whitespace."	if (...) ... 
// Consume only alnums.	ExprStmt
// Consume only trailing whitespace.	ExprStmt
// Don't allow switching type (ws->nonws) after non-whitespace.	ExprStmt
// Always consume the first character.	ExprStmt
// Not a redirection or pipe, so just a string.	ExprStmt
// tokenizer error.	if (...) ... 
// Maybe a redirection like '2>&1', maybe a pipe like 2>|, maybe just a string.	declaration
// redirection is an error!	declaration
// |& is a bashism; in fish it's &|.	return ...
// || is or.	ExprStmt
// &> and &| redirect both stdout and stderr.	declaration
// && is and.	ExprStmt
/* CR */	while (...) ...
// subsequent newlines into a single one.	if (...) ... 
// newline	case ...:
// carriage-return	case ...:
// We made it past the comments and ate any trailing newlines we wanted to ignore.	ExprStmt
// If we are going to continue after the comment, skip any trailing newline.	if (...) ... 
// We have a comment, walk over the comment.	declaration
// it.	for(...;...;...) ...
/// newline to be whitespace.	definition of iswspace_not_nl
// Not a redirection.	return ...
// like &>? or &>>?	ExprStmt
// like &>>	ExprStmt
// &| is pipe with stderr merge.	ExprStmt
// This is a redirection to an fd.	ExprStmt
// ^ is not special if caret_redirs is disabled.	return ...
// like <&3 or < /tmp/file.txt	break;
// like 1<&3 or 1< /tmp/file.txt	ExprStmt
// like > file.txt	if (...) ... 
// like 1> file.txt	ExprStmt
// This is a redirection to a file.	ExprStmt
// like 1>&2	ExprStmt
// it doesn't make sense.	ExprStmt
// like 2>|	ExprStmt
// noclobber.	ExprStmt
// Like 123|	return ...
// Like try_consume, but asserts on failure.	declaration
// Return true if consumed. On success, advances cursor.	declaration
// Extract a range of leading fd.	declaration
"/* Examples of supported syntaxes.
       Note we are only responsible for parsing the redirection part, not 'cmd' or 'file'.

        cmd | cmd        normal pipe
        cmd &| cmd       normal pipe plus stderr-merge
        cmd >| cmd       pipe with explicit fd
        cmd 2>| cmd      pipe with explicit fd
        cmd < file       stdin redirection
        cmd > file       redirection
        cmd >> file      appending redirection
        cmd >? file      noclobber redirection
        cmd >>? file     appending noclobber redirection
        cmd 2> file      file redirection with explicit fd
        cmd >&2 file     fd redirection with no explicit src fd (stdout is used)
        cmd 1>&2 file    fd redirection with an explicit src fd
        cmd <&2 file     fd redirection with no explicit src fd (stdin is used)
        cmd 3<&0 file    fd redirection with an explicit src fd
        cmd &> file      redirection with stderr merge
        cmd ^ file       caret (stderr) redirection, perhaps disabled via feature flags
        cmd ^^ file      caret (stderr) redirection, perhaps disabled via feature flags
    */"	declaration
// Return the fd, or -1 on overflow.	definition of parse_fd
// e.g. echo $argv[([ $x -eq $y ])] # must not end bracket mode on first bracket	if (...) ... 
// has been explicitly ignored (escaped).	if (...) ... 
// Make sure this character isn't being escaped before anything else	if (...) ... 
/// Read the next token as a string.	definition of read_string
// namespace tok_modes	declaration of tok_mode_t
// inside of array brackets	array_brackets
// inside of subshell parentheses	subshell
// regular text	regular_text
/// replacement for iswalpha.	definition of myal
// Conditional separator.	return ...
// Unconditional separators.	return ...
/// is considered a string character. See issue #953.	definition of tok_is_string_character
// If we are passed a token_length, then use it; otherwise infer it from the buffer.	ExprStmt
// Otherwise give up.	if (...) ... 
/// Return an error token and mark that we no longer have a next token.	definition of call_error
// Whether carets redirect stderr.	definition of caret_redirs
// _(s) is already wgettext(s).c_str(), so let's not convert back to wcstring	definition of tokenizer_get_error_message
// Wait until our gens change.	ExprStmt
// If we're not waiting, or something changed, then we're done.	if (...) ... 
// Load the topic list and see if anything has changed.	for(...:...) ...
// variable to wake up any other threads waiting for us to finish reading.	declaration
/* timeout */	#endif
// Note we no longer hold the lock.	ExprStmt
// Not the reader, wait until the reader notifies us and loop again.	ExprStmt
// The generations haven't changed. Perhaps we become the reader.	if (...) ... 
// See if the updated gen list has changed. If so we don't need to become the reader.	declaration
// Report our change.	ExprStmt
// Update the current generation with our topics and return it.	declaration
// Otherwise CAS in 0 and update our topics.	declaration
// write() is async signal safe.	declaration
// by writing a byte to the pipe.	ExprStmt
// No new bits were set.	return ...
// Atomically update the pending topics.	declaration
// The read end must block to avoid spinning in await.	do (...) ...
// Set up our pipes. Assert it succeeds.	declaration
// signal handler so it must not be lazily created.	return ...
/// The metagen is simply the sum of topic generations. Note it is monotone.	definition of metagen_for
/// pointless at-exit handler for the dtor.	definition of s_principal
// block) and use use select() to poll it.	#if defined(__has_feature)
// Add the + prefix.	declaration
"/// Trace an ""argv"": a list of arguments where the first is the command."	definition of trace_argv
// we do proper conversion.	ExprStmt
// no space left	return ...
/// If UCS-4 string contains zero symbols, they will be translated as regular symbols.	definition of wchar_to_utf8_internal
// wchar_t is UCS-2, but the UTF-8 specified an astral character.	return ...
// forbidden character	return ...
// 6 low bits in every byte	ExprStmt
// skip	continue;
// Validate sequence. All symbols must have higher bits set to 10xxxxxx.	if (...) ... 
// skip	continue;
// default: 1 byte. Used when skipping bytes	ExprStmt
/// (\0 terminate) but after calling this function.	definition of utf8_to_wchar_internal
// Surrogate pairs.	if (...) ... 
// Invoke the conversion with the temporary, then clean up the input.	ExprStmt
// Our utf8_wchar_t is UCS-16 and there was an astral character.	ExprStmt
// Note: insize may be 0.	declaration
//!OCLINT(constant if expression)	{ ... }
// and then copy it back.	declaration
//!OCLINT(constant if expression)	{ ... }
// We can tweak the following typedef to allow us to simulate Windows-style 16 bit wchar's on Unix.	declaration of utf8_wchar_t
/// Return microseconds since the epoch.	definition of get_time
// string b is a prefix of a and a is longer	return ...
// string a is a prefix of b and b is longer	return ...
// would be so rare that it isn't worth optimizing for.	ExprStmt
// we already know the strings aren't logically equal	return ...
// strings we can stop iterating over the chars in each string.	if (...) ... 
// assume the strings will be equal	definition of retval
/// wcsfilecmp, but frozen in time for glob usage.	definition of wcsfilecmp_glob
// string b is a prefix of a and a is longer	return ...
// string a is a prefix of b and b is longer	return ...
// would be so rare that it isn't worth optimizing for.	ExprStmt
// we already know the strings aren't logically equal	return ...
// Sort dashes after Z - see #5634	if (...) ... 
// strings we can stop iterating over the chars in each string.	if (...) ... 
// assume the strings will be equal	definition of retval
/// Returns: -1 if a < b, 0 if a == b, 1 if a > b.	definition of wcsfilecmp
// invalid number -- fallback to simple string compare	return ...
// invalid number -- fallback to simple string compare	return ...
// result of that comparison.	definition of wcsfilecmp_leading_digits
// Written by Benjamin Kosnik <bkoz@redhat.com>	std
//Specializations.	declaration of do_open
// messages_byname	definition of messages_byname
// be used.	definition of do_close
// Virtual member functions.	definition of ~messages
// Last to avoid leaking memory if new throws.	definition of open
// Non-virtual member functions.	definition of messages
// _CODECVT_H	#endif
// namespace std	#endif
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// C++11	#endif
/// class codecvt_byname [22.2.1.6].	definition of codecvt_byname<_InternT, _ExternT, _StateT>
// C++11	#endif
// _GLIBCXX_USE_CHAR8_T	#endif
// Types:	#endif
// Types:	declaration of intern_type
"/** @brief  Class codecvt<char32_t, char, mbstate_t> specialization.
   *
   *  Converts between UTF-32 and UTF-8.
   */"	definition of codecvt<char32_t, char, __mbstate_t>
// Types:	declaration of intern_type
"/** @brief  Class codecvt<char16_t, char, mbstate_t> specialization.
   *
   *  Converts between UTF-16 and UTF-8.
   */"	definition of codecvt<char16_t, char, __mbstate_t>
//_GLIBCXX_USE_WCHAR_T	#endif
// Types:	declaration of intern_type
"/** @brief  Class codecvt<wchar_t, char, mbstate_t> specialization.
   *
   *  Converts between narrow and wide characters in the native character set
   */"	definition of codecvt<wchar_t, char, __mbstate_t>
// Types:	declaration of intern_type
/// class codecvt<char, char, mbstate_t> specialization.	definition of codecvt<char, char, __mbstate_t>
// Types:	declaration of result
"/**
   *  @brief  Primary class template codecvt.
   *  @ingroup locales
   *
   *  NB: Generic, mostly useless implementation.
   *
  */"	definition of codecvt<_InternT, _ExternT, _StateT>
"/**
       *  @brief  Convert from internal to external character set.
       *
       *  Converts input string of intern_type to output string of
       *  extern_type.  This function is a hook for derived classes to change
       *  the value returned.  @see out for more information.
      */"	declaration of do_out
"/**
       *  @brief  Convert from external to internal character set.
       *
       *  Converts input string of extern_type to output string of
       *  intern_type.  This is analogous to mbsrtowcs.  It does this by
       *  calling codecvt::do_in.
       *
       *  The source and destination character sets are determined by the
       *  facet's locale, internal and external types.
       *
       *  The characters in [from,from_end) are converted and written to
       *  [to,to_end).  from_next and to_next are set to point to the
       *  character following the last successfully converted character,
       *  respectively.  If the result needed no conversion, from_next and
       *  to_next are not affected.
       *
       *  The @a state argument should be initialized if the input is at the
       *  beginning and carried from a previous call if continuing
       *  conversion.  There are no guarantees about how @a state is used.
       *
       *  The result returned is a member of codecvt_base::result.  If
       *  all the input is converted, returns codecvt_base::ok.  If no
       *  conversion is necessary, returns codecvt_base::noconv.  If
       *  the input ends early or there is insufficient space in the
       *  output, returns codecvt_base::partial.  Otherwise the
       *  conversion failed and codecvt_base::error is returned.
       *
       *  @param  __state  Persistent conversion state data.
       *  @param  __from  Start of input.
       *  @param  __from_end  End of input.
       *  @param  __from_next  Returns start of unconverted data.
       *  @param  __to  Start of output buffer.
       *  @param  __to_end  End of output buffer.
       *  @param  __to_next  Returns start of unused output area.
       *  @return  codecvt_base::result.
      */"	declaration of in
"/**
       *  @brief  Reset conversion state.
       *
       *  Writes characters to output that would restore @a state to initial
       *  conditions.  The idea is that if a partial conversion occurs, then
       *  the converting the characters written by this function would leave
       *  the state in initial conditions, rather than partial conversion
       *  state.  It does this by calling codecvt::do_unshift().
       *
       *  For example, if 4 external characters always converted to 1 internal
       *  character, and input to in() had 6 external characters with state
       *  saved, this function would write two characters to the output and
       *  set the state to initialized conditions.
       *
       *  The source and destination character sets are determined by the
       *  facet's locale, internal and external types.
       *
       *  The result returned is a member of codecvt_base::result.  If the
       *  state could be reset and data written, returns codecvt_base::ok.  If
       *  no conversion is necessary, returns codecvt_base::noconv.  If the
       *  output has insufficient space, returns codecvt_base::partial.
       *  Otherwise the reset failed and codecvt_base::error is returned.
       *
       *  @param  __state  Persistent conversion state data.
       *  @param  __to  Start of output buffer.
       *  @param  __to_end  End of output buffer.
       *  @param  __to_next  Returns start of unused output area.
       *  @return  codecvt_base::result.
      */"	declaration of unshift
"/**
       *  @brief  Convert from internal to external character set.
       *
       *  Converts input string of intern_type to output string of
       *  extern_type.  This is analogous to wcsrtombs.  It does this by
       *  calling codecvt::do_out.
       *
       *  The source and destination character sets are determined by the
       *  facet's locale, internal and external types.
       *
       *  The characters in [from,from_end) are converted and written to
       *  [to,to_end).  from_next and to_next are set to point to the
       *  character following the last successfully converted character,
       *  respectively.  If the result needed no conversion, from_next and
       *  to_next are not affected.
       *
       *  The @a state argument should be initialized if the input is at the
       *  beginning and carried from a previous call if continuing
       *  conversion.  There are no guarantees about how @a state is used.
       *
       *  The result returned is a member of codecvt_base::result.  If
       *  all the input is converted, returns codecvt_base::ok.  If no
       *  conversion is necessary, returns codecvt_base::noconv.  If
       *  the input ends early or there is insufficient space in the
       *  output, returns codecvt_base::partial.  Otherwise the
       *  conversion failed and codecvt_base::error is returned.
       *
       *  @param  __state  Persistent conversion state data.
       *  @param  __from  Start of input.
       *  @param  __from_end  End of input.
       *  @param  __from_next  Returns start of unconverted data.
       *  @param  __to  Start of output buffer.
       *  @param  __to_end  End of output buffer.
       *  @param  __to_next  Returns start of unused output area.
       *  @return  codecvt_base::result.
      */"	declaration of out
// Types:	declaration of result
"/**
   *  @brief  Common base for codecvt functions.
   *
   *  This template class provides implementations of the public functions
   *  that forward to the protected virtual functions.
   *
   *  This template also provides abstract stubs for the protected virtual
   *  functions.
  */"	definition of __codecvt_abstract_base<_InternT, _ExternT, _StateT>
/// Empty base class for codecvt facet [22.2.1.5].	definition of codecvt_base
// Written by Benjamin Kosnik <bkoz@redhat.com>	#ifndef _CODECVT_H
// namespace std	#endif
// which are defined via explicit instantiations elsewhere.	#if _GLIBCXX_EXTERN_TEMPLATE
// __cplusplus >= 201103L	#endif
// TODO real case-insensitive comparison	definition of do_get
// Make sure found name is completely extracted.	definition of _M_extract_wday_or_month
// All elements in __names are unique.	definition of _M_extract_name
// Verify format and input match, extract and discard.	definition of _M_extract_num
// [00, 60] in C99 (one leap-second), [00, 61] in C89.	#if _GLIBCXX_USE_C99
// pass %m/%d/%Y => extracted characters.	definition of _M_extract_via_format
// the side of the mountain used to be...	definition of do_date_order
// max_exponent10 + 1 for the integer part, + 2 for sign and '\0'.	#endif
// If the buffer was not large enough, try again with the correct size.	#else
// Write resulting, fully-formatted string to output iterator.	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \
// Iff no more characters are available.	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \
"/** @file bits/locale_facets_nonio.tcc
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{locale}
 */"	#ifndef _LOCALE_FACETS_NONIO_TCC
/// class messages_byname [22.2.7.2].	definition of messages_byname<_CharT>
/// Specializations for required instantiations.	declaration of do_get
// Returns a locale and codeset-converted string, given a char* message.	declaration of _M_convert_from_char
// Returns a locale and codeset-converted string, given a char* message.	declaration of _M_convert_to_char
"/*
       *  @brief  Close a message catalog.
       *
       *  @param  __c  The catalog to close.
      */"	declaration of do_close
"/*
       *  @brief  Look up a string in a message catalog.
       *
       *  This function retrieves and returns a message from a catalog in an
       *  implementation-defined manner.  This function is a hook for derived
       *  classes to change the value returned.
       *
       *  For gnu, @a __set and @a __msgid are ignored.  Returns gettext(s).
       *  For default, returns s. For ieee, returns catgets(c,set,msgid,s).
       *
       *  @param  __c  The catalog to access.
       *  @param  __set  Implementation-defined.
       *  @param  __msgid  Implementation-defined.
       *  @param  __s  Default return value if retrieval fails.
       *  @return  Retrieved message or @a __s if get fails.
      */"	declaration of do_get
"/*
       *  @brief  Open a message catalog.
       *
       *  This function opens and returns a handle to a message catalog in an
       *  implementation-defined manner.  This function is a hook for derived
       *  classes to change the value returned.
       *
       *  @param  __s  The catalog to open.
       *  @param  __loc  Locale to use for character set conversions.
       *  @return  Handle to the opened catalog, value < 0 if open failed.
      */"	declaration of do_open
/// Destructor.	declaration of ~messages
"/*
       *  @brief  Close a message catalog.
       *
       *  Closes catalog @a c by calling do_close(c).
       *
       *  @param  __c  The catalog to close.
      */"	declaration of close
"/*
       *  @brief  Look up a string in a message catalog.
       *
       *  This function retrieves and returns a message from a catalog by
       *  returning do_get(c, set, msgid, s).
       *
       *  For gnu, @a __set and @a msgid are ignored.  Returns gettext(s).
       *  For default, returns s. For ieee, returns catgets(c,set,msgid,s).
       *
       *  @param  __c  The catalog to access.
       *  @param  __set  Implementation-defined.
       *  @param  __msgid  Implementation-defined.
       *  @param  __s  Default return value if retrieval fails.
       *  @return  Retrieved message or @a __s if get fails.
      */"	declaration of get
"/*
       *  @brief  Open a message catalog.
       *
       *  This non-standard function opens and returns a handle to a message
       *  catalog by returning do_open(s, loc).  The third argument provides a
       *  message catalog root directory for gnu gettext and is ignored
       *  otherwise.
       *
       *  @param  __s  The catalog to open.
       *  @param  __loc  Locale to use for character set conversions.
       *  @param  __dir  Message catalog root directory.
       *  @return  Handle to the catalog or value < 0 if open fails.
      */"	declaration of open
"/*
       *  @brief  Open a message catalog.
       *
       *  This function opens and returns a handle to a message catalog by
       *  returning do_open(__s, __loc).
       *
       *  @param  __s  The catalog to open.
       *  @param  __loc  Locale to use for character set conversions.
       *  @return  Handle to the catalog or value < 0 if open fails.
      */"	declaration of open
"/**
       *  @brief  Internal constructor.  Not for general use.
       *
       *  This is a constructor for use by the library itself to set up new
       *  locales.
       *
       *  @param  __cloc  The C locale.
       *  @param  __s  The name of a locale.
       *  @param  __refs  Refcount to pass to the base class.
       */"	declaration of messages
"/**
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param __refs  Passed to the base facet class.
      */"	declaration of messages
/// Numpunct facet id.	declaration of id
// initialization, needed by messages_byname as well.	definition of _M_c_locale_messages
/// Public typedefs	declaration of char_type
"/**
   *  @brief  Primary class template messages.
   *  @ingroup locales
   *
   *  This facet encapsulates the code to retrieve messages from
   *  message catalogs.  The only thing defined by the standard for this facet
   *  is the interface.  All underlying functionality is
   *  implementation-defined.
   *
   *  This library currently implements 3 versions of the message facet.  The
   *  first version (gnu) is a wrapper around gettext, provided by libintl.
   *  The second version (ieee) is a wrapper around catgets.  The final
   *  version (default) does no actual translation.  These implementations are
   *  only provided for char and wchar_t instantiations.
   *
   *  The messages template uses protected virtual functions to
   *  provide the actual results.  The public accessors forward the
   *  call to the virtual functions.  These virtual functions are
   *  hooks for developers to implement the behavior they require from
   *  the messages facet.
  */"	definition of messages<_CharT>
"/**
   *  @brief  Messages facet base class providing catalog typedef.
   *  @ingroup locales
   */"	definition of messages_base
// XXX GLIBCXX_ABI Deprecated	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \
// XXX GLIBCXX_ABI Deprecated	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \
"/**
   *  @brief  Primary class template money_put.
   *  @ingroup locales
   *
   *  This facet encapsulates the code to format and output a monetary
   *  amount.
   *
   *  The money_put template uses protected virtual functions to
   *  provide the actual results.  The public accessors forward the
   *  call to the virtual functions.  These virtual functions are
   *  hooks for developers to implement the behavior they require from
   *  the money_put facet.
  */"	definition of money_put<_CharT, _OutIter>
// XXX GLIBCXX_ABI Deprecated	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \
// XXX GLIBCXX_ABI Deprecated	#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \
"/**
   *  @brief  Primary class template money_get.
   *  @ingroup locales
   *
   *  This facet encapsulates the code to parse and return a monetary
   *  amount from a string.
   *
   *  The money_get template uses protected virtual functions to
   *  provide the actual results.  The public accessors forward the
   *  call to the virtual functions.  These virtual functions are
   *  hooks for developers to implement the behavior they require from
   *  the money_get facet.
  */"	definition of money_get<_CharT, _InIter>
/// class moneypunct_byname [22.2.6.4].	definition of moneypunct_byname<_CharT, _Intl>
// For use at construction time only.	declaration of _M_initialize_moneypunct
"/**
       *  @brief  Return pattern for money values.
       *
       *  This function returns a pattern describing the formatting of a
       *  negative valued money amount.  This function is a hook for derived
       *  classes to change the value returned.  @see neg_format() for
       *  details.
       *
       *  @return  Pattern for money values.
      */"	declaration of do_neg_format
"/**
       *  @brief  Return pattern for money values.
       *
       *  This function returns a pattern describing the formatting of a
       *  positive valued money amount.  This function is a hook for derived
       *  classes to change the value returned.  @see pos_format() for
       *  details.
       *
       *  @return  Pattern for money values.
      */"	declaration of do_pos_format
"/**
       *  @brief  Return number of digits in fraction.
       *
       *  This function returns the exact number of digits that make up the
       *  fractional part of a money amount.  This function is a hook for
       *  derived classes to change the value returned.  @see frac_digits()
       *  for details.
       *
       *  @return  Number of digits in amount fraction.
      */"	declaration of do_frac_digits
"/**
       *  @brief  Return negative sign string.
       *
       *  This function returns a string_type to use as a sign for negative
       *  amounts.  This function is a hook for derived classes to change the
       *  value returned.  @see negative_sign() for details.
       *
       *  @return  @a string_type representing a negative sign.
      */"	declaration of do_negative_sign
"/**
       *  @brief  Return positive sign string.
       *
       *  This function returns a string_type to use as a sign for positive
       *  amounts.  This function is a hook for derived classes to change the
       *  value returned.  @see positive_sign() for details.
       *
       *  @return  @a string_type representing a positive sign.
      */"	declaration of do_positive_sign
"/**
       *  @brief  Return currency symbol string.
       *
       *  This function returns a string_type to use as a currency symbol.
       *  This function is a hook for derived classes to change the value
       *  returned.  @see curr_symbol() for details.
       *
       *  @return  @a string_type representing a currency symbol.
      */"	declaration of do_curr_symbol
"/**
       *  @brief  Return grouping specification.
       *
       *  Returns a string representing groupings for the integer part of a
       *  number.  This function is a hook for derived classes to change the
       *  value returned.  @see grouping() for details.
       *
       *  @return  String representing grouping specification.
      */"	declaration of do_grouping
"/**
       *  @brief  Return thousands separator character.
       *
       *  Returns a char_type to use as a thousands separator.  This function
       *  is a hook for derived classes to change the value returned.
       *
       *  @return  @a char_type representing a thousands separator.
      */"	declaration of do_thousands_sep
"/**
       *  @brief  Return decimal point character.
       *
       *  Returns a char_type to use as a decimal point.  This function is a
       *  hook for derived classes to change the value returned.
       *
       *  @return  @a char_type representing a decimal point.
      */"	declaration of do_decimal_point
/// Destructor.	declaration of ~moneypunct
"/**
       *  @brief  Return pattern for money values.
       *
       *  This function returns a pattern describing the formatting of a
       *  positive or negative valued money amount.  It does so by returning
       *  returning moneypunct<char_type>::do_pos_format() or
       *  moneypunct<char_type>::do_neg_format().
       *
       *  The pattern has 4 fields describing the ordering of symbol, sign,
       *  value, and none or space.  There must be one of each in the pattern.
       *  The none and space enums may not appear in the first field and space
       *  may not appear in the final field.
       *
       *  The parts of a money string must appear in the order indicated by
       *  the fields of the pattern.  The symbol field indicates that the
       *  value of curr_symbol() may be present.  The sign field indicates
       *  that the value of positive_sign() or negative_sign() must be
       *  present.  The value field indicates that the absolute value of the
       *  money amount is present.  none indicates 0 or more whitespace
       *  characters, except at the end, where it permits no whitespace.
       *  space indicates that 1 or more whitespace characters must be
       *  present.
       *
       *  For example, for the US locale and pos_format() pattern
       *  {symbol,sign,value,none}, curr_symbol() == &apos;$&apos;
       *  positive_sign() == &apos;+&apos;, and value 10.01, and
       *  options set to force the symbol, the corresponding string is
       *  <code>$+10.01</code>.
       *
       *  @return  Pattern for money values.
      */"	declaration of pos_format
"/**
       *  @brief  Return number of digits in fraction.
       *
       *  This function returns the exact number of digits that make up the
       *  fractional part of a money amount.  It does so by returning
       *  returning moneypunct<char_type>::do_frac_digits().
       *
       *  The fractional part of a money amount is optional.  But if it is
       *  present, there must be frac_digits() digits.
       *
       *  @return  Number of digits in amount fraction.
      */"	declaration of frac_digits
"/**
       *  @brief  Return negative sign string.
       *
       *  This function returns a string_type to use as a sign for negative
       *  amounts.  It does so by returning returning
       *  moneypunct<char_type>::do_negative_sign().
       *
       *  If the return value contains more than one character, the first
       *  character appears in the position indicated by neg_format() and the
       *  remainder appear at the end of the formatted string.
       *
       *  @return  @a string_type representing a negative sign.
      */"	declaration of negative_sign
"/**
       *  @brief  Return positive sign string.
       *
       *  This function returns a string_type to use as a sign for positive
       *  amounts.  It does so by returning returning
       *  moneypunct<char_type>::do_positive_sign().
       *
       *  If the return value contains more than one character, the first
       *  character appears in the position indicated by pos_format() and the
       *  remainder appear at the end of the formatted string.
       *
       *  @return  @a string_type representing a positive sign.
      */"	declaration of positive_sign
"/**
       *  @brief  Return currency symbol string.
       *
       *  This function returns a string_type to use as a currency symbol.  It
       *  does so by returning returning
       *  moneypunct<char_type>::do_curr_symbol().
       *
       *  @return  @a string_type representing a currency symbol.
      */"	declaration of curr_symbol
"/**
       *  @brief  Return grouping specification.
       *
       *  This function returns a string representing groupings for the
       *  integer part of an amount.  Groupings indicate where thousands
       *  separators should be inserted.
       *
       *  Each char in the return string is interpret as an integer rather
       *  than a character.  These numbers represent the number of digits in a
       *  group.  The first char in the string represents the number of digits
       *  in the least significant group.  If a char is negative, it indicates
       *  an unlimited number of digits for the group.  If more chars from the
       *  string are required to group a number, the last char is used
       *  repeatedly.
       *
       *  For example, if the grouping() returns <code>\003\002</code>
       *  and is applied to the number 123456789, this corresponds to
       *  12,34,56,789.  Note that if the string was <code>32</code>, this would
       *  put more than 50 digits into the least significant group if
       *  the character set is ASCII.
       *
       *  The string is returned by calling
       *  moneypunct<char_type>::do_grouping().
       *
       *  @return  string representing grouping specification.
      */"	declaration of grouping
"/**
       *  @brief  Return thousands separator character.
       *
       *  This function returns a char_type to use as a thousands
       *  separator.  It does so by returning returning
       *  moneypunct<char_type>::do_thousands_sep().
       *
       *  @return  char_type representing a thousands separator.
      */"	declaration of thousands_sep
"/**
       *  @brief  Return decimal point character.
       *
       *  This function returns a char_type to use as a decimal point.  It
       *  does so by returning returning
       *  moneypunct<char_type>::do_decimal_point().
       *
       *  @return  @a char_type representing a decimal point.
      */"	declaration of decimal_point
"/**
       *  @brief  Internal constructor. Not for general use.
       *
       *  This is a constructor for use by the library itself to set up new
       *  locales.
       *
       *  @param __cloc  The C locale.
       *  @param __s  The name of a locale.
       *  @param __refs  Passed to the base facet class.
      */"	declaration of moneypunct
"/**
       *  @brief  Constructor performs initialization.
       *
       *  This is an internal constructor.
       *
       *  @param __cache  Cache for optimization.
       *  @param __refs  Passed to the base facet class.
      */"	declaration of moneypunct
"/**
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param __refs  Passed to the base facet class.
      */"	declaration of moneypunct
/// Numpunct facet id.	declaration of id
/// existence.	definition of intl
//@}	declaration of __cache_type
/// Public typedefs	declaration of char_type
"/**
   *  @brief  Primary class template moneypunct.
   *  @ingroup locales
   *
   *  This facet encapsulates the punctuation, grouping and other formatting
   *  features of money amount string representations.
  */"	definition of moneypunct<_CharT, _Intl>
// having been passed through the current locale's ctype<_CharT>.widen().	definition of _M_atoms
// space none symbol sign value	declaration of _S_construct_pattern
"// money_get/money_put. ""-0123456789"""	declaration of _S_atoms
"/**
   *  @brief  Money format ordering data.
   *  @ingroup locales
   *
   *  This class contains an ordered array of 4 fields to represent the
   *  pattern for formatting a money amount.  Each field may contain one entry
   *  from the part enum.  symbol, sign, and value must be present and the
   *  remaining field must contain either none or space.  @see
   *  moneypunct::pos_format() and moneypunct::neg_format() for details of how
   *  these fields are interpreted.
  */"	definition of money_base
// Types:	#if __cplusplus >= 201103L
/// class time_put_byname [22.2.5.4].	definition of time_put_byname<_CharT, _OutIter>
"/**
       *  @brief  Format and output a time or date.
       *
       *  This function formats the data in struct tm according to the
       *  provided format char and optional modifier.  This function is a hook
       *  for derived classes to change the value returned.  @see put() for
       *  more details.
       *
       *  @param  __s  The stream to write to.
       *  @param  __io  Source of locale.
       *  @param  __fill  char_type to use for padding.
       *  @param  __tm  Struct tm with date and time info to format.
       *  @param  __format  Format char.
       *  @param  __mod  Optional modifier char.
       *  @return  Iterator after writing.
       */"	declaration of do_put
/// Destructor.	declaration of ~time_put
"/**
       *  @brief  Format and output a time or date.
       *
       *  This function formats the data in struct tm according to the
       *  provided format char and optional modifier.  The format and modifier
       *  are interpreted as by strftime().  It does so by returning
       *  time_put::do_put().
       *
       *  @param  __s  The stream to write to.
       *  @param  __io  Source of locale.
       *  @param  __fill  char_type to use for padding.
       *  @param  __tm  Struct tm with date and time info to format.
       *  @param  __format  Format char.
       *  @param  __mod  Optional modifier char.
       *  @return  Iterator after writing.
       */"	declaration of put
"/**
       *  @brief  Format and output a time or date.
       *
       *  This function formats the data in struct tm according to the
       *  provided format string.  The format string is interpreted as by
       *  strftime().
       *
       *  @param  __s  The stream to write to.
       *  @param  __io  Source of locale.
       *  @param  __fill  char_type to use for padding.
       *  @param  __tm  Struct tm with date and time info to format.
       *  @param  __beg  Start of format string.
       *  @param  __end  End of format string.
       *  @return  Iterator after writing.
       */"	declaration of put
"/**
       *  @brief  Constructor performs initialization.
       *
       *  This is the constructor provided by the standard.
       *
       *  @param __refs  Passed to the base facet class.
      */"	declaration of time_put
/// Numpunct facet id.	declaration of id
/// Public typedefs	declaration of char_type
"/**
   *  @brief  Primary class template time_put.
   *  @ingroup locales
   *
   *  This facet encapsulates the code to format and output dates and times
   *  according to formats used by strftime().
   *
   *  The time_put template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from the time_put facet.
  */"	definition of time_put<_CharT, _OutIter>
// Types:	#if __cplusplus >= 201103L
/// class time_get_byname [22.2.5.2].	definition of time_get_byname<_CharT, _InIter>
// Extract on a component-by-component basis, via __format argument.	declaration of _M_extract_via_format
// Extract day or month name in a const _CharT* array.	declaration of _M_extract_wday_or_month
// Extract any unique array of string literals in a const _CharT* array.	declaration of _M_extract_name
// Extract numeric component of length __len.	declaration of _M_extract_num
"/**
       *  @brief  Parse input string according to format.
       *
       *  This function parses the string according to the provided
       *  format and optional modifier.  This function is a hook for
       *  derived classes to change the value returned.  @see get()
       *  for more details.
       *
       *  @param __s        Start of string to parse.
       *  @param __end      End of string to parse.
       *  @param __f        Source of the locale.
       *  @param __err      Error flags to set.
       *  @param __tm       Pointer to struct tm to fill in.
       *  @param __format   Format specifier.
       *  @param __modifier Format modifier.
       *  @return  Iterator to first char not parsed.
       */"	#if _GLIBCXX_USE_CXX11_ABI
"/**
       *  @brief  Parse input year string.
       *
       *  This function reads up to 4 characters to parse a year string and
       *  puts the results into a user-supplied struct tm.  This function is a
       *  hook for derived classes to change the value returned.  @see
       *  get_year() for details.
       *
       *  @param  __beg  Start of string to parse.
       *  @param  __end  End of string to parse.
       *  @param  __io  Source of the locale.
       *  @param  __err  Error flags to set.
       *  @param  __tm  Pointer to struct tm to fill in.
       *  @return  Iterator to first char beyond year.
      */"	#if __cplusplus >= 201103L
// __cplusplus >= 201103L	#endif
"/**
       *  @brief  Parse input string according to format.
       *
       *  This function parses the input string according to a
       *  provided format string.  It does the inverse of
       *  time_put::put.  The format string follows the format
       *  specified for strftime(3)/strptime(3).  The actual parsing
       *  is done by time_get::do_get.
       *
       *  @param __s        Start of string to parse.
       *  @param __end      End of string to parse.
       *  @param __io       Source of the locale.
       *  @param __err      Error flags to set.
       *  @param __tm       Pointer to struct tm to fill in.
       *  @param __fmt      Start of the format string.
       *  @param __fmtend   End of the format string.
       *  @return  Iterator to first char not parsed.
       */"	#endif
"/**
       *  @brief  Parse input year string.
       *
       *  This function reads up to 4 characters to parse a year string and
       *  puts the results into a user-supplied struct tm.  The result is
       *  returned by calling time_get::do_get_year().
       *
       *  4 consecutive digits are interpreted as a full year.  If there are
       *  exactly 2 consecutive digits, the library interprets this as the
       *  number of years since 1900.
       *
       *  If an error occurs before the end, err |= ios_base::failbit.  If
       *  parsing reads all the characters, err |= ios_base::eofbit.
       *
       *  @param  __beg  Start of string to parse.
       *  @param  __end  End of string to parse.
       *  @param  __io  Source of the locale.
       *  @param  __err  Error flags to set.
       *  @param  __tm  Pointer to struct tm to fill in.
       *  @return  Iterator to first char beyond year.
      */"	#if __cplusplus >= 201103L
"/**
   *  @brief  Primary class template time_get.
   *  @ingroup locales
   *
   *  This facet encapsulates the code to parse and return a date or
   *  time from a string.  It is used by the istream numeric
   *  extraction operators.
   *
   *  The time_get template uses protected virtual functions to provide the
   *  actual results.  The public accessors forward the call to the virtual
   *  functions.  These virtual functions are hooks for developers to
   *  implement the behavior they require from the time_get facet.
  */"	definition of time_get<_CharT, _InIter>
// Specializations.	declaration of _M_initialize_timepunct
// For use at construction time only.	declaration of _M_initialize_timepunct
/* Kept for ABI compatibility, see PR65927 */	#endif
// Always have default first.	#if !_GLIBCXX_INLINE_VERSION
// Generic.	definition of _S_timezones
// Specializations.	declaration of _S_timezones
"// Abbreviated month names, starting with ""C""'s Jan."	definition of _M_amonth01
"// Month names, starting with ""C""'s January."	definition of _M_month01
"// Abbreviated day names, starting with ""C""'s Sun."	definition of _M_aday1
"// Day names, starting with ""C""'s Sunday."	definition of _M_day1
// List of all known timezones, with GMT first.	declaration of _S_timezones
"/**
   *  @brief  Time format ordering data.
   *  @ingroup locales
   *
   *  This class provides an enum representing different orderings of
   *  time: day, month, and year.
  */"	definition of time_base
//	#ifndef _LOCALE_FACETS_NONIO_H
/* _LOCALE_CONV_H */	#endif
// __cplusplus	#endif
// namespace	#endif
// _GLIBCXX_USE_WCHAR_T	#endif
// convert the put area and write to the byte stream buffer	declaration of _M_conv_put
// unused	declaration of _M_put
// fill the get area from converted contents of the byte stream buffer	declaration of _M_conv_get
/// The conversion state following the last conversion.	declaration of state
// 2176. Special members for wstring_convert and wbuffer_convert	definition of wbuffer_convert
"/** Constructor.
       *
       * @param  __bytebuf The underlying byte stream buffer.
       * @param  __pcvt    The facet to use for conversions.
       * @param  __state   Initial conversion state.
       *
       * Takes ownership of @p __pcvt and will delete it in the destructor.
       */"	declaration of wbuffer_convert
/// Default constructor.	declaration of wbuffer_convert
/// Buffer conversions	definition of wbuffer_convert<_Codecvt, _Elem, _Tr>
/// The final conversion state of the last conversion.	declaration of state
/// The number of elements successfully converted in the last conversion.	declaration of converted
/// @{ Convert to bytes.	declaration of to_bytes
/// @{ Convert from bytes.	declaration of from_bytes
// 2176. Special members for wstring_convert and wbuffer_convert	definition of wstring_convert
"/** Construct with error strings.
       *
       * @param  __byte_err A string to return on failed conversions.
       * @param  __wide_err A wide string to return on failed conversions.
       */"	declaration of wstring_convert
"/** Construct with an initial converstion state.
       *
       * @param  __pcvt The facet to use for conversions.
       * @param  __state Initial conversion state.
       *
       * Takes ownership of @p __pcvt and will delete it in the destructor.
       * The object's conversion state will persist between conversions.
       */"	declaration of wstring_convert
"/** Constructor.
       *
       * @param  __pcvt The facet to use for conversions.
       *
       * Takes ownership of @p __pcvt and will delete it in the destructor.
       */"	declaration of wstring_convert
/// Default constructor.	declaration of wstring_convert
/// String conversions	definition of wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc>
// _GLIBCXX_USE_CHAR8_T	#endif
// Convert wide character string to narrow.	#endif
// As above, but returns false for partial conversions	definition of __str_codecvt_out_all
// As above, but with no __count parameter	definition of __str_codecvt_out
// Convert wide character string to narrow.	definition of __str_codecvt_out
// As above, but returns false for partial conversion	definition of __str_codecvt_in_all
// As above, but with no __count parameter	definition of __str_codecvt_in
// Convert narrow character string to wide.	definition of __str_codecvt_in
"/**
   * @addtogroup locales
   * @{
   */"	definition of __do_str_codecvt
"/** @file bits/locale_conv.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{locale}
 */"	#ifndef _LOCALE_CONV_H
/* _GLIBCXX_LOCALE */	#endif
"/** @file include/locale
 *  This is a Standard C++ Library header.
 */"	#ifndef _GLIBCXX_LOCALE
// Construct the string.	declaration
// skip the separator, or skip past the end	ExprStmt
// In fuzzy matching treat treat `-` and `_` as equal (#3584).	definition of ifind
// We must have that proposed_prefix[idx] == L'\0', so we have a prefix match.	return ...
// against a zero value character, and so we'll return false;	if (...) ... 
// need to use it in the future.	#endif
// This distinction seems to be the most useful approach.	if (...) ... 
// If LONG_ONLY is nonzero, '-' as well as '--' can introduce long-named options.	definition of _wgetopt_internal
// +option or -option	ExprStmt
// --option	if (...) ... 
// short option.	if (...) ... 
//!OCLINT(empty body)	;
// Check for a matching long opt.	definition of _handle_long_opt
// Second or later nonexact match found.	ExprStmt
// First nonexact match found.	ExprStmt
// Exact match found.	ExprStmt
// Test all long options for either exact match or abbreviated matches.	for(...;...;...) ...
// Find a matching long opt.	definition of _find_matching_long_opt
// +option or -option	ExprStmt
// --option	if (...) ... 
// enums.	if (...) ... 
// ARGV-elt as argument.	ExprStmt
// 1003.2 specifies the format of this message.	ExprStmt
// the next element now.	ExprStmt
// This is an option that requires an argument.	if (...) ... 
// This is an option that accepts an argument optionally.	if (...) ... 
// Increment `woptind' when we start to process its last character.	if (...) ... 
// Look at and handle the next short option-character.	declaration
// Check for a matching short opt.	definition of _handle_short_opt
// We have found another option-ARGV-element. Skip the initial punctuation.	ExprStmt
// it to the caller and pass it by.	if (...) ... 
// caller will digest them.	if (...) ... 
// we skipped and permuted.	if (...) ... 
// else like a non-option.	if (...) ... 
// that the options come first.	if (...) ... 
//!OCLINT(high cyclomatic complexity)	definition of _advance_to_next_argv
// Advance to the next ARGV-element.	definition of _advance_to_next_argv
// Determine how to handle the ordering of options and nonoptions.	if (...) ... 
// sequence of previously skipped non-option ARGV-elements is empty.	ExprStmt
// Initialize the internal data when the first call is made.	definition of _wgetopt_initialize
// Update records for the slots the non-options now occupy.	ExprStmt
// Exclude the moved top segment from further swapping.	ExprStmt
// Swap it with the bottom part of the bottom segment.	for(...;...;...) ...
// Top segment is the short one.	declaration
// Exclude the moved bottom segment from further swapping.	ExprStmt
// Swap it with the top part of the top segment.	for(...;...;...) ...
// Bottom segment is the short one.	declaration
// consists of two parts that need to be swapped next.	while (...) ...
// non-options in ARGV after they are moved.	definition of exchange
// working directory, the base dir is empty.	declaration
// matches) if there is an embedded null.	if (...) ... 
// expand_flag::for_completions and expand_flag::no_descriptions.	ExprStmt
// Fuzzy matching only if we're doing completions.	ExprStmt
// ANY_STRING_RECURSIVE character is present in both the head and the tail.	declaration
// Recursive wildcards require special handling.	declaration
// Not the last segment, nonempty wildcard.	ExprStmt
// Last wildcard segment, nonempty wildcard.	ExprStmt
// Don't do fuzzy matches if the literal segment was valid (#3211)	declaration
// This just trumps everything.	declaration
// Absolute path of the intermediate directory	declaration
// (issue #2099).	ExprStmt
// Multiple adjacent slashes in the wildcard. Just skip them.	ExprStmt
//!OCLINT(multiple unary operator)	ExprStmt
// Handle empty segment.	ExprStmt
/* internal, i.e. look for ANY_CHAR instead of ? */	declaration
// Get the current segment and compute interesting properties about it.	declaration
//    expansions	definition of expand
/* skip files with leading dots */	if (...) ... 
// Normal wildcard expansion, not for completions.	if (...) ... 
// Our match is fuzzier.	ExprStmt
// And every match must be made at least as fuzzy as ours.	if (...) ... 
// Mark the completion as replacing.	if (...) ... 
// Ok, this directory matches. Recurse to it. Then mark each resulting completion as fuzzy.	declaration
// through fuzzy matching	declaration
/* We either can't stat it, or we did but it's not a directory */	continue;
// in expand().	declaration
// Don't bother with . and ..	if (...) ... 
// Mark that we are fuzzy for the duration of this function	declaration
// This only works with tab completions. Ordinary wildcard expansion should never go fuzzy.	declaration
// considered visited.	ExprStmt
// our tail_wc, which includes the ANY_STRING_RECURSIVE guy.	ExprStmt
// Symlink loop! This directory was already visited, so skip it.	continue;
// We either can't stat it, or we did but it's not a directory.	continue;
// Doesn't match the wildcard for this segment, skip it.	continue;
// Note that it's critical we ignore leading dots here, else we may descend into . and ..	if (...) ... 
// Trailing slashes and accepting incomplete, e.g. `echo /xyz/<tab>`. Everything is added.	declaration
// exists.	if (...) ... 
// Do wildcard expansion. This is recursive.	declaration of expand
// Insert initial completions into our set to avoid duplicates.	for(...:...) ...
// Other commands operate on physical paths.	if (...) ... 
"// for example, cd ../<tab> should complete ""without resolving symlinks""."	ExprStmt
// Helper to resolve using our prefix.	definition of open_dir
// (issue #4402).	if (...) ... 
// Note that prepend_token_prefix is a no-op unless COMPLETE_REPLACES_TOKEN is set	declaration
// We must normalize the path to allow 'cd ..' to operate on logical paths.	if (...) ... 
// This function is only for the completions case.	ExprStmt
// We have an entry in the unique hierarchy!	ExprStmt
// We stop if we got two or more entries; also stop if we got zero or were interrupted	if (...) ... 
// done.	ExprStmt
// first candidate	ExprStmt
// either hidden, or . and .. entries -- skip them	continue;
// unique and we stop the descent.	declaration
// The result does not have a leading slash, but does have a trailing slash if non-empty.	definition of descend_unique_hierarchy
// This function is only for the non-completions case.	ExprStmt
/// Indicate whether we should cancel wildcard expansion. This latches 'interrupt'.	definition of interrupted
/// completions.	declaration of expand_last_segment
/// segment. Use a fuzzy matching algorithm.	declaration of expand_literal_intermediate_segment_with_fuzz
/// prefix is the prefix for completions.	declaration of expand_intermediate_segment
/// We are a trailing slash - expand at the end.	declaration of expand_trailing_slash
// If we ever try to do parallel wildcard expansion we'll have to remove this	definition of has_fuzzy_ancestor
// Whether we have successfully added any completions.	definition of did_add
// Whether we have been interrupted.	definition of did_interrupt
// Resolved items get inserted into here. This is transient of course.	definition of resolved_completions
// Flags controlling expansion.	definition of flags
// The set of file IDs we have visited, used to avoid symlink loops.	definition of visited_files
// The set of items we have resolved, used to efficiently avoid duplication.	definition of completion_set
// The working directory to resolve paths against	definition of working_directory
// A function to call to check cancellation.	definition of cancel_checker
// call stat() in some cases.	declaration
// Compute the description.	declaration
// need to know the error status of wstat.	ExprStmt
// Check if it will match before stat().	if (...) ... 
/// up. Note that the filename came from a readdir() call, so we know it exists.	definition of wildcard_test_flags_then_complete
/// \param err The errno value after a failed stat call on the file.	definition of file_get_desc
// Check permissions granted to other	if (...) ... 
// Check permissions granted to group	if (...) ... 
// Check permissions granted to owner	if (...) ... 
// Race condition, ngroups has changed between the two getgroups() calls	declaration
// Cache a list of our group memberships.	declaration
// because we don't change them.	declaration
// Note out may be NULL.	ExprStmt
// We don't even try with this one.	return ...
// NULL but we have a prefix match, stop there.	if (...) ... 
// We found a match.	ExprStmt
"// string, such that the wildcard produces the ""minimal match.""."	declaration
"// the empty string. This fixes cases like ""f*<tab>"" -> ""f*o""."	if (...) ... 
// no match	return ...
// Case insensitive match.	return ...
// Normal match.	return ...
// a wildcard, so just do case comparison and then recurse.	if (...) ... 
// e.g. `abc*` can never match a string that is only two characters long.	if (...) ... 
// 'foo' when a file 'foo' exists.	declaration
// the wildcard.	ExprStmt
// Wildcard complete.	declaration
// If we're allowing fuzzy match, any match is OK. Otherwise we require a prefix match.	declaration
// itself	if (...) ... 
// Maybe we have no more wildcards at all. This includes the empty string.	if (...) ... 
// Locate the next wildcard character position, e.g. ANY_CHAR or ANY_STRING.	declaration
// dot); ANY_STRING not allowed.	if (...) ... 
/// wildcards. This is historic behavior.	declaration of wildcard_complete_internal
// Weirdly specific and non-reusable helper function that makes its one call site much clearer.	definition of has_prefix_match
// function for generating descriptions	definition of desc_func
// the original string, transient	definition of orig
// A transient parameter pack needed by wildcard_complete.	definition of wc_complete_pack_t
// This completion has an embedded description, do not use the generic description.	declaration
// This does something horrible refactored from an even more horrible function.	definition of resolve_description
// Matched all of pattern to all of name. Success.	return ...
// Mismatch. Maybe restart.	if (...) ... 
// ordinary character	{ ... }
// If that doesn't work out, restart at str_x+1 next.	ExprStmt
// match.	if (...) ... 
// Ignore hidden file	if (...) ... 
// Near Linear implementation as proposed here https://research.swtch.com/glob.	declaration
// The string is '.' or '..' so the only possible match is an exact match.	return ...
// literal matches.	if (...) ... 
/// against wildcards.	definition of wildcard_match_internal
/// Implementation of wildcard_has. Needs to take the length to handle embedded nulls (issue #1631).	definition of wildcard_has_impl
/// Finds an internal (ANY_STRING, etc.) style wildcard, or wcstring::npos.	definition of wildcard_find
/// Description for directories.	"#define COMPLETE_DIRECTORY_DESC _(L""Directory"")"
/// Description for socket files.	"#define COMPLETE_SOCKET_DESC _(L""Socket"")"
/// Description for symlink loop.	"#define COMPLETE_LOOP_SYMLINK_DESC _(L""Symbolic link loop"")"
/// Description for Rotten symlink.	"#define COMPLETE_ROTTEN_SYMLINK_DESC _(L""Rotten symbolic link"")"
/// Description for symlink.	"#define COMPLETE_DIRECTORY_SYMLINK_DESC _(L""Symbolic link to directory"")"
/// Description for symlink.	"#define COMPLETE_SYMLINK_DESC _(L""Symbolic link"")"
/// Description for fifo buffer.	"#define COMPLETE_FIFO_DESC _(L""Fifo"")"
/// Description for block device.	"#define COMPLETE_BLOCK_DESC _(L""Block device"")"
/// Description for character device.	"#define COMPLETE_CHAR_DESC _(L""Character device"")"
/// Description for regular file.	"#define COMPLETE_FILE_DESC _(L""File"")"
/// Description for link to executable.	"#define COMPLETE_EXEC_LINK_DESC _(L""Executable link"")"
/// Description for generic executable.	"#define COMPLETE_EXEC_DESC _(L""Executable"")"
/* libgen.h */	#endif
"/* Return final component of PATH.

   This is the weird XPG version of this function.  It sometimes will
   modify its argument.  Therefore we normally use the GNU version (in
   <string.h>) and only if this header is included make the XPG
   version available under the real name.  */"	declaration of __xpg_basename
"/* Return directory part of PATH or ""."" if none is available.  */"	declaration of dirname
"/* Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _LIBGEN_H
/* Tell code we have these members.  */	#define _STATFS_F_NAMELEN
"/* Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_STATFS_H
/* sys/statfs.h */	#endif
"/* Return information about the filesystem containing the file FILDES
   refers to.  */"	#ifndef __USE_FILE_OFFSET64
/* Return information about the filesystem on which FILE resides.  */	#ifndef __USE_FILE_OFFSET64
"/* Definitions for getting information about a filesystem.
   Copyright (C) 1996-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_STATFS_H
/* _SYS_MOUNT_H */	#endif
/* Unmount a filesystem.  Force unmounting if FLAGS is set to MNT_FORCE.  */	declaration of umount2
/* Unmount a filesystem.  */	declaration of umount
/* Mount a filesystem.  */	declaration of mount
/* Don't follow symlink on umount.  */	UMOUNT_NOFOLLOW
/* Mark for expiry.  */	MNT_EXPIRE
/* Just detach from the tree.  */	MNT_DETACH
/* Force unmounting.  */	MNT_FORCE
/* Possible value for FLAGS parameter of `umount2'.  */	definition of (unnamed enum)
/* return device size.  */	#define BLKGETSIZE64 _IOR(0x12,114,size_t)
/* Get block device sector size.  */	#define BLKSSZGET _IO(0x12,104)
/* Get max sectors per request.  */	#define BLKSECTGET _IO(0x12,103)
/* Set max sectors per request.  */	#define BLKSECTSET _IO(0x12,102)
/* Get filesystem read-ahead.  */	#define BLKFRAGET _IO(0x12,101)
/* Set filesystem read-ahead.  */	#define BLKFRASET _IO(0x12,100)
/* Get current read ahead setting.  */	#define BLKRAGET _IO(0x12, 99)
/* Set read ahead for block device.  */	#define BLKRASET _IO(0x12, 98)
/* Flush buffer cache.  */	#define BLKFLSBUF _IO(0x12, 97)
/* Return device size.  */	#define BLKGETSIZE _IO(0x12, 96)
/* Re-read partition table.  */	#define BLKRRPART _IO(0x12, 95)
/* Get read-only status (0 = read_write).  */	#define BLKROGET _IO(0x12, 94)
/* Set device read-only (0 = read-write).  */	#define BLKROSET _IO(0x12, 93)
"/* The read-only stuff doesn't really belong here, but any other place
   is probably as bad and I don't want to create yet another include
   file.  */"	#define BLKROSET _IO(0x12, 93)
/* Magic flag number mask */	#define MS_MGC_MSK 0xffff0000
"/* Magic flag number to indicate ""new"" flags */"	#define MS_MGC_VAL 0xc0ed0000
/* Magic mount flag number. Has to be or-ed to the flag values.  */	#define MS_MGC_VAL 0xc0ed0000
/* Flags that can be altered by MS_REMOUNT  */	#define MS_RMT_MASK (MS_RDONLY|MS_SYNCHRONOUS|MS_MANDLOCK|MS_I_VERSION |MS_LAZYTIME)
/* Update the on-disk [acm]times lazily.  */	MS_LAZYTIME
/* Always perform atime updates.  */	MS_STRICTATIME
/* Update inode I_version field.  */	MS_I_VERSION
/* This is a kern_mount call.  */	MS_KERNMOUNT
/* Update atime relative to mtime/ctime.  */	MS_RELATIME
/* Change to shared.  */	MS_SHARED
/* Change to slave.  */	MS_SLAVE
/* Change to private.  */	MS_PRIVATE
/* Change to unbindable.  */	MS_UNBINDABLE
/* VFS does not apply the umask.  */	MS_POSIXACL
/* Bind directory at different place.  */	MS_BIND
/* Do not update directory access times.  */	MS_NODIRATIME
/* Do not update access times.  */	MS_NOATIME
/* Directory modifications are synchronous.  */	MS_DIRSYNC
/* Allow mandatory locks on an FS.  */	MS_MANDLOCK
/* Alter flags of a mounted FS.  */	MS_REMOUNT
/* Writes are synced at once.  */	MS_SYNCHRONOUS
/* Disallow program execution.  */	MS_NOEXEC
/* Disallow access to device special files.  */	MS_NODEV
/* Ignore suid and sgid bits.  */	MS_NOSUID
/* Mount read-only.  */	MS_RDONLY
"/* These are the fs-independent mount-flags: up to 16 flags are
   supported  */"	definition of (unnamed enum)
/* This is taken from /usr/include/linux/fs.h.  */	#ifndef _SYS_MOUNT_H
/* Use GNU.  */	#endif
/* Update atime relative to mtime/ctime.  */	ST_RELATIME
/* Do not update directory access times.  */	ST_NODIRATIME
/* Do not update access times.  */	ST_NOATIME
/* Immutable file.  */	ST_IMMUTABLE
/* Append-only file.  */	ST_APPEND
/* Write on file/directory/symlink.  */	ST_WRITE
/* Allow mandatory locks on an FS.  */	ST_MANDLOCK
/* Writes are synced at once.  */	ST_SYNCHRONOUS
/* Disallow program execution.  */	ST_NOEXEC
/* Disallow access to device special files.  */	ST_NODEV
/* Ignore suid and sgid bits.  */	ST_NOSUID
/* Mount read-only.  */	ST_RDONLY
"/* Definitions for the flag in `f_flag'.  These definitions should be
   kept in sync with the definitions in <sys/mount.h>.  */"	definition of (unnamed enum)
/* For __fsblkcnt_t and __fsfilcnt_t.  */	#if (__WORDSIZE == 32 \
"/* Copyright (C) 1997-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_STATVFS_H
/* sys/statvfs.h */	#endif
"/* Return information about the filesystem containing the file FILDES
   refers to.  */"	#ifndef __USE_FILE_OFFSET64
/* Return information about the filesystem on which FILE resides.  */	#ifndef __USE_FILE_OFFSET64
/* Type to count file system inodes.  */	#endif
/* Type to count file system blocks.  */	#endif
/* Type to count file system inodes.  */	#endif
/* Type to count file system blocks.  */	#endif
"/* Definitions for getting information about a filesystem.
   Copyright (C) 1998-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_STATVFS_H
// Compare each field, stopping when we get to a non-equal field.	declaration
// We can ignore the locale-taking version because we are limited to ASCII digits.	ExprStmt
"// The ""fast path."" If we're all ASCII and we fit inline, use strtod()."	declaration
/// fast path.	definition of fish_wcstod
// skip trailing whitespace	ExprStmt
// disallow minus as the first character to avoid questionable wrap-around	{ ... }
// this is because some implementations don't handle this sensibly	if (...) ... 
// skip leading whitespace	ExprStmt
/// wcstoull implementation). Trailing whitespace is also ignored.	definition of fish_wcstoull
// skip trailing whitespace	ExprStmt
// this is because some implementations don't handle this sensibly	{ ... }
// skip leading whitespace	ExprStmt
/// whitespace is also ignored.	definition of fish_wcstoll
// skip trailing whitespace	ExprStmt
// this is because some implementations don't handle this sensibly	{ ... }
// skip leading whitespace	ExprStmt
/// whitespace is also ignored.	definition of fish_wcstol
// skip trailing whitespace	ExprStmt
// this is because some implementations don't handle this sensibly	{ ... }
// skip leading whitespace	ExprStmt
/// as invalid.	definition of fish_wcstoi
/// See fallback.h for the normal definitions.	definition of fish_wcswidth
/// See fallback.h for the normal definitions.	definition of fish_wcswidth
/// some code points. See issue #3050.	definition of fish_iswgraph
/// some code points. See issue #3050.	#endif
/// some code points. See issue #3050.	definition of fish_iswalnum
/// Return one if the code point is in a Unicode private use area.	definition of fish_is_pua
// TODO: If we want to shrink the map, this would be a problem.	return ...
// Preserve errno across this since this is often used in printing error messages.	declaration
/// requested.	definition of wgettext_init_if_necessary
// Really init wgettext.	definition of wgettext_really_init
// Append un-erased elements to wd_comps and join them, then prepend the leading /.	ExprStmt
// Erase leading . and .. components from path_comps, popping from wd_comps as we go.	declaration
// In particular this removes the leading and trailing empties.	ExprStmt
// Fast paths.	declaration
// Ensure ./ normalizes to . and not empty.	if (...) ... 
// Two slashes are preserved. Three+ slashes are collapsed to one. (!)	ExprStmt
// We underflowed the .. and are a relative (not absolute) path.	ExprStmt
// '..' with a real path component, drop that path component.	ExprStmt
// Count the leading slashes.	declaration
// This test is to deal with cases such as /../../x => //x.	if (...) ... 
// Only call realpath() on the portion up to the last component.	ExprStmt
"// If there is no ""/"", this is a file in $PWD, so give the realpath to that."	ExprStmt
// Only call realpath() on the portion up to the last component.	ExprStmt
// single path component and thus doesn't need conversion.	ExprStmt
// Check if everything up to the last path component is valid.	declaration
"// Strip trailing slashes. This is treats ""/a//"" as equivalent to ""/a"" if /a is a non-directory."	while (...) ...
/// wrealpath() returns none() and errno is likely set.	definition of wrealpath
// Note we cannot use strerror, because on Linux it uses gettext, which is not safe.	declaration
// use a shared buffer for this case	definition of buff
// defined(HAVE__SYS__ERRS) || defined(HAVE_SYS_ERRLIST)	#endif
// either HAVE__SYS__ERRS or HAVE_SYS_ERRLIST	#endif
// See issue #808.	#elif defined(HAVE__SYS__ERRS) || defined(HAVE_SYS_ERRLIST)
// deprecation warning from the linker (!!), which appears impossible to suppress!	definition of safe_strerror
// In practice the only system to use this path is NetBSD.	#elif defined(MNT_LOCAL)
// Other FSes are assumed local.	return ...
// CIFS_MAGIC_NUMBER	case ...:
// SMB2_MAGIC_NUMBER - not in the manpage	case ...:
// SMB_SUPER_MAGIC	case ...:
// NFS_SUPER_MAGIC	case ...:
// NOTE: The cast is necessary for 32-bit systems because of the 4-byte CIFS_MAGIC_NUMBER	switch (...) ... 
// Prefer to use O_CLOEXEC.	#ifdef O_CLOEXEC
// existing flags and modify them.	declaration
// We can't determine if it's a directory or not, so just return it.	#endif
// nothing else can	break;
// these may be directories	break;
// We couldn't determine the file type from the dirent; check by stat'ing it.	declaration
// HAVE_STRUCT_DIRENT_D_TYPE	#endif
// Regular file.	ExprStmt
// We want to treat symlinks to directories as directories. Use stat to resolve it.	ExprStmt
// Known directory.	ExprStmt
// We may be able to skip stat, if the readdir can tell us the file type directly.	declaration
// The caller cares if this is a directory, so check.	declaration
/// Map used as cache by wgettext.	definition of wgettext_map
// Wide character equivalents of various standard unix functions.	#define FISH_NO_ISW_WRAPPERS
