/* We do not support C11 <threads.h>.  */	#endif
"/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */"	#ifdef __GCC_IEC_559
"/* Copyright (C) 1991-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _STDC_PREDEF_H
/* Both x86-64 and x32 use the 64-bit system call interface.  */	#define __SYSCALL_WORDSIZE 64
/* Determine the wordsize from the preprocessor defines.  */	#if defined __x86_64__ && !defined __ILP32__
/* sys/cdefs.h */	#endif
"/* Generic selection (ISO C11) is a C-only feature, available in GCC
   since version 4.9.  Previous versions do not provide generic
   selection, even though they might set __STDC_VERSION__ to 201112L,
   when in -std=c11 mode.  Thus, we must check for !defined __GNUC__
   when testing __STDC_VERSION__ for generic selection support.
   On the other hand, Clang also defines __GNUC__, so a clang-specific
   check is required to enable the use of generic selection.  */"	#if !defined __cplusplus \
"/* __glibc_macro_warning (MESSAGE) issues warning MESSAGE.  This is
   intended for use in preprocessor macros.

   Note: MESSAGE must be a _single_ string; concatenation of string
   literals is not supported.  */"	#if __GNUC_PREREQ (4,8) || __glibc_clang_prereq (3,5)
"/* Describes a char array whose address can safely be passed as the first
   argument to strncpy and strncat, as the char array is not necessarily
   a NUL-terminated string.  */"	#else
/* Not supported.  */	#endif
/* Not supported in old GCC.  */	#else
"/* ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
     array_name[restrict]
   GCC 3.1 supports this.  */"	#if __GNUC_PREREQ (3,1) && !defined __GNUG__
/* Ignore */	#endif
/* __restrict is known in EGCS 1.2 and above. */	#if !__GNUC_PREREQ (2,92)
/* Ignore */	#endif
"/* It is possible to compile containing GCC extensions even if GCC is
   run in pedantic mode if the uses are carefully marked using the
   `__extension__' keyword.  But this is not generally available before
   version 2.8.  */"	#if !__GNUC_PREREQ (2,8)
"/* GCC 4.3 and above allow passing all anonymous arguments of an
   __extern_always_inline function to some other vararg function.  */"	#if __GNUC_PREREQ (4,3)
"/* GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
   inline semantics, unless -fgnu89-inline is used.  Using __GNUC_STDC_INLINE__
   or __GNUC_GNU_INLINE is not a good enough check for gcc because gcc versions
   older than 4.3 may define these macros and still not guarantee GNU inlining
   semantics.

   clang++ identifies itself as gcc-4.2, but has support for GNU inlining
   semantics, that can be checked fot by using the __GNUC_STDC_INLINE_ and
   __GNUC_GNU_INLINE__ macro definitions.  */"	#if (!defined __cplusplus || __GNUC_PREREQ (4,3) \
/* Ignore */	#endif
"/* Associate error messages with the source location of the call site rather
   than with the source location inside the function.  */"	#if __GNUC_PREREQ (4,3)
"/* The Linux kernel defines __always_inline in stddef.h (283d7573), and
   it conflicts with this definition.  Therefore undefine it first to
   allow either header to be included first.  */"	#undef __always_inline
/* Forces a function to be always inlined.  */	#if __GNUC_PREREQ (3,2)
/* Ignore */	#define __wur
/* empty */	#endif
"/* If fortification mode, we warn about unused results of certain
   function calls which can lead to problems.  */"	#if __GNUC_PREREQ (3,4)
"/* The nonull function attribute allows to mark pointer parameters which
   must not be NULL.  */"	#if __GNUC_PREREQ (3,3)
/* Ignore */	#endif
"/* At some point during the gcc 2.97 development the `strfmon' format
   attribute for functions was introduced.  We don't want to use it
   unconditionally (although this would be possible) since it
   generates warnings.  */"	#if __GNUC_PREREQ (2,97)
/* Ignore */	#endif
"/* At some point during the gcc 2.8 development the `format_arg' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.
   If several `format_arg' attributes are given for the same function, in
   gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
   all designated arguments are considered.  */"	#if __GNUC_PREREQ (2,8)
"/* Since version 4.5, gcc also allows one to specify the message printed
   when a deprecated function is used.  clang claims to be gcc 4.2, but
   may also support this feature.  */"	#if __GNUC_PREREQ (4,5) || \
/* Ignore */	#endif
/* Since version 3.2, gcc allows marking deprecated functions.  */	#if __GNUC_PREREQ (3,2)
/* Ignore */	#endif
"/* At some point during the gcc 3.1 development the `used' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */"	#if __GNUC_PREREQ (3,1)
/* Ignore */	#endif
/* This declaration tells the compiler that the value is constant.  */	#if __GNUC_PREREQ (2,5)
/* Ignore */	#endif
"/* At some point during the gcc 2.96 development the `pure' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */"	#if __GNUC_PREREQ (2,96)
/* Ignore.  */	#endif
"/* Tell the compiler which arguments to an allocation function
   indicate the size of the allocation.  */"	#if __GNUC_PREREQ (4, 3)
/* Ignore */	#endif
"/* At some point during the gcc 2.96 development the `malloc' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */"	#if __GNUC_PREREQ (2,96)
/* Ignore */	#endif
"/* GCC has various useful declarations that can be made with the
   `__attribute__' syntax.  All of the ways we use this do fine if
   they are omitted for compilers that don't understand it. */"	#if !defined __GNUC__ || __GNUC__ < 2
"/*
#elif __SOME_OTHER_COMPILER__

# define __REDIRECT(name, proto, alias) name proto; \
	_Pragma(""let "" #name "" = "" #alias)
*/"	#endif
"/* __asm__ (""xyz"") is used throughout the headers to rename functions
   at the assembly language level.  This is wrapped by the __REDIRECT
   macro, in order to support compilers that can do this some other
   way.  When compilers don't support asm-names at all, we have to do
   preprocessor tricks instead (which don't have exactly the right
   semantics, but it's the best we can do).

   Example:
   int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */"	#if defined __GNUC__ && __GNUC__ >= 2
/* Some other non-C99 compiler.  Approximate with [1].  */	#endif
"/* Pre-2.97 GCC did not support C99 flexible arrays but did have
   an equivalent extension with slightly different notation.  */"	#else
"/* GCC 2.97 supports C99 flexible array members as an extension,
   even when in C89 mode or compiling C++ (any version).  */"	#elif defined __GNUC__
"/* Support for flexible arrays.
   Headers that should use flexible arrays only if they're ""real""
   (e.g. only if they won't affect sizeof()) should test
   #if __glibc_c99_flexarr_available.  */"	#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
/* Fortify support.  */	#define __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1)
/* C++ needs to know that types and declarations are C, not C++.  */	#ifdef __cplusplus
/* This is not a typedef so `const __ptr_t' does the right thing.  */	#define __ptr_t void *
"/* For these things, GCC behaves the ANSI way normally,
   and the non-ANSI way under -traditional.  */"	#define __CONCAT(x,y) x ## y
"/* These two macros are not used in glibc anymore.  They are kept here
   only because some other projects expect the macros to be defined.  */"	#define __P(args) args
"/* Compilers that are not clang may object to
       #if defined __clang__ && __has_extension(...)
   even though they do not need to evaluate the right-hand side of the &&.  */"	#if defined __clang__ && defined __has_extension
/* GCC.  */	#endif
/* No inline functions.  */	#endif
/* Not GCC.  */	#else
"/* GCC can always grok prototypes.  For C++ programs we add throw()
   to help it optimize the function calls.  But this works only with
   gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
   as non-throwing using a function attribute since programs can use
   the -fexceptions options for C code as well.  */"	#if !defined __cplusplus && __GNUC_PREREQ (3, 3)
"/* All functions, except those with callbacks or those that
   synchronize memory, are leaf functions.  */"	#if __GNUC_PREREQ (4, 6) && !defined _LIBC
/* Some user header file might have defined this before.  */	#undef __P
"/* The GNU libc does not support any K&R compilers or the traditional mode
   of ISO C compilers anymore.  Check for some of the combinations not
   anymore supported.  */"	#if defined __GNUC__ && !defined __STDC__
/* We are almost always included from features.h. */	#ifndef _FEATURES_H
"/* Copyright (C) 1992-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_CDEFS_H
"/* This file is automatically generated.
   It defines a symbol `__stub_FUNCTION' for each function
   in the C library which is a stub, meaning it will fail
   every time called, usually setting errno to ENOSYS.  */"	#ifdef _LIBC
"/* This file is automatically generated.
   This file selects the right generated file of `__stub_FUNCTION' macros
   based on the architecture being compiled for.  */"	#if !defined __x86_64__
/* features.h  */	#endif
/* Decide whether we can define 'extern inline' functions in headers.  */	#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
/* !ASSEMBLER */	#endif
"/* If we don't have __REDIRECT, prototypes will be missing if
   __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */"	#if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
/* This is here only because every header file already includes this one.  */	#ifndef __ASSEMBLER__
"/* Major and minor version number of the GNU C library package.  Use
   these macros to test for features in specific releases.  */"	#define __GLIBC__ 2
"/* This macro indicates that the installed library is the GNU C Library.
   For historic reasons the value now is 6 and this will stay from now
   on.  The use of this variable is deprecated.  Use __GLIBC__ and
   __GLIBC_MINOR__ now (see below) when you want to test for a specific
   GNU C library version and use the values in <gnu/lib-names.h> to get
   the sonames of the shared libraries.  */"	#undef __GNU_LIBRARY__
"/* The function 'gets' existed in C89, but is impossible to use
   safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   compatibility with various implementations of <cstdio>, this test
   must consider only the value of __cplusplus when compiling C++.  */"	#if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
"/* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   defined in all multithreaded code.  GNU libc has not required this
   for many years.  We now treat them as compatibility synonyms for
   _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   comprehensive support for multithreaded code.  Using them never
   lowers the selected level of POSIX conformance, only raises it.  */"	#if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
"/* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   is defined, use POSIX.1-2008 (or another version depending on
   _XOPEN_SOURCE).  */"	#ifdef _DEFAULT_SOURCE
"/* This is to enable compatibility for ISO C++11.
   Check the temporary macro for now, too.  */"	#if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
/* This is to enable compatibility for ISO C++17.  */	#if __cplusplus >= 201703L
/* This is to enable the ISO C90 Amendment 1:1995 extension.  */	#if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
/* This is to enable the ISO C99 extension.  */	#if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
/* This is to enable the ISO C11 extension.  */	#if (defined _ISOC11_SOURCE \
"/* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   define _DEFAULT_SOURCE.  */"	"#if (defined _DEFAULT_SOURCE					\"
/* If _GNU_SOURCE was defined by the user, turn on all the other features.  */	#ifdef _GNU_SOURCE
"/* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   issue a warning; the expectation is that the source is being
   transitioned to use the new macro.  */"	#if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
/* Whether to use feature set F.  */	#define __GLIBC_USE(F) __GLIBC_USE_ ## F
"/* Similarly for clang.  Features added to GCC after version 4.2 may
   or may not also be available in clang, and clang's definitions of
   __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   features can be queried via __has_extension/__has_feature.  */"	#if defined __clang_major__ && defined __clang_minor__
"/* Convenience macro to test the version of gcc.
   Use like this:
   #if __GNUC_PREREQ (2,8)
   ... code requiring gcc 2.8 or later ...
   #endif
   Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   added in 2.0.  */"	#if defined __GNUC__ && defined __GNUC_MINOR__
"/* Suppress kernel-name space pollution unless user expressedly asks
   for it.  */"	#ifndef _LOOSE_KERNEL_NAMES
/* Undefine everything, so we get a clean slate.  */	#undef __USE_ISOC11
"/* Copyright (C) 1991-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _FEATURES_H
"/* ISO/IEC TS 18661-3:2015 defines the
   __STDC_WANT_IEC_60559_TYPES_EXT__ macro.  */"	#undef __GLIBC_USE_IEC_60559_TYPES_EXT
"/* ISO/IEC TS 18661-4:2015 defines the
   __STDC_WANT_IEC_60559_FUNCS_EXT__ macro.  */"	#undef __GLIBC_USE_IEC_60559_FUNCS_EXT
"/* ISO/IEC TS 18661-1:2014 defines the __STDC_WANT_IEC_60559_BFP_EXT__
   macro.  */"	#undef __GLIBC_USE_IEC_60559_BFP_EXT
"/* ISO/IEC TR 24731-2:2010 defines the __STDC_WANT_LIB_EXT2__
   macro.  */"	#undef __GLIBC_USE_LIB_EXT2
"/* This header is internal to glibc and should not be included outside
   of glibc headers.  Headers including it must define
   __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION first.  This header
   cannot have multiple include guards because ISO C feature test
   macros depend on the definition of the macro when an affected
   header is included, not when the first system header is
   included.  */"	#ifndef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION
"/* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
	  || __need_XXX was not defined before */"	#endif
/* _STDDEF_H was defined this time */	#endif
/* C++11.  */	#endif
/* C11 or C++11.  */	#endif
"/* _Float128 is defined as a basic type, so max_align_t must be
     sufficiently aligned for it.  This code must work in C++, so we
     use __float128 here; that is only available on some
     architectures, but only on i386 is extra alignment needed for
     __float128.  */"	#ifdef __i386__
/* Offset of member MEMBER in a struct of type TYPE. */	#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
/* NULL not defined and <stddef.h> or need NULL.  */	#endif
/* G++ */	#endif
/* C++ */	#endif
/* C++ */	#else
/* G++ */	#else
/* in case <stdio.h> has defined it. */	#undef NULL
/* in case <stdio.h> has defined it. */	#ifdef __GNUG__
/* A null pointer constant.  */	#if defined (_STDDEF_H) || defined (__need_NULL)
/* __sys_stdtypes_h */	#endif
/* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI_H_ */	#endif
/*  The following ones are the real ones.  */	#ifdef _GCC_PTRDIFF_T
"/*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
    are probably typos and should be removed before 2.8 is released.  */"	#ifdef _GCC_PTRDIFF_T_
/*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  */	#if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_ANSI_H_) || defined(_I386_ANSI_H_)
/* _STDDEF_H or __need_wchar_t.  */	#endif
/* __wchar_t__ */	#endif
/* __WCHAR_T__ */	#endif
/* _BSD_RUNE_T_DEFINED_ */	#endif
/* _WCHAR_T_DECLARED */	#endif
"/* FreeBSD 5 can't be handled well using ""traditional"" logic above
   since it no longer defines _BSD_RUNE_T_ yet still desires to export
   rune_t in some cases... */"	#if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
"/* Why is this file so hard to maintain properly?  In contrast to
   the comment above regarding BSD/386 1.1, on FreeBSD for as long
   as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   redundant typedefs will occur when stdlib.h is included after this file. */"	#endif
/* Darwin */	#if defined (__FreeBSD__) && (__FreeBSD__ < 5)
"/* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   symbols in the _FOO_T_ family, stays defined even after its
   corresponding type is defined).  If we define wchar_t, then we
   must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   we undef _WCHAR_T_, then we must also define rune_t, since 
   headers like runetype.h assume that if machine/ansi.h is included,
   and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   machine/ansi.h says, ""Note that _WCHAR_T_ and _RUNE_T_ must be of
   the same type."" */"	#ifdef _BSD_WCHAR_T_
/* Cray Unicos/Mk */	#define __WCHAR_T__
/* BeOS */	#define __wchar_t__
/* FreeBSD 5 */	#ifndef _WCHAR_T_DECLARED
/* Darwin */	#ifndef _BSD_RUNE_T_DEFINED_
/* Darwin */	#ifndef _BSD_WCHAR_T_DEFINED_
/* Cray Unicos/Mk */	#ifndef __WCHAR_T__
/* BeOS */	#ifndef __wchar_t__
"/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */"	#if defined (_STDDEF_H) || defined (__need_wchar_t)
/* _STDDEF_H or __need_size_t.  */	#endif
/* __size_t__ */	#endif
/* __SIZE_T__ */	#endif
/* _SIZE_T */	#endif
/* _SYS_SIZE_T_H */	#endif
/* _T_SIZE_ */	#endif
/* _T_SIZE */	#endif
/* __SIZE_T */	#endif
/* _SIZE_T_ */	#endif
/* _BSD_SIZE_T_ */	#endif
/* _SIZE_T_DEFINED_ */	#endif
/* _SIZE_T_DEFINED */	#endif
/* _BSD_SIZE_T_DEFINED_ */	#endif
/* _SIZE_T_DECLARED */	#endif
/* ___int_size_t_h */	#endif
/* _GCC_SIZE_T */	#endif
/* _SIZET_ */	#endif
/* __size_t */	#endif
/* !(defined (__GNUG__) && defined (size_t)) */	#endif
/* __BEOS__ */	#endif
/* __size_t is also a typedef on VMS.  */	#else
/* __size_t is a typedef on FreeBSD 5, must not trash it. */	#elif defined (__VMS__)
/* FreeBSD 5 */	#define _SIZE_T_DECLARED
/* FreeBSD 5 */	#if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
/* Darwin */	#define _BSD_SIZE_T_DEFINED_
/* Cray Unicos/Mk */	#define __SIZE_T__
/* BeOS */	#define __size_t__
/* FreeBSD 5 */	#ifndef _SIZE_T_DECLARED
/* Darwin */	#ifndef _BSD_SIZE_T_DEFINED_
/* in case <sys/types.h> has defined it. */	#ifndef _SIZE_T
/* Cray Unicos/Mk */	#ifndef __SIZE_T__
/* BeOS */	#ifndef __size_t__
"/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */"	#if defined (_STDDEF_H) || defined (__need_size_t)
/* _STDDEF_H or __need_ptrdiff_t.  */	#endif
/* If this symbol has done its job, get rid of it.  */	#endif
/* _PTRDIFF_T */	#endif
/* _T_PTRDIFF_ */	#endif
/* _T_PTRDIFF */	#endif
/* __PTRDIFF_T */	#endif
/* _PTRDIFF_T_ */	#endif
/* _BSD_PTRDIFF_T_ */	#endif
/* ___int_ptrdiff_t_h */	#endif
/* _GCC_PTRDIFF_T */	#endif
/* _PTRDIFF_T_DECLARED */	#endif
/* DragonFly */	#ifndef _PTRDIFF_T_DECLARED
/* in case <sys/types.h> has defined it. */	#ifndef _PTRDIFF_T
"/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */"	#if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
"/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */"	#if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined (_STDDEF_H_))
"/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */"	#if defined (__sequent__) && defined (_PTRDIFF_T_)
/* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_ANSI_H_) || defined(_I386_ANSI_H_) */	#endif
/* Undef _FOO_T_ if we are supposed to define foo_t.  */	#if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
"/* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   instead of _WCHAR_T_. */"	#if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
"/* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
   defined if the corresponding type is *not* defined.
   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
   NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_ */"	#if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_ANSI_H_)  || defined(_I386_ANSI_H_)
/* On FreeBSD 5, machine/ansi.h does not exist anymore... */	#if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
"/* On 4.3bsd-net2, make sure ansi.h is included, so we have
   one less case to deal with in the following.  */"	#if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__FreeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
/* snaroff@next.com says the NeXT needs this.  */	#endif
"/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */"	"#if (!defined(__need_wchar_t) && !defined(__need_size_t)	\"
"/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */"	#if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDDEF_H) \
/* bits/typesizes.h */	#endif
/* Number of descriptors that can fit in an `fd_set'.  */	#define __FD_SETSIZE 1024
/* And for __rlim_t and __rlim64_t.  */	#define __RLIM_T_MATCHES_RLIM64_T 1
/* Same for ino_t and ino64_t.  */	#define __INO_T_MATCHES_INO64_T 1
"/* Tell the libc code that off_t and off64_t are actually the same type
   for all ABI purposes, even if possibly expressed as different base types
   for C type-checking purposes.  */"	#define __OFF_T_MATCHES_OFF64_T 1
/* X32 kernel interface is 64-bit.  */	#if defined __x86_64__ && defined __ILP32__
"/* bits/typesizes.h -- underlying types for *_t.  Linux/x86-64 version.
   Copyright (C) 2012-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_TYPES_H
/* bits/types.h */	#endif
"/* C99: An integer type that can be accessed as an atomic entity,
   even in the presence of asynchronous interrupts.
   It is not currently necessary for this to be machine-specific.  */"	declaration of __sig_atomic_t
/* Duplicate info from sys/socket.h.  */	declaration of __socklen_t
/* Duplicates info from stdint.h but this is used in unistd.h.  */	declaration of __intptr_t
/* Type of file sizes and offsets (LFS).  */	declaration of __loff_t
"/* These few don't really vary by system, they always correspond
   to one of the other defined types.  */"	declaration of __loff_t
/* Unsigned long type used in system calls.  */	declaration of __syscall_ulong_t
/* Signed long type used in system calls.  */	declaration of __syscall_slong_t
/* Type of a byte count, or error.  */	declaration of __ssize_t
/* Type of miscellaneous file system fields.  */	declaration of __fsword_t
/* Type to count file system nodes.  */	declaration of __fsfilcnt_t
/* Type to count file system blocks.  */	declaration of __fsblkcnt_t
/* Type to count number of disk blocks.  */	declaration of __blkcnt_t
/* Type to represent block size.  */	declaration of __blksize_t
/* Timer ID returned by `timer_create'.  */	declaration of __timer_t
/* Clock ID used in clock and timer functions.  */	declaration of __clockid_t
/* Type of an IPC key.  */	declaration of __key_t
/* The type of a disk address.  */	declaration of __daddr_t
/* Signed count of microseconds.  */	declaration of __suseconds_t
/* Count of microseconds.  */	declaration of __useconds_t
/* Seconds since the Epoch.  */	declaration of __time_t
/* General type for IDs.  */	declaration of __id_t
/* Type for resource measurement (LFS).  */	declaration of __rlim64_t
/* Type for resource measurement.  */	declaration of __rlim_t
/* Type of CPU usage counts.  */	declaration of __clock_t
/* Type of file system IDs.  */	declaration of __fsid_t
/* Type of process identifications.  */	declaration of __pid_t
/* Type of file sizes and offsets (LFS).  */	declaration of __off64_t
/* Type of file sizes and offsets.  */	declaration of __off_t
/* Type of file link counts.  */	declaration of __nlink_t
/* Type of file attribute bitmasks.  */	declaration of __mode_t
/* Type of file serial numbers (LFS).*/	declaration of __ino64_t
/* Type of file serial numbers.  */	declaration of __ino_t
/* Type of group identifications.  */	declaration of __gid_t
/* Type of user identifications.  */	declaration of __uid_t
/* Type of device numbers.  */	declaration of __dev_t
/* No need to mark the typedef with __extension__.   */	#define __STD_TYPE typedef
"/* We want __extension__ before typedef's that use nonstandard base types
   such as `long long' in C89 mode.  */"	#elif __WORDSIZE == 64
"/* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
   macros for each of the OS types we define below.  The definitions
   of those macros must use the following macros for underlying types.
   We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsigned
   variants of each of the following integer types on this machine.

	16		-- ""natural"" 16-bit type (always short)
	32		-- ""natural"" 32-bit type (always int)
	64		-- ""natural"" 64-bit type (long or long long)
	LONG32		-- 32-bit type, traditionally long
	QUAD		-- 64-bit type, always long long
	WORD		-- natural type of __WORDSIZE bits (int or long)
	LONGWORD	-- type of __WORDSIZE bits, traditionally long

   We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
   conventional uses of `long' or `long long' type modifiers match the
   types we define, even when a less-adorned type would be the same size.
   This matters for (somewhat) portably writing printf/scanf formats for
   these types, where using the appropriate l or ll format modifiers can
   make the typedefs and the formats match up across all GNU platforms.  If
   we used `long' when it's 64 bits where `long long' is expected, then the
   compiler would warn about the formats not matching the argument types,
   and the programmer changing them to shut up the compiler would break the
   program's portability.

   Here we assume what is presently the case in all the GCC configurations
   we support: long long is always 64 bits, long is always word/address size,
   and int is always 32 bits.  */"	#define __S16_TYPE short int
/* Largest integral types.  */	#if __WORDSIZE == 64
/* quad_t is also 64 bits.  */	#if __WORDSIZE == 64
/* Fixed-size types, underlying types depend on word size and compiler.  */	declaration of __int8_t
/* Convenience types.  */	declaration of __u_char
"/*
 * Never include this file directly; use <sys/types.h> instead.
 */"	#ifndef _BITS_TYPES_H
/* The opaque type of streams.  This is the definition used elsewhere.  */	declaration of FILE
/* Value so far.  */	definition of __value
/* Conversion state information.  */	definition of struct <unnamed>
"/* Integral type unchanged by default argument promotions that can
   hold any value corresponding to members of the extended character
   set, as well as at least one value that does not correspond to any
   member of the extended character set.  */"	#ifndef __WINT_TYPE__
/* bits/_G_config.h */	#endif
/* This is defined by <bits/stat.h> if `st_blksize' exists.  */	#define _G_HAVE_ST_BLKSIZE defined (_STATBUF_ST_BLKSIZE)
/* These library features are always available in the GNU C library.  */	#define _G_va_list __gnuc_va_list
"/* This file is needed by libio to define various configuration parameters.
   These are always the same in the GNU C library.  */"	#ifndef _BITS_G_CONFIG_H
/* not _STDARG_H */	#endif
/* not _ANSI_STDARG_H_ */	#endif
/* _STDARG_H */	#endif
/* not __svr4__ */	#endif
/* not _VA_LIST_, except on certain systems */	#endif
/* not _VA_LIST_DEFINED */	#endif
/* not _VA_LIST */	#endif
/* not _VA_LIST_T_H */	#endif
/* not __va_list__ */	#endif
/* The macro __va_list__ is used by BeOS.  */	#ifndef __va_list__
/* The macro _VA_LIST_T_H is used in the Bull dpx2  */	#ifndef _VA_LIST_T_H
/* The macro _VA_LIST is used in SCO Unix 3.2.  */	#ifndef _VA_LIST
/* The macro _VA_LIST_DEFINED is used in Windows NT 3.5  */	#ifndef _VA_LIST_DEFINED
"/* The macro _VA_LIST_ is the same thing used by this file in Ultrix.
   But on BSD NET2 we must not test or define or undef it.
   (Note that the comments in NET 2's ansi.h
   are incorrect for _VA_LIST_--see stdio.h!)  */"	#if !defined (_VA_LIST_) || defined (__BSD_NET2__) || defined (____386BSD____) || defined (__bsdi__) || defined (__sequent__) || defined (__FreeBSD__) || defined(WINNT)
/* not __svr4__ || _SCO_DS */	#else
/* _VA_LIST_ */	#endif
/* __i860__ */	#endif
"/* SVR4.2 uses _VA_LIST for an internal alias for va_list,
   so we must avoid testing it and setting it here.
   SVR4 uses _VA_LIST as a flag in stdarg.h, but we should
   have no conflict with that.  */"	#ifndef _VA_LIST_
"/* We deliberately do not define va_list when called from
   stdio.h, because ANSI C says that stdio.h is not supposed to define
   va_list.  stdio.h needs to have access to that data type, 
   but must not use that name.  It should use the name __gnuc_va_list,
   which is safe because it is reserved for the implementation.  */"	#ifdef _BSD_VA_LIST
"/* Define the standard macros for the user,
   if this invocation was from the user program.  */"	#ifdef _STDARG_H
/* Define __gnuc_va_list.  */	#ifndef __GNUC_VA_LIST
/* not __need___va_list */	#endif
"/*
 * ISO C Standard:  7.15  Variable arguments  <stdarg.h>
 */"	#ifndef _STDARG_H
/* _BITS_LIBIO_H */	#endif
/* We know that all we have to do is to set the flag.  */	#endif
"/* While compiling glibc we have to handle compatibility with very old
   versions.  */"	#if defined _LIBC && defined SHARED
/**/	#define _IO_cleanup_region_end(_Doit)
/**/	#define _IO_cleanup_region_start(_fct,_fp)
/**/	#define _IO_ftrylockfile(_fp)
/**/	#define _IO_funlockfile(_fp)
/**/	#define _IO_flockfile(_fp)
/* This one is for Emacs. */	#define _IO_PENDING_OUTPUT_COUNT(_fp) ((_fp)->_IO_write_ptr - (_fp)->_IO_write_base)
/* Initialize one of those.  */	#endif
/* Close COOKIE.  */	declaration of __io_close_fn
"/* Move COOKIE's file position to *POS bytes from the
   beginning of the file (if W is SEEK_SET),
   the current position (if W is SEEK_CUR),
   or the end of the file (if W is SEEK_END).
   Set *POS to the new file position.
   Returns zero if successful, nonzero if not.  */"	declaration of __io_seek_fn
"/* Write N bytes pointed to by BUF to COOKIE.  Write all N bytes
   unless there is an error.  Return number of bytes written.  If
   there is an error, return 0 and do not write anything.  If the file
   has been opened for append (__mode.__append set), then set the file
   pointer to the end of the file and then do the write; if not, just
   write at the current file pointer.  */"	declaration of __io_write_fn
"/* Read NBYTES bytes from COOKIE into a buffer pointed to by BUF.
   Return number of bytes read.  */"	declaration of __io_read_fn
/* Make sure we don't get into trouble again.  */	definition of _unused2
/* Wide character stream stuff.  */	#else
/*  char* _save_gptr;  char* _save_egptr; */	definition of _lock
/* 1+column number of pbase(); 0 is unknown. */	definition of _cur_column
/* temporary */	#define __HAVE_COLUMN
/* This used to be _offset but it's too small.  */	definition of _old_offset
/* Pointer to end of non-current get area. */	definition of _IO_save_end
/* Pointer to first valid character of backup area */	definition of _IO_backup_base
/* Pointer to start of non-current get area. */	definition of _IO_save_base
/* The following fields are used to support backing up and undo. */	definition of _IO_save_base
/* End of reserve area. */	definition of _IO_buf_end
/* Start of reserve area. */	definition of _IO_buf_base
/* End of put area. */	definition of _IO_write_end
/* Current put pointer. */	definition of _IO_write_ptr
/* Start of put area. */	definition of _IO_write_base
/* Start of putback+get area. */	definition of _IO_read_base
/* End of get area. */	definition of _IO_read_end
/* Current read pointer */	definition of _IO_read_ptr
/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */	definition of _IO_read_ptr
/* High-order word is _IO_MAGIC; rest is flags. */	definition of _flags
/* Pointer to end of non-current get area. */	#endif
/* This is the structure from the libstdc++ codecvt class.  */	definition of __codecvt_result
/* if _pos < 0, it points to _buf->eBptr()+_pos. FIXME comment */	definition of _pos
/* A streammarker remembers a position in a buffer. */	definition of _IO_marker
"/* During the build of glibc itself, _IO_lock_t will already have been
   defined by internal headers.  */"	#ifndef _IO_lock_t_defined
"/* These are ""formatting flags"" matching the iostream fmtflags enum values. */"	#define _IO_SKIPWS 01
/* Set if put and get pointer logicly tied. */	#define _IO_TIED_PUT_GET 0x400
/* Set if linked (using _chain) to streambuf::_list_all.*/	#define _IO_LINKED 0x80
/* Don't call close(_fileno) on cleanup. */	#define _IO_DELETE_DONT_CLOSE 0x40
/* Writing not allowd */	#define _IO_NO_WRITES 8
/* Reading not allowed */	#define _IO_NO_READS 4
/* User owns buffer; don't delete it on close. */	#define _IO_USER_BUF 1
/* Emulate old stdio. */	#define _OLD_STDIO_MAGIC 0xFABC0000
/* Magic number */	#define _IO_MAGIC 0xFBAD0000
"/* Magic numbers and bits for the _flags field.
   The magic numbers use the high-order bits of _flags;
   the remaining bits are available for variable flags.
   Note: The magic numbers must all be negative if stdio
   emulation is desired. */"	#define _IO_MAGIC 0xFBAD0000
/*!__P*/	#endif
/* __GNUC_VA_LIST */	#endif
/* This define avoids name pollution if we're using GNU stdarg.h */	#define __need___va_list
/* ALL of these should be defined in _G_config.h */	#define _IO_fpos_t _G_fpos_t
"/* Copyright (C) 1991-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.
   Written by Per Bothner <bothner@cygnus.com>.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.

   As a special exception, if you link the code in this file with
   files compiled with a GNU compiler to produce an executable,
   that does not cause the resulting executable to be covered by
   the GNU Lesser General Public License.  This exception does not
   however invalidate any other reasons why the executable file
   might be covered by the GNU Lesser General Public License.
   This exception applies to code released by its copyright holders
   in files containing the exception.  */"	#ifndef _BITS_LIBIO_H
/* bits/stdio_lim.h */	#endif
"/* Copyright (C) 1994-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_STDIO_LIM_H
/* sys_errlist and sys_nerr are deprecated.  Use strerror instead.  */	#ifdef __USE_MISC
"/* Declare sys_errlist and sys_nerr, or don't.  Compatibility (do) version.
   Copyright (C) 2002-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _STDIO_H
/* <stdio.h> included.  */	#endif
"/* If we are compiling with optimizing read this file.  It contains
   several optimizing inline functions and macros.  */"	#ifdef __USE_EXTERN_INLINES
"/*  X/Open Issues 1-5 required getopt to be declared in this
   header.  It was removed in Issue 6.  GNU follows Issue 6.  */"	#endif
/* POSIX */	#endif
/* Relinquish the ownership granted for STREAM.  */	declaration of funlockfile
"/* Try to acquire ownership of STREAM but do not block if it is not
   possible.  */"	declaration of ftrylockfile
/* Acquire ownership of STREAM.  */	declaration of flockfile
/* Use GNU.  */	#endif
/* Write formatted output to an obstack.  */	#endif
/* Use X/Open, but not issue 6.  */	#endif
/* Return the name of the current user.  */	#endif
/* Use POSIX.  */	#endif
/* Return the name of the controlling terminal.  */	declaration of ctermid
"/* Close a stream opened by popen and return the status of its child.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of pclose
"/* Create a new stream connected to a pipe running the given command.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of popen
/* Faster version when locking is not required.  */	declaration of fileno_unlocked
/* Use POSIX.  */	#endif
/* Return the system file descriptor for STREAM.  */	declaration of fileno
"/* Print a message describing the meaning of the value of errno.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of perror
/* Faster versions when locking is not required.  */	declaration of ferror_unlocked
/* Faster versions when locking is not required.  */	declaration of feof_unlocked
/* Faster versions when locking is not required.  */	declaration of clearerr_unlocked
/* Return the error indicator for STREAM.  */	declaration of ferror
/* Return the EOF indicator for STREAM.  */	declaration of feof
/* Clear the error and EOF indicators for STREAM.  */	declaration of clearerr
"/* Set STREAM's position.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fsetpos
"/* Get STREAM's position.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fgetpos
"/* Return the current position of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of ftello
"/* Seek to a certain position on STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fseeko
"/* The Single Unix Specification, Version 2, specifies an alternative,
   more adequate interface for the two functions above which deal with
   file offset.  `long int' is not the right type.  These definitions
   are originally defined in the Large File Support API.  */"	#if defined __USE_LARGEFILE || defined __USE_XOPEN2K
"/* Rewind to the beginning of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of rewind
"/* Return the current position of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of ftell
"/* Seek to a certain position on STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fseek
"/* Faster versions when locking is not necessary.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */"	declaration of fread_unlocked
"/* This function does the same as `fputs' but does not lock the stream.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	#endif
"/* Write chunks of generic data to STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fwrite
"/* Read chunks of generic data from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fread
"/* Push a character back onto the input buffer of STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of ungetc
"/* Write a string, followed by a newline, to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of puts
"/* Write a string to STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fputs
"/* Like `getdelim', but reads up to a newline.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of getline
"/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   necessary.  Returns the number of characters read (not including the
   null terminator), or -1 on error or EOF.

   These functions are not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation they are cancellation points and
   therefore not marked with __THROW.  */"	declaration of __getdelim
"/* This function does the same as `fgets' but does not lock the stream.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	#endif
"/* Get a newline-terminated string from stdin, removing the newline.

   This function is impossible to use safely.  It has been officially
   removed from ISO C11 and ISO C++14, and we have also removed it
   from the _GNU_SOURCE feature list.  It remains available when
   explicitly using an old ISO C, Unix, or POSIX standard.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#endif
"/* Get a newline-terminated string of finite length from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fgets
/* Write a word (int) to STREAM.  */	declaration of putw
/* Get a word (int) from STREAM.  */	declaration of getw
/* Use POSIX.  */	#endif
"/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of putchar_unlocked
"/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of putc_unlocked
/* Use MISC.  */	#endif
"/* Faster version when locking is not necessary.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fputc_unlocked
"/* The C standard explicitly says this can be a macro,
   so we always do the optimization for it.  */"	#define putc(_ch,_fp) _IO_putc (_ch, _fp)
"/* Write a character to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of putchar
"/* Write a character to STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.

   These functions is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of putc
"/* Write a character to STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.

   These functions is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fputc
/* Use MISC.  */	#endif
"/* Faster version when locking is not necessary.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fgetc_unlocked
/* Use POSIX.  */	#endif
"/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of getchar_unlocked
"/* These are defined in POSIX.1:1996.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of getc_unlocked
"/* The C standard explicitly says this is a macro, so we always do the
   optimization for it.  */"	#define getc(_fp) _IO_getc (_fp)
"/* Read a character from stdin.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of getchar
"/* Read a character from STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of getc
"/* Read a character from STREAM.

   These functions are possible cancellation points and therefore not
   marked with __THROW.  */"	declaration of fgetc
/* Use ISO C9x.  */	#endif
"/* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[
   GNU extension which conflicts with valid %a followed by letter
   s, S or [.  */"	declaration of vfscanf
/* Read formatted input from S into argument list ARG.  */	declaration of vsscanf
"/* Read formatted input from stdin into argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vscanf
"/* Read formatted input from S into argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vfscanf
"/* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[
   GNU extension which conflicts with valid %a followed by letter
   s, S or [.  */"	declaration of fscanf
/* Read formatted input from S.  */	declaration of sscanf
"/* Read formatted input from stdin.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of scanf
"/* Read formatted input from STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fscanf
/* Write formatted output to a file descriptor.  */	declaration of vdprintf
"/* Write formatted output to a string dynamically allocated with `malloc'.
   Store the address of the string in *PTR.  */"	#endif
/* Maximum chars of output to write in MAXLEN.  */	declaration of snprintf
/* Write formatted output to S from argument list ARG.  */	declaration of vsprintf
"/* Write formatted output to stdout from argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vprintf
"/* Write formatted output to S from argument list ARG.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of vfprintf
/* Write formatted output to S.  */	declaration of sprintf
"/* Write formatted output to stdout.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of printf
"/* Write formatted output to STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fprintf
/* Make STREAM line-buffered.  */	declaration of setlinebuf
"/* If BUF is NULL, make STREAM unbuffered.
   Else make it use SIZE bytes of BUF for buffering.  */"	declaration of setbuffer
"/* Make STREAM use buffering mode MODE.
   If BUF is not NULL, use N bytes of it for buffering;
   else allocate an internal buffer N bytes long.  */"	declaration of setvbuf
"/* If BUF is NULL, make STREAM unbuffered.
   Else make it use buffer BUF, of size BUFSIZ.  */"	declaration of setbuf
"/* Open a stream that writes into a malloc'd buffer that is expanded as
   necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location
   and the number of characters written on fflush or fclose.  */"	declaration of open_memstream
/* Create a new stream that refers to a memory buffer.  */	declaration of fmemopen
"/* Create a new stream that refers to the given magic cookie,
   and uses the given functions for input and output.  */"	#endif
/* Create a new stream that refers to an existing system file descriptor.  */	declaration of fdopen
"/* Open a file, replacing an existing stream with it.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of freopen
"/* Open a file and create a new stream for it.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fopen
"/* Close all streams.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	#endif
"/* Faster versions when locking is not required.

   This function is not part of POSIX and therefore no official
   cancellation point.  But due to similarity with an POSIX interface
   or due to the implementation it is a cancellation point and
   therefore not marked with __THROW.  */"	declaration of fflush_unlocked
"/* Flush STREAM, or all streams if STREAM is NULL.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fflush
"/* Close STREAM.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	declaration of fclose
"/* Generate a unique temporary filename using up to five characters of PFX
   if it is not NULL.  The directory to put this file in is searched for
   as follows: First the environment variable ""TMPDIR"" is checked.
   If it contains the name of a writable directory, that directory is used.
   If not and if DIR is not NULL, that value is checked.  If that fails,
   P_tmpdir is tried and finally ""/tmp"".  The storage for the filename
   is allocated by `malloc'.  */"	declaration of tempnam
"/* This is the reentrant variant of `tmpnam'.  The only difference is
   that it does not allow S to be NULL.  */"	declaration of tmpnam_r
/* Generate a temporary filename.  */	declaration of tmpnam
"/* Create a temporary file and open it read/write.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
/* Rename file OLD relative to OLDFD to NEW relative to NEWFD.  */	declaration of renameat
/* Rename file OLD to NEW.  */	declaration of rename
/* Remove file FILENAME.  */	declaration of remove
/* C89/C99 say they're macros.  Make them happy.  */	#define stdin stdin
/* Standard error output stream.  */	declaration of stderr
/* Standard output stream.  */	declaration of stdout
/* Standard input stream.  */	declaration of stdin
/* Standard streams.  */	declaration of stdin
/* Default path prefix for `tempnam' and `tmpnam'.  */	"#define P_tmpdir ""/tmp"""
/* Seek to next hole.  */	#endif
/* Seek from end of file.  */	#define SEEK_END 2
/* Seek from current position.  */	#define SEEK_CUR 1
/* Seek from beginning of file.  */	#define SEEK_SET 0
"/* The possibilities for the third argument to `fseek'.
   These values should not be changed.  */"	#define SEEK_SET 0
"/* End of file character.
   Some things throughout the library rely on this being -1.  */"	#ifndef EOF
/* Default buffer size.  */	#ifndef BUFSIZ
/* No buffering.  */	#define _IONBF 2
/* Line buffered.  */	#define _IOLBF 1
/* Fully buffered.  */	#define _IOFBF 0
/* The possibilities for the third argument to `setvbuf'.  */	#define _IOFBF 0
/* The type of the second argument to `fgetpos' and `fsetpos'.  */	#ifndef __USE_FILE_OFFSET64
"/*
 *	ISO C99 Standard: 7.19 Input/output	<stdio.h>
 */"	#ifndef _STDIO_H
/* Wait for members of process group.  */	P_PGID
/* Wait for specified process.  */	P_PID
/* Wait for any child.  */	P_ALL
"/* The Linux kernel defines these bare, rather than an enum,
   which causes a conflict if the include order is reversed. */"	#undef P_ALL
/* The following values are used by the `waitid' function.  */	#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
/* Wait for cloned process.  */	#define __WCLONE 0x80000000
/* Wait for any child.  */	#define __WALL 0x40000000
"/* Don't wait on children of other threads
				      in this group */"	#define __WNOTHREAD 0x20000000
/* Don't reap, just poll status.  */	#define WNOWAIT 0x01000000
/* Report continued child.  */	#define WCONTINUED 8
/* Report dead child.  */	#define WEXITED 4
/* Report stopped child (same as WUNTRACED). */	#define WSTOPPED 2
/* Bits in the fourth argument to `waitid'.  */	#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
/* Report status of stopped children.  */	#define WUNTRACED 2
/* Don't block waiting.  */	#define WNOHANG 1
/* Bits in the third argument to `waitpid'.  */	#define WNOHANG 1
"/* Definitions of flag bits for `waitpid' et al.
   Copyright (C) 1992-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _SYS_WAIT_H && !defined _STDLIB_H
/* Macros for constructing status values.  */	#define __W_EXITCODE(ret,sig) ((ret) << 8 | (sig))
/* Nonzero if STATUS indicates the child dumped core.  */	#define __WCOREDUMP(status) ((status) & __WCOREFLAG)
"/* Nonzero if STATUS indicates the child continued after a stop.  We only
   define this if <bits/waitflags.h> provides the WCONTINUED flag bit.  */"	#ifdef WCONTINUED
/* Nonzero if STATUS indicates the child is stopped.  */	#define __WIFSTOPPED(status) (((status) & 0xff) == 0x7f)
/* Nonzero if STATUS indicates termination by a signal.  */	#define __WIFSIGNALED(status) (((signed char) (((status) & 0x7f) + 1) >> 1) > 0)
/* Nonzero if STATUS indicates normal termination.  */	#define __WIFEXITED(status) (__WTERMSIG(status) == 0)
/* If WIFSTOPPED(STATUS), the signal that stopped the child.  */	#define __WSTOPSIG(status) __WEXITSTATUS(status)
/* If WIFSIGNALED(STATUS), the terminating signal.  */	#define __WTERMSIG(status) ((status) & 0x7f)
/* If WIFEXITED(STATUS), the low-order 8 bits of the status.  */	#define __WEXITSTATUS(status) (((status) & 0xff00) >> 8)
"/* Definitions of status bits for `wait' et al.
   Copyright (C) 1992-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _SYS_WAIT_H && !defined _STDLIB_H
/* _BITS_FLOATN_COMMON_H */	#endif
/* !__ASSEMBLER__.  */	#endif
"/* If double, long double and _Float64 all have the same set of
   values, TS 18661-3 requires the usual arithmetic conversions on
   long double and _Float64 to produce _Float64.  For this to be the
   case when building with a compiler without a distinct _Float64
   type, _Float64 must be a typedef for long double, not for
   double.  */"	#ifdef __NO_LONG_DOUBLE_MATH
/* The remaining of this file provides support for older compilers.  */	#if __HAVE_FLOAT16
/* Defined to a complex type if __HAVE_<type> is 1.  */	#if __HAVE_FLOAT16
/* No corresponding suffix available for this type.  */	#else
"/* Defined to concatenate the literal suffix to be used with _FloatN
   or _FloatNx types, if __HAVE_<type> is 1.  The corresponding
   literal suffixes exist since GCC 7, for C only.  */"	#if __HAVE_FLOAT16
"/* Defined to 1 if any _FloatN or _FloatNx types that are not
   ABI-distinct are however distinct types at the C language level (so
   for the purposes of __builtin_types_compatible_p and _Generic).  */"	#if __GNUC_PREREQ (7, 0) && !defined __cplusplus
"/* Defined to 1 if the corresponding __HAVE_<type> macro is 1 and the
   type is the first with its format in the sequence of (the default
   choices for) float, double, long double, _Float16, _Float32,
   _Float64, _Float128, _Float32x, _Float64x, _Float128x for this
   glibc; that is, if functions present once per floating-point format
   rather than once per type are present for this type.

   All configurations supported by glibc have _Float32 the same format
   as float, _Float64 and _Float32x the same format as double, the
   _Float64x the same format as either long double or _Float128.  No
   configurations support _Float128x or, as of GCC 7, have compiler
   support for a type meeting the requirements for _Float128x.  */"	#define __HAVE_DISTINCT_FLOAT16 __HAVE_FLOAT16
"/* Defined to 1 if the current compiler invocation provides a
   floating-point type with the right format for this type, and this
   glibc includes corresponding *fN or *fNx interfaces for it.  */"	#define __HAVE_FLOAT16 0
"/* Macros to control TS 18661-3 glibc features where the same
   definitions are appropriate for all platforms.
   Copyright (C) 2017-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_FLOATN_COMMON_H
/* _BITS_FLOATN_H */	#endif
/* !__ASSEMBLER__.  */	#endif
"/* In math/math.h, __MATH_TG will expand signbit to __builtin_signbit*,
   e.g.: __builtin_signbitf128, before GCC 6.  However, there has never
   been a __builtin_signbitf128 in GCC and the type-generic builtin is
   only available since GCC 6.  */"	#if !__GNUC_PREREQ (6, 0)
"/* Older GCC has only a subset of built-in functions for _Float128 on
   x86, and __builtin_infq is not usable in static initializers.
   Converting a narrower sNaN to _Float128 produces a quiet NaN, so
   attempts to use _Float128 sNaNs will not work properly with older
   compilers.  */"	#if !__GNUC_PREREQ (7, 0)
/* __builtin_huge_valf128 doesn't exist before GCC 7.0.  */	#if !__GNUC_PREREQ (7, 0)
/* The type _Float128 exists only since GCC 7.0.  */	#if !__GNUC_PREREQ (7, 0) || defined __cplusplus
/* The remaining of this file provides support for older compilers.  */	#if __HAVE_FLOAT128
"/* Add a typedef for older GCC compilers which don't natively support
   _Complex _Float128.  */"	#else
/* Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.  */	#if __HAVE_FLOAT128
/* The literal suffix f128 exists only since GCC 7.0.  */	#else
"/* Defined to concatenate the literal suffix to be used with _Float128
   types, if __HAVE_FLOAT128 is 1. */"	#if __HAVE_FLOAT128
"/* Defined to 1 if __HAVE_FLOAT64X is 1 and _Float64x has the format
   of long double.  Otherwise, if __HAVE_FLOAT64X is 1, _Float64x has
   the format of _Float128, which must be different from that of long
   double.  */"	#define __HAVE_FLOAT64X_LONG_DOUBLE 1
"/* Defined to 1 if the current compiler invocation provides a
   floating-point type with the right format for _Float64x, and this
   glibc includes corresponding *f64x interfaces for it.  */"	#define __HAVE_FLOAT64X 1
"/* Defined to 1 if __HAVE_FLOAT128 is 1 and the type is ABI-distinct
   from the default float, double and long double types in this glibc.  */"	#if __HAVE_FLOAT128
"/* Defined to 1 if the current compiler invocation provides a
   floating-point type with the IEEE 754 binary128 format, and this
   glibc includes corresponding *f128 interfaces for it.  The required
   libgcc support was added some time after the basic compiler
   support, for x86_64 and x86.  */"	"#if (defined __x86_64__							\"
"/* Macros to control TS 18661-3 glibc features on x86.
   Copyright (C) 2017-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_FLOATN_H
/* Returned by `clock'.  */	declaration of clock_t
/* Clock ID used in clock and timer functions.  */	declaration of clockid_t
/* Returned by `time'.  */	declaration of time_t
/* Timer ID returned by `timer_create'.  */	declaration of timer_t
/* bits/stdint-intn.h */	#endif
"/* Define intN_t types.
   Copyright (C) 2017-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_STDINT_INTN_H
/* i386/x86_64 are little-endian.  */	#ifndef _ENDIAN_H
/* This is better than nothing.  */	#endif
"/* Macros to swap the order of bytes in 16-bit integer values.
   Copyright (C) 2012-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_BYTESWAP_H
/* _BITS_BYTESWAP_H */	#endif
/* Swap bytes in 64 bit value.  */	#define __bswap_constant_64(x) (__extension__ ((((x) & 0xff00000000000000ull) >> 56) | (((x) & 0x00ff000000000000ull) >> 40) | (((x) & 0x0000ff0000000000ull) >> 24) | (((x) & 0x000000ff00000000ull) >> 8) | (((x) & 0x00000000ff000000ull) << 8) | (((x) & 0x0000000000ff0000ull) << 24) | (((x) & 0x000000000000ff00ull) << 40) | (((x) & 0x00000000000000ffull) << 56)))
"/* To swap the bytes in a word the i486 processors and up provide the
   `bswap' opcode.  On i386 we have to use three instructions.  */"	#else
/* Swap bytes in 32 bit value.  */	#define __bswap_constant_32(x) ((((x) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | (((x) & 0x0000ff00) << 8) | (((x) & 0x000000ff) << 24))
/* Swap bytes in 16 bit value.  */	#define __bswap_constant_16(x) ((unsigned short int) ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8)))
"/* Macros to swap the order of bytes in integer values.
   Copyright (C) 1997-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _BYTESWAP_H && !defined _NETINET_IN_H && !defined _ENDIAN_H
/* _BITS_UINTN_IDENTITY_H.  */	#endif
"/* These inline functions are to ensure the appropriate type
   conversions and associated diagnostics from macros that convert to
   a given endianness.  */"	definition of __uint16_identity
"/* Inline functions to return unsigned integer values unchanged.
   Copyright (C) 2017-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#if !defined _NETINET_IN_H && !defined _ENDIAN_H
/* endian.h */	#endif
"/* Some machines may need to use a different endianness for floating point
   values.  */"	#ifndef __FLOAT_WORD_ORDER
"/* Definitions for byte order, according to significance of bytes,
   from low addresses to high addresses.  The value is what you get by
   putting '4' in the most significant byte, '3' in the second most
   significant byte, '2' in the second least significant byte, and '1'
   in the least significant byte, and then writing down one digit for
   each byte, starting with the byte at the lowest address at the left,
   and proceeding to the byte with the highest address at the right.  */"	#define __LITTLE_ENDIAN 1234
"/* Copyright (C) 1992-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _ENDIAN_H
/* GNU CC */	#endif
"/* We don't use `memset' because this would require a prototype and
   the array isn't too big.  */"	#endif
/* ! GNU CC */	#else
"/* Copyright (C) 1997-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_SELECT_H
/* A set of signals to be blocked, unblocked, or waited for.  */	declaration of sigset_t
/* Microseconds.  */	definition of tv_usec
/* Seconds.  */	definition of tv_sec
"/* A time value that is accurate to the nearest
   microsecond but also has a range of years.  */"	definition of timeval
/* Nanoseconds.  */	definition of tv_nsec
/* Seconds.  */	definition of tv_sec
"/* POSIX.1b structure for a time value.  This is like a `struct timeval' but
   has nanoseconds instead of microseconds.  */"	definition of timespec
/* sys/select.h */	#endif
/* Define some inlines helping to catch common problems.  */	#if __USE_FORTIFY_LEVEL > 0 && defined __GNUC__
"/* Same as above only that the TIMEOUT value is given with higher
   resolution and a sigmask which is been set temporarily.  This version
   should be used.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of pselect
"/* Check the first NFDS descriptors each in READFDS (if not NULL) for read
   readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS
   (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out
   after waiting the interval specified therein.  Returns the number of ready
   descriptors, or -1 for errors.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of select
/* Access macros for `fd_set'.  */	#define FD_SET(fd,fdsetp) __FD_SET (fd, fdsetp)
/* Number of bits per word of `fd_set' (some code assumes this is 32).  */	#define NFDBITS __NFDBITS
/* Sometimes the fd_set member is assumed to have this type.  */	declaration of fd_mask
/* Maximum number of file descriptors in `fd_set'.  */	#define FD_SETSIZE __FD_SETSIZE
"/* XPG4.2 requires this member name.  Otherwise avoid the name
       from the global namespace.  */"	#ifdef __USE_XOPEN
/* fd_set for select and pselect.  */	definition of struct <unnamed>
/* It's easier to assume 8-bit bytes than to get CHAR_BIT.  */	#define __NFDBITS (8 * (int) sizeof (__fd_mask))
/* Some versions of <linux/posix_types.h> define this macros.  */	#undef __NFDBITS
/* The fd_set member is required to be an array of longs.  */	declaration of __fd_mask
"/*	POSIX 1003.1g: 6.2 Select from File Descriptor Sets <sys/select.h>  */"	#ifndef _SYS_SELECT_H
/* bits/sysmacros.h */	#endif
"/* dev_t in glibc is a 64-bit quantity, with 32-bit major and minor numbers.
   Our default encoding is MMMM Mmmm mmmM MMmm, where M is a hex digit of
   the major number and m is a hex digit of the minor number.  This is
   downward compatible with legacy systems where dev_t is 16 bits wide,
   encoded as MMmm.  It is also downward compatible with the Linux kernel,
   which (as of 2016) uses 32-bit dev_t, encoded as mmmM MMmm.

   Systems that use an incompatible encoding for dev_t should override this
   file in the appropriate sysdeps subdirectory.  */"	#define __SYSMACROS_DECLARE_MAJOR(DECL_TEMPL) DECL_TEMPL(unsigned int, major, (__dev_t __dev))
"/* Definitions of macros to access `dev_t' values.
   Copyright (C) 1996-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_SYSMACROS_H
/* sys/sysmacros.h */	#endif
/* _SYS_SYSMACROS_H */	#endif
"/* This macro is variadic because the deprecation message above
   contains commas.  */"	#define __SYSMACROS_DM1(__VA_ARGS__...) __glibc_macro_warning (#__VA_ARGS__)
"/* Caution: The text of this deprecation message is unquoted, so that
   #symbol can be substituted.  (It is converted to a string by
   __SYSMACROS_DM1.)  This means the message must be a sequence of
   complete pp-tokens; in particular, English contractions (it's,
   can't) cannot be used.

   The message has been manually word-wrapped to fit in 80 columns
   when output by GCC 5 and 6.  The first line is shorter to leave
   some room for the ""foo.c:23: warning:"" annotation.  */"	#define __SYSMACROS_DM(symbol) __SYSMACROS_DM1 (In the GNU C Library, #symbol is defined\n by <sys/sysmacros.h>. For historical compatibility, it is\n currently defined by <sys/types.h> as well, but we plan to\n remove this soon. To use #symbol, include <sys/sysmacros.h>\n directly. If you did not intend to use a system-defined macro\n #symbol, you should undefine it after including <sys/types.h>.)
"/* This is the macro that must be defined to satisfy the misuse check
   in bits/sysmacros.h. */"	#ifndef _SYS_SYSMACROS_H
"/* If <sys/sysmacros.h> is included after <sys/types.h>, these macros
   will already be defined, and we need to redefine them without the
   deprecation warnings.  (If they are included in the opposite order,
   the outer #ifndef will suppress this entire file and the macros
   will be usable without warnings.)  */"	#undef major
"/* Definitions of macros to access `dev_t' values.
   Copyright (C) 1996-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _SYS_SYSMACROS_H_OUTER
/* bits/pthreadtypes.h */	#endif
/* Extra attributes for the cleanup functions.  */	#endif
"/* FLAGS must stay at this position in the structure to maintain
     binary compatibility.  */"	#endif
"/* FLAGS must stay at this position in the structure to maintain
     binary compatibility.  */"	definition of __flags
/* Definitions for internal mutex struct.  */	#define __PTHREAD_COMPAT_PADDING_MID
"/* Copyright (C) 2002-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_PTHREADTYPES_ARCH_H
/* _THREAD_SHARED_TYPES_H  */	#endif
/* Common definition of pthread_cond_t. */	definition of __pthread_cond_s
"/* KIND must stay at this position in the structure to maintain
     binary compatibility with static initializers.  */"	definition of __kind
/* Mutex __spins initializer used by PTHREAD_MUTEX_INITIALIZER.  */	#endif
/* Lock elision support.  */	#if __PTHREAD_MUTEX_LOCK_ELISION
/* Common definition of pthread_mutex_t. */	#if !__PTHREAD_MUTEX_USE_UNION
"/* Common threading primitives definitions for both POSIX and C11.
   Copyright (C) 2017-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _THREAD_SHARED_TYPES_H
"/* POSIX barriers data type.  The structure of the type is
   deliberately not exposed.  */"	definition of union <unnamed>
/* POSIX spinlock data type.  */	declaration of pthread_spinlock_t
"/* Data structure for reader-writer lock variable handling.  The
   structure of the attribute type is deliberately not exposed.  */"	definition of union <unnamed>
/* Once-only execution */	declaration of pthread_once_t
/* Keys for thread-specific data */	declaration of pthread_key_t
"/* Data structure for condition variable handling.  The structure of
   the attribute type is not exposed on purpose.  */"	definition of union <unnamed>
"/* Data structures for mutex handling.  The structure of the attribute
   type is not exposed on purpose.  */"	definition of union <unnamed>
"/* Thread identifiers.  The structure of the attribute type is not
   exposed on purpose.  */"	declaration of pthread_t
"/* Declaration of common pthread types for all architectures.
   Copyright (C) 2017-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _BITS_PTHREADTYPES_COMMON_H
/* sys/types.h */	#endif
/* Now add the thread types.  */	#if defined __USE_POSIX199506 || defined __USE_UNIX98
/* Type to count file system inodes.  */	#endif
/* Type to count file system inodes.  */	#endif
/* Type to count file system blocks.  */	#endif
/* Type to count number of disk blocks.  */	#endif
/* Type to count file system inodes.  */	declaration of fsfilcnt_t
/* Type to count file system blocks.  */	declaration of fsblkcnt_t
/* Type to count number of disk blocks.  */	declaration of blkcnt_t
/* Types from the Large File Support interface.  */	#ifndef __USE_FILE_OFFSET64
/* Use misc.  */	#endif
"/* BSD defines `major', `minor', and `makedev' in this header.
   However, these symbols are likely to collide with user code, so we are
   going to stop defining them here in an upcoming release.  Code that needs
   these macros should include <sys/sysmacros.h> directly.  Code that does
   not need these macros should #undef them after including this header.  */"	#define __SYSMACROS_DEPRECATED_INCLUSION
"/* Some code from BIND tests this macro to see if the types above are
   defined.  */"	#endif
/* For GCC 2.7 and later, we can use specific type-size attributes.  */	#define __u_intN_t(N,MODE) typedef unsigned int u_int ## N ## _t __attribute__ ((__mode__ (MODE)))
/* These were defined by ISO C without the first `_'.  */	#if __WORDSIZE == 64
/* Old compatibility names for C types.  */	declaration of ulong
"/*
 *	POSIX Standard: 2.6 Primitive System Data Types	<sys/types.h>
 */"	#ifndef _SYS_TYPES_H
/* alloca.h */	#endif
/* GCC.  */	#endif
/* Allocate a block that will be freed when the calling function exits.  */	declaration of alloca
/* Remove any previous definitions.  */	#undef alloca
"/* Copyright (C) 1992-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _ALLOCA_H
/* Optimizing and Inlining.  */	#endif
"/* Floating-point inline functions for stdlib.h.
   Copyright (C) 2012-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */"	#ifndef _STDLIB_H
/* stdlib.h  */	#endif
/* Define some macros helping to catch buffer overflows.  */	#if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
"/* Return the index into the active-logins file (utmp) for
   the controlling terminal.  */"	#endif
"/* Put the 1 minute, 5 minute and 15 minute load averages into the first
   NELEM elements of LOADAVG.  Return the number written (never more than
   three, but may be less than NELEM), or -1 if an error occurred.  */"	declaration of getloadavg
/* Open a master pseudo terminal and return its file descriptor.  */	#endif
"/* Return the pathname of the pseudo terminal slave associated with
   the master FD is open on, or NULL on errors.
   The returned storage is good until the next call to this function.  */"	#endif
/* Return a master pseudo-terminal handle.  */	#endif
/* X/Open pseudo terminal handling.  */	#ifdef __USE_XOPEN2KXSI
/* Setup DES tables according KEY.  */	#endif
"/* Parse comma separated suboption from *OPTIONP and match against
   strings in TOKENS.  If found return index and set *VALUEP to
   optional value introduced by an equal sign.  If the suboption is
   not part of TOKENS return in *VALUEP beginning of unknown
   suboption.  On exit *OPTIONP is set to the beginning of the next
   token or at the terminating NUL character.  */"	declaration of getsubopt
"/* Determine whether the string value of RESPONSE matches the affirmation
   or negative response expression as specified by the LC_MESSAGES category
   in the program's current locale.  Returns 1 if affirmative, 0 if
   negative, and -1 if not matching.  */"	declaration of rpmatch
/* Convert a wide char string to multibyte string.  */	declaration of wcstombs
/* Convert a multibyte string to a wide char string.  */	declaration of mbstowcs
"/* Put the multibyte character represented
   by WCHAR in S, returning its length.  */"	declaration of wctomb
"/* Return the length of the given multibyte character,
   putting its `wchar_t' representation in *PWC.  */"	declaration of mbtowc
"/* Return the length of the multibyte character
   in S, which is no longer than N.  */"	declaration of mblen
/* misc */	#endif
"/* Reentrant version of the functions above which provide their own
   buffers.  */"	declaration of ecvt_r
/* Long double versions of above functions.  */	declaration of qecvt
"/* If possible convert VALUE to a string with NDIGIT significant digits.
   Otherwise use exponential representation.  The resulting string will
   be written to BUF.  */"	declaration of gcvt
"/* Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT
   with the position of the decimal character and *SIGN with the sign of
   the number.  */"	declaration of fcvt
"/* Convert VALUE to a string with NDIGIT digits and return a pointer to
   this.  Set *DECPT with the position of the decimal character and *SIGN
   with the sign of the number.  */"	declaration of ecvt
/* GCC may have built-ins for these someday.  */	declaration of div
/* Return the absolute value of X.  */	declaration of labs
/* Return the absolute value of X.  */	declaration of abs
"/* Sort NMEMB elements of BASE, of SIZE bytes each,
   using COMPAR to perform the comparisons.  */"	declaration of qsort
"/* Do a binary search for KEY in BASE, which consists of NMEMB elements
   of SIZE bytes each, using COMPAR to perform the comparisons.  */"	declaration of bsearch
/* Shorthand for type of comparison functions.  */	#ifndef __COMPAR_FN_T
"/* Return the canonical absolute name of file NAME.  If RESOLVED is
   null, the result is malloc'd; otherwise, if the canonical name is
   PATH_MAX chars or more, returns null with `errno' set to
   ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,
   returns the name in RESOLVED.  */"	declaration of realpath
"/* Return a malloc'd string containing the canonical absolute name of the
   existing named file.  */"	#endif
"/* Execute the given line as a shell command.

   This function is a cancellation point and therefore not marked with
   __THROW.  */"	declaration of system
"/* Similar to mkostemp, but the template can have a suffix after the
   XXXXXX.  The length of the suffix is specified in the second
   parameter.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Generate a unique temporary file name from TEMPLATE similar to
   mkstemp.  But allow the caller to pass additional flags which are
   used in the open call to create the file..

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Create a unique temporary directory from TEMPLATE.
   The last six characters of TEMPLATE must be ""XXXXXX"";
   they are replaced with a string that makes the directory name unique.
   Returns TEMPLATE, or a null pointer if it cannot get a unique name.
   The directory is created mode 700.  */"	declaration of mkdtemp
"/* Similar to mkstemp, but the template can have a suffix after the
   XXXXXX.  The length of the suffix is specified in the second
   parameter.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Generate a unique temporary file name from TEMPLATE.
   The last six characters of TEMPLATE must be ""XXXXXX"";
   they are replaced with a string that makes the filename unique.
   Returns a file descriptor open on the file for reading and writing,
   or -1 if it cannot create a uniquely-named file.

   This function is a possible cancellation point and therefore not
   marked with __THROW.  */"	#ifndef __USE_FILE_OFFSET64
"/* Generate a unique temporary file name from TEMPLATE.
   The last six characters of TEMPLATE must be ""XXXXXX"";
   they are replaced with a string that makes the file name unique.
   Always returns TEMPLATE, it's either a temporary file name or a null
   string if it cannot get a unique file name.  */"	declaration of mktemp
"/* The `clearenv' was planned to be added to POSIX.1 but probably
   never made it.  Nevertheless the POSIX.9 standard (POSIX bindings
   for Fortran 77) requires this function.  */"	declaration of clearenv
/* Remove the variable NAME from the environment.  */	declaration of unsetenv
"/* Set NAME to VALUE in the environment.
   If REPLACE is nonzero, overwrite an existing value.  */"	declaration of setenv
"/* Put STRING, which is of the form ""NAME=VALUE"", in the environment.
   If there is no `=', remove NAME from the environment.  */"	declaration of putenv
"/* This function is similar to the above but returns NULL if the
   programs is running with SUID or SGID enabled.  */"	#endif
/* Return the value of envariable NAME, or NULL if it doesn't exist.  */	declaration of getenv
"/* Terminate the program with STATUS without calling any of the
   functions registered with `atexit' or `on_exit'.  */"	declaration of _Exit
"/* Call all functions registered with `at_quick_exit' in the reverse
   of the order in which they were registered and terminate program
   execution with STATUS.  */"	declaration of quick_exit
"/* Call all functions registered with `atexit' and `on_exit',
   in the reverse of the order in which they were registered,
   perform stdio cleanup, and terminate program execution with STATUS.  */"	declaration of exit
"/* Register a function to be called with the status
   given to `exit' and the given argument.  */"	declaration of on_exit
/* Register a function to be called when `quick_exit' is called.  */	#ifdef __cplusplus
/* Register a function to be called when `exit' is called.  */	declaration of atexit
/* Abort execution and generate a core-dump.  */	declaration of abort
/* ISO C variant of aligned allocation.  */	declaration of aligned_alloc
/* Allocate memory of SIZE bytes with an alignment of ALIGNMENT.  */	declaration of posix_memalign
/* Allocate SIZE bytes on a page boundary.  The storage cannot be freed.  */	declaration of valloc
/* Use misc.  */	#endif
/* Free a block allocated by `malloc', `realloc' or `calloc'.  */	declaration of free
"/* __attribute_malloc__ is not used, because if reallocarray returns
   the same pointer that was passed to it, aliasing needs to be allowed
   between objects pointed by the old and new pointers.  */"	#endif
"/* __attribute_malloc__ is not used, because if realloc returns
   the same pointer that was passed to it, aliasing needs to be allowed
   between objects pointed by the old and new pointers.  */"	declaration of realloc
/* Allocate NMEMB elements of SIZE bytes each, all initialized to 0.  */	declaration of calloc
/* Allocate SIZE bytes of memory.  */	declaration of malloc
/* Use misc or X/Open.  */	#endif
/* Use misc.  */	#endif
/* Seed random number generator.  */	declaration of srand48_r
/* Return signed, long integers in [-2^31,2^31).  */	declaration of mrand48_r
/* Return non-negative, long integer in [0,2^31).  */	declaration of lrand48_r
/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */	declaration of drand48_r
"/* Factor in congruential
						   formula.  */"	definition of __a
/* Flag for initializing.  */	definition of __init
/* Additive const. in congruential formula.  */	definition of __c
/* Old state.  */	definition of __old_x
/* Current state.  */	definition of __x
"/* Data structure for communication with thread safe versions.  This
   type is to be regarded as opaque.  It's only exported because users
   have to allocate objects of this type.  */"	definition of drand48_data
/* Seed random number generator.  */	declaration of seed48
/* Seed random number generator.  */	declaration of srand48
/* Return signed, long integers in [-2^31,2^31).  */	declaration of jrand48
/* Return signed, long integers in [-2^31,2^31).  */	declaration of mrand48
/* Return non-negative, long integer in [0,2^31).  */	declaration of nrand48
/* Return non-negative, long integer in [0,2^31).  */	declaration of lrand48
/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */	declaration of erand48
/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */	declaration of drand48
/* Reentrant interface according to POSIX.1.  */	declaration of rand_r
/* Seed the random number generator with the given number.  */	declaration of srand
/* Return a random integer between 0 and RAND_MAX inclusive.  */	declaration of rand
/* Use extended X/Open || misc. */	#endif
/* Use misc.  */	#endif
/* Pointer behind state table.  */	definition of end_ptr
/* Distance between front and rear.  */	definition of rand_sep
/* Degree of random number generator.  */	definition of rand_deg
/* Type of random number generator.  */	definition of rand_type
/* Array of state values.  */	definition of state
/* Rear pointer.  */	definition of rptr
/* Front pointer.  */	definition of fptr
"/* Reentrant versions of the `random' family of functions.
   These functions all use the following data structure to contain
   state, rather than global state variables.  */"	definition of random_data
"/* Switch the random number generator to state buffer STATEBUF,
   which should have been previously initialized by `initstate'.  */"	declaration of setstate
"/* Initialize the random number generator to use state buffer STATEBUF,
   of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,
   32, 64, 128 and 256, the bigger the better; values less than 8 will
   cause an error and values greater than 256 will be rounded down.  */"	declaration of initstate
/* Seed the random number generator with the given number.  */	declaration of srandom
/* Return a random long integer between 0 and RAND_MAX inclusive.  */	declaration of random
/* Use misc || extended X/Open.  */	#endif
/* Read a number from a string S in base 64 as above.  */	declaration of a64l
"/* Convert N to base 64 using the digits ""./0-9A-Za-z"", least-significant
   digit first.  Returns a pointer to static storage overwritten by the
   next call.  */"	declaration of l64a
/* Optimizing and Inlining.  */	#endif
/* GNU */	#endif
"/* Parallel versions of the functions above which take the locale to
   use as an additional parameter.  These are GNU extensions inspired
   by the POSIX.1-2008 extended locale API.  */"	#if __HAVE_FLOAT16
/* Convert a floating-point number to a string.  */	#if __GLIBC_USE (IEC_60559_BFP_EXT)
/* ISO C99 or use MISC.  */	#endif
/* Convert a string to an unsigned quadword integer.  */	declaration of strtoull
/* Convert a string to a quadword integer.  */	declaration of strtoll
/* Use misc.  */	#endif
/* Convert a string to an unsigned quadword integer.  */	declaration of strtouq
/* Convert a string to a quadword integer.  */	declaration of strtoq
/* Convert a string to an unsigned long integer.  */	declaration of strtoul
/* Convert a string to a long integer.  */	declaration of strtol
/* Likewise for '_FloatN' and '_FloatNx'.  */	#if __HAVE_FLOAT16 && __GLIBC_USE (IEC_60559_TYPES_EXT)
/* Likewise for `float' and `long double' sizes of floating-point numbers.  */	declaration of strtof
/* Convert a string to a floating-point number.  */	declaration of strtod
/* Convert a string to a long long integer.  */	declaration of atoll
/* Convert a string to a long integer.  */	declaration of atol
/* Convert a string to an integer.  */	declaration of atoi
/* Convert a string to a floating-point number.  */	declaration of atof
/* Maximum length of a multibyte character in the current locale.  */	#define MB_CUR_MAX (__ctype_get_mb_cur_max ())
/* Successful exit status.  */	#define EXIT_SUCCESS 0
/* Failing exit status.  */	#define EXIT_FAILURE 1
"/* We define these the same for all machines.
   Changes from this to the outside world should be done in `_exit'.  */"	#define EXIT_FAILURE 1
/* The largest number rand will return (same as INT_MAX).  */	#define RAND_MAX 2147483647
/* Remainder.  */	definition of rem
/* Quotient.  */	definition of quot
/* Returned by `lldiv'.  */	definition of struct <unnamed>
/* Remainder.  */	definition of rem
/* Quotient.  */	definition of quot
/* Returned by `ldiv'.  */	#ifndef __ldiv_t_defined
/* Remainder.  */	definition of rem
/* Quotient.  */	definition of quot
/* Returned by `div'.  */	definition of struct <unnamed>
/* X/Open or XPG7 and <sys/wait.h> not included.  */	#endif
/* Define the macros <sys/wait.h> also would define this way.  */	#define WEXITSTATUS(status) __WEXITSTATUS (status)
/* Get size_t, wchar_t and NULL from <stddef.h>.  */	#define __need_size_t
"/*
 *	ISO C99 Standard: 7.20 General utilities	<stdlib.h>
 */"	#ifndef _STDLIB_H
// }	#endif
