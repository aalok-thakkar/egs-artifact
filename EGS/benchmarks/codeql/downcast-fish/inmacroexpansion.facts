basic_string::at: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
__s	__N(msgid)
(...)	__N(msgid)
%s: __pos (which is %zu) > this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array::at: __n (which is %zu) >= _Nm (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
__s	__N(msgid)
(...)	__N(msgid)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
/opt/src/src/maybe.h	assert(expr)
33	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
/opt/src/src/maybe.h	assert(expr)
16	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Unreachabe	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/common.h	DIE(msg)
array to pointer conversion	DIE(msg)
361	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
Unreachable	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/common.h	DIE(msg)
array to pointer conversion	DIE(msg)
339	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
ptr	assert(e)
(reference dereference)	assert(e)
Should not have null ptr	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
n	assert(e)
(bool)...	assert(e)
Node should not be null	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"n && ""Node should not be null"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
845	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
contents	assert(e)
Null pointer	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
149	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
contents	assert(e)
Null pointer	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
121	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
ptr	assert(e)
Null pointer	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
366	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to ~list_t	ELEMLIST(ListT,ContentsT)
call to ~list_t	ELEMLIST(ListT,ContentsT)
call to ~list_t	ELEMLIST(ListT,ContentsT)
return ...	ELEMLIST(ListT,ContentsT)
{ ... }	ELEMLIST(ListT,ContentsT)
call to list_t	ELEMLIST(ListT,ContentsT)
return ...	ELEMLIST(ListT,ContentsT)
{ ... }	ELEMLIST(ListT,ContentsT)
call to list_t	ELEMLIST(ListT,ContentsT)
return ...	ELEMLIST(ListT,ContentsT)
{ ... }	ELEMLIST(ListT,ContentsT)
call to list_t	ELEMLIST(ListT,ContentsT)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
decorator	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
continuations	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
continuation	FIELDS(__VA_ARGS__...)
bg	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
call to ~list_t	ELEMLIST(ListT,ContentsT)
call to ~list_t	ELEMLIST(ListT,ContentsT)
return ...	ELEMLIST(ListT,ContentsT)
{ ... }	ELEMLIST(ListT,ContentsT)
call to list_t	ELEMLIST(ListT,ContentsT)
return ...	ELEMLIST(ListT,ContentsT)
{ ... }	ELEMLIST(ListT,ContentsT)
call to list_t	ELEMLIST(ListT,ContentsT)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_switch	FIELDS(__VA_ARGS__...)
argument	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
cases	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
call to ~list_t	ELEMLIST(ListT,ContentsT)
call to ~list_t	ELEMLIST(ListT,ContentsT)
call to ~list_t	ELEMLIST(ListT,ContentsT)
return ...	ELEMLIST(ListT,ContentsT)
{ ... }	ELEMLIST(ListT,ContentsT)
call to list_t	ELEMLIST(ListT,ContentsT)
return ...	ELEMLIST(ListT,ContentsT)
{ ... }	ELEMLIST(ListT,ContentsT)
call to list_t	ELEMLIST(ListT,ContentsT)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
elseif_clauses	FIELDS(__VA_ARGS__...)
else_clause	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
header	FIELDS(__VA_ARGS__...)
jobs	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_begin	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
call to ~list_t	ELEMLIST(ListT,ContentsT)
return ...	ELEMLIST(ListT,ContentsT)
{ ... }	ELEMLIST(ListT,ContentsT)
call to list_t	ELEMLIST(ListT,ContentsT)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_function	FIELDS(__VA_ARGS__...)
first_arg	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_while	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_for	FIELDS(__VA_ARGS__...)
var_name	FIELDS(__VA_ARGS__...)
kw_in	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
opt_decoration	FIELDS(__VA_ARGS__...)
command	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_case	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_if	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
call to is_redirection	assert(e)
Is not a redirection	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"is_redirection() && ""Is not a redirection"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
488	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to is_argument	assert(e)
Is not an argument	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"is_argument() && ""Is not an argument"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
482	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
conjunction	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
pipe	FIELDS(__VA_ARGS__...)
newlines	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
will_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
Unknown literal	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
oper	FIELDS(__VA_ARGS__...)
target	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
did_visit_fields_of	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
call to expression	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
n	assert(e)
(bool)...	assert(e)
Should not push null node	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"n && ""Should not push null node"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
949	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
n	assert(e)
(bool)...	assert(e)
Should not have null node	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"n && ""Should not have null node"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
922	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
Unknown literal	ELEMLIST(x,y)
Unknown literal	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
Unknown literal	ELEMLIST(x,y)
Unknown literal	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
Unknown literal	ELEMLIST(x,y)
Unknown literal	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
Unknown literal	ELEMLIST(x,y)
Unknown literal	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
Unknown literal	ELEMLIST(x,y)
Unknown literal	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
Unknown literal	ELEMLIST(x,y)
Unknown literal	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
Unknown literal	ELEMLIST(x,y)
Unknown literal	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
Unknown literal	ELEMLIST(x,y)
Unknown literal	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
Unknown literal	ELEMLIST(x,y)
Unknown literal	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
Unknown literal	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
reverse	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
this	assert(e)
type	assert(e)
AstType	assert(e)
... == ...	assert(e)
Invalid type conversion	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"this->type == To::AstType && ""Invalid type conversion"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
247	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
this	assert(e)
type	assert(e)
AstType	assert(e)
... == ...	assert(e)
Invalid type conversion	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"this->type == To::AstType && ""Invalid type conversion"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
241	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	FIELDS(__VA_ARGS__...)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
definition of accept	(no string representation)
unwinding_	assert(e)
Should have produced an error	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"unwinding_ && ""Should have produced an error"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
954	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Bad token type %d passed to %s	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tokenizer_token_type	FLOGF(wht,__VA_ARGS__...)
static_cast<int>...	FLOGF(wht,__VA_ARGS__...)
__FUNCTION__	FLOGF(wht,__VA_ARGS__...)
parse_token_type_from_tokenizer_token	FLOGF(wht,__VA_ARGS__...)
declaration of __FUNCTION__	FLOGF(wht,__VA_ARGS__...)
__FUNCTION__	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __fish_assert	DIE(msg)
bad token type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/ast.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
100	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
sizeof(<expr>)	keyword_enum_map_len
keyword_enum_map	keyword_enum_map_len
sizeof(<expr>)	keyword_enum_map_len
keyword_enum_map	keyword_enum_map_len
array to pointer conversion	keyword_enum_map_len
* ...	keyword_enum_map_len
... / ...	keyword_enum_map_len
(...)	keyword_enum_map_len
(int)...	keyword_enum_map_len
2	TOK_SHOW_COMMENTS
(unsigned int)...	TOK_SHOW_COMMENTS
1	TOK_ACCEPT_UNFINISHED
(unsigned int)...	TOK_ACCEPT_UNFINISHED
8	TOK_CONTINUE_AFTER_ERROR
(unsigned int)...	TOK_CONTINUE_AFTER_ERROR
call to size	assert(e)
types	assert(e)
(const initializer_list<parse_token_type_t>)...	assert(e)
0	assert(e)
(unsigned long)...	assert(e)
... > ...	assert(e)
Should not be empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"types.size() > 0 && ""Should not be empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
377	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to size	assert(e)
kws	assert(e)
(const initializer_list<parse_keyword_t>)...	assert(e)
0	assert(e)
(unsigned long)...	assert(e)
... > ...	assert(e)
Should not be empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"kws.size() > 0 && ""Should not be empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
360	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
case ...:	ELEM(T)
keyword_base	ELEM(T)
return ...	ELEM(T)
keyword_base	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
return ...	ELEM(T)
token_base	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
return ...	ELEM(T)
maybe_newlines	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
return ...	ELEM(T)
argument	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
return ...	ELEMLIST(x,y)
return ...	ELEM(T)
argument_list	ELEMLIST(x,y)
argument_list	ELEM(T)
array to pointer conversion	ELEMLIST(x,y)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
return ...	ELEM(T)
redirection	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
return ...	ELEM(T)
argument_or_redirection	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
return ...	ELEMLIST(x,y)
return ...	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
argument_or_redirection_list	ELEM(T)
array to pointer conversion	ELEMLIST(x,y)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
return ...	ELEM(T)
variable_assignment	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
return ...	ELEMLIST(x,y)
return ...	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
variable_assignment_list	ELEM(T)
array to pointer conversion	ELEMLIST(x,y)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
return ...	ELEM(T)
job	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
return ...	ELEM(T)
job_conjunction	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
return ...	ELEMLIST(x,y)
return ...	ELEM(T)
job_list	ELEMLIST(x,y)
job_list	ELEM(T)
array to pointer conversion	ELEMLIST(x,y)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
return ...	ELEM(T)
job_conjunction_continuation	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
return ...	ELEMLIST(x,y)
return ...	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
job_conjunction_continuation_list	ELEM(T)
array to pointer conversion	ELEMLIST(x,y)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
return ...	ELEM(T)
job_continuation	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
return ...	ELEMLIST(x,y)
return ...	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
job_continuation_list	ELEM(T)
array to pointer conversion	ELEMLIST(x,y)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
return ...	ELEM(T)
andor_job	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
return ...	ELEMLIST(x,y)
return ...	ELEM(T)
andor_job_list	ELEMLIST(x,y)
andor_job_list	ELEM(T)
array to pointer conversion	ELEMLIST(x,y)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
return ...	ELEM(T)
statement	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
return ...	ELEM(T)
not_statement	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
return ...	ELEM(T)
block_statement	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
return ...	ELEM(T)
for_header	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
return ...	ELEM(T)
while_header	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
return ...	ELEM(T)
function_header	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
return ...	ELEM(T)
begin_header	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
return ...	ELEM(T)
if_statement	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
return ...	ELEM(T)
if_clause	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
return ...	ELEM(T)
elseif_clause	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
return ...	ELEMLIST(x,y)
return ...	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
elseif_clause_list	ELEM(T)
array to pointer conversion	ELEMLIST(x,y)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
return ...	ELEM(T)
else_clause	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
return ...	ELEM(T)
switch_statement	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
return ...	ELEM(T)
case_item	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
return ...	ELEMLIST(x,y)
return ...	ELEM(T)
case_item_list	ELEMLIST(x,y)
case_item_list	ELEM(T)
array to pointer conversion	ELEMLIST(x,y)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
return ...	ELEM(T)
decorated_statement	ELEM(T)
array to pointer conversion	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
return ...	ELEM(T)
freestanding_argument_list	ELEM(T)
array to pointer conversion	ELEM(T)
0	assert(e)
(bool)...	assert(e)
unreachable	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"0 && ""unreachable"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
290	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
delete	ELEMLIST(x,y)
delete	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
delete	ELEMLIST(x,y)
delete	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
delete	ELEMLIST(x,y)
delete	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
delete	ELEMLIST(x,y)
delete	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
delete	ELEMLIST(x,y)
delete	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
delete	ELEMLIST(x,y)
delete	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
delete	ELEMLIST(x,y)
delete	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
delete	ELEMLIST(x,y)
delete	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
delete	ELEMLIST(x,y)
delete	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
delete	ELEM(T)
break;	ELEM(T)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
call to back	assert(e)
visit_stack_	assert(e)
(reference dereference)	assert(e)
node	assert(e)
(reference dereference)	assert(e)
& ...	assert(e)
... == ...	assert(e)
... && ...	assert(e)
Node was not at the top of the visit stack	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && visit_stack_.back() == &node && ""Node was not at the top of the visit stack"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1222	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdid_visit %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to describe	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
& ...	FLOGF(wht,__VA_ARGS__...)
(const void *)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*swill_visit %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to describe	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
& ...	FLOGF(wht,__VA_ARGS__...)
(const void *)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<for_header_t, while_header_t, function_header_t, begin_header_t>)...	assert(e)
Header pointer must never be null	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Header pointer must never be null"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1211	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
contents	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<argument_t, redirection_t>)...	assert(e)
Statement contents must never be null	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Statement contents must never be null"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1206	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<not_statement_t, block_statement_t, if_statement_t, switch_statement_t, decorated_statement_t>)...	assert(e)
Statement contents must never be null	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Statement contents must never be null"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1195	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to c_str	EXEC_ERR_MSG
call to c_str	_(wstr)
call to wgettext	EXEC_ERR_MSG
call to wgettext	_(wstr)
The '%ls' command can not be used in a pipeline	EXEC_ERR_MSG
array to pointer conversion	EXEC_ERR_MSG
(reference dereference)	EXEC_ERR_MSG
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
Unreachable	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/ast.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1047	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Expected a command, but found %ls	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Expected a command, but found %ls	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
Unknown literal	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
Unknown literal	FLOGF(wht,__VA_ARGS__...)
ListType	FLOGF(wht,__VA_ARGS__...)
call to expression	FLOGF(wht,__VA_ARGS__...)
call to expression	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
list	assert(e)
(reference dereference)	assert(e)
empty	assert(e)
call to expression	assert(e)
Should be an empty list	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
contents	assert(e)
size	assert(e)
call to expression	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
Unknown literal	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
Unknown literal	FLOGF(wht,__VA_ARGS__...)
ListType	FLOGF(wht,__VA_ARGS__...)
call to expression	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
count	FLOGF(wht,__VA_ARGS__...)
call to expression	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
call to expression	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Expected %ls, but found %ls	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
this	assert(e)
top_type_	assert(e)
job_list	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
this->top_type_ == type_t::job_list	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
711	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to c_str	_(wstr)
call to wgettext	_(wstr)
'end' outside of a block	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
'else' builtin not inside of if block	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
'case' builtin not inside of switch block	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Expected a string, but found %ls	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
type	assert(e)
terminate	assert(e)
... != ...	assert(e)
Should not attempt to consume terminate token	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"type != parse_token_type_t::terminate && ""Should not attempt to consume terminate token"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
681	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Expected %ls, but found %ls	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
tok	assert(e)
type	assert(e)
comment	assert(e)
... != ...	assert(e)
Should not be a comment	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"tok.type != parse_token_type_t::comment && ""Should not be a comment"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
672	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
tok	assert(e)
type	assert(e)
terminate	assert(e)
... != ...	assert(e)
Cannot consume terminate token, caller should check status first	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"tok.type != parse_token_type_t::terminate && ""Cannot consume terminate token, caller should check status first"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
674	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sparse error - begin unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
debug	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOG(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOG(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOG(wht,__VA_ARGS__...)
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
debug	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Internal parse error from	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
func	FLOG(wht,__VA_ARGS__...)
(const char *const)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
- this indicates a bug in fish.	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
msg	FLOG(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
debug	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOG(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOG(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOG(wht,__VA_ARGS__...)
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
debug	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
"Encountered while parsing:<<<
%ls
>>>"	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to c_str	FLOG(wht,__VA_ARGS__...)
call to source	FLOG(wht,__VA_ARGS__...)
tokens_	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
Unknown literal	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
Unknown literal	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to expression	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
get	FLOGF(wht,__VA_ARGS__...)
call to expression	FLOGF(wht,__VA_ARGS__...)
call to expression	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
top_type	assert(e)
job_list	assert(e)
... == ...	assert(e)
top_type	assert(e)
freestanding_argument_list	assert(e)
... == ...	assert(e)
... || ...	assert(e)
(...)	assert(e)
Invalid top type	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"(top_type == type_t::job_list || top_type == type_t::freestanding_argument_list) && ""Invalid top type"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
404	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
this	assert(e)
ast_	assert(e)
top_	assert(e)
(const unique_ptr<node_t, node_deleter_t>)...	assert(e)
Should have parsed a node	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"this->ast_->top_ && ""Should have parsed a node"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
421	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
token	assert(e)
(reference dereference)	assert(e)
offset	assert(e)
SOURCE_OFFSET_INVALID	assert(e)
(unsigned long)...	assert(e)
... < ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
token.offset < SOURCE_OFFSET_INVALID	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
183	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
token	assert(e)
(reference dereference)	assert(e)
length	assert(e)
SOURCE_OFFSET_INVALID	assert(e)
(unsigned long)...	assert(e)
... <= ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
token.length <= SOURCE_OFFSET_INVALID	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
186	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
idx	assert(e)
kMaxLookahead	assert(e)
... < ...	assert(e)
Trying to look too far ahead	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"idx < kMaxLookahead && ""Trying to look too far ahead"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
115	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	assert(e)
(bool)...	assert(e)
Unexpected keyword in statement decoration	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"0 && ""Unexpected keyword in statement decoration"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
277	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<job_conjunction_t, default_delete<job_conjunction_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<keyword_t<kw_and, kw_or>, default_delete<keyword_t<kw_and, kw_or>>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<keyword_t<kw_time>, default_delete<keyword_t<kw_time>>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
9	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
list	assert(e)
(reference dereference)	assert(e)
(const list_t<variable_assignment_list, variable_assignment_t>)...	assert(e)
Should be an empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to size	assert(e)
contents	assert(e)
(const vector<unique_ptr<variable_assignment_t, default_delete<variable_assignment_t>>, allocator<unique_ptr<variable_assignment_t, default_delete<variable_assignment_t>>>>)...	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
(unsigned long)...	assert(e)
(unsigned long)...	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
9	FLOGF(wht,__VA_ARGS__...)
call to count	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const list_t<variable_assignment_list, variable_assignment_t>)...	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<variable_assignment_t, default_delete<variable_assignment_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
16	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
list	assert(e)
(reference dereference)	assert(e)
(const list_t<job_continuation_list, job_continuation_t>)...	assert(e)
Should be an empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to size	assert(e)
contents	assert(e)
(const vector<unique_ptr<job_continuation_t, default_delete<job_continuation_t>>, allocator<unique_ptr<job_continuation_t, default_delete<job_continuation_t>>>>)...	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
(unsigned long)...	assert(e)
(unsigned long)...	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
16	FLOGF(wht,__VA_ARGS__...)
call to count	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const list_t<job_continuation_list, job_continuation_t>)...	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<job_continuation_t, default_delete<job_continuation_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<token_t<background>, default_delete<token_t<background>>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
14	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
list	assert(e)
(reference dereference)	assert(e)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	assert(e)
Should be an empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to size	assert(e)
contents	assert(e)
(const vector<unique_ptr<job_conjunction_continuation_t, default_delete<job_conjunction_continuation_t>>, allocator<unique_ptr<job_conjunction_continuation_t, default_delete<job_conjunction_continuation_t>>>>)...	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
(unsigned long)...	assert(e)
(unsigned long)...	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
14	FLOGF(wht,__VA_ARGS__...)
call to count	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<job_conjunction_continuation_t, default_delete<job_conjunction_continuation_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<token_t<end>, default_delete<token_t<end>>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<decorated_statement_t, default_delete<decorated_statement_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<keyword_t<kw_command, kw_builtin, kw_exec>, default_delete<keyword_t<kw_command, kw_builtin, kw_exec>>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
7	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
list	assert(e)
(reference dereference)	assert(e)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	assert(e)
Should be an empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to size	assert(e)
contents	assert(e)
(const vector<unique_ptr<argument_or_redirection_t, default_delete<argument_or_redirection_t>>, allocator<unique_ptr<argument_or_redirection_t, default_delete<argument_or_redirection_t>>>>)...	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
(unsigned long)...	assert(e)
(unsigned long)...	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
7	FLOGF(wht,__VA_ARGS__...)
call to count	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<argument_or_redirection_t, default_delete<argument_or_redirection_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<not_statement_t, default_delete<not_statement_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<block_statement_t, default_delete<block_statement_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<if_statement_t, default_delete<if_statement_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
18	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
list	assert(e)
(reference dereference)	assert(e)
(const list_t<andor_job_list, andor_job_t>)...	assert(e)
Should be an empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to size	assert(e)
contents	assert(e)
(const vector<unique_ptr<andor_job_t, default_delete<andor_job_t>>, allocator<unique_ptr<andor_job_t, default_delete<andor_job_t>>>>)...	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
(unsigned long)...	assert(e)
(unsigned long)...	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
18	FLOGF(wht,__VA_ARGS__...)
call to count	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const list_t<andor_job_list, andor_job_t>)...	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<andor_job_t, default_delete<andor_job_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
29	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
list	assert(e)
(reference dereference)	assert(e)
(const list_t<elseif_clause_list, elseif_clause_t>)...	assert(e)
Should be an empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to size	assert(e)
contents	assert(e)
(const vector<unique_ptr<elseif_clause_t, default_delete<elseif_clause_t>>, allocator<unique_ptr<elseif_clause_t, default_delete<elseif_clause_t>>>>)...	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
(unsigned long)...	assert(e)
(unsigned long)...	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
29	FLOGF(wht,__VA_ARGS__...)
call to count	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const list_t<elseif_clause_list, elseif_clause_t>)...	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<elseif_clause_t, default_delete<elseif_clause_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<else_clause_t, default_delete<else_clause_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<switch_statement_t, default_delete<switch_statement_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
33	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
list	assert(e)
(reference dereference)	assert(e)
(const list_t<case_item_list, case_item_t>)...	assert(e)
Should be an empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to size	assert(e)
contents	assert(e)
(const vector<unique_ptr<case_item_t, default_delete<case_item_t>>, allocator<unique_ptr<case_item_t, default_delete<case_item_t>>>>)...	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
(unsigned long)...	assert(e)
(unsigned long)...	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
33	FLOGF(wht,__VA_ARGS__...)
call to count	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const list_t<case_item_list, case_item_t>)...	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<case_item_t, default_delete<case_item_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<for_header_t, default_delete<for_header_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<while_header_t, default_delete<while_header_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<function_header_t, default_delete<function_header_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<begin_header_t, default_delete<begin_header_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
visit_stack_	assert(e)
! ...	assert(e)
Visit stack should not be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!visit_stack_.empty() && ""Visit stack should not be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
1138	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<argument_t, default_delete<argument_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<redirection_t, default_delete<redirection_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
n	assert(e)
(bool)...	assert(e)
Node should not be null	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"n && ""Node should not be null"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
845	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
call to operator bool	assert(e)
contents	assert(e)
Null pointer	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
149	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
array::at: __n (which is %zu) >= _Nm (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
4	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
list	assert(e)
(reference dereference)	assert(e)
(const list_t<argument_list, argument_t>)...	assert(e)
Should be an empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to size	assert(e)
contents	assert(e)
(const vector<unique_ptr<argument_t, default_delete<argument_t>>, allocator<unique_ptr<argument_t, default_delete<argument_t>>>>)...	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
(unsigned long)...	assert(e)
(unsigned long)...	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
4	FLOGF(wht,__VA_ARGS__...)
call to count	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const list_t<argument_list, argument_t>)...	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<freestanding_argument_list_t, default_delete<freestanding_argument_list_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List is not initially empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List is not initially empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
874	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
exhaust_stream	assert(e)
! ...	assert(e)
exhaust_stream should only be set at top level, and so we should not be unwinding	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!exhaust_stream && ""exhaust_stream should only be set at top level, and so we should not be "" ""unwinding"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
880	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sunwinding %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
12	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(e)
list	assert(e)
(reference dereference)	assert(e)
(const list_t<job_list, job_conjunction_t>)...	assert(e)
Should be an empty list	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.empty() && ""Should be an empty list"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
884	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*schomping range %u-%u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_start	FLOGF(wht,__VA_ARGS__...)
tok	FLOGF(wht,__VA_ARGS__...)
source_length	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*sdone unwinding	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to size	assert(e)
contents	assert(e)
(const vector<unique_ptr<job_conjunction_t, default_delete<job_conjunction_t>>, allocator<unique_ptr<job_conjunction_t, default_delete<job_conjunction_t>>>>)...	assert(e)
4294967295	assert(e)
4294967295	UINT32_MAX
(...)	assert(e)
(...)	UINT32_MAX
(unsigned long)...	assert(e)
(unsigned long)...	UINT32_MAX
... <= ...	assert(e)
Contents size out of bounds	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents.size() <= UINT32_MAX && ""Contents size out of bounds"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
932	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
list	assert(e)
(reference dereference)	assert(e)
contents	assert(e)
0	assert(e)
(const contents_ptr_t *)...	assert(e)
... == ...	assert(e)
List should still be empty	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"list.contents == nullptr && ""List should still be empty"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.cpp	assert(e)
array to pointer conversion	assert(e)
933	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*s%ls size: %lu	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
12	FLOGF(wht,__VA_ARGS__...)
call to count	FLOGF(wht,__VA_ARGS__...)
list	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const list_t<job_list, job_conjunction_t>)...	FLOGF(wht,__VA_ARGS__...)
(unsigned long)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
ast_construction	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%*smake %ls %p	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to spaces	FLOGF(wht,__VA_ARGS__...)
	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to ast_type_to_string	FLOGF(wht,__VA_ARGS__...)
AstType	FLOGF(wht,__VA_ARGS__...)
call to get	FLOGF(wht,__VA_ARGS__...)
node	FLOGF(wht,__VA_ARGS__...)
(const unique_ptr<job_list_t, default_delete<job_list_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
n	assert(e)
(bool)...	assert(e)
Node should not be null	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"n && ""Node should not be null"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
845	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<keyword_base>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<token_base>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<maybe_newlines>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<argument>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<argument_list, argument_t>)...	ELEMLIST(x,y)
(const list_t<argument_list, argument_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<redirection>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<argument_or_redirection>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	ELEMLIST(x,y)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<variable_assignment>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<variable_assignment_list, variable_assignment_t>)...	ELEMLIST(x,y)
(const list_t<variable_assignment_list, variable_assignment_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_conjunction>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_list, job_conjunction_t>)...	ELEMLIST(x,y)
(const list_t<job_list, job_conjunction_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_conjunction_continuation>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	ELEMLIST(x,y)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_continuation>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_continuation_list, job_continuation_t>)...	ELEMLIST(x,y)
(const list_t<job_continuation_list, job_continuation_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<andor_job>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<andor_job_list, andor_job_t>)...	ELEMLIST(x,y)
(const list_t<andor_job_list, andor_job_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<not_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<block_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<for_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<while_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<function_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<begin_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<if_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<if_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<elseif_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<elseif_clause_list, elseif_clause_t>)...	ELEMLIST(x,y)
(const list_t<elseif_clause_list, elseif_clause_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<else_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<switch_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<case_item>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<case_item_list, case_item_t>)...	ELEMLIST(x,y)
(const list_t<case_item_list, case_item_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<decorated_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<freestanding_argument_list>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
pipe	FIELDS(__VA_ARGS__...)
newlines	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
pipe	FIELDS(__VA_ARGS__...)
newlines	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
pipe	FIELDS(__VA_ARGS__...)
newlines	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
conjunction	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
conjunction	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
conjunction	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_if	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_if	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_if	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_case	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_case	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_case	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
opt_decoration	FIELDS(__VA_ARGS__...)
command	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
opt_decoration	FIELDS(__VA_ARGS__...)
command	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
opt_decoration	FIELDS(__VA_ARGS__...)
command	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_for	FIELDS(__VA_ARGS__...)
var_name	FIELDS(__VA_ARGS__...)
kw_in	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_for	FIELDS(__VA_ARGS__...)
var_name	FIELDS(__VA_ARGS__...)
kw_in	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_for	FIELDS(__VA_ARGS__...)
var_name	FIELDS(__VA_ARGS__...)
kw_in	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_while	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_while	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_while	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_function	FIELDS(__VA_ARGS__...)
first_arg	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_function	FIELDS(__VA_ARGS__...)
first_arg	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_function	FIELDS(__VA_ARGS__...)
first_arg	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_begin	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_begin	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_begin	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
header	FIELDS(__VA_ARGS__...)
jobs	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
header	FIELDS(__VA_ARGS__...)
jobs	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
header	FIELDS(__VA_ARGS__...)
jobs	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
elseif_clauses	FIELDS(__VA_ARGS__...)
else_clause	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
elseif_clauses	FIELDS(__VA_ARGS__...)
else_clause	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
elseif_clauses	FIELDS(__VA_ARGS__...)
else_clause	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_switch	FIELDS(__VA_ARGS__...)
argument	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
cases	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_switch	FIELDS(__VA_ARGS__...)
argument	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
cases	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_switch	FIELDS(__VA_ARGS__...)
argument	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
cases	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
continuation	FIELDS(__VA_ARGS__...)
bg	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<job>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
continuation	FIELDS(__VA_ARGS__...)
bg	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<job>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
continuation	FIELDS(__VA_ARGS__...)
bg	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
decorator	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
continuations	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
decorator	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
continuations	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
decorator	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
continuations	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
oper	FIELDS(__VA_ARGS__...)
target	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
0	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
oper	FIELDS(__VA_ARGS__...)
target	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(const branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(const node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
oper	FIELDS(__VA_ARGS__...)
target	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<keyword_base> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<token_base> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<maybe_newlines> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<argument> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<argument_list, argument_t> *)...	ELEMLIST(x,y)
(list_t<argument_list, argument_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<argument_or_redirection_list, argument_or_redirection_t> *)...	ELEMLIST(x,y)
(list_t<argument_or_redirection_list, argument_or_redirection_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<variable_assignment> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<variable_assignment_list, variable_assignment_t> *)...	ELEMLIST(x,y)
(list_t<variable_assignment_list, variable_assignment_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_list, job_conjunction_t> *)...	ELEMLIST(x,y)
(list_t<job_list, job_conjunction_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_conjunction_continuation_list, job_conjunction_continuation_t> *)...	ELEMLIST(x,y)
(list_t<job_conjunction_continuation_list, job_conjunction_continuation_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_continuation_list, job_continuation_t> *)...	ELEMLIST(x,y)
(list_t<job_continuation_list, job_continuation_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<andor_job_list, andor_job_t> *)...	ELEMLIST(x,y)
(list_t<andor_job_list, andor_job_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<elseif_clause_list, elseif_clause_t> *)...	ELEMLIST(x,y)
(list_t<elseif_clause_list, elseif_clause_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<case_item_list, case_item_t> *)...	ELEMLIST(x,y)
(list_t<case_item_list, case_item_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<not_statement_t, block_statement_t, if_statement_t, switch_statement_t, decorated_statement_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<not_statement_t, block_statement_t, if_statement_t, switch_statement_t, decorated_statement_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<for_header_t, while_header_t, function_header_t, begin_header_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<for_header_t, while_header_t, function_header_t, begin_header_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<argument_t, redirection_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<argument_t, redirection_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
definition of __is_integer<__uint128_t>	__INT_N(TYPE)
definition of __is_integer<__uint128_t>	__INT_N(TYPE)
declaration of __type	__INT_N(TYPE)
declaration of __type	__INT_N(TYPE)
1	__INT_N(TYPE)
definition of __is_integer<__int128_t>	__INT_N(TYPE)
definition of __is_integer<__int128_t>	__INT_N(TYPE)
declaration of __type	__INT_N(TYPE)
declaration of __type	__INT_N(TYPE)
1	__INT_N(TYPE)
Unknown literal	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
(_Tp)...	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to expression	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
Unknown literal	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to expression	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
1	__try
0	__catch(X)
definition of wcsnrtombs	__NTH(fct)
definition of wcsnrtombs	__NTH(fct)
definition of wcsnrtombs	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of mbsnrtowcs	__NTH(fct)
definition of mbsnrtowcs	__NTH(fct)
definition of mbsnrtowcs	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of wcpncpy	__NTH(fct)
definition of wcpncpy	__NTH(fct)
definition of wcpncpy	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of wcpcpy	__NTH(fct)
definition of wcpcpy	__NTH(fct)
definition of wcpcpy	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of wmempcpy	__NTH(fct)
definition of wmempcpy	__NTH(fct)
definition of wmempcpy	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
2	__USE_FORTIFY_LEVEL
call to __builtin_va_arg_pack	__va_arg_pack()
definition of wmemset	__NTH(fct)
definition of wmemset	__NTH(fct)
definition of wmemset	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__s	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
definition of wmemmove	__NTH(fct)
definition of wmemmove	__NTH(fct)
definition of wmemmove	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
definition of wmemcpy	__NTH(fct)
definition of wmemcpy	__NTH(fct)
definition of wmemcpy	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__s1	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
definition of wcsrtombs	__NTH(fct)
definition of wcsrtombs	__NTH(fct)
definition of wcsrtombs	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of wcsncpy	__NTH(fct)
definition of wcsncpy	__NTH(fct)
definition of wcsncpy	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of wcsncat	__NTH(fct)
definition of wcsncat	__NTH(fct)
definition of wcsncat	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of wcscpy	__NTH(fct)
definition of wcscpy	__NTH(fct)
definition of wcscpy	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of wcscat	__NTH(fct)
definition of wcscat	__NTH(fct)
definition of wcscat	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of wcrtomb	__NTH(fct)
definition of wcrtomb	__NTH(fct)
definition of wcrtomb	__NTH(fct)
definition of wcrtomb	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
1	__bos(ptr)
... > ...	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
(int)...	__bos(ptr)
16	__WCHAR_MB_LEN_MAX
16	__WCHAR_MB_LEN_MAX
(unsigned long)...	__WCHAR_MB_LEN_MAX
(unsigned long)...	__WCHAR_MB_LEN_MAX
call to __builtin_object_size	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
1	__bos(ptr)
... > ...	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
1	__bos(ptr)
... > ...	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
(int)...	__bos(ptr)
2	__USE_FORTIFY_LEVEL
definition of vswprintf	__NTH(fct)
definition of vswprintf	__NTH(fct)
definition of vswprintf	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__USE_FORTIFY_LEVEL
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
2	__USE_FORTIFY_LEVEL
definition of swprintf	__NTH(fct)
definition of swprintf	__NTH(fct)
definition of swprintf	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__USE_FORTIFY_LEVEL
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_va_arg_pack	__va_arg_pack()
definition of mbsrtowcs	__NTH(fct)
definition of mbsrtowcs	__NTH(fct)
definition of mbsrtowcs	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
2	__USE_FORTIFY_LEVEL
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
declaration of __wcsnrtombs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsnrtombs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsnrtombs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsnrtombs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsnrtombs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsnrtombs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsnrtowcs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsnrtowcs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsnrtowcs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsnrtowcs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsnrtowcs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsnrtowcs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsrtombs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsrtombs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsrtombs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsrtombs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsrtombs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsrtombs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsrtowcs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsrtowcs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsrtowcs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsrtowcs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsrtowcs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __mbsrtowcs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcrtomb_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcrtomb_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcrtomb_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __fgetws_unlocked_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fgetws_unlocked_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fgetws_unlocked_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fgetws_unlocked_alias	__REDIRECT(name,proto,alias)
declaration of __fgetws_unlocked_alias	__REDIRECT(name,proto,alias)
declaration of __fgetws_unlocked_alias	__REDIRECT(name,proto,alias)
declaration of __fgetws_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fgetws_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fgetws_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fgetws_alias	__REDIRECT(name,proto,alias)
declaration of __fgetws_alias	__REDIRECT(name,proto,alias)
declaration of __fgetws_alias	__REDIRECT(name,proto,alias)
declaration of __vswprintf_alias	__REDIRECT_NTH_LDBL(name,proto,alias)
declaration of __vswprintf_alias	__REDIRECT_NTH_LDBL(name,proto,alias)
declaration of __vswprintf_alias	__REDIRECT_NTH_LDBL(name,proto,alias)
declaration of __swprintf_alias	__REDIRECT_NTH_LDBL(name,proto,alias)
declaration of __swprintf_alias	__REDIRECT_NTH_LDBL(name,proto,alias)
declaration of __swprintf_alias	__REDIRECT_NTH_LDBL(name,proto,alias)
declaration of __wcsncat_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsncat_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsncat_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcscat_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcscat_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcscat_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcpncpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcpncpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcpncpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcpncpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcpncpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcpncpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsncpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsncpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsncpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsncpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsncpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcsncpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcpcpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcpcpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcpcpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcscpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcscpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcscpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemset_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemset_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemset_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemset_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemset_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemset_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmempcpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmempcpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmempcpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmempcpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmempcpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmempcpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemmove_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemmove_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemmove_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemmove_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemmove_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemmove_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemcpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemcpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemcpy_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemcpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemcpy_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wmemcpy_alias	__REDIRECT_NTH(name,proto,alias)
definition of wctob	__NTH(fct)
definition of wctob	__NTH(fct)
definition of wctob	__NTH(fct)
definition of wctob	__NTH(fct)
definition of wctob	__NTH(fct)
definition of mbrlen	__NTH(fct)
definition of mbrlen	__NTH(fct)
definition of mbrlen	__NTH(fct)
definition of mbrlen	__NTH(fct)
definition of mbrlen	__NTH(fct)
0	NULL
(mbstate_t *)...	NULL
0	NULL
(wchar_t *)...	NULL
0	NULL
(mbstate_t *)...	NULL
definition of btowc	__NTH(fct)
definition of btowc	__NTH(fct)
definition of btowc	__NTH(fct)
definition of btowc	__NTH(fct)
definition of btowc	__NTH(fct)
declaration of swscanf	__REDIRECT_NTH(name,proto,alias)
declaration of swscanf	__REDIRECT_NTH(name,proto,alias)
declaration of swscanf	__REDIRECT_NTH(name,proto,alias)
declaration of swscanf	__REDIRECT_NTH(name,proto,alias)
declaration of swscanf	__REDIRECT_NTH(name,proto,alias)
declaration of wscanf	__REDIRECT(name,proto,alias)
declaration of wscanf	__REDIRECT(name,proto,alias)
declaration of wscanf	__REDIRECT(name,proto,alias)
declaration of wscanf	__REDIRECT(name,proto,alias)
declaration of wscanf	__REDIRECT(name,proto,alias)
declaration of fwscanf	__REDIRECT(name,proto,alias)
declaration of fwscanf	__REDIRECT(name,proto,alias)
declaration of fwscanf	__REDIRECT(name,proto,alias)
declaration of fwscanf	__REDIRECT(name,proto,alias)
declaration of fwscanf	__REDIRECT(name,proto,alias)
definition of __fsid_t	__FSID_T_TYPE
definition of __fsid_t	__FSID_T_TYPE
definition of __fsid_t	__FSID_T_TYPE
2	__FSID_T_TYPE
(unsigned long)...	__FSID_T_TYPE
definition of __val	__FSID_T_TYPE
definition of __val	__FSID_T_TYPE
definition of __val	__FSID_T_TYPE
1024	__CPU_SETSIZE
(unsigned long)...	__CPU_SETSIZE
8	__NCPUBITS
(unsigned long)...	__NCPUBITS
sizeof(__cpu_mask)	__NCPUBITS
... * ...	__NCPUBITS
(...)	__NCPUBITS
definition of __elision	__PTHREAD_SPINS_DATA
definition of __elision	__PTHREAD_SPINS_DATA
definition of __elision	__PTHREAD_SPINS_DATA
definition of __spins	__PTHREAD_SPINS_DATA
definition of __spins	__PTHREAD_SPINS_DATA
definition of __spins	__PTHREAD_SPINS_DATA
4	__SIZEOF_PTHREAD_BARRIERATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIERATTR_T
32	__SIZEOF_PTHREAD_BARRIER_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIER_T
8	__SIZEOF_PTHREAD_RWLOCKATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCKATTR_T
56	__SIZEOF_PTHREAD_RWLOCK_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCK_T
56	__SIZEOF_PTHREAD_ATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_ATTR_T
4	__SIZEOF_PTHREAD_CONDATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_CONDATTR_T
4	__SIZEOF_PTHREAD_MUTEXATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEXATTR_T
48	__SIZEOF_PTHREAD_COND_T
(unsigned long)...	__SIZEOF_PTHREAD_COND_T
40	__SIZEOF_PTHREAD_MUTEX_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEX_T
definition of pthread_equal	__NTH(fct)
call to __gthrw_pthread_cond_destroy	__gthrw_(name)
call to __gthrw_pthread_cond_timedwait	__gthrw_(name)
call to __gthrw_pthread_cond_wait	__gthrw_(name)
call to __gthrw_pthread_cond_signal	__gthrw_(name)
call to __gthrw_pthread_cond_broadcast	__gthrw_(name)
call to __gthrw_pthread_mutex_unlock	__gthrw_(name)
call to __gthrw_pthread_mutex_timedlock	__gthrw_(name)
call to __gthrw_pthread_mutex_trylock	__gthrw_(name)
call to __gthrw_pthread_mutex_lock	__gthrw_(name)
call to __gthrw_pthread_mutex_destroy	__gthrw_(name)
call to __gthrw_pthread_mutex_init	__gthrw_(name)
0	NULL
(const pthread_mutexattr_t *)...	NULL
call to __gthrw_pthread_setspecific	__gthrw_(name)
call to __gthrw_pthread_getspecific	__gthrw_(name)
call to __gthrw_pthread_key_delete	__gthrw_(name)
call to __gthrw_pthread_key_create	__gthrw_(name)
call to __gthrw_pthread_once	__gthrw_(name)
call to __gthrw_sched_yield	__gthrw_(name)
call to __gthrw_pthread_self	__gthrw_(name)
call to __gthrw_pthread_equal	__gthrw_(name)
call to __gthrw_pthread_detach	__gthrw_(name)
call to __gthrw_pthread_join	__gthrw_(name)
call to __gthrw_pthread_create	__gthrw_(name)
0	NULL
(const pthread_attr_t *)...	NULL
__gthrw___pthread_key_create	GTHR_ACTIVE_PROXY
__gthrw___pthread_key_create	__gthrw_(name)
declaration of __gthrw___pthread_key_create	__gthrw_(name)
declaration of __gthrw___pthread_key_create	__gthrw2(name,name2,type)
declaration of __gthrw_pthread_mutexattr_destroy	__gthrw(name)
declaration of __gthrw_pthread_mutexattr_settype	__gthrw(name)
declaration of __gthrw_pthread_mutexattr_init	__gthrw(name)
declaration of __gthrw_pthread_key_delete	__gthrw(name)
declaration of __gthrw_pthread_key_create	__gthrw(name)
declaration of __gthrw_pthread_cond_destroy	__gthrw(name)
declaration of __gthrw_pthread_cond_timedwait	__gthrw(name)
declaration of __gthrw_pthread_cond_wait	__gthrw(name)
declaration of __gthrw_pthread_cond_signal	__gthrw(name)
declaration of __gthrw_pthread_cond_broadcast	__gthrw(name)
declaration of __gthrw_pthread_cond_init	__gthrw(name)
declaration of __gthrw_pthread_mutex_destroy	__gthrw(name)
declaration of __gthrw_pthread_mutex_init	__gthrw(name)
declaration of __gthrw_pthread_mutex_unlock	__gthrw(name)
declaration of __gthrw_pthread_mutex_timedlock	__gthrw(name)
declaration of __gthrw_pthread_mutex_trylock	__gthrw(name)
declaration of __gthrw_pthread_mutex_lock	__gthrw(name)
declaration of __gthrw_sched_yield	__gthrw(name)
declaration of __gthrw_pthread_cancel	__gthrw(name)
declaration of __gthrw_pthread_detach	__gthrw(name)
declaration of __gthrw_pthread_self	__gthrw(name)
declaration of __gthrw_pthread_equal	__gthrw(name)
declaration of __gthrw_pthread_join	__gthrw(name)
declaration of __gthrw_pthread_create	__gthrw(name)
declaration of __gthrw_pthread_setspecific	__gthrw(name)
declaration of __gthrw_pthread_getspecific	__gthrw(name)
declaration of __gthrw_pthread_once	__gthrw(name)
call to __builtin_abort	_GLIBCXX_THROW_OR_ABORT(_EXC)
(...)	_GLIBCXX_THROW_OR_ABORT(_EXC)
call to __builtin_abort	_GLIBCXX_THROW_OR_ABORT(_EXC)
(...)	_GLIBCXX_THROW_OR_ABORT(_EXC)
call to __builtin_abort	_GLIBCXX_THROW_OR_ABORT(_EXC)
(...)	_GLIBCXX_THROW_OR_ABORT(_EXC)
call to __builtin_abort	_GLIBCXX_THROW_OR_ABORT(_EXC)
(...)	_GLIBCXX_THROW_OR_ABORT(_EXC)
4294967295	WEOF
4294967295	WEOF
(...)	WEOF
(...)	WEOF
1	_GLIBCXX_STDIO_EOF
- ...	_GLIBCXX_STDIO_EOF
0	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
0	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
0	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
1	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
1	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
2	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
2	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
2	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
3	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
3	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
3	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
4	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
4	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
4	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
5	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
5	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
5	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
6	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
6	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
6	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
7	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
7	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
7	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
8	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
8	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
9	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
9	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
9	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
10	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
10	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
10	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
11	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
11	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
11	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
declaration of isblank_l	__exctype_l(name)
declaration of isblank_l	__exctype_l(name)
declaration of isxdigit_l	__exctype_l(name)
declaration of isxdigit_l	__exctype_l(name)
declaration of isupper_l	__exctype_l(name)
declaration of isupper_l	__exctype_l(name)
declaration of isspace_l	__exctype_l(name)
declaration of isspace_l	__exctype_l(name)
declaration of ispunct_l	__exctype_l(name)
declaration of ispunct_l	__exctype_l(name)
declaration of isprint_l	__exctype_l(name)
declaration of isprint_l	__exctype_l(name)
declaration of isgraph_l	__exctype_l(name)
declaration of isgraph_l	__exctype_l(name)
declaration of islower_l	__exctype_l(name)
declaration of islower_l	__exctype_l(name)
declaration of isdigit_l	__exctype_l(name)
declaration of isdigit_l	__exctype_l(name)
declaration of iscntrl_l	__exctype_l(name)
declaration of iscntrl_l	__exctype_l(name)
declaration of isalpha_l	__exctype_l(name)
declaration of isalpha_l	__exctype_l(name)
declaration of isalnum_l	__exctype_l(name)
declaration of isalnum_l	__exctype_l(name)
declaration of _tolower	__exctype(name)
declaration of _tolower	__exctype(name)
declaration of _toupper	__exctype(name)
declaration of _toupper	__exctype(name)
declaration of isblank	__exctype(name)
declaration of isblank	__exctype(name)
declaration of isblank	__exctype(name)
declaration of isxdigit	__exctype(name)
declaration of isxdigit	__exctype(name)
declaration of isxdigit	__exctype(name)
declaration of isupper	__exctype(name)
declaration of isupper	__exctype(name)
declaration of isupper	__exctype(name)
declaration of isspace	__exctype(name)
declaration of isspace	__exctype(name)
declaration of isspace	__exctype(name)
declaration of ispunct	__exctype(name)
declaration of ispunct	__exctype(name)
declaration of ispunct	__exctype(name)
declaration of isprint	__exctype(name)
declaration of isprint	__exctype(name)
declaration of isprint	__exctype(name)
declaration of isgraph	__exctype(name)
declaration of isgraph	__exctype(name)
declaration of isgraph	__exctype(name)
declaration of islower	__exctype(name)
declaration of islower	__exctype(name)
declaration of islower	__exctype(name)
declaration of isdigit	__exctype(name)
declaration of isdigit	__exctype(name)
declaration of isdigit	__exctype(name)
declaration of iscntrl	__exctype(name)
declaration of iscntrl	__exctype(name)
declaration of iscntrl	__exctype(name)
declaration of isalpha	__exctype(name)
declaration of isalpha	__exctype(name)
declaration of isalpha	__exctype(name)
declaration of isalnum	__exctype(name)
declaration of isalnum	__exctype(name)
declaration of isalnum	__exctype(name)
1024	_SIGSET_NWORDS
(unsigned long)...	_SIGSET_NWORDS
8	_SIGSET_NWORDS
(unsigned long)...	_SIGSET_NWORDS
sizeof(unsigned long)	_SIGSET_NWORDS
... * ...	_SIGSET_NWORDS
(...)	_SIGSET_NWORDS
... / ...	_SIGSET_NWORDS
(...)	_SIGSET_NWORDS
1024	__FD_SETSIZE
8	__NFDBITS
sizeof(__fd_mask)	__NFDBITS
(int)...	__NFDBITS
... * ...	__NFDBITS
(...)	__NFDBITS
0	NULL
(void *)...	NULL
definition of atof	__NTH(fct)
0	NULL
definition of ptsname_r	__NTH(fct)
definition of ptsname_r	__NTH(fct)
definition of ptsname_r	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of realpath	__NTH(fct)
definition of realpath	__NTH(fct)
definition of realpath	__NTH(fct)
definition of realpath	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__resolved	__bos(ptr)
__resolved	__bos(ptr)
(const void *)...	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
1	__bos(ptr)
... > ...	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__resolved	__bos(ptr)
__resolved	__bos(ptr)
(const void *)...	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
1	__bos(ptr)
... > ...	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
(int)...	__bos(ptr)
definition of wctomb	__NTH(fct)
definition of wctomb	__NTH(fct)
definition of wctomb	__NTH(fct)
definition of wctomb	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
1	__bos(ptr)
... > ...	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
(int)...	__bos(ptr)
16	__STDLIB_MB_LEN_MAX
16	__STDLIB_MB_LEN_MAX
(unsigned long)...	__STDLIB_MB_LEN_MAX
(unsigned long)...	__STDLIB_MB_LEN_MAX
call to __builtin_object_size	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
1	__bos(ptr)
... > ...	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
1	__bos(ptr)
... > ...	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
(int)...	__bos(ptr)
definition of wcstombs	__NTH(fct)
definition of wcstombs	__NTH(fct)
definition of wcstombs	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of mbstowcs	__NTH(fct)
definition of mbstowcs	__NTH(fct)
definition of mbstowcs	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dst	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
declaration of __wcstombs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcstombs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcstombs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __wcstombs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcstombs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wcstombs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __mbstowcs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __mbstowcs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __mbstowcs_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __mbstowcs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __mbstowcs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __mbstowcs_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wctomb_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wctomb_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __wctomb_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __ptsname_r_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __ptsname_r_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __ptsname_r_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __ptsname_r_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __ptsname_r_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __ptsname_r_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __realpath_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __realpath_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __realpath_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __realpath_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __realpath_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __realpath_alias	__REDIRECT_NTH(name,proto,alias)
definition of atol	__NTH(fct)
definition of atol	__NTH(fct)
0	NULL
definition of atoi	__NTH(fct)
definition of atoi	__NTH(fct)
0	NULL
definition of atoll	__NTH(fct)
definition of atoll	__NTH(fct)
0	NULL
definition of ferror_unlocked	__NTH(fct)
__stream	__ferror_unlocked_body(_fp)
(...)	__ferror_unlocked_body(_fp)
_flags	__ferror_unlocked_body(_fp)
32	__ferror_unlocked_body(_fp)
32	_IO_ERR_SEEN
... & ...	__ferror_unlocked_body(_fp)
(...)	__ferror_unlocked_body(_fp)
0	__ferror_unlocked_body(_fp)
... != ...	__ferror_unlocked_body(_fp)
(...)	__ferror_unlocked_body(_fp)
(int)...	__ferror_unlocked_body(_fp)
definition of feof_unlocked	__NTH(fct)
__stream	__feof_unlocked_body(_fp)
(...)	__feof_unlocked_body(_fp)
_flags	__feof_unlocked_body(_fp)
16	__feof_unlocked_body(_fp)
16	_IO_EOF_SEEN
... & ...	__feof_unlocked_body(_fp)
(...)	__feof_unlocked_body(_fp)
0	__feof_unlocked_body(_fp)
... != ...	__feof_unlocked_body(_fp)
(...)	__feof_unlocked_body(_fp)
(int)...	__feof_unlocked_body(_fp)
call to __builtin_expect	__putc_unlocked_body(_ch,_fp)
call to __builtin_expect	__glibc_unlikely(cond)
stdout	__putc_unlocked_body(_ch,_fp)
stdout	stdout
(...)	__putc_unlocked_body(_ch,_fp)
_IO_write_ptr	__putc_unlocked_body(_ch,_fp)
stdout	__putc_unlocked_body(_ch,_fp)
stdout	stdout
(...)	__putc_unlocked_body(_ch,_fp)
_IO_write_end	__putc_unlocked_body(_ch,_fp)
... >= ...	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(...)	__glibc_unlikely(cond)
(long)...	__putc_unlocked_body(_ch,_fp)
(long)...	__glibc_unlikely(cond)
0	__putc_unlocked_body(_ch,_fp)
0	__glibc_unlikely(cond)
(long)...	__putc_unlocked_body(_ch,_fp)
(long)...	__glibc_unlikely(cond)
(bool)...	__putc_unlocked_body(_ch,_fp)
(bool)...	__glibc_unlikely(cond)
call to __overflow	__putc_unlocked_body(_ch,_fp)
stdout	__putc_unlocked_body(_ch,_fp)
stdout	stdout
__c	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(unsigned char)...	__putc_unlocked_body(_ch,_fp)
(int)...	__putc_unlocked_body(_ch,_fp)
stdout	__putc_unlocked_body(_ch,_fp)
stdout	stdout
(...)	__putc_unlocked_body(_ch,_fp)
_IO_write_ptr	__putc_unlocked_body(_ch,_fp)
... ++	__putc_unlocked_body(_ch,_fp)
* ...	__putc_unlocked_body(_ch,_fp)
__c	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(char)...	__putc_unlocked_body(_ch,_fp)
... = ...	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(unsigned char)...	__putc_unlocked_body(_ch,_fp)
(int)...	__putc_unlocked_body(_ch,_fp)
... ? ... : ...	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
call to __builtin_expect	__putc_unlocked_body(_ch,_fp)
call to __builtin_expect	__glibc_unlikely(cond)
__stream	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
_IO_write_ptr	__putc_unlocked_body(_ch,_fp)
__stream	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
_IO_write_end	__putc_unlocked_body(_ch,_fp)
... >= ...	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(...)	__glibc_unlikely(cond)
(long)...	__putc_unlocked_body(_ch,_fp)
(long)...	__glibc_unlikely(cond)
0	__putc_unlocked_body(_ch,_fp)
0	__glibc_unlikely(cond)
(long)...	__putc_unlocked_body(_ch,_fp)
(long)...	__glibc_unlikely(cond)
(bool)...	__putc_unlocked_body(_ch,_fp)
(bool)...	__glibc_unlikely(cond)
call to __overflow	__putc_unlocked_body(_ch,_fp)
__stream	__putc_unlocked_body(_ch,_fp)
__c	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(unsigned char)...	__putc_unlocked_body(_ch,_fp)
(int)...	__putc_unlocked_body(_ch,_fp)
__stream	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
_IO_write_ptr	__putc_unlocked_body(_ch,_fp)
... ++	__putc_unlocked_body(_ch,_fp)
* ...	__putc_unlocked_body(_ch,_fp)
__c	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(char)...	__putc_unlocked_body(_ch,_fp)
... = ...	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(unsigned char)...	__putc_unlocked_body(_ch,_fp)
(int)...	__putc_unlocked_body(_ch,_fp)
... ? ... : ...	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
call to __builtin_expect	__putc_unlocked_body(_ch,_fp)
call to __builtin_expect	__glibc_unlikely(cond)
__stream	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
_IO_write_ptr	__putc_unlocked_body(_ch,_fp)
__stream	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
_IO_write_end	__putc_unlocked_body(_ch,_fp)
... >= ...	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(...)	__glibc_unlikely(cond)
(long)...	__putc_unlocked_body(_ch,_fp)
(long)...	__glibc_unlikely(cond)
0	__putc_unlocked_body(_ch,_fp)
0	__glibc_unlikely(cond)
(long)...	__putc_unlocked_body(_ch,_fp)
(long)...	__glibc_unlikely(cond)
(bool)...	__putc_unlocked_body(_ch,_fp)
(bool)...	__glibc_unlikely(cond)
call to __overflow	__putc_unlocked_body(_ch,_fp)
__stream	__putc_unlocked_body(_ch,_fp)
__c	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(unsigned char)...	__putc_unlocked_body(_ch,_fp)
(int)...	__putc_unlocked_body(_ch,_fp)
__stream	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
_IO_write_ptr	__putc_unlocked_body(_ch,_fp)
... ++	__putc_unlocked_body(_ch,_fp)
* ...	__putc_unlocked_body(_ch,_fp)
__c	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(char)...	__putc_unlocked_body(_ch,_fp)
... = ...	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
(unsigned char)...	__putc_unlocked_body(_ch,_fp)
(int)...	__putc_unlocked_body(_ch,_fp)
... ? ... : ...	__putc_unlocked_body(_ch,_fp)
(...)	__putc_unlocked_body(_ch,_fp)
call to __builtin_expect	__getc_unlocked_body(_fp)
call to __builtin_expect	__glibc_unlikely(cond)
stdin	__getc_unlocked_body(_fp)
stdin	stdin
(...)	__getc_unlocked_body(_fp)
_IO_read_ptr	__getc_unlocked_body(_fp)
stdin	__getc_unlocked_body(_fp)
stdin	stdin
(...)	__getc_unlocked_body(_fp)
_IO_read_end	__getc_unlocked_body(_fp)
... >= ...	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
(...)	__glibc_unlikely(cond)
(long)...	__getc_unlocked_body(_fp)
(long)...	__glibc_unlikely(cond)
0	__getc_unlocked_body(_fp)
0	__glibc_unlikely(cond)
(long)...	__getc_unlocked_body(_fp)
(long)...	__glibc_unlikely(cond)
(bool)...	__getc_unlocked_body(_fp)
(bool)...	__glibc_unlikely(cond)
call to __uflow	__getc_unlocked_body(_fp)
stdin	__getc_unlocked_body(_fp)
stdin	stdin
stdin	__getc_unlocked_body(_fp)
stdin	stdin
(...)	__getc_unlocked_body(_fp)
_IO_read_ptr	__getc_unlocked_body(_fp)
... ++	__getc_unlocked_body(_fp)
(unsigned char *)...	__getc_unlocked_body(_fp)
* ...	__getc_unlocked_body(_fp)
(int)...	__getc_unlocked_body(_fp)
... ? ... : ...	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
call to __builtin_expect	__getc_unlocked_body(_fp)
call to __builtin_expect	__glibc_unlikely(cond)
__fp	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
_IO_read_ptr	__getc_unlocked_body(_fp)
__fp	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
_IO_read_end	__getc_unlocked_body(_fp)
... >= ...	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
(...)	__glibc_unlikely(cond)
(long)...	__getc_unlocked_body(_fp)
(long)...	__glibc_unlikely(cond)
0	__getc_unlocked_body(_fp)
0	__glibc_unlikely(cond)
(long)...	__getc_unlocked_body(_fp)
(long)...	__glibc_unlikely(cond)
(bool)...	__getc_unlocked_body(_fp)
(bool)...	__glibc_unlikely(cond)
call to __uflow	__getc_unlocked_body(_fp)
__fp	__getc_unlocked_body(_fp)
__fp	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
_IO_read_ptr	__getc_unlocked_body(_fp)
... ++	__getc_unlocked_body(_fp)
(unsigned char *)...	__getc_unlocked_body(_fp)
* ...	__getc_unlocked_body(_fp)
(int)...	__getc_unlocked_body(_fp)
... ? ... : ...	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
call to __builtin_expect	__getc_unlocked_body(_fp)
call to __builtin_expect	__glibc_unlikely(cond)
__fp	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
_IO_read_ptr	__getc_unlocked_body(_fp)
__fp	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
_IO_read_end	__getc_unlocked_body(_fp)
... >= ...	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
(...)	__glibc_unlikely(cond)
(long)...	__getc_unlocked_body(_fp)
(long)...	__glibc_unlikely(cond)
0	__getc_unlocked_body(_fp)
0	__glibc_unlikely(cond)
(long)...	__getc_unlocked_body(_fp)
(long)...	__glibc_unlikely(cond)
(bool)...	__getc_unlocked_body(_fp)
(bool)...	__glibc_unlikely(cond)
call to __uflow	__getc_unlocked_body(_fp)
__fp	__getc_unlocked_body(_fp)
__fp	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
_IO_read_ptr	__getc_unlocked_body(_fp)
... ++	__getc_unlocked_body(_fp)
(unsigned char *)...	__getc_unlocked_body(_fp)
* ...	__getc_unlocked_body(_fp)
(int)...	__getc_unlocked_body(_fp)
... ? ... : ...	__getc_unlocked_body(_fp)
(...)	__getc_unlocked_body(_fp)
stdout	stdout
stdin	stdin
call to __builtin_object_size	__bos0(ptr)
__ptr	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__ptr	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__ptr	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__ptr	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
1	EOF
- ...	EOF
(...)	EOF
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of obstack_vprintf	__NTH(fct)
2	__USE_FORTIFY_LEVEL
definition of vasprintf	__NTH(fct)
2	__USE_FORTIFY_LEVEL
definition of obstack_printf	__NTH(fct)
2	__USE_FORTIFY_LEVEL
call to __builtin_va_arg_pack	__va_arg_pack()
definition of __asprintf	__NTH(fct)
2	__USE_FORTIFY_LEVEL
call to __builtin_va_arg_pack	__va_arg_pack()
definition of asprintf	__NTH(fct)
2	__USE_FORTIFY_LEVEL
call to __builtin_va_arg_pack	__va_arg_pack()
2	__USE_FORTIFY_LEVEL
2	__USE_FORTIFY_LEVEL
call to __builtin_va_arg_pack	__va_arg_pack()
definition of vsprintf	__NTH(fct)
2	__USE_FORTIFY_LEVEL
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
stdout	stdout
2	__USE_FORTIFY_LEVEL
2	__USE_FORTIFY_LEVEL
definition of sprintf	__NTH(fct)
2	__USE_FORTIFY_LEVEL
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_va_arg_pack	__va_arg_pack()
2	__USE_FORTIFY_LEVEL
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_object_size	__bos(ptr)
__str	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__str	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos0(ptr)
__ptr	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__ptr	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__ptr	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__ptr	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
2	__USE_FORTIFY_LEVEL
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of vsnprintf	__NTH(fct)
2	__USE_FORTIFY_LEVEL
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of snprintf	__NTH(fct)
2	__USE_FORTIFY_LEVEL
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_va_arg_pack	__va_arg_pack()
declaration of __fread_unlocked_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fread_unlocked_alias	__REDIRECT(name,proto,alias)
declaration of __fgets_unlocked_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fgets_unlocked_alias	__REDIRECT(name,proto,alias)
declaration of __fread_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fread_alias	__REDIRECT(name,proto,alias)
declaration of __fgets_chk_warn	__REDIRECT(name,proto,alias)
declaration of __fgets_alias	__REDIRECT(name,proto,alias)
declaration of __gets_warn	__REDIRECT(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vsscanf	__REDIRECT_NTH(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of vfscanf	__REDIRECT(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of sscanf	__REDIRECT_NTH(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of scanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
declaration of fscanf	__REDIRECT(name,proto,alias)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of operator()	_Cxx_hashtable_define_trivial_hash(_Tp)
return ...	_Cxx_hashtable_define_trivial_hash(_Tp)
__val	_Cxx_hashtable_define_trivial_hash(_Tp)
static_cast<size_t>...	_Cxx_hashtable_define_trivial_hash(_Tp)
{ ... }	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<__uint128_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<__uint128_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<__uint128_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<__uint128_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<__int128_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<__int128_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<__int128_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<__int128_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned long long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned long long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned long long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned long long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned int>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned int>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned int>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned int>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned short>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned short>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned short>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned short>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<long long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<long long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<long long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<long long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<long>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<int>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<int>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<int>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<int>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<short>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<short>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<short>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<short>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char32_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char32_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char32_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char32_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char16_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char16_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char16_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char16_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<wchar_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<wchar_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<wchar_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<wchar_t>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<unsigned char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<signed char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<signed char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<signed char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<signed char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<char>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<bool>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<bool>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<bool>	_Cxx_hashtable_define_trivial_hash(_Tp)
definition of hash<bool>	_Cxx_hashtable_define_trivial_hash(_Tp)
basic_string::_M_construct null not valid	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
declaration of __vararg	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL)
definition of _Mem_fn_traits<..(*)(..)>	_GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL)
call to __builtin_abort	_GLIBCXX_THROW_OR_ABORT(_EXC)
(...)	_GLIBCXX_THROW_OR_ABORT(_EXC)
definition of denorm_min	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
static_cast<unsigned __int128>...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of signaling_NaN	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
static_cast<unsigned __int128>...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of quiet_NaN	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
static_cast<unsigned __int128>...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of infinity	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
static_cast<unsigned __int128>...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of round_error	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of epsilon	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of lowest	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of lowest	__INT_N_U201103(TYPE)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N_U201103(TYPE)
call to min	__INT_N(TYPE,BITSIZE,EXT,UEXT)
call to min	__INT_N_U201103(TYPE)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N_U201103(TYPE)
definition of max	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__glibcxx_max_b(T,B)
(unsigned __int128)...	__glibcxx_signed_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__glibcxx_max_b(T,B)
(unsigned __int128)...	__glibcxx_signed_b(T,B)
... < ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__glibcxx_max_b(T,B)
128	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__glibcxx_max_b(T,B)
(unsigned __int128)...	__glibcxx_digits_b(T,B)
(unsigned __int128)...	__glibcxx_signed_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__glibcxx_max_b(T,B)
(unsigned __int128)...	__glibcxx_digits_b(T,B)
(unsigned __int128)...	__glibcxx_signed_b(T,B)
... < ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(int)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... - ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
... << ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... << ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__glibcxx_max_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... - ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
... << ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... << ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__glibcxx_max_b(T,B)
... + ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... + ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_max_b(T,B)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__glibcxx_max_b(T,B)
~ ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of min	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(unsigned __int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of denorm_min	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
static_cast<__int128>...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of signaling_NaN	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
static_cast<__int128>...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of quiet_NaN	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
static_cast<__int128>...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of infinity	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
static_cast<__int128>...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of lowest	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of lowest	__INT_N_201103(TYPE)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N_201103(TYPE)
call to min	__INT_N(TYPE,BITSIZE,EXT,UEXT)
call to min	__INT_N_201103(TYPE)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N_201103(TYPE)
definition of round_error	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of epsilon	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of max	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_max_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_max_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
... < ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_max_b(T,B)
128	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_max_b(T,B)
(__int128)...	__glibcxx_digits_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_max_b(T,B)
(__int128)...	__glibcxx_digits_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
... < ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(int)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... - ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
... << ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... << ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_max_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... - ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
... << ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... << ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_max_b(T,B)
... + ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... + ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_max_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_max_b(T,B)
~ ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_max_b(T,B)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of min	__INT_N(TYPE,BITSIZE,EXT,UEXT)
return ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_min_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_min_b(T,B)
0	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
... < ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_max_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_max_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
... < ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_max_b(T,B)
128	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_max_b(T,B)
(__int128)...	__glibcxx_digits_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_max_b(T,B)
(__int128)...	__glibcxx_digits_b(T,B)
(__int128)...	__glibcxx_signed_b(T,B)
... < ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(int)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
... << ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_max_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... << ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_max_b(T,B)
... + ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... + ...	__glibcxx_min_b(T,B)
... + ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
(__int128)...	__glibcxx_max_b(T,B)
~ ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
~ ...	__glibcxx_min_b(T,B)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... ? ... : ...	__glibcxx_min_b(T,B)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
- ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
- ...	__glibcxx_min_b(T,B)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_min_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... - ...	__glibcxx_min_b(T,B)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_min_b(T,B)
(__int128)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(__int128)...	__glibcxx_min_b(T,B)
... ? ... : ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... ? ... : ...	__glibcxx_min_b(T,B)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__glibcxx_min_b(T,B)
{ ... }	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_max(T)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char32_t)...	__glibcxx_max(T)
(char32_t)...	__glibcxx_max_b(T,B)
(char32_t)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_max(T)
(unsigned int)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_max(T)
(unsigned int)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_max(T)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(char32_t)...	__glibcxx_max(T)
(char32_t)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_max(T)
(unsigned int)...	__glibcxx_max_b(T,B)
sizeof(char32_t)	__glibcxx_max(T)
8	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max(T)
... * ...	__glibcxx_max(T)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_max(T)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char32_t)...	__glibcxx_max(T)
(char32_t)...	__glibcxx_max_b(T,B)
(char32_t)...	__glibcxx_digits_b(T,B)
(char32_t)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_max(T)
(unsigned int)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_max(T)
(unsigned int)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_max(T)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_signed_b(T,B)
... - ...	__glibcxx_max(T)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_max(T)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
... << ...	__glibcxx_max(T)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_max(T)
(unsigned int)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_max(T)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... << ...	__glibcxx_max(T)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_max(T)
(unsigned int)...	__glibcxx_max_b(T,B)
... + ...	__glibcxx_max(T)
... + ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
(char32_t)...	__glibcxx_max(T)
(char32_t)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_max(T)
(unsigned int)...	__glibcxx_max_b(T,B)
~ ...	__glibcxx_max(T)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__glibcxx_max(T)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(char32_t)...	__glibcxx_max(T)
(char32_t)...	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char32_t)...	__glibcxx_min(T)
(char32_t)...	__glibcxx_min_b(T,B)
(char32_t)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char32_t)...	__glibcxx_min(T)
(char32_t)...	__glibcxx_min_b(T,B)
(char32_t)...	__glibcxx_max_b(T,B)
(char32_t)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(char32_t)...	__glibcxx_min(T)
(char32_t)...	__glibcxx_min_b(T,B)
(char32_t)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_max_b(T,B)
sizeof(char32_t)	__glibcxx_min(T)
8	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min(T)
... * ...	__glibcxx_min(T)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char32_t)...	__glibcxx_min(T)
(char32_t)...	__glibcxx_min_b(T,B)
(char32_t)...	__glibcxx_max_b(T,B)
(char32_t)...	__glibcxx_digits_b(T,B)
(char32_t)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min_b(T,B)
(unsigned long)...	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_signed_b(T,B)
... - ...	__glibcxx_min(T)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min_b(T,B)
(unsigned long)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
... << ...	__glibcxx_min(T)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... << ...	__glibcxx_min(T)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_max_b(T,B)
... + ...	__glibcxx_min(T)
... + ...	__glibcxx_min_b(T,B)
... + ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
(char32_t)...	__glibcxx_min(T)
(char32_t)...	__glibcxx_min_b(T,B)
(char32_t)...	__glibcxx_max_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_max_b(T,B)
~ ...	__glibcxx_min(T)
~ ...	__glibcxx_min_b(T,B)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__glibcxx_min(T)
... ? ... : ...	__glibcxx_min_b(T,B)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
(char32_t)...	__glibcxx_min(T)
(char32_t)...	__glibcxx_min_b(T,B)
(unsigned int)...	__glibcxx_min(T)
(unsigned int)...	__glibcxx_min_b(T,B)
... ? ... : ...	__glibcxx_min(T)
... ? ... : ...	__glibcxx_min_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(char32_t)...	__glibcxx_min(T)
(char32_t)...	__glibcxx_min_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_max(T)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char16_t)...	__glibcxx_max(T)
(char16_t)...	__glibcxx_max_b(T,B)
(char16_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_max(T)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(char16_t)...	__glibcxx_max(T)
(char16_t)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
sizeof(char16_t)	__glibcxx_max(T)
8	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max(T)
... * ...	__glibcxx_max(T)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_max(T)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char16_t)...	__glibcxx_max(T)
(char16_t)...	__glibcxx_max_b(T,B)
(char16_t)...	__glibcxx_digits_b(T,B)
(char16_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_max(T)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_signed_b(T,B)
... - ...	__glibcxx_max(T)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_max(T)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
... << ...	__glibcxx_max(T)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... - ...	__glibcxx_max(T)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... << ...	__glibcxx_max(T)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... + ...	__glibcxx_max(T)
... + ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
(char16_t)...	__glibcxx_max(T)
(char16_t)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
~ ...	__glibcxx_max(T)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__glibcxx_max(T)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(char16_t)...	__glibcxx_max(T)
(char16_t)...	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char16_t)...	__glibcxx_min(T)
(char16_t)...	__glibcxx_min_b(T,B)
(char16_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char16_t)...	__glibcxx_min(T)
(char16_t)...	__glibcxx_min_b(T,B)
(char16_t)...	__glibcxx_max_b(T,B)
(char16_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(char16_t)...	__glibcxx_min(T)
(char16_t)...	__glibcxx_min_b(T,B)
(char16_t)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
sizeof(char16_t)	__glibcxx_min(T)
8	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min(T)
... * ...	__glibcxx_min(T)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char16_t)...	__glibcxx_min(T)
(char16_t)...	__glibcxx_min_b(T,B)
(char16_t)...	__glibcxx_max_b(T,B)
(char16_t)...	__glibcxx_digits_b(T,B)
(char16_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min_b(T,B)
(unsigned long)...	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_signed_b(T,B)
... - ...	__glibcxx_min(T)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min_b(T,B)
(unsigned long)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
... << ...	__glibcxx_min(T)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... << ...	__glibcxx_min(T)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... + ...	__glibcxx_min(T)
... + ...	__glibcxx_min_b(T,B)
... + ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
(char16_t)...	__glibcxx_min(T)
(char16_t)...	__glibcxx_min_b(T,B)
(char16_t)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
~ ...	__glibcxx_min(T)
~ ...	__glibcxx_min_b(T,B)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__glibcxx_min(T)
... ? ... : ...	__glibcxx_min_b(T,B)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
(char16_t)...	__glibcxx_min(T)
(char16_t)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
... ? ... : ...	__glibcxx_min(T)
... ? ... : ...	__glibcxx_min_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(char16_t)...	__glibcxx_min(T)
(char16_t)...	__glibcxx_min_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_max(T)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(wchar_t)...	__glibcxx_max(T)
(wchar_t)...	__glibcxx_max_b(T,B)
(wchar_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_max(T)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(wchar_t)...	__glibcxx_max(T)
(wchar_t)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
sizeof(wchar_t)	__glibcxx_max(T)
8	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max(T)
... * ...	__glibcxx_max(T)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_max(T)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(wchar_t)...	__glibcxx_max(T)
(wchar_t)...	__glibcxx_max_b(T,B)
(wchar_t)...	__glibcxx_digits_b(T,B)
(wchar_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_max(T)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_signed_b(T,B)
... - ...	__glibcxx_max(T)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_max(T)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
... << ...	__glibcxx_max(T)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... - ...	__glibcxx_max(T)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... << ...	__glibcxx_max(T)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... + ...	__glibcxx_max(T)
... + ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
(wchar_t)...	__glibcxx_max(T)
(wchar_t)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
~ ...	__glibcxx_max(T)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__glibcxx_max(T)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(wchar_t)...	__glibcxx_max(T)
(wchar_t)...	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(wchar_t)...	__glibcxx_min(T)
(wchar_t)...	__glibcxx_min_b(T,B)
(wchar_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(wchar_t)...	__glibcxx_min(T)
(wchar_t)...	__glibcxx_min_b(T,B)
(wchar_t)...	__glibcxx_max_b(T,B)
(wchar_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(wchar_t)...	__glibcxx_min(T)
(wchar_t)...	__glibcxx_min_b(T,B)
(wchar_t)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
sizeof(wchar_t)	__glibcxx_min(T)
8	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min(T)
... * ...	__glibcxx_min(T)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(wchar_t)...	__glibcxx_min(T)
(wchar_t)...	__glibcxx_min_b(T,B)
(wchar_t)...	__glibcxx_max_b(T,B)
(wchar_t)...	__glibcxx_digits_b(T,B)
(wchar_t)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min_b(T,B)
(unsigned long)...	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_signed_b(T,B)
... - ...	__glibcxx_min(T)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min_b(T,B)
(unsigned long)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
... << ...	__glibcxx_min(T)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... << ...	__glibcxx_min(T)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... + ...	__glibcxx_min(T)
... + ...	__glibcxx_min_b(T,B)
... + ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
(wchar_t)...	__glibcxx_min(T)
(wchar_t)...	__glibcxx_min_b(T,B)
(wchar_t)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
~ ...	__glibcxx_min(T)
~ ...	__glibcxx_min_b(T,B)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__glibcxx_min(T)
... ? ... : ...	__glibcxx_min_b(T,B)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
(wchar_t)...	__glibcxx_min(T)
(wchar_t)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
... ? ... : ...	__glibcxx_min(T)
... ? ... : ...	__glibcxx_min_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(wchar_t)...	__glibcxx_min(T)
(wchar_t)...	__glibcxx_min_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_max(T)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char)...	__glibcxx_max(T)
(char)...	__glibcxx_max_b(T,B)
(char)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_max(T)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(char)...	__glibcxx_max(T)
(char)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
sizeof(char)	__glibcxx_max(T)
8	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max(T)
... * ...	__glibcxx_max(T)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_max(T)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char)...	__glibcxx_max(T)
(char)...	__glibcxx_max_b(T,B)
(char)...	__glibcxx_digits_b(T,B)
(char)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_max(T)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_signed_b(T,B)
... - ...	__glibcxx_max(T)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_max(T)
(unsigned long)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_max(T)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
... << ...	__glibcxx_max(T)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... - ...	__glibcxx_max(T)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... << ...	__glibcxx_max(T)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_max(T)
1	__glibcxx_max_b(T,B)
... + ...	__glibcxx_max(T)
... + ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
0	__glibcxx_max(T)
0	__glibcxx_max_b(T,B)
(char)...	__glibcxx_max(T)
(char)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_max(T)
(int)...	__glibcxx_max_b(T,B)
~ ...	__glibcxx_max(T)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__glibcxx_max(T)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_max(T)
(...)	__glibcxx_max_b(T,B)
(char)...	__glibcxx_max(T)
(char)...	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char)...	__glibcxx_min(T)
(char)...	__glibcxx_min_b(T,B)
(char)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char)...	__glibcxx_min(T)
(char)...	__glibcxx_min_b(T,B)
(char)...	__glibcxx_max_b(T,B)
(char)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_signed_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(char)...	__glibcxx_min(T)
(char)...	__glibcxx_min_b(T,B)
(char)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
sizeof(char)	__glibcxx_min(T)
8	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min(T)
... * ...	__glibcxx_min(T)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_signed_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
- ...	__glibcxx_max_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(char)...	__glibcxx_min(T)
(char)...	__glibcxx_min_b(T,B)
(char)...	__glibcxx_max_b(T,B)
(char)...	__glibcxx_digits_b(T,B)
(char)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_signed_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_min(T)
... < ...	__glibcxx_min_b(T,B)
... < ...	__glibcxx_max_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_signed_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min_b(T,B)
(unsigned long)...	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_signed_b(T,B)
... - ...	__glibcxx_min(T)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
(...)	__glibcxx_digits_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
(unsigned long)...	__glibcxx_min(T)
(unsigned long)...	__glibcxx_min_b(T,B)
(unsigned long)...	__glibcxx_max_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
... << ...	__glibcxx_min(T)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
... - ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... << ...	__glibcxx_min(T)
... << ...	__glibcxx_min_b(T,B)
... << ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
1	__glibcxx_max_b(T,B)
... + ...	__glibcxx_min(T)
... + ...	__glibcxx_min_b(T,B)
... + ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
0	__glibcxx_max_b(T,B)
(char)...	__glibcxx_min(T)
(char)...	__glibcxx_min_b(T,B)
(char)...	__glibcxx_max_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_max_b(T,B)
~ ...	__glibcxx_min(T)
~ ...	__glibcxx_min_b(T,B)
~ ...	__glibcxx_max_b(T,B)
... ? ... : ...	__glibcxx_min(T)
... ? ... : ...	__glibcxx_min_b(T,B)
... ? ... : ...	__glibcxx_max_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(...)	__glibcxx_max_b(T,B)
- ...	__glibcxx_min(T)
- ...	__glibcxx_min_b(T,B)
1	__glibcxx_min(T)
1	__glibcxx_min_b(T,B)
... - ...	__glibcxx_min(T)
... - ...	__glibcxx_min_b(T,B)
0	__glibcxx_min(T)
0	__glibcxx_min_b(T,B)
(char)...	__glibcxx_min(T)
(char)...	__glibcxx_min_b(T,B)
(int)...	__glibcxx_min(T)
(int)...	__glibcxx_min_b(T,B)
... ? ... : ...	__glibcxx_min(T)
... ? ... : ...	__glibcxx_min_b(T,B)
(...)	__glibcxx_min(T)
(...)	__glibcxx_min_b(T,B)
(char)...	__glibcxx_min(T)
(char)...	__glibcxx_min_b(T,B)
definition of numeric_limits<__uint128_t>	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of numeric_limits<__int128_t>	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__glibcxx_long_double_tinyness_before
0	__glibcxx_long_double_traps
0	__glibcxx_long_double_has_denorm_loss
2	__glibcxx_max_digits10(T)
(long)...	__glibcxx_max_digits10(T)
64	__glibcxx_max_digits10(T)
(...)	__glibcxx_max_digits10(T)
(long)...	__glibcxx_max_digits10(T)
643	__glibcxx_max_digits10(T)
... * ...	__glibcxx_max_digits10(T)
2136	__glibcxx_max_digits10(T)
(long)...	__glibcxx_max_digits10(T)
... / ...	__glibcxx_max_digits10(T)
... + ...	__glibcxx_max_digits10(T)
(...)	__glibcxx_max_digits10(T)
(int)...	__glibcxx_max_digits10(T)
0	__glibcxx_double_tinyness_before
0	__glibcxx_double_traps
0	__glibcxx_double_has_denorm_loss
2	__glibcxx_max_digits10(T)
(long)...	__glibcxx_max_digits10(T)
53	__glibcxx_max_digits10(T)
(...)	__glibcxx_max_digits10(T)
(long)...	__glibcxx_max_digits10(T)
643	__glibcxx_max_digits10(T)
... * ...	__glibcxx_max_digits10(T)
2136	__glibcxx_max_digits10(T)
(long)...	__glibcxx_max_digits10(T)
... / ...	__glibcxx_max_digits10(T)
... + ...	__glibcxx_max_digits10(T)
(...)	__glibcxx_max_digits10(T)
(int)...	__glibcxx_max_digits10(T)
0	__glibcxx_float_tinyness_before
0	__glibcxx_float_traps
0	__glibcxx_float_has_denorm_loss
2	__glibcxx_max_digits10(T)
(long)...	__glibcxx_max_digits10(T)
24	__glibcxx_max_digits10(T)
(...)	__glibcxx_max_digits10(T)
(long)...	__glibcxx_max_digits10(T)
643	__glibcxx_max_digits10(T)
... * ...	__glibcxx_max_digits10(T)
2136	__glibcxx_max_digits10(T)
(long)...	__glibcxx_max_digits10(T)
... / ...	__glibcxx_max_digits10(T)
... + ...	__glibcxx_max_digits10(T)
(...)	__glibcxx_max_digits10(T)
(int)...	__glibcxx_max_digits10(T)
round_toward_zero	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of round_style	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of tinyness_before	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_integral_traps
definition of traps	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_modulo	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_bounded	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_iec559	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_denorm_loss	__INT_N(TYPE,BITSIZE,EXT,UEXT)
denorm_absent	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_denorm	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_signaling_NaN	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_quiet_NaN	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_infinity	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of max_exponent10	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of max_exponent	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of min_exponent10	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of min_exponent	__INT_N(TYPE,BITSIZE,EXT,UEXT)
2	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of radix	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_exact	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_integer	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_signed	__INT_N(TYPE,BITSIZE,EXT,UEXT)
128	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(long)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
643	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... * ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
2136	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(long)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... / ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(int)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of digits10	__INT_N(TYPE,BITSIZE,EXT,UEXT)
128	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of digits	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N_U201103(TYPE)
definition of max_digits10	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of max_digits10	__INT_N_U201103(TYPE)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_specialized	__INT_N(TYPE,BITSIZE,EXT,UEXT)
round_toward_zero	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of round_style	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of tinyness_before	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_integral_traps
definition of traps	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_modulo	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_bounded	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_iec559	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_denorm_loss	__INT_N(TYPE,BITSIZE,EXT,UEXT)
denorm_absent	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_denorm	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_signaling_NaN	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_quiet_NaN	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of has_infinity	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of max_exponent10	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of max_exponent	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of min_exponent10	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of min_exponent	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N(TYPE,BITSIZE,EXT,UEXT)
0	__INT_N_201103(TYPE)
definition of max_digits10	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of max_digits10	__INT_N_201103(TYPE)
2	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of radix	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_exact	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_integer	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_signed	__INT_N(TYPE,BITSIZE,EXT,UEXT)
128	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(...)	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(long)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
643	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... * ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
2136	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(long)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... / ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
(int)...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of digits10	__INT_N(TYPE,BITSIZE,EXT,UEXT)
128	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
... - ...	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of digits	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__INT_N(TYPE,BITSIZE,EXT,UEXT)
definition of is_specialized	__INT_N(TYPE,BITSIZE,EXT,UEXT)
1	__glibcxx_integral_traps
sizeof(unsigned long long)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long long)...	__glibcxx_digits10(T)
(unsigned long long)...	__glibcxx_signed_b(T,B)
(unsigned long long)...	__glibcxx_digits_b(T,B)
(unsigned long long)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
(unsigned long long)...	__glibcxx_digits10(T)
(unsigned long long)...	__glibcxx_signed_b(T,B)
(unsigned long long)...	__glibcxx_digits_b(T,B)
(unsigned long long)...	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(unsigned long long)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long long)...	__glibcxx_digits(T)
(unsigned long long)...	__glibcxx_signed_b(T,B)
(unsigned long long)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
(unsigned long long)...	__glibcxx_digits(T)
(unsigned long long)...	__glibcxx_signed_b(T,B)
(unsigned long long)...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
sizeof(long long)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(long long)...	__glibcxx_digits10(T)
(long long)...	__glibcxx_signed_b(T,B)
(long long)...	__glibcxx_digits_b(T,B)
(long long)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
(long long)...	__glibcxx_digits10(T)
(long long)...	__glibcxx_signed_b(T,B)
(long long)...	__glibcxx_digits_b(T,B)
(long long)...	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(long long)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(long long)...	__glibcxx_digits(T)
(long long)...	__glibcxx_signed_b(T,B)
(long long)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
(long long)...	__glibcxx_digits(T)
(long long)...	__glibcxx_signed_b(T,B)
(long long)...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
sizeof(unsigned long)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(unsigned long)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
sizeof(long)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(long)...	__glibcxx_digits10(T)
(long)...	__glibcxx_signed_b(T,B)
(long)...	__glibcxx_digits_b(T,B)
(long)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
(long)...	__glibcxx_digits10(T)
(long)...	__glibcxx_signed_b(T,B)
(long)...	__glibcxx_digits_b(T,B)
(long)...	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(long)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(long)...	__glibcxx_digits(T)
(long)...	__glibcxx_signed_b(T,B)
(long)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
(long)...	__glibcxx_digits(T)
(long)...	__glibcxx_signed_b(T,B)
(long)...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
sizeof(unsigned int)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned int)...	__glibcxx_digits10(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
(unsigned int)...	__glibcxx_digits10(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(unsigned int)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_digits(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_digits(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
sizeof(int)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(int)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
sizeof(unsigned short)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned short)...	__glibcxx_digits10(T)
(unsigned short)...	__glibcxx_signed_b(T,B)
(unsigned short)...	__glibcxx_digits_b(T,B)
(unsigned short)...	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(unsigned short)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned short)...	__glibcxx_digits(T)
(unsigned short)...	__glibcxx_signed_b(T,B)
(unsigned short)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
sizeof(short)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(short)...	__glibcxx_digits10(T)
(short)...	__glibcxx_signed_b(T,B)
(short)...	__glibcxx_digits_b(T,B)
(short)...	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(short)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(short)...	__glibcxx_digits(T)
(short)...	__glibcxx_signed_b(T,B)
(short)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
1	__glibcxx_signed_b(T,B)
1	__glibcxx_signed(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_signed(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_signed(T)
(char32_t)...	__glibcxx_signed_b(T,B)
(char32_t)...	__glibcxx_signed(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_signed(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_signed(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_signed(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_signed(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_signed(T)
sizeof(char32_t)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(char32_t)...	__glibcxx_digits10(T)
(char32_t)...	__glibcxx_signed_b(T,B)
(char32_t)...	__glibcxx_digits_b(T,B)
(char32_t)...	__glibcxx_digits10_b(T,B)
(unsigned int)...	__glibcxx_digits10(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
(unsigned int)...	__glibcxx_digits10(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(char32_t)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(char32_t)...	__glibcxx_digits(T)
(char32_t)...	__glibcxx_signed_b(T,B)
(char32_t)...	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_digits(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
(unsigned int)...	__glibcxx_digits(T)
(unsigned int)...	__glibcxx_signed_b(T,B)
(unsigned int)...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
1	__glibcxx_signed_b(T,B)
1	__glibcxx_signed(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_signed(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_signed(T)
(char16_t)...	__glibcxx_signed_b(T,B)
(char16_t)...	__glibcxx_signed(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_signed(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_signed(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_signed(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_signed(T)
sizeof(char16_t)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(char16_t)...	__glibcxx_digits10(T)
(char16_t)...	__glibcxx_signed_b(T,B)
(char16_t)...	__glibcxx_digits_b(T,B)
(char16_t)...	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(char16_t)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(char16_t)...	__glibcxx_digits(T)
(char16_t)...	__glibcxx_signed_b(T,B)
(char16_t)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
1	__glibcxx_signed_b(T,B)
1	__glibcxx_signed(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_signed(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_signed(T)
(wchar_t)...	__glibcxx_signed_b(T,B)
(wchar_t)...	__glibcxx_signed(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_signed(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_signed(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_signed(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_signed(T)
sizeof(wchar_t)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(wchar_t)...	__glibcxx_digits10(T)
(wchar_t)...	__glibcxx_signed_b(T,B)
(wchar_t)...	__glibcxx_digits_b(T,B)
(wchar_t)...	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(wchar_t)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(wchar_t)...	__glibcxx_digits(T)
(wchar_t)...	__glibcxx_signed_b(T,B)
(wchar_t)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
sizeof(unsigned char)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned char)...	__glibcxx_digits10(T)
(unsigned char)...	__glibcxx_signed_b(T,B)
(unsigned char)...	__glibcxx_digits_b(T,B)
(unsigned char)...	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(unsigned char)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned char)...	__glibcxx_digits(T)
(unsigned char)...	__glibcxx_signed_b(T,B)
(unsigned char)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
sizeof(signed char)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(signed char)...	__glibcxx_digits10(T)
(signed char)...	__glibcxx_signed_b(T,B)
(signed char)...	__glibcxx_digits_b(T,B)
(signed char)...	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(signed char)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(signed char)...	__glibcxx_digits(T)
(signed char)...	__glibcxx_signed_b(T,B)
(signed char)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
1	__glibcxx_signed_b(T,B)
1	__glibcxx_signed(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_signed(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_signed(T)
(char)...	__glibcxx_signed_b(T,B)
(char)...	__glibcxx_signed(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_signed(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_signed(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_signed(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_signed(T)
sizeof(char)	__glibcxx_digits10(T)
8	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10(T)
1	__glibcxx_digits10(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
1	__glibcxx_digits10_b(T,B)
- ...	__glibcxx_digits10(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(char)...	__glibcxx_digits10(T)
(char)...	__glibcxx_signed_b(T,B)
(char)...	__glibcxx_digits_b(T,B)
(char)...	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits10_b(T,B)
0	__glibcxx_digits10(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
0	__glibcxx_digits10_b(T,B)
... < ...	__glibcxx_digits10(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... - ...	__glibcxx_digits10(T)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits10_b(T,B)
643	__glibcxx_digits10(T)
643	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... * ...	__glibcxx_digits10(T)
... * ...	__glibcxx_digits10_b(T,B)
2136	__glibcxx_digits10(T)
2136	__glibcxx_digits10_b(T,B)
(unsigned long)...	__glibcxx_digits10(T)
(unsigned long)...	__glibcxx_digits10_b(T,B)
... / ...	__glibcxx_digits10(T)
... / ...	__glibcxx_digits10_b(T,B)
(...)	__glibcxx_digits10(T)
(...)	__glibcxx_digits10_b(T,B)
(int)...	__glibcxx_digits10(T)
(int)...	__glibcxx_digits10_b(T,B)
sizeof(char)	__glibcxx_digits(T)
8	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_digits(T)
... * ...	__glibcxx_digits(T)
1	__glibcxx_digits(T)
1	__glibcxx_signed_b(T,B)
1	__glibcxx_digits_b(T,B)
- ...	__glibcxx_digits(T)
- ...	__glibcxx_signed_b(T,B)
- ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(char)...	__glibcxx_digits(T)
(char)...	__glibcxx_signed_b(T,B)
(char)...	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_signed_b(T,B)
(int)...	__glibcxx_digits_b(T,B)
0	__glibcxx_digits(T)
0	__glibcxx_signed_b(T,B)
0	__glibcxx_digits_b(T,B)
... < ...	__glibcxx_digits(T)
... < ...	__glibcxx_signed_b(T,B)
... < ...	__glibcxx_digits_b(T,B)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_signed_b(T,B)
(...)	__glibcxx_digits_b(T,B)
(unsigned long)...	__glibcxx_digits(T)
(unsigned long)...	__glibcxx_signed_b(T,B)
(unsigned long)...	__glibcxx_digits_b(T,B)
... - ...	__glibcxx_digits(T)
(...)	__glibcxx_digits(T)
(...)	__glibcxx_digits_b(T,B)
(int)...	__glibcxx_digits(T)
(int)...	__glibcxx_digits_b(T,B)
1	__glibcxx_integral_traps
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
8	NCC
(unsigned long)...	NCC
Unknown literal	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
... + ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
(_ValueType)...	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
(_ValueType)...	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
... + ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
... + ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
... + ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
(value_type)...	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... + ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
(value_type)...	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
97	EAFNOSUPPORT
98	EADDRINUSE
99	EADDRNOTAVAIL
106	EISCONN
7	E2BIG
33	EDOM
14	EFAULT
9	EBADF
74	EBADMSG
32	EPIPE
103	ECONNABORTED
114	EALREADY
111	ECONNREFUSED
104	ECONNRESET
18	EXDEV
89	EDESTADDRREQ
16	EBUSY
39	ENOTEMPTY
8	ENOEXEC
17	EEXIST
27	EFBIG
36	ENAMETOOLONG
38	ENOSYS
113	EHOSTUNREACH
43	EIDRM
84	EILSEQ
25	ENOTTY
4	EINTR
22	EINVAL
29	ESPIPE
5	EIO
21	EISDIR
90	EMSGSIZE
100	ENETDOWN
102	ENETRESET
101	ENETUNREACH
105	ENOBUFS
10	ECHILD
67	ENOLINK
37	ENOLCK
61	ENODATA
42	ENOMSG
92	ENOPROTOOPT
28	ENOSPC
63	ENOSR
6	ENXIO
19	ENODEV
2	ENOENT
3	ESRCH
20	ENOTDIR
88	ENOTSOCK
60	ENOSTR
107	ENOTCONN
12	ENOMEM
95	EOPNOTSUPP
95	ENOTSUP
125	ECANCELED
115	EINPROGRESS
1	EPERM
95	EOPNOTSUPP
11	EAGAIN
11	EWOULDBLOCK
130	EOWNERDEAD
13	EACCES
71	EPROTO
93	EPROTONOSUPPORT
30	EROFS
35	EDEADLK
11	EAGAIN
34	ERANGE
131	ENOTRECOVERABLE
62	ETIME
26	ETXTBSY
110	ETIMEDOUT
23	ENFILE
24	EMFILE
31	EMLINK
40	ELOOP
75	EOVERFLOW
91	EPROTOTYPE
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
vector::reserve	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
Unknown literal	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_start	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to expression	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
Unknown literal	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_finish	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to expression	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_SC_UIO_MAXIOV	_SC_UIO_MAXIOV
_SC_LEVEL1_ICACHE_SIZE	_SC_LEVEL1_ICACHE_SIZE
definition of getdomainname	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of gethostname	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of ttyname_r	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of getgroups	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__list	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__list	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__list	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__list	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of confstr	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of getwd	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of getcwd	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of readlinkat	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of readlink	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__buf	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
declaration of __getdomainname_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __getdomainname_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __gethostname_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __gethostname_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __getlogin_r_chk_warn	__REDIRECT(name,proto,alias)
declaration of __getlogin_r_alias	__REDIRECT(name,proto,alias)
declaration of __ttyname_r_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __ttyname_r_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __getgroups_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __getgroups_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __confstr_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __confstr_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __getwd_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __getcwd_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __getcwd_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __readlinkat_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __readlinkat_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __readlink_chk_warn	__REDIRECT_NTH(name,proto,alias)
declaration of __readlink_alias	__REDIRECT_NTH(name,proto,alias)
declaration of __pread64_chk_warn	__REDIRECT(name,proto,alias)
declaration of __pread_chk_warn	__REDIRECT(name,proto,alias)
declaration of __pread64_alias	__REDIRECT(name,proto,alias)
declaration of __pread_alias	__REDIRECT(name,proto,alias)
declaration of __read_chk_warn	__REDIRECT(name,proto,alias)
declaration of __read_alias	__REDIRECT(name,proto,alias)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
/opt/src/src/maybe.h	assert(expr)
21	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
__ISwupper	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
amt	assert(e)
0	assert(e)
(unsigned long)...	assert(e)
... > ...	assert(e)
cmd was not being autoloaded	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"amt > 0 && ""cmd was not being autoloaded"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/autoload.h	assert(e)
array to pointer conversion	assert(e)
78	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
128	__SI_MAX_SIZE
128	__SI_PAD_SIZE
(unsigned long)...	__SI_MAX_SIZE
(unsigned long)...	__SI_PAD_SIZE
sizeof(int)	__SI_PAD_SIZE
... / ...	__SI_PAD_SIZE
(...)	__SI_PAD_SIZE
4	__SI_PAD_SIZE
(unsigned long)...	__SI_PAD_SIZE
... - ...	__SI_PAD_SIZE
(...)	__SI_PAD_SIZE
64	__SIGEV_MAX_SIZE
64	__SIGEV_PAD_SIZE
(unsigned long)...	__SIGEV_MAX_SIZE
(unsigned long)...	__SIGEV_PAD_SIZE
sizeof(int)	__SIGEV_PAD_SIZE
... / ...	__SIGEV_PAD_SIZE
(...)	__SIGEV_PAD_SIZE
4	__SIGEV_PAD_SIZE
(unsigned long)...	__SIGEV_PAD_SIZE
... - ...	__SIGEV_PAD_SIZE
(...)	__SIGEV_PAD_SIZE
23	__NGREG
(unsigned long)...	__NGREG
definition of uc_flags	__ctx(fld)
definition of uc_flags	__ctx(fld)
definition of fpregs	__ctx(fld)
definition of fpregs	__ctx(fld)
definition of gregs	__ctx(fld)
definition of gregs	__ctx(fld)
definition of mxcr_mask	__ctx(fld)
definition of mxcr_mask	__ctx(fld)
definition of mxcsr	__ctx(fld)
definition of mxcsr	__ctx(fld)
definition of rdp	__ctx(fld)
definition of rdp	__ctx(fld)
definition of rip	__ctx(fld)
definition of rip	__ctx(fld)
definition of fop	__ctx(fld)
definition of fop	__ctx(fld)
definition of ftw	__ctx(fld)
definition of ftw	__ctx(fld)
definition of swd	__ctx(fld)
definition of swd	__ctx(fld)
definition of cwd	__ctx(fld)
definition of cwd	__ctx(fld)
definition of element	__ctx(fld)
definition of element	__ctx(fld)
definition of exponent	__ctx(fld)
definition of exponent	__ctx(fld)
definition of significand	__ctx(fld)
definition of significand	__ctx(fld)
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
32	NCCS
(unsigned long)...	NCCS
512	_GLIBCXX_DEQUE_BUF_SIZE
(unsigned long)...	_GLIBCXX_DEQUE_BUF_SIZE
512	_GLIBCXX_DEQUE_BUF_SIZE
(unsigned long)...	_GLIBCXX_DEQUE_BUF_SIZE
1	__try
0	__catch(X)
1	__try
0	__catch(X)
fd	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
Invalid fd in add_close	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"fd >= 0 && ""Invalid fd in add_close"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/redirection.h	assert(expr)
array to pointer conversion	assert(expr)
76	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void dup2_list_t::add_close(int)	__ASSERT_FUNCTION
void dup2_list_t::add_close(int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
src	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
target	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
... && ...	assert(expr)
Invalid fd in add_dup2	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"src >= 0 && target >= 0 && ""Invalid fd in add_dup2"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/redirection.h	assert(expr)
array to pointer conversion	assert(expr)
68	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void dup2_list_t::add_dup2(int, int)	__ASSERT_FUNCTION
void dup2_list_t::add_dup2(int, int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to valid	assert(expr)
pipe_fd_	assert(expr)
Pipe is not valid	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"pipe_fd_.valid() && ""Pipe is not valid"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.h	assert(expr)
array to pointer conversion	assert(expr)
248	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
io_pipe_t::io_pipe_t(int, bool, autoclose_fd_t)	__ASSERT_FUNCTION
io_pipe_t::io_pipe_t(int, bool, autoclose_fd_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
call to valid	assert(expr)
write_fd_	assert(expr)
fd is not valid	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"write_fd_.valid() && ""fd is not valid"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.h	assert(expr)
array to pointer conversion	assert(expr)
274	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
io_bufferfill_t::io_bufferfill_t(int, autoclose_fd_t, std::shared_ptr<io_buffer_t>)	__ASSERT_FUNCTION
io_bufferfill_t::io_bufferfill_t(int, autoclose_fd_t, std::shared_ptr<io_buffer_t>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
format	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
call to fillthread_running	assert(expr)
! ...	assert(expr)
Cannot access buffer during background fill	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!fillthread_running() && ""Cannot access buffer during background fill"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.h	assert(expr)
array to pointer conversion	assert(expr)
337	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const separated_buffer_t<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> &io_buffer_t::buffer() const	__ASSERT_FUNCTION
const separated_buffer_t<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> &io_buffer_t::buffer() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
fd	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
Invalid fd	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"fd >= 0 && ""Invalid fd"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.h	assert(expr)
array to pointer conversion	assert(expr)
39	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool fd_set_t::contains(int) const	__ASSERT_FUNCTION
bool fd_set_t::contains(int) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
fd	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
Invalid fd	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"fd >= 0 && ""Invalid fd"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.h	assert(expr)
array to pointer conversion	assert(expr)
31	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void fd_set_t::add(int)	__ASSERT_FUNCTION
void fd_set_t::add(int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
start	assert(expr)
length	assert(expr)
... + ...	assert(expr)
start	assert(expr)
... >= ...	assert(expr)
Overflow	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"start + length >= start && ""Overflow"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_constants.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned int source_range_t::end() const	__ASSERT_FUNCTION
unsigned int source_range_t::end() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
declaration of freestanding_argument_list_t	ELEM(T)
declaration of decorated_statement_t	ELEM(T)
declaration of case_item_list_t	ELEM(T)
declaration of case_item_list_t	ELEMLIST(x,y)
declaration of case_item_t	ELEM(T)
declaration of switch_statement_t	ELEM(T)
declaration of else_clause_t	ELEM(T)
declaration of elseif_clause_list_t	ELEM(T)
declaration of elseif_clause_list_t	ELEMLIST(x,y)
declaration of elseif_clause_t	ELEM(T)
declaration of if_clause_t	ELEM(T)
declaration of if_statement_t	ELEM(T)
declaration of begin_header_t	ELEM(T)
declaration of function_header_t	ELEM(T)
declaration of while_header_t	ELEM(T)
declaration of for_header_t	ELEM(T)
declaration of block_statement_t	ELEM(T)
declaration of not_statement_t	ELEM(T)
declaration of statement_t	ELEM(T)
declaration of andor_job_list_t	ELEM(T)
declaration of andor_job_list_t	ELEMLIST(x,y)
declaration of andor_job_t	ELEM(T)
declaration of job_continuation_list_t	ELEM(T)
declaration of job_continuation_list_t	ELEMLIST(x,y)
declaration of job_continuation_t	ELEM(T)
declaration of job_conjunction_continuation_list_t	ELEM(T)
declaration of job_conjunction_continuation_list_t	ELEMLIST(x,y)
declaration of job_conjunction_continuation_t	ELEM(T)
declaration of job_list_t	ELEM(T)
declaration of job_list_t	ELEMLIST(x,y)
declaration of job_conjunction_t	ELEM(T)
declaration of job_t	ELEM(T)
declaration of variable_assignment_list_t	ELEM(T)
declaration of variable_assignment_list_t	ELEMLIST(x,y)
declaration of variable_assignment_t	ELEM(T)
declaration of argument_or_redirection_list_t	ELEM(T)
declaration of argument_or_redirection_list_t	ELEMLIST(x,y)
declaration of argument_or_redirection_t	ELEM(T)
declaration of redirection_t	ELEM(T)
declaration of argument_list_t	ELEM(T)
declaration of argument_list_t	ELEMLIST(x,y)
declaration of argument_t	ELEM(T)
declaration of maybe_newlines_t	ELEM(T)
declaration of token_base_t	ELEM(T)
declaration of keyword_base_t	ELEM(T)
return ...	ELEMLIST(ListT,ContentsT)
{ ... }	ELEMLIST(ListT,ContentsT)
call to list_t	ELEMLIST(ListT,ContentsT)
definition of case_item_list_t	ELEMLIST(ListT,ContentsT)
definition of elseif_clause_list_t	ELEMLIST(ListT,ContentsT)
definition of argument_or_redirection_list_t	ELEMLIST(ListT,ContentsT)
definition of job_list_t	ELEMLIST(ListT,ContentsT)
definition of andor_job_list_t	ELEMLIST(ListT,ContentsT)
definition of job_conjunction_continuation_list_t	(no string representation)
definition of job_continuation_list_t	(no string representation)
definition of argument_list_t	ELEMLIST(ListT,ContentsT)
definition of variable_assignment_list_t	(no string representation)
ptr	assert(expr)
(reference dereference)	assert(expr)
Should not have null ptr	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"ptr && ""Should not have null ptr"""	assert(expr)
/opt/src/src/ast.h	assert(expr)
885	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
n	assert(expr)
(bool)...	assert(expr)
Node should not be null	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"n && ""Node should not be null"""	assert(expr)
/opt/src/src/ast.h	assert(expr)
845	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
visit	ELEMLIST(x,y)
visit	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
call to expression	ELEMLIST(x,y)
call to expression	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
visit	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
call to expression	ELEM(T)
break;	ELEM(T)
call to operator bool	assert(expr)
contents	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"contents && ""Null pointer"""	assert(expr)
/opt/src/src/ast.h	assert(expr)
121	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
/opt/src/src/ast.h	assert(expr)
366	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to is_redirection	assert(expr)
Is not a redirection	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"is_redirection() && ""Is not a redirection"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
488	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ast::redirection_t &ast::argument_or_redirection_t::redirection() const	__ASSERT_FUNCTION
const ast::redirection_t &ast::argument_or_redirection_t::redirection() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to is_argument	assert(expr)
Is not an argument	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"is_argument() && ""Is not an argument"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
482	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ast::argument_t &ast::argument_or_redirection_t::argument() const	__ASSERT_FUNCTION
const ast::argument_t &ast::argument_or_redirection_t::argument() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
n	assert(expr)
(bool)...	assert(expr)
Should not push null node	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"n && ""Should not push null node"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
949	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void ast::traversal_t::push(const ast::node_t *)	__ASSERT_FUNCTION
void ast::traversal_t::push(const ast::node_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
n	assert(expr)
(bool)...	assert(expr)
Should not have null node	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"n && ""Should not have null node"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
922	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
ast::traversal_t::traversal_t(const ast::node_t *)	__ASSERT_FUNCTION
ast::traversal_t::traversal_t(const ast::node_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
/opt/src/src/ast.h	assert(expr)
247	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
/opt/src/src/ast.h	assert(expr)
241	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
_Base_bitset::_M_getword	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
1	__try
0	__catch(X)
1	__try
0	__catch(X)
6	_GLIBCXX_NUM_CATEGORIES
1	_GLIBCXX_STDIO_SEEK_CUR
2	_GLIBCXX_STDIO_SEEK_END
8	CHAR_BIT
(unsigned long)...	CHAR_BIT
argv	assert(expr)
0	assert(expr)
(const wchar_t *const *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
argv != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.h	assert(expr)
array to pointer conversion	assert(expr)
340	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const wchar_t *process_t::argv(unsigned long) const	__ASSERT_FUNCTION
const wchar_t *process_t::argv(unsigned long) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to exited	assert(expr)
Process is not exited	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"exited() && ""Process is not exited"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.h	assert(expr)
array to pointer conversion	assert(expr)
145	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
proc_status_t internal_proc_t::get_status() const	__ASSERT_FUNCTION
proc_status_t internal_proc_t::get_status() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Process is not exited	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/proc.h	DIE(msg)
array to pointer conversion	DIE(msg)
119	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	EXIT_SUCCESS
call to normal_exited	assert(expr)
Process is not normal exited	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"normal_exited() && ""Process is not normal exited"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.h	assert(expr)
array to pointer conversion	assert(expr)
105	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int proc_status_t::exit_code() const	__ASSERT_FUNCTION
int proc_status_t::exit_code() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
status_	WEXITSTATUS(status)
(...)	WEXITSTATUS(status)
(...)	__WEXITSTATUS(status)
65280	WEXITSTATUS(status)
65280	__WEXITSTATUS(status)
... & ...	WEXITSTATUS(status)
... & ...	__WEXITSTATUS(status)
(...)	WEXITSTATUS(status)
(...)	__WEXITSTATUS(status)
8	WEXITSTATUS(status)
8	__WEXITSTATUS(status)
... >> ...	WEXITSTATUS(status)
... >> ...	__WEXITSTATUS(status)
(...)	WEXITSTATUS(status)
(...)	__WEXITSTATUS(status)
call to signal_exited	assert(expr)
Process is not signal exited	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"signal_exited() && ""Process is not signal exited"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.h	assert(expr)
array to pointer conversion	assert(expr)
99	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int proc_status_t::signal_code() const	__ASSERT_FUNCTION
int proc_status_t::signal_code() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
status_	WTERMSIG(status)
(...)	WTERMSIG(status)
(...)	__WTERMSIG(status)
127	WTERMSIG(status)
127	__WTERMSIG(status)
... & ...	WTERMSIG(status)
... & ...	__WTERMSIG(status)
(...)	WTERMSIG(status)
(...)	__WTERMSIG(status)
status_	WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
127	WIFSIGNALED(status)
127	__WIFSIGNALED(status)
... & ...	WIFSIGNALED(status)
... & ...	__WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
1	WIFSIGNALED(status)
1	__WIFSIGNALED(status)
... + ...	WIFSIGNALED(status)
... + ...	__WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
(signed char)...	WIFSIGNALED(status)
(signed char)...	__WIFSIGNALED(status)
(int)...	WIFSIGNALED(status)
(int)...	__WIFSIGNALED(status)
1	WIFSIGNALED(status)
1	__WIFSIGNALED(status)
... >> ...	WIFSIGNALED(status)
... >> ...	__WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
0	WIFSIGNALED(status)
0	__WIFSIGNALED(status)
... > ...	WIFSIGNALED(status)
... > ...	__WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
status_	WIFEXITED(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
(...)	__WTERMSIG(status)
127	WIFEXITED(status)
127	__WIFEXITED(status)
127	__WTERMSIG(status)
... & ...	WIFEXITED(status)
... & ...	__WIFEXITED(status)
... & ...	__WTERMSIG(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
(...)	__WTERMSIG(status)
0	WIFEXITED(status)
0	__WIFEXITED(status)
... == ...	WIFEXITED(status)
... == ...	__WIFEXITED(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
status_	WIFCONTINUED(status)
(...)	WIFCONTINUED(status)
(...)	__WIFCONTINUED(status)
65535	WIFCONTINUED(status)
65535	__WIFCONTINUED(status)
65535	__W_CONTINUED
... == ...	WIFCONTINUED(status)
... == ...	__WIFCONTINUED(status)
(...)	WIFCONTINUED(status)
(...)	__WIFCONTINUED(status)
status_	WIFSTOPPED(status)
(...)	WIFSTOPPED(status)
(...)	__WIFSTOPPED(status)
255	WIFSTOPPED(status)
255	__WIFSTOPPED(status)
... & ...	WIFSTOPPED(status)
... & ...	__WIFSTOPPED(status)
(...)	WIFSTOPPED(status)
(...)	__WIFSTOPPED(status)
127	WIFSTOPPED(status)
127	__WIFSTOPPED(status)
... == ...	WIFSTOPPED(status)
... == ...	__WIFSTOPPED(status)
(...)	WIFSTOPPED(status)
(...)	__WIFSTOPPED(status)
ret	W_EXITCODE(ret,sig)
(...)	W_EXITCODE(ret,sig)
(...)	__W_EXITCODE(ret,sig)
8	W_EXITCODE(ret,sig)
8	__W_EXITCODE(ret,sig)
... << ...	W_EXITCODE(ret,sig)
... << ...	__W_EXITCODE(ret,sig)
sig	W_EXITCODE(ret,sig)
(...)	W_EXITCODE(ret,sig)
(...)	__W_EXITCODE(ret,sig)
... | ...	W_EXITCODE(ret,sig)
... | ...	__W_EXITCODE(ret,sig)
(...)	W_EXITCODE(ret,sig)
(...)	__W_EXITCODE(ret,sig)
zerocode	WIFEXITED(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
(...)	__WTERMSIG(status)
127	WIFEXITED(status)
127	__WIFEXITED(status)
127	__WTERMSIG(status)
... & ...	WIFEXITED(status)
... & ...	__WIFEXITED(status)
... & ...	__WTERMSIG(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
(...)	__WTERMSIG(status)
0	WIFEXITED(status)
0	__WIFEXITED(status)
... == ...	WIFEXITED(status)
... == ...	__WIFEXITED(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
key	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
value	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
mouth	assert(expr)
prev	assert(expr)
mouth	assert(expr)
& ...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
mouth.prev != &mouth	assert(expr)
/opt/src/src/lru.h	assert(expr)
103	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
node	assert(expr)
mouth	assert(expr)
& ...	assert(expr)
... != ...	assert(expr)
node	assert(expr)
0	assert(expr)
... != ...	assert(expr)
... && ...	assert(expr)
node	assert(expr)
key	assert(expr)
0	assert(expr)
... != ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
node != &mouth && node != nullptr && node->key != nullptr	assert(expr)
/opt/src/src/lru.h	assert(expr)
79	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
iter	assert(expr)
this	assert(expr)
node_map	assert(expr)
end	assert(expr)
call to expression	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
iter != this->node_map.end()	assert(expr)
/opt/src/src/lru.h	assert(expr)
82	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
node	assert(expr)
mouth	assert(expr)
& ...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
node != &mouth	assert(expr)
/opt/src/src/lru.h	assert(expr)
63	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
status	assert(expr)
0	assert(expr)
... != ...	assert(expr)
status cannot be 0 for an error result	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"status != 0 && ""status cannot be 0 for an error result"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/expand.h	assert(expr)
array to pointer conversion	assert(expr)
131	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
static expand_result_t expand_result_t::make_error(int)	__ASSERT_FUNCTION
static expand_result_t expand_result_t::make_error(int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
64976	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
ins	assert(expr)
second	assert(expr)
Known files cache should not have contained this cmd	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ins.second && ""Known files cache should not have contained this cmd"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/autoload.cpp	assert(expr)
array to pointer conversion	assert(expr)
131	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
maybe_t<autoloadable_file_t> autoload_file_cache_t::check(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool)	assert(expr)
maybe_t<autoloadable_file_t> autoload_file_cache_t::check(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
ins	assert(expr)
Misses cache should not have contained this cmd	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ins && ""Misses cache should not have contained this cmd"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/autoload.cpp	assert(expr)
array to pointer conversion	assert(expr)
135	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
_Nb	_GLIBCXX_BITSET_WORDS(__n)
(...)	_GLIBCXX_BITSET_WORDS(__n)
8	_GLIBCXX_BITSET_WORDS(__n)
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_WORDS(__n)
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_WORDS(__n)
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_WORDS(__n)
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_WORDS(__n)
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
... / ...	_GLIBCXX_BITSET_WORDS(__n)
_Nb	_GLIBCXX_BITSET_WORDS(__n)
(...)	_GLIBCXX_BITSET_WORDS(__n)
8	_GLIBCXX_BITSET_WORDS(__n)
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_WORDS(__n)
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_WORDS(__n)
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_WORDS(__n)
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_WORDS(__n)
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
... % ...	_GLIBCXX_BITSET_WORDS(__n)
0	_GLIBCXX_BITSET_WORDS(__n)
(unsigned long)...	_GLIBCXX_BITSET_WORDS(__n)
... == ...	_GLIBCXX_BITSET_WORDS(__n)
0	_GLIBCXX_BITSET_WORDS(__n)
1	_GLIBCXX_BITSET_WORDS(__n)
... ? ... : ...	_GLIBCXX_BITSET_WORDS(__n)
(...)	_GLIBCXX_BITSET_WORDS(__n)
(unsigned long)...	_GLIBCXX_BITSET_WORDS(__n)
... + ...	_GLIBCXX_BITSET_WORDS(__n)
1	__glibcxx_signed(_Tp)
1	__glibcxx_max(_Tp)
- ...	__glibcxx_signed(_Tp)
- ...	__glibcxx_max(_Tp)
(...)	__glibcxx_signed(_Tp)
(...)	__glibcxx_max(_Tp)
(long)...	__glibcxx_signed(_Tp)
(long)...	__glibcxx_max(_Tp)
0	__glibcxx_signed(_Tp)
0	__glibcxx_max(_Tp)
(long)...	__glibcxx_signed(_Tp)
(long)...	__glibcxx_max(_Tp)
... < ...	__glibcxx_signed(_Tp)
... < ...	__glibcxx_max(_Tp)
(...)	__glibcxx_signed(_Tp)
(...)	__glibcxx_max(_Tp)
1	__glibcxx_max(_Tp)
(long)...	__glibcxx_max(_Tp)
sizeof(long)	__glibcxx_max(_Tp)
sizeof(long)	__glibcxx_digits(_Tp)
8	__glibcxx_max(_Tp)
8	__glibcxx_digits(_Tp)
(unsigned long)...	__glibcxx_max(_Tp)
(unsigned long)...	__glibcxx_digits(_Tp)
... * ...	__glibcxx_max(_Tp)
... * ...	__glibcxx_digits(_Tp)
1	__glibcxx_max(_Tp)
1	__glibcxx_digits(_Tp)
1	__glibcxx_signed(_Tp)
- ...	__glibcxx_max(_Tp)
- ...	__glibcxx_digits(_Tp)
- ...	__glibcxx_signed(_Tp)
(...)	__glibcxx_max(_Tp)
(...)	__glibcxx_digits(_Tp)
(...)	__glibcxx_signed(_Tp)
(long)...	__glibcxx_max(_Tp)
(long)...	__glibcxx_digits(_Tp)
(long)...	__glibcxx_signed(_Tp)
0	__glibcxx_max(_Tp)
0	__glibcxx_digits(_Tp)
0	__glibcxx_signed(_Tp)
(long)...	__glibcxx_max(_Tp)
(long)...	__glibcxx_digits(_Tp)
(long)...	__glibcxx_signed(_Tp)
... < ...	__glibcxx_max(_Tp)
... < ...	__glibcxx_digits(_Tp)
... < ...	__glibcxx_signed(_Tp)
(...)	__glibcxx_max(_Tp)
(...)	__glibcxx_digits(_Tp)
(...)	__glibcxx_signed(_Tp)
(unsigned long)...	__glibcxx_max(_Tp)
(unsigned long)...	__glibcxx_digits(_Tp)
(unsigned long)...	__glibcxx_signed(_Tp)
... - ...	__glibcxx_max(_Tp)
... - ...	__glibcxx_digits(_Tp)
(...)	__glibcxx_max(_Tp)
(...)	__glibcxx_digits(_Tp)
1	__glibcxx_max(_Tp)
(unsigned long)...	__glibcxx_max(_Tp)
... - ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
... << ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
1	__glibcxx_max(_Tp)
(long)...	__glibcxx_max(_Tp)
... - ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
1	__glibcxx_max(_Tp)
... << ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
1	__glibcxx_max(_Tp)
(long)...	__glibcxx_max(_Tp)
... + ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
0	__glibcxx_max(_Tp)
(long)...	__glibcxx_max(_Tp)
~ ...	__glibcxx_max(_Tp)
... ? ... : ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
__value	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
__value	__glibcxx_max_exponent10(_Tp)
(bool)...	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
(bool)...	__glibcxx_max_exponent10(_Tp)
38	__glibcxx_max_exponent10(_Tp)
__value	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
__value	__glibcxx_max_exponent10(_Tp)
(bool)...	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
(bool)...	__glibcxx_max_exponent10(_Tp)
308	__glibcxx_max_exponent10(_Tp)
4932	__glibcxx_max_exponent10(_Tp)
... ? ... : ...	__glibcxx_max_exponent10(_Tp)
... ? ... : ...	__glibcxx_max_exponent10(_Tp)
(...)	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
(...)	__glibcxx_max_exponent10(_Tp)
__value	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
__value	__glibcxx_max_exponent10(_Tp)
(bool)...	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
(bool)...	__glibcxx_max_exponent10(_Tp)
38	__glibcxx_max_exponent10(_Tp)
__value	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
__value	__glibcxx_max_exponent10(_Tp)
(bool)...	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
(bool)...	__glibcxx_max_exponent10(_Tp)
308	__glibcxx_max_exponent10(_Tp)
4932	__glibcxx_max_exponent10(_Tp)
... ? ... : ...	__glibcxx_max_exponent10(_Tp)
... ? ... : ...	__glibcxx_max_exponent10(_Tp)
(...)	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
(...)	__glibcxx_max_exponent10(_Tp)
__value	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
__value	__glibcxx_max_exponent10(_Tp)
(bool)...	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
(bool)...	__glibcxx_max_exponent10(_Tp)
38	__glibcxx_max_exponent10(_Tp)
__value	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
__value	__glibcxx_max_exponent10(_Tp)
(bool)...	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
(bool)...	__glibcxx_max_exponent10(_Tp)
308	__glibcxx_max_exponent10(_Tp)
4932	__glibcxx_max_exponent10(_Tp)
... ? ... : ...	__glibcxx_max_exponent10(_Tp)
... ? ... : ...	__glibcxx_max_exponent10(_Tp)
(...)	__glibcxx_floating(_Tp,_Fval,_Dval,_LDval)
(...)	__glibcxx_max_exponent10(_Tp)
1	__glibcxx_signed(_Tp)
1	__glibcxx_max(_Tp)
- ...	__glibcxx_signed(_Tp)
- ...	__glibcxx_max(_Tp)
(...)	__glibcxx_signed(_Tp)
(...)	__glibcxx_max(_Tp)
(int)...	__glibcxx_signed(_Tp)
(int)...	__glibcxx_max(_Tp)
0	__glibcxx_signed(_Tp)
0	__glibcxx_max(_Tp)
... < ...	__glibcxx_signed(_Tp)
... < ...	__glibcxx_max(_Tp)
(...)	__glibcxx_signed(_Tp)
(...)	__glibcxx_max(_Tp)
1	__glibcxx_max(_Tp)
(int)...	__glibcxx_max(_Tp)
sizeof(int)	__glibcxx_max(_Tp)
sizeof(int)	__glibcxx_digits(_Tp)
8	__glibcxx_max(_Tp)
8	__glibcxx_digits(_Tp)
(unsigned long)...	__glibcxx_max(_Tp)
(unsigned long)...	__glibcxx_digits(_Tp)
... * ...	__glibcxx_max(_Tp)
... * ...	__glibcxx_digits(_Tp)
1	__glibcxx_max(_Tp)
1	__glibcxx_digits(_Tp)
1	__glibcxx_signed(_Tp)
- ...	__glibcxx_max(_Tp)
- ...	__glibcxx_digits(_Tp)
- ...	__glibcxx_signed(_Tp)
(...)	__glibcxx_max(_Tp)
(...)	__glibcxx_digits(_Tp)
(...)	__glibcxx_signed(_Tp)
(int)...	__glibcxx_max(_Tp)
(int)...	__glibcxx_digits(_Tp)
(int)...	__glibcxx_signed(_Tp)
0	__glibcxx_max(_Tp)
0	__glibcxx_digits(_Tp)
0	__glibcxx_signed(_Tp)
... < ...	__glibcxx_max(_Tp)
... < ...	__glibcxx_digits(_Tp)
... < ...	__glibcxx_signed(_Tp)
(...)	__glibcxx_max(_Tp)
(...)	__glibcxx_digits(_Tp)
(...)	__glibcxx_signed(_Tp)
(unsigned long)...	__glibcxx_max(_Tp)
(unsigned long)...	__glibcxx_digits(_Tp)
(unsigned long)...	__glibcxx_signed(_Tp)
... - ...	__glibcxx_max(_Tp)
... - ...	__glibcxx_digits(_Tp)
(...)	__glibcxx_max(_Tp)
(...)	__glibcxx_digits(_Tp)
1	__glibcxx_max(_Tp)
(unsigned long)...	__glibcxx_max(_Tp)
... - ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
... << ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
1	__glibcxx_max(_Tp)
... - ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
1	__glibcxx_max(_Tp)
... << ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
1	__glibcxx_max(_Tp)
... + ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
0	__glibcxx_max(_Tp)
(int)...	__glibcxx_max(_Tp)
~ ...	__glibcxx_max(_Tp)
... ? ... : ...	__glibcxx_max(_Tp)
(...)	__glibcxx_max(_Tp)
1	__glibcxx_signed(_Tp)
1	__glibcxx_min(_Tp)
- ...	__glibcxx_signed(_Tp)
- ...	__glibcxx_min(_Tp)
(...)	__glibcxx_signed(_Tp)
(...)	__glibcxx_min(_Tp)
(int)...	__glibcxx_signed(_Tp)
(int)...	__glibcxx_min(_Tp)
0	__glibcxx_signed(_Tp)
0	__glibcxx_min(_Tp)
... < ...	__glibcxx_signed(_Tp)
... < ...	__glibcxx_min(_Tp)
(...)	__glibcxx_signed(_Tp)
(...)	__glibcxx_min(_Tp)
1	__glibcxx_min(_Tp)
(int)...	__glibcxx_min(_Tp)
sizeof(int)	__glibcxx_min(_Tp)
sizeof(int)	__glibcxx_digits(_Tp)
8	__glibcxx_min(_Tp)
8	__glibcxx_digits(_Tp)
(unsigned long)...	__glibcxx_min(_Tp)
(unsigned long)...	__glibcxx_digits(_Tp)
... * ...	__glibcxx_min(_Tp)
... * ...	__glibcxx_digits(_Tp)
1	__glibcxx_min(_Tp)
1	__glibcxx_digits(_Tp)
1	__glibcxx_signed(_Tp)
- ...	__glibcxx_min(_Tp)
- ...	__glibcxx_digits(_Tp)
- ...	__glibcxx_signed(_Tp)
(...)	__glibcxx_min(_Tp)
(...)	__glibcxx_digits(_Tp)
(...)	__glibcxx_signed(_Tp)
(int)...	__glibcxx_min(_Tp)
(int)...	__glibcxx_digits(_Tp)
(int)...	__glibcxx_signed(_Tp)
0	__glibcxx_min(_Tp)
0	__glibcxx_digits(_Tp)
0	__glibcxx_signed(_Tp)
... < ...	__glibcxx_min(_Tp)
... < ...	__glibcxx_digits(_Tp)
... < ...	__glibcxx_signed(_Tp)
(...)	__glibcxx_min(_Tp)
(...)	__glibcxx_digits(_Tp)
(...)	__glibcxx_signed(_Tp)
(unsigned long)...	__glibcxx_min(_Tp)
(unsigned long)...	__glibcxx_digits(_Tp)
(unsigned long)...	__glibcxx_signed(_Tp)
... - ...	__glibcxx_min(_Tp)
... - ...	__glibcxx_digits(_Tp)
(...)	__glibcxx_min(_Tp)
(...)	__glibcxx_digits(_Tp)
... << ...	__glibcxx_min(_Tp)
0	__glibcxx_min(_Tp)
(int)...	__glibcxx_min(_Tp)
... ? ... : ...	__glibcxx_min(_Tp)
(...)	__glibcxx_min(_Tp)
vector::reserve	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_start	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_finish	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
oper	FIELDS(__VA_ARGS__...)
target	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_for	FIELDS(__VA_ARGS__...)
var_name	FIELDS(__VA_ARGS__...)
kw_in	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
pipe	FIELDS(__VA_ARGS__...)
newlines	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
continuation	FIELDS(__VA_ARGS__...)
bg	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
conjunction	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
decorator	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
continuations	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_while	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_function	FIELDS(__VA_ARGS__...)
first_arg	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_begin	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
header	FIELDS(__VA_ARGS__...)
jobs	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_if	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
elseif_clauses	FIELDS(__VA_ARGS__...)
else_clause	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_case	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_switch	FIELDS(__VA_ARGS__...)
argument	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
cases	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
opt_decoration	FIELDS(__VA_ARGS__...)
command	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<keyword_base> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<token_base> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<maybe_newlines> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<argument> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<argument_list, argument_t> *)...	ELEMLIST(x,y)
(list_t<argument_list, argument_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<argument_or_redirection_list, argument_or_redirection_t> *)...	ELEMLIST(x,y)
(list_t<argument_or_redirection_list, argument_or_redirection_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<variable_assignment> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<variable_assignment_list, variable_assignment_t> *)...	ELEMLIST(x,y)
(list_t<variable_assignment_list, variable_assignment_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_list, job_conjunction_t> *)...	ELEMLIST(x,y)
(list_t<job_list, job_conjunction_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_conjunction_continuation_list, job_conjunction_continuation_t> *)...	ELEMLIST(x,y)
(list_t<job_conjunction_continuation_list, job_conjunction_continuation_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_continuation_list, job_continuation_t> *)...	ELEMLIST(x,y)
(list_t<job_continuation_list, job_continuation_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<andor_job_list, andor_job_t> *)...	ELEMLIST(x,y)
(list_t<andor_job_list, andor_job_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<elseif_clause_list, elseif_clause_t> *)...	ELEMLIST(x,y)
(list_t<elseif_clause_list, elseif_clause_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<case_item_list, case_item_t> *)...	ELEMLIST(x,y)
(list_t<case_item_list, case_item_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::freestanding_argument_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::freestanding_argument_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::decorated_statement_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::decorated_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::case_item_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::case_item_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::case_item_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::case_item_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::switch_statement_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::switch_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::else_clause_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::else_clause_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::elseif_clause_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::elseif_clause_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::elseif_clause_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::elseif_clause_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::if_clause_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::if_clause_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::if_statement_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::if_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::begin_header_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::begin_header_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::function_header_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::function_header_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::while_header_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::while_header_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::for_header_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::for_header_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::block_statement_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::block_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::not_statement_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::not_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::statement_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::andor_job_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::andor_job_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::andor_job_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::andor_job_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::job_continuation_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::job_continuation_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::job_continuation_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::job_continuation_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::job_conjunction_continuation_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::job_conjunction_continuation_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::job_conjunction_continuation_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::job_conjunction_continuation_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::job_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::job_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::job_conjunction_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::job_conjunction_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::job_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::job_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::variable_assignment_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::variable_assignment_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::variable_assignment_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::variable_assignment_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::argument_or_redirection_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::argument_or_redirection_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::argument_or_redirection_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::argument_or_redirection_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::argument_list_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::argument_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::maybe_newlines_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::maybe_newlines_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::token_base_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::token_base_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::keyword_base_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::keyword_base_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::argument_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::argument_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
To *ast::node_t::as() [with To = ast::redirection_t]	__ASSERT_FUNCTION
To *ast::node_t::as() [with To = ast::redirection_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::freestanding_argument_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::freestanding_argument_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::decorated_statement_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::decorated_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::case_item_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::case_item_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::case_item_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::case_item_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::switch_statement_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::switch_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::else_clause_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::else_clause_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::elseif_clause_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::elseif_clause_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::elseif_clause_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::elseif_clause_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::if_clause_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::if_clause_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::if_statement_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::if_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::begin_header_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::begin_header_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::function_header_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::function_header_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::while_header_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::while_header_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::for_header_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::for_header_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::block_statement_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::block_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::not_statement_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::not_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::statement_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::andor_job_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::andor_job_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::andor_job_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::andor_job_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::job_continuation_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::job_continuation_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::job_continuation_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::job_continuation_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::job_conjunction_continuation_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::job_conjunction_continuation_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::job_conjunction_continuation_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::job_conjunction_continuation_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::job_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::job_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::job_conjunction_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::job_conjunction_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::job_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::job_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::variable_assignment_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::variable_assignment_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::variable_assignment_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::variable_assignment_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::argument_or_redirection_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::argument_or_redirection_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::argument_or_redirection_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::argument_or_redirection_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::redirection_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::redirection_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::argument_list_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::argument_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::argument_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::argument_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::maybe_newlines_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::maybe_newlines_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::token_base_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::token_base_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
type	assert(expr)
AstType	assert(expr)
... == ...	assert(expr)
Invalid type conversion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->type == To::AstType && ""Invalid type conversion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
247	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const To *ast::node_t::as() const [with To = ast::keyword_base_t]	__ASSERT_FUNCTION
const To *ast::node_t::as() const [with To = ast::keyword_base_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
basic_string::at: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to operator bool	assert(expr)
contents	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"contents && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
121	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ast::node_t *ast::union_ptr_t<Nodes...>::get() const [with Nodes = ast::argument_t; Nodes = ast::redirection_t]	__ASSERT_FUNCTION
const ast::node_t *ast::union_ptr_t<Nodes...>::get() const [with Nodes = ast::argument_t; Nodes = ast::redirection_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
33	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T maybe_detail::maybe_impl_t<T>::acquire() [with T = std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>]	__ASSERT_FUNCTION
T maybe_detail::maybe_impl_t<T>::acquire() [with T = std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
%s: __pos (which is %zu) > this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
array::at: __n (which is %zu) >= _Nm (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
node	assert(expr)
(lru_link_t *)...	assert(expr)
mouth	assert(expr)
& ...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
node != &mouth	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/lru.h	assert(expr)
array to pointer conversion	assert(expr)
63	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void lru_cache_t<Derived, Contents>::promote_node(lru_cache_t<Derived, Contents>::lru_node_t *) [with Derived = autoload_file_cache_t::misses_lru_cache_t; Contents = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	__ASSERT_FUNCTION
void lru_cache_t<Derived, Contents>::promote_node(lru_cache_t<Derived, Contents>::lru_node_t *) [with Derived = autoload_file_cache_t::misses_lru_cache_t; Contents = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
node	assert(expr)
(lru_link_t *)...	assert(expr)
mouth	assert(expr)
& ...	assert(expr)
... != ...	assert(expr)
node	assert(expr)
0	assert(expr)
(lru_node_t *)...	assert(expr)
... != ...	assert(expr)
... && ...	assert(expr)
node	assert(expr)
key	assert(expr)
0	assert(expr)
(const wcstring *)...	assert(expr)
... != ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
node != &mouth && node != nullptr && node->key != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/lru.h	assert(expr)
array to pointer conversion	assert(expr)
79	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void lru_cache_t<Derived, Contents>::evict_node(lru_cache_t<Derived, Contents>::lru_node_t *) [with Derived = autoload_file_cache_t::misses_lru_cache_t; Contents = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	__ASSERT_FUNCTION
void lru_cache_t<Derived, Contents>::evict_node(lru_cache_t<Derived, Contents>::lru_node_t *) [with Derived = autoload_file_cache_t::misses_lru_cache_t; Contents = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator!=	assert(expr)
iter	assert(expr)
(const _Self)...	assert(expr)
(reference to)	assert(expr)
call to end	assert(expr)
this	assert(expr)
node_map	assert(expr)
(const _Self)...	assert(expr)
(reference to)	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
iter != this->node_map.end()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/lru.h	assert(expr)
array to pointer conversion	assert(expr)
82	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
mouth	assert(expr)
prev	assert(expr)
mouth	assert(expr)
& ...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
mouth.prev != &mouth	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/lru.h	assert(expr)
array to pointer conversion	assert(expr)
103	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void lru_cache_t<Derived, Contents>::evict_last_node() [with Derived = autoload_file_cache_t::misses_lru_cache_t; Contents = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	__ASSERT_FUNCTION
void lru_cache_t<Derived, Contents>::evict_last_node() [with Derived = autoload_file_cache_t::misses_lru_cache_t; Contents = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
__s	__N(msgid)
(...)	__N(msgid)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = autoloadable_file_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = autoloadable_file_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
key	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
value	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = env_var_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = env_var_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = int]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = int]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = source_range_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = source_range_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
__s	__N(msgid)
__s	__N(msgid)
(...)	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
%s: __pos (which is %zu) > this->size() (which is %zu)	__N(msgid)
%s: __pos (which is %zu) > this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
__s	__N(msgid)
(...)	__N(msgid)
basic_string::_M_construct null not valid	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to operator bool	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
366	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::case_item_list; ContentsNode = ast::case_item_t]	__ASSERT_FUNCTION
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::case_item_list; ContentsNode = ast::case_item_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
366	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::elseif_clause_list; ContentsNode = ast::elseif_clause_t]	__ASSERT_FUNCTION
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::elseif_clause_list; ContentsNode = ast::elseif_clause_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
366	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::andor_job_list; ContentsNode = ast::andor_job_t]	__ASSERT_FUNCTION
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::andor_job_list; ContentsNode = ast::andor_job_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
366	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::job_continuation_list; ContentsNode = ast::job_continuation_t]	__ASSERT_FUNCTION
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::job_continuation_list; ContentsNode = ast::job_continuation_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
366	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::job_conjunction_continuation_list; ContentsNode = ast::job_conjunction_continuation_t]	__ASSERT_FUNCTION
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::job_conjunction_continuation_list; ContentsNode = ast::job_conjunction_continuation_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
366	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::job_list; ContentsNode = ast::job_conjunction_t]	__ASSERT_FUNCTION
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::job_list; ContentsNode = ast::job_conjunction_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
366	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::variable_assignment_list; ContentsNode = ast::variable_assignment_t]	__ASSERT_FUNCTION
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::variable_assignment_list; ContentsNode = ast::variable_assignment_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
366	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::argument_or_redirection_list; ContentsNode = ast::argument_or_redirection_t]	__ASSERT_FUNCTION
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::argument_or_redirection_list; ContentsNode = ast::argument_or_redirection_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
366	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::argument_list; ContentsNode = ast::argument_t]	__ASSERT_FUNCTION
const ContentsNode *ast::list_t<ListType, ContentsNode>::contents_ptr_t::get() const [with ast::type_t ListType = ast::type_t::argument_list; ContentsNode = ast::argument_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
(reference dereference)	assert(expr)
(const union_ptr_t<not_statement_t, block_statement_t, if_statement_t, switch_statement_t, decorated_statement_t>)...	assert(expr)
Should not have null ptr	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Should not have null ptr"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
885	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::not_statement_t; Types = ast::block_statement_t; Types = ast::if_statement_t; Types = ast::switch_statement_t; Types = ast::decorated_statement_t; NodeVisitor = ast::traversal_t]	__ASSERT_FUNCTION
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::not_statement_t; Types = ast::block_statement_t; Types = ast::if_statement_t; Types = ast::switch_statement_t; Types = ast::decorated_statement_t; NodeVisitor = ast::traversal_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
(reference dereference)	assert(expr)
(const union_ptr_t<for_header_t, while_header_t, function_header_t, begin_header_t>)...	assert(expr)
Should not have null ptr	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Should not have null ptr"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
885	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::for_header_t; Types = ast::while_header_t; Types = ast::function_header_t; Types = ast::begin_header_t; NodeVisitor = ast::traversal_t]	__ASSERT_FUNCTION
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::for_header_t; Types = ast::while_header_t; Types = ast::function_header_t; Types = ast::begin_header_t; NodeVisitor = ast::traversal_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
(reference dereference)	assert(expr)
(const union_ptr_t<argument_t, redirection_t>)...	assert(expr)
Should not have null ptr	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Should not have null ptr"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
885	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::argument_t; Types = ast::redirection_t; NodeVisitor = ast::traversal_t]	__ASSERT_FUNCTION
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::argument_t; Types = ast::redirection_t; NodeVisitor = ast::traversal_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
basic_string::_M_construct null not valid	__N(msgid)
basic_string::_M_construct null not valid	__N(msgid)
(...)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
1	__try
0	__catch(X)
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
n	assert(expr)
(bool)...	assert(expr)
Node should not be null	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"n && ""Node should not be null"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
845	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void ast::node_visitation_t<NodeVisitor>::accept(const ast::node_t *) [with NodeVisitor = ast::traversal_t]	__ASSERT_FUNCTION
void ast::node_visitation_t<NodeVisitor>::accept(const ast::node_t *) [with NodeVisitor = ast::traversal_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<keyword_base>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<token_base>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<maybe_newlines>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<argument>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<argument_list, argument_t>)...	ELEMLIST(x,y)
(const list_t<argument_list, argument_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<redirection>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<argument_or_redirection>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	ELEMLIST(x,y)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<variable_assignment>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<variable_assignment_list, variable_assignment_t>)...	ELEMLIST(x,y)
(const list_t<variable_assignment_list, variable_assignment_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_conjunction>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_list, job_conjunction_t>)...	ELEMLIST(x,y)
(const list_t<job_list, job_conjunction_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_conjunction_continuation>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	ELEMLIST(x,y)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_continuation>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_continuation_list, job_continuation_t>)...	ELEMLIST(x,y)
(const list_t<job_continuation_list, job_continuation_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<andor_job>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<andor_job_list, andor_job_t>)...	ELEMLIST(x,y)
(const list_t<andor_job_list, andor_job_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<not_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<block_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<for_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<while_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<function_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<begin_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<if_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<if_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<elseif_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<elseif_clause_list, elseif_clause_t>)...	ELEMLIST(x,y)
(const list_t<elseif_clause_list, elseif_clause_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<else_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<switch_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<case_item>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<case_item_list, case_item_t>)...	ELEMLIST(x,y)
(const list_t<case_item_list, case_item_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<decorated_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<freestanding_argument_list>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
basic_string::_M_construct null not valid	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
basic_string::_M_construct null not valid	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
basic_string::_M_construct null not valid	__N(msgid)
basic_string::_M_construct null not valid	__N(msgid)
(...)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
1	__try
0	__catch(X)
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to basic_string	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to basic_string	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(long)...	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to basic_string	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
2	__FSID_T_TYPE
(unsigned long)...	__FSID_T_TYPE
4	__SIZEOF_PTHREAD_BARRIERATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIERATTR_T
32	__SIZEOF_PTHREAD_BARRIER_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIER_T
8	__SIZEOF_PTHREAD_RWLOCKATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCKATTR_T
56	__SIZEOF_PTHREAD_RWLOCK_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCK_T
56	__SIZEOF_PTHREAD_ATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_ATTR_T
4	__SIZEOF_PTHREAD_CONDATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_CONDATTR_T
4	__SIZEOF_PTHREAD_MUTEXATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEXATTR_T
48	__SIZEOF_PTHREAD_COND_T
(unsigned long)...	__SIZEOF_PTHREAD_COND_T
40	__SIZEOF_PTHREAD_MUTEX_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEX_T
call to __builtin_object_size	__bos(ptr)
__resolved	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__resolved	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
4096	PATH_MAX
(unsigned long)...	PATH_MAX
call to __builtin_object_size	__bos(ptr)
__resolved	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__resolved	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
16	__STDLIB_MB_LEN_MAX
(unsigned long)...	__STDLIB_MB_LEN_MAX
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
16	__WCHAR_MB_LEN_MAX
(unsigned long)...	__WCHAR_MB_LEN_MAX
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__s	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of bzero	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__dest	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
definition of bcopy	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__dest	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
definition of stpncpy	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of stpcpy	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of explicit_bzero	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__dest	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
definition of mempcpy	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__dest	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
definition of strncpy	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of strncat	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of strcpy	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of strcat	__NTH(fct)
call to __builtin_object_size	__bos(ptr)
__dest	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
definition of memset	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__dest	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
definition of memmove	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__dest	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
definition of memcpy	__NTH(fct)
call to __builtin_object_size	__bos0(ptr)
__dest	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
declaration of __stpncpy_alias	__REDIRECT_NTH(name,proto,alias)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
type	assert(e)
charc	assert(e)
... != ...	assert(e)
type	assert(e)
readline	assert(e)
... != ...	assert(e)
... && ...	assert(e)
Cannot create a char event with this constructor	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"type != char_event_type_t::charc && type != char_event_type_t::readline && ""Cannot create a char event with this constructor"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/input_common.h	assert(e)
array to pointer conversion	assert(e)
164	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
type	assert(e)
readline	assert(e)
... == ...	assert(e)
Not a readline type	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"type == char_event_type_t::readline && ""Not a readline type"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/input_common.h	assert(e)
array to pointer conversion	assert(e)
151	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
type	assert(e)
charc	assert(e)
... == ...	assert(e)
Not a char type	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"type == char_event_type_t::charc && ""Not a char type"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/input_common.h	assert(e)
array to pointer conversion	assert(e)
146	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
call to basic_string	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
(reference to)	DEFAULT_BIND_MODE
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
1	STDOUT_FILENO
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
64976	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
call to c_str	_(wstr)
call to wgettext	_(wstr)
builtin	_(wstr)
desc	_(wstr)
(reference dereference)	_(wstr)
list	assert(expr)
0	assert(expr)
(completion_list_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
list != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin.cpp	assert(expr)
array to pointer conversion	assert(expr)
482	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void builtin_get_names(std::vector<completion_t, std::allocator<completion_t>> *)	__ASSERT_FUNCTION
void builtin_get_names(std::vector<completion_t, std::allocator<completion_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
sizeof(<expr>)	BUILTIN_COUNT
builtin_datas	BUILTIN_COUNT
sizeof(<expr>)	BUILTIN_COUNT
builtin_datas	BUILTIN_COUNT
array to pointer conversion	BUILTIN_COUNT
* ...	BUILTIN_COUNT
... / ...	BUILTIN_COUNT
(...)	BUILTIN_COUNT
sizeof(<expr>)	BUILTIN_COUNT
builtin_datas	BUILTIN_COUNT
sizeof(<expr>)	BUILTIN_COUNT
builtin_datas	BUILTIN_COUNT
array to pointer conversion	BUILTIN_COUNT
* ...	BUILTIN_COUNT
... / ...	BUILTIN_COUNT
(...)	BUILTIN_COUNT
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
streams	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to c_str	UNKNOWN_BUILTIN_ERR_MSG
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
call to wgettext	UNKNOWN_BUILTIN_ERR_MSG
Unknown builtin '%ls'	FLOGF(wht,__VA_ARGS__...)
Unknown builtin '%ls'	UNKNOWN_BUILTIN_ERR_MSG
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	UNKNOWN_BUILTIN_ERR_MSG
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
(reference dereference)	UNKNOWN_BUILTIN_ERR_MSG
argv	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
access to array	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
sizeof(<expr>)	BUILTIN_COUNT
builtin_datas	BUILTIN_COUNT
sizeof(<expr>)	BUILTIN_COUNT
builtin_datas	BUILTIN_COUNT
array to pointer conversion	BUILTIN_COUNT
* ...	BUILTIN_COUNT
... / ...	BUILTIN_COUNT
(...)	BUILTIN_COUNT
i	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... == ...	assert(expr)
call to wcscmp	assert(expr)
builtin_datas	assert(expr)
array to pointer conversion	assert(expr)
i	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... - ...	assert(expr)
access to array	assert(expr)
name	assert(expr)
name	assert(expr)
0	assert(expr)
... < ...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
builtins are not sorted alphabetically	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"(i == 0 || std::wcscmp(builtin_datas[i - 1].name, name) < 0) && ""builtins are not sorted alphabetically"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin.cpp	assert(expr)
array to pointer conversion	assert(expr)
434	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void builtin_init()	assert(expr)
void builtin_init()	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
sizeof(<expr>)	BUILTIN_COUNT
builtin_datas	BUILTIN_COUNT
sizeof(<expr>)	BUILTIN_COUNT
builtin_datas	BUILTIN_COUNT
array to pointer conversion	BUILTIN_COUNT
* ...	BUILTIN_COUNT
... / ...	BUILTIN_COUNT
(...)	BUILTIN_COUNT
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
streams	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
argv	_(wstr)
i	_(wstr)
access to array	_(wstr)
(const wchar_t *)...	_(wstr)
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
streams	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
argv	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
streams	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
argv	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to c_str	BUILTIN_ERR_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_ARG_COUNT1
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Command not valid at an interactive prompt
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	STDIN_FILENO
call to c_str	BUILTIN_ERR_UNKNOWN
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_UNKNOWN
call to wgettext	_(wstr)
"%ls: Unknown option '%ls'
"	BUILTIN_ERR_UNKNOWN
array to pointer conversion	BUILTIN_ERR_UNKNOWN
(reference dereference)	BUILTIN_ERR_UNKNOWN
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Not inside of loop
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
512	COUNT_CHUNK_SIZE
256	COUNT_CHUNK_SIZE
... * ...	COUNT_CHUNK_SIZE
(...)	COUNT_CHUNK_SIZE
512	COUNT_CHUNK_SIZE
256	COUNT_CHUNK_SIZE
... * ...	COUNT_CHUNK_SIZE
(...)	COUNT_CHUNK_SIZE
(size_t)...	COUNT_CHUNK_SIZE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"(Type 'help %ls' for related documentation)
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_MISSING
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_MISSING
call to wgettext	_(wstr)
"%ls: Expected argument for option %ls
"	BUILTIN_ERR_MISSING
array to pointer conversion	BUILTIN_ERR_MISSING
(reference dereference)	BUILTIN_ERR_MISSING
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_UNKNOWN
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_UNKNOWN
call to wgettext	_(wstr)
"%ls: Unknown option '%ls'
"	BUILTIN_ERR_UNKNOWN
array to pointer conversion	BUILTIN_ERR_UNKNOWN
(reference dereference)	BUILTIN_ERR_UNKNOWN
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
streams	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
1	STDOUT_FILENO
(reference to)	STDOUT_FILENO
2	STDERR_FILENO
(reference to)	STDERR_FILENO
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
139	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __errno_location	errno
* ...	errno
(...)	errno
argv	assert(expr)
argc	assert(expr)
access to array	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
argv[argc] == nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin.cpp	assert(expr)
array to pointer conversion	assert(expr)
96	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int builtin_count_args(const wchar_t *const *)	__ASSERT_FUNCTION
int builtin_count_args(const wchar_t *const *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
Evaluate contents of file	N_(wstr)
array to pointer conversion	N_(wstr)
Return a successful result	N_(wstr)
array to pointer conversion	N_(wstr)
Test a condition	N_(wstr)
array to pointer conversion	N_(wstr)
Translate a string	N_(wstr)
array to pointer conversion	N_(wstr)
Execute command if previous command succeeded	N_(wstr)
array to pointer conversion	N_(wstr)
Parse options in fish script	N_(wstr)
array to pointer conversion	N_(wstr)
Create a block of code	N_(wstr)
array to pointer conversion	N_(wstr)
Send job to background	N_(wstr)
array to pointer conversion	N_(wstr)
Handle fish key bindings	N_(wstr)
array to pointer conversion	N_(wstr)
Temporarily block delivery of events	N_(wstr)
array to pointer conversion	N_(wstr)
Stop the innermost loop	N_(wstr)
array to pointer conversion	N_(wstr)
Temporarily halt execution of a script and launch an interactive debug prompt	N_(wstr)
array to pointer conversion	N_(wstr)
Run a builtin command instead of a function	N_(wstr)
array to pointer conversion	N_(wstr)
Conditionally execute a block of commands	N_(wstr)
array to pointer conversion	N_(wstr)
Change working directory	N_(wstr)
array to pointer conversion	N_(wstr)
Run a program instead of a function or builtin	N_(wstr)
array to pointer conversion	N_(wstr)
Set or get the commandline	N_(wstr)
array to pointer conversion	N_(wstr)
Edit command specific completions	N_(wstr)
array to pointer conversion	N_(wstr)
Search for a specified string in a list	N_(wstr)
array to pointer conversion	N_(wstr)
Skip the rest of the current lap of the innermost loop	N_(wstr)
array to pointer conversion	N_(wstr)
Count the number of arguments	N_(wstr)
array to pointer conversion	N_(wstr)
Remove job from job list	N_(wstr)
array to pointer conversion	N_(wstr)
Print arguments	N_(wstr)
array to pointer conversion	N_(wstr)
Evaluate block if condition is false	N_(wstr)
array to pointer conversion	N_(wstr)
Emit an event	N_(wstr)
array to pointer conversion	N_(wstr)
End a block of commands	N_(wstr)
array to pointer conversion	N_(wstr)
Evaluate a string as a statement	N_(wstr)
array to pointer conversion	N_(wstr)
Run command in current process	N_(wstr)
array to pointer conversion	N_(wstr)
Exit the shell	N_(wstr)
array to pointer conversion	N_(wstr)
Return an unsuccessful result	N_(wstr)
array to pointer conversion	N_(wstr)
Send job to foreground	N_(wstr)
array to pointer conversion	N_(wstr)
Perform a set of commands multiple times	N_(wstr)
array to pointer conversion	N_(wstr)
Define a new function	N_(wstr)
array to pointer conversion	N_(wstr)
List or remove functions	N_(wstr)
array to pointer conversion	N_(wstr)
History of commands executed by user	N_(wstr)
array to pointer conversion	N_(wstr)
Evaluate block if condition is true	N_(wstr)
array to pointer conversion	N_(wstr)
Print currently running jobs	N_(wstr)
array to pointer conversion	N_(wstr)
Evaluate math expressions	N_(wstr)
array to pointer conversion	N_(wstr)
Negate exit status of job	N_(wstr)
array to pointer conversion	N_(wstr)
Execute command if previous command failed	N_(wstr)
array to pointer conversion	N_(wstr)
Prints formatted text	N_(wstr)
array to pointer conversion	N_(wstr)
Print the working directory	N_(wstr)
array to pointer conversion	N_(wstr)
Generate random number	N_(wstr)
array to pointer conversion	N_(wstr)
Read a line of input into variables	N_(wstr)
array to pointer conversion	N_(wstr)
Convert path to absolute path without symlinks	N_(wstr)
array to pointer conversion	N_(wstr)
Stop the currently evaluated function	N_(wstr)
array to pointer conversion	N_(wstr)
Handle environment variables	N_(wstr)
array to pointer conversion	N_(wstr)
Set the terminal color	N_(wstr)
array to pointer conversion	N_(wstr)
Evaluate contents of file	N_(wstr)
array to pointer conversion	N_(wstr)
Return status information about fish	N_(wstr)
array to pointer conversion	N_(wstr)
Manipulate strings	N_(wstr)
array to pointer conversion	N_(wstr)
Conditionally execute a block of commands	N_(wstr)
array to pointer conversion	N_(wstr)
Test a condition	N_(wstr)
array to pointer conversion	N_(wstr)
Measure how long a command or block takes	N_(wstr)
array to pointer conversion	N_(wstr)
Return a successful result	N_(wstr)
array to pointer conversion	N_(wstr)
Set or get the shells resource usage limits	N_(wstr)
array to pointer conversion	N_(wstr)
Wait for background processes completed	N_(wstr)
array to pointer conversion	N_(wstr)
Perform a command multiple times	N_(wstr)
array to pointer conversion	N_(wstr)
0	no_argument
vector::reserve	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<completion_t, allocator<completion_t>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_start	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<completion_t, allocator<completion_t>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_finish	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to fish_iswalnum	iswalnum
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to c_str	BUILTIN_ERR_MIN_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_MIN_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected at least %d args, got %d
"	BUILTIN_ERR_MIN_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	_(wstr)
18446744073709551615	SIZE_MAX
(...)	SIZE_MAX
call to c_str	BUILTIN_ERR_MAX_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_MAX_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected at most %d args, got %d
"	BUILTIN_ERR_MAX_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_MAX_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_MAX_ARG_COUNT1
(reference dereference)	_(wstr)
call to empty	assert(expr)
long_options	assert(expr)
(const vector<woption, allocator<woption>>)...	assert(expr)
! ...	assert(expr)
call to back	assert(expr)
long_options	assert(expr)
(reference dereference)	assert(expr)
name	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... == ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!long_options.empty() && long_options.back().name == nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_argparse.cpp	assert(expr)
array to pointer conversion	assert(expr)
615	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int argparse_parse_args(argparse_cmd_opts_t &, const std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &, parser_t &, io_streams_t &)	__ASSERT_FUNCTION
int argparse_parse_args(argparse_cmd_opts_t &, const std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &, parser_t &, io_streams_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	BUILTIN_ERR_UNKNOWN
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_UNKNOWN
call to wgettext	_(wstr)
"%ls: Unknown option '%ls'
"	BUILTIN_ERR_UNKNOWN
array to pointer conversion	BUILTIN_ERR_UNKNOWN
(reference dereference)	BUILTIN_ERR_UNKNOWN
(reference dereference)	_(wstr)
call to operator!=	assert(expr)
found	assert(expr)
(const _Node_iterator_base<pair<const wchar_t, unique_ptr<option_spec_t, default_delete<option_spec_t>>>, false>)...	assert(expr)
(reference to)	assert(expr)
call to end	assert(expr)
opts	assert(expr)
(reference dereference)	assert(expr)
options	assert(expr)
(const _Node_iterator_base<pair<const wchar_t, unique_ptr<option_spec_t, default_delete<option_spec_t>>>, false>)...	assert(expr)
(reference to)	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
found != opts.options.end()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_argparse.cpp	assert(expr)
array to pointer conversion	assert(expr)
590	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int argparse_parse_flags(parser_t &, argparse_cmd_opts_t &, const wchar_t *, const woption *, const wchar_t *, int, wchar_t **, int *, io_streams_t &)	assert(expr)
int argparse_parse_flags(parser_t &, argparse_cmd_opts_t &, const wchar_t *, const woption *, const wchar_t *, int, wchar_t **, int *, io_streams_t &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
woptarg	assert(expr)
(bool)...	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!woptarg	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_argparse.cpp	assert(expr)
array to pointer conversion	assert(expr)
515	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int handle_flag(parser_t &, const argparse_cmd_opts_t &, option_spec_t *, int, const wchar_t *, io_streams_t &)	assert(expr)
int handle_flag(parser_t &, const argparse_cmd_opts_t &, option_spec_t *, int, const wchar_t *, io_streams_t &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
woptarg	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
woptarg	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_argparse.cpp	assert(expr)
array to pointer conversion	assert(expr)
538	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator!=	assert(expr)
found	assert(expr)
(const _Node_iterator_base<pair<const wchar_t, unique_ptr<option_spec_t, default_delete<option_spec_t>>>, false>)...	assert(expr)
(reference to)	assert(expr)
call to end	assert(expr)
opts	assert(expr)
(reference dereference)	assert(expr)
options	assert(expr)
(const _Node_iterator_base<pair<const wchar_t, unique_ptr<option_spec_t, default_delete<option_spec_t>>>, false>)...	assert(expr)
(reference to)	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
found != opts.options.end()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_argparse.cpp	assert(expr)
array to pointer conversion	assert(expr)
496	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int validate_and_store_implicit_int(parser_t &, const argparse_cmd_opts_t &, const wchar_t *, wgetopter_t &, int, io_streams_t &)	__ASSERT_FUNCTION
int validate_and_store_implicit_int(parser_t &, const argparse_cmd_opts_t &, const wchar_t *, wgetopter_t &, int, io_streams_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
2	optional_argument
1	required_argument
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid --min-args value '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid --max-args value '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_argparse.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
400	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: No option specs were provided
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Missing -- separator
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: No option specs were provided
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: An option spec must have a short flag letter
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to fish_iswalnum	iswalnum
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Short flag '%lc' invalid, must be alphanum or '#'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to fish_iswalnum	iswalnum
ins	assert(expr)
second	assert(expr)
Should have inserted long flag	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ins.second && ""Should have inserted long flag"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_argparse.cpp	assert(expr)
array to pointer conversion	assert(expr)
305	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool parse_option_spec(argparse_cmd_opts_t &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, io_streams_t &)	assert(expr)
bool parse_option_spec(argparse_cmd_opts_t &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, io_streams_t &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Short flag '#' must be followed by '-' and a long name
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Implicit int flag '%lc' already defined
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_INVALID_OPT_SPEC
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_INVALID_OPT_SPEC
call to wgettext	_(wstr)
"%ls: Invalid option spec '%ls' at char '%lc'
"	BUILTIN_ERR_INVALID_OPT_SPEC
array to pointer conversion	BUILTIN_ERR_INVALID_OPT_SPEC
(reference dereference)	BUILTIN_ERR_INVALID_OPT_SPEC
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_INVALID_OPT_SPEC
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_INVALID_OPT_SPEC
call to wgettext	_(wstr)
"%ls: Invalid option spec '%ls' at char '%lc'
"	BUILTIN_ERR_INVALID_OPT_SPEC
array to pointer conversion	BUILTIN_ERR_INVALID_OPT_SPEC
(reference dereference)	BUILTIN_ERR_INVALID_OPT_SPEC
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Implicit int flag '%lc' already defined
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Implicit int short flag '%lc' does not allow modifiers like '%lc'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_INVALID_OPT_SPEC
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_INVALID_OPT_SPEC
call to wgettext	_(wstr)
"%ls: Invalid option spec '%ls' at char '%lc'
"	BUILTIN_ERR_INVALID_OPT_SPEC
array to pointer conversion	BUILTIN_ERR_INVALID_OPT_SPEC
(reference dereference)	BUILTIN_ERR_INVALID_OPT_SPEC
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: exclusive flag string '%ls' is not valid
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: exclusive flag '%ls' is not valid
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Mutually exclusive flags '%ls' and `%ls` seen
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	no_argument
0	no_argument
1	required_argument
1	required_argument
0	no_argument
1	required_argument
1	required_argument
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	STDOUT_FILENO
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: There are no suitable jobs
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is not a valid job specifier
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Could not find job '%d'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
j	assert(expr)
0	assert(expr)
(job_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
j != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_bg.cpp	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int send_to_bg(parser_t &, io_streams_t &, job_t *)	__ASSERT_FUNCTION
int send_to_bg(parser_t &, io_streams_t &, job_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Can't put job %d, '%ls' to background because it is not under job control
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Send job %d '%ls' to background
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
call to basic_string	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
(reference to)	DEFAULT_BIND_MODE
Unknown literal	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
call to expression	_GLIBCXX_FORWARD(_Tp,__val)
Unknown literal	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
call to expression	_GLIBCXX_FORWARD(_Tp,__val)
Unknown literal	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
call to expression	_GLIBCXX_FORWARD(_Tp,__val)
1	STDOUT_FILENO
call to c_str	BUILTIN_ERR_BIND_MODE
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_BIND_MODE
call to wgettext	_(wstr)
"%ls: mode name '%ls' is not valid. See `help identifiers`.
"	BUILTIN_ERR_BIND_MODE
array to pointer conversion	BUILTIN_ERR_BIND_MODE
(reference dereference)	BUILTIN_ERR_BIND_MODE
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_BIND_MODE
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_BIND_MODE
call to wgettext	_(wstr)
"%ls: mode name '%ls' is not valid. See `help identifiers`.
"	BUILTIN_ERR_BIND_MODE
array to pointer conversion	BUILTIN_ERR_BIND_MODE
(reference dereference)	BUILTIN_ERR_BIND_MODE
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_bind.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
406	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
0	no_argument
1	required_argument
0	no_argument
0	no_argument
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: No binding found for key '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: No binding found for sequence '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
2	ENOENT
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: No key with name '%ls' found
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
84	EILSEQ
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Key with name '%ls' does not have any mapping
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Unknown error trying to bind to key named '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid state
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__x	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Can not specify scope when removing block
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: No blocks defined
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected scope	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_block.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
126	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_block.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
63	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	STDOUT_FILENO
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
--query and --names are mutually exclusive	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_builtin.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
56	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
0	no_argument
0	no_argument
2	__FSID_T_TYPE
(unsigned long)...	__FSID_T_TYPE
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
__oflag	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
64	__OPEN_NEEDS_MODE(oflag)
64	O_CREAT
... & ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
0	__OPEN_NEEDS_MODE(oflag)
... != ...	__OPEN_NEEDS_MODE(oflag)
__oflag	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
4194304	__OPEN_NEEDS_MODE(oflag)
4194304	__O_TMPFILE
65536	__OPEN_NEEDS_MODE(oflag)
65536	__O_TMPFILE
65536	__O_DIRECTORY
... | ...	__OPEN_NEEDS_MODE(oflag)
... | ...	__O_TMPFILE
(...)	__OPEN_NEEDS_MODE(oflag)
(...)	__O_TMPFILE
... & ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
4194304	__OPEN_NEEDS_MODE(oflag)
4194304	__O_TMPFILE
65536	__OPEN_NEEDS_MODE(oflag)
65536	__O_TMPFILE
65536	__O_DIRECTORY
... | ...	__OPEN_NEEDS_MODE(oflag)
... | ...	__O_TMPFILE
(...)	__OPEN_NEEDS_MODE(oflag)
(...)	__O_TMPFILE
... == ...	__OPEN_NEEDS_MODE(oflag)
... || ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
__oflag	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
64	__OPEN_NEEDS_MODE(oflag)
64	O_CREAT
... & ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
0	__OPEN_NEEDS_MODE(oflag)
... != ...	__OPEN_NEEDS_MODE(oflag)
__oflag	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
4194304	__OPEN_NEEDS_MODE(oflag)
4194304	__O_TMPFILE
65536	__OPEN_NEEDS_MODE(oflag)
65536	__O_TMPFILE
65536	__O_DIRECTORY
... | ...	__OPEN_NEEDS_MODE(oflag)
... | ...	__O_TMPFILE
(...)	__OPEN_NEEDS_MODE(oflag)
(...)	__O_TMPFILE
... & ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
4194304	__OPEN_NEEDS_MODE(oflag)
4194304	__O_TMPFILE
65536	__OPEN_NEEDS_MODE(oflag)
65536	__O_TMPFILE
65536	__O_DIRECTORY
... | ...	__OPEN_NEEDS_MODE(oflag)
... | ...	__O_TMPFILE
(...)	__OPEN_NEEDS_MODE(oflag)
(...)	__O_TMPFILE
... == ...	__OPEN_NEEDS_MODE(oflag)
... || ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
__oflag	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
64	__OPEN_NEEDS_MODE(oflag)
64	O_CREAT
... & ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
0	__OPEN_NEEDS_MODE(oflag)
... != ...	__OPEN_NEEDS_MODE(oflag)
__oflag	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
4194304	__OPEN_NEEDS_MODE(oflag)
4194304	__O_TMPFILE
65536	__OPEN_NEEDS_MODE(oflag)
65536	__O_TMPFILE
65536	__O_DIRECTORY
... | ...	__OPEN_NEEDS_MODE(oflag)
... | ...	__O_TMPFILE
(...)	__OPEN_NEEDS_MODE(oflag)
(...)	__O_TMPFILE
... & ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
4194304	__OPEN_NEEDS_MODE(oflag)
4194304	__O_TMPFILE
65536	__OPEN_NEEDS_MODE(oflag)
65536	__O_TMPFILE
65536	__O_DIRECTORY
... | ...	__OPEN_NEEDS_MODE(oflag)
... | ...	__O_TMPFILE
(...)	__OPEN_NEEDS_MODE(oflag)
(...)	__O_TMPFILE
... == ...	__OPEN_NEEDS_MODE(oflag)
... || ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
__oflag	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
64	__OPEN_NEEDS_MODE(oflag)
64	O_CREAT
... & ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
0	__OPEN_NEEDS_MODE(oflag)
... != ...	__OPEN_NEEDS_MODE(oflag)
__oflag	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
4194304	__OPEN_NEEDS_MODE(oflag)
4194304	__O_TMPFILE
65536	__OPEN_NEEDS_MODE(oflag)
65536	__O_TMPFILE
65536	__O_DIRECTORY
... | ...	__OPEN_NEEDS_MODE(oflag)
... | ...	__O_TMPFILE
(...)	__OPEN_NEEDS_MODE(oflag)
(...)	__O_TMPFILE
... & ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
4194304	__OPEN_NEEDS_MODE(oflag)
4194304	__O_TMPFILE
65536	__OPEN_NEEDS_MODE(oflag)
65536	__O_TMPFILE
65536	__O_DIRECTORY
... | ...	__OPEN_NEEDS_MODE(oflag)
... | ...	__O_TMPFILE
(...)	__OPEN_NEEDS_MODE(oflag)
(...)	__O_TMPFILE
... == ...	__OPEN_NEEDS_MODE(oflag)
... || ...	__OPEN_NEEDS_MODE(oflag)
(...)	__OPEN_NEEDS_MODE(oflag)
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
call to __builtin_va_arg_pack	__va_arg_pack()
call to __builtin_va_arg_pack_len	__va_arg_pack_len()
call to __builtin_va_arg_pack	__va_arg_pack()
declaration of __openat64_missing_mode	__errordecl(name,msg)
declaration of __openat64_too_many_args	__errordecl(name,msg)
declaration of __openat64_alias	__REDIRECT(name,proto,alias)
declaration of __openat_missing_mode	__errordecl(name,msg)
declaration of __openat_too_many_args	__errordecl(name,msg)
declaration of __openat_alias	__REDIRECT(name,proto,alias)
declaration of __open64_missing_mode	__errordecl(name,msg)
declaration of __open64_too_many_args	__errordecl(name,msg)
declaration of __open64_alias	__REDIRECT(name,proto,alias)
declaration of __open_missing_mode	__errordecl(name,msg)
declaration of __open_too_many_args	__errordecl(name,msg)
declaration of __open_alias	__REDIRECT(name,proto,alias)
definition of fstatat64	__NTH(fct)
definition of fstatat64	__NTH(fct)
definition of fstatat64	__NTH(fct)
definition of fstatat64	__NTH(fct)
definition of fstatat64	__NTH(fct)
definition of fstatat64	__NTH(fct)
definition of fstatat64	__NTH(fct)
definition of fstatat64	__NTH(fct)
definition of fstatat64	__NTH(fct)
1	_STAT_VER
1	_STAT_VER_LINUX
definition of fstat64	__NTH(fct)
definition of fstat64	__NTH(fct)
definition of fstat64	__NTH(fct)
definition of fstat64	__NTH(fct)
definition of fstat64	__NTH(fct)
definition of fstat64	__NTH(fct)
definition of fstat64	__NTH(fct)
definition of fstat64	__NTH(fct)
definition of fstat64	__NTH(fct)
1	_STAT_VER
1	_STAT_VER_LINUX
definition of lstat64	__NTH(fct)
definition of lstat64	__NTH(fct)
definition of lstat64	__NTH(fct)
definition of lstat64	__NTH(fct)
definition of lstat64	__NTH(fct)
definition of lstat64	__NTH(fct)
definition of lstat64	__NTH(fct)
definition of lstat64	__NTH(fct)
definition of lstat64	__NTH(fct)
1	_STAT_VER
1	_STAT_VER_LINUX
definition of stat64	__NTH(fct)
definition of stat64	__NTH(fct)
definition of stat64	__NTH(fct)
definition of stat64	__NTH(fct)
definition of stat64	__NTH(fct)
definition of stat64	__NTH(fct)
definition of stat64	__NTH(fct)
definition of stat64	__NTH(fct)
definition of stat64	__NTH(fct)
1	_STAT_VER
1	_STAT_VER_LINUX
definition of mknodat	__NTH(fct)
definition of mknodat	__NTH(fct)
definition of mknodat	__NTH(fct)
definition of mknodat	__NTH(fct)
definition of mknodat	__NTH(fct)
definition of mknodat	__NTH(fct)
definition of mknodat	__NTH(fct)
definition of mknodat	__NTH(fct)
definition of mknodat	__NTH(fct)
0	_MKNOD_VER
definition of mknod	__NTH(fct)
definition of mknod	__NTH(fct)
definition of mknod	__NTH(fct)
definition of mknod	__NTH(fct)
definition of mknod	__NTH(fct)
definition of mknod	__NTH(fct)
definition of mknod	__NTH(fct)
definition of mknod	__NTH(fct)
definition of mknod	__NTH(fct)
0	_MKNOD_VER
definition of fstatat	__NTH(fct)
definition of fstatat	__NTH(fct)
definition of fstatat	__NTH(fct)
definition of fstatat	__NTH(fct)
definition of fstatat	__NTH(fct)
definition of fstatat	__NTH(fct)
definition of fstatat	__NTH(fct)
definition of fstatat	__NTH(fct)
definition of fstatat	__NTH(fct)
1	_STAT_VER
1	_STAT_VER_LINUX
definition of fstat	__NTH(fct)
definition of fstat	__NTH(fct)
definition of fstat	__NTH(fct)
definition of fstat	__NTH(fct)
definition of fstat	__NTH(fct)
definition of fstat	__NTH(fct)
definition of fstat	__NTH(fct)
definition of fstat	__NTH(fct)
definition of fstat	__NTH(fct)
1	_STAT_VER
1	_STAT_VER_LINUX
definition of lstat	__NTH(fct)
definition of lstat	__NTH(fct)
definition of lstat	__NTH(fct)
definition of lstat	__NTH(fct)
definition of lstat	__NTH(fct)
definition of lstat	__NTH(fct)
definition of lstat	__NTH(fct)
definition of lstat	__NTH(fct)
definition of lstat	__NTH(fct)
1	_STAT_VER
1	_STAT_VER_LINUX
definition of stat	__NTH(fct)
definition of stat	__NTH(fct)
definition of stat	__NTH(fct)
definition of stat	__NTH(fct)
definition of stat	__NTH(fct)
definition of stat	__NTH(fct)
definition of stat	__NTH(fct)
definition of stat	__NTH(fct)
definition of stat	__NTH(fct)
1	_STAT_VER
1	_STAT_VER_LINUX
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Could not find home directory
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
20	ENOTDIR
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is not a directory
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
2	ENOENT
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: The directory '%ls' does not exist
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
1	EROTTEN
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is a rotten symlink
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Unknown error trying to locate directory '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	O_RDONLY
buffer	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Permission denied: '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is not a directory
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = env_var_t]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = env_var_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_command.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
65	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	STDOUT_FILENO
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_commandline.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
276	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	BUILTIN_ERR_COMBO
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO
call to wgettext	_(wstr)
"%ls: Invalid combination of options
"	BUILTIN_ERR_COMBO
array to pointer conversion	BUILTIN_ERR_COMBO
(reference dereference)	BUILTIN_ERR_COMBO
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: Unknown input function '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to wgettext	_(wstr)
"%ls: Too many arguments
"	BUILTIN_ERR_TOO_MANY_ARGUMENTS
array to pointer conversion	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO
call to wgettext	_(wstr)
"%ls: Invalid combination of options
"	BUILTIN_ERR_COMBO
array to pointer conversion	BUILTIN_ERR_COMBO
(reference dereference)	BUILTIN_ERR_COMBO
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected buffer_part	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_commandline.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
411	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	TOK_ACCEPT_UNFINISHED
(tok_flags_t)...	TOK_ACCEPT_UNFINISHED
call to __fish_assert	DIE(msg)
unexpected append_mode	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_commandline.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
76	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = tok_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = tok_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = readline_cmd_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = readline_cmd_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
bitset::set	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
%s: __position (which is %zu) >= _Nb (which is %zu)	__N(msgid)
(...)	__N(msgid)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
builtin_complete	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid token '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: -s requires a non-empty string
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: -l requires a non-empty string
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: -o requires a non-empty string
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_complete.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
263	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to wgettext	_(wstr)
"%ls: Too many arguments
"	BUILTIN_ERR_TOO_MANY_ARGUMENTS
array to pointer conversion	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	_(wstr)
call to libdata	assert(expr)
parser	assert(expr)
(reference dereference)	assert(expr)
(reference dereference)	assert(expr)
builtin_complete_current_commandline	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!parser.libdata().builtin_complete_current_commandline	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
344	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int builtin_complete(parser_t &, io_streams_t &, wchar_t **)	assert(expr)
int builtin_complete(parser_t &, io_streams_t &, wchar_t **)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
1	required_argument
1	required_argument
1	required_argument
1	required_argument
1	required_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
1	required_argument
2	optional_argument
0	no_argument
0	no_argument
bitset::set	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
%s: __position (which is %zu) >= _Nb (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Key not specified
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_contains.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
50	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
0	no_argument
1024	_SIGSET_NWORDS
(unsigned long)...	_SIGSET_NWORDS
8	_SIGSET_NWORDS
(unsigned long)...	_SIGSET_NWORDS
sizeof(unsigned long)	_SIGSET_NWORDS
... * ...	_SIGSET_NWORDS
(...)	_SIGSET_NWORDS
... / ...	_SIGSET_NWORDS
(...)	_SIGSET_NWORDS
64	__SIGEV_MAX_SIZE
64	__SIGEV_PAD_SIZE
(unsigned long)...	__SIGEV_MAX_SIZE
(unsigned long)...	__SIGEV_PAD_SIZE
sizeof(int)	__SIGEV_PAD_SIZE
... / ...	__SIGEV_PAD_SIZE
(...)	__SIGEV_PAD_SIZE
4	__SIGEV_PAD_SIZE
(unsigned long)...	__SIGEV_PAD_SIZE
... - ...	__SIGEV_PAD_SIZE
(...)	__SIGEV_PAD_SIZE
4	__SIZEOF_PTHREAD_BARRIERATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIERATTR_T
32	__SIZEOF_PTHREAD_BARRIER_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIER_T
8	__SIZEOF_PTHREAD_RWLOCKATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCKATTR_T
56	__SIZEOF_PTHREAD_RWLOCK_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCK_T
4	__SIZEOF_PTHREAD_CONDATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_CONDATTR_T
4	__SIZEOF_PTHREAD_MUTEXATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEXATTR_T
56	__SIZEOF_PTHREAD_ATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_ATTR_T
48	__SIZEOF_PTHREAD_COND_T
(unsigned long)...	__SIZEOF_PTHREAD_COND_T
40	__SIZEOF_PTHREAD_MUTEX_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEX_T
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: There are no suitable jobs
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is not a valid job specifier
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Could not find job '%d'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Unknown job '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: job %d ('%ls') was stopped and has been signalled to continue.
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
18	SIGCONT
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__x	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = int]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = int]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
cmd	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
2147483647	UINT_MAX
2147483647	INT_MAX
(unsigned int)...	UINT_MAX
(unsigned int)...	INT_MAX
2	UINT_MAX
... * ...	UINT_MAX
1	UINT_MAX
... + ...	UINT_MAX
(...)	UINT_MAX
2147483647	UINT_MAX
2147483647	INT_MAX
(unsigned int)...	UINT_MAX
(unsigned int)...	INT_MAX
2	UINT_MAX
... * ...	UINT_MAX
1	UINT_MAX
... + ...	UINT_MAX
(...)	UINT_MAX
base	assert(expr)
8	assert(expr)
(unsigned int)...	assert(expr)
... == ...	assert(expr)
base	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
base == 8 || base == 16	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_echo.cpp	assert(expr)
array to pointer conversion	assert(expr)
74	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned int builtin_echo_digit(wchar_t, unsigned int)	__ASSERT_FUNCTION
unsigned int builtin_echo_digit(wchar_t, unsigned int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
2147483647	UINT_MAX
2147483647	INT_MAX
(unsigned int)...	UINT_MAX
(unsigned int)...	INT_MAX
2	UINT_MAX
... * ...	UINT_MAX
1	UINT_MAX
... + ...	UINT_MAX
(...)	UINT_MAX
2147483647	UINT_MAX
2147483647	INT_MAX
(unsigned int)...	UINT_MAX
(unsigned int)...	INT_MAX
2	UINT_MAX
... * ...	UINT_MAX
1	UINT_MAX
... + ...	UINT_MAX
(...)	UINT_MAX
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
streams	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_echo.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
58	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
1	__try
0	__catch(X)
1	STDOUT_FILENO
1	STDOUT_FILENO
2	STDERR_FILENO
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	STDOUT_FILENO
call to c_str	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to wgettext	_(wstr)
"%ls: Too many arguments
"	BUILTIN_ERR_TOO_MANY_ARGUMENTS
array to pointer conversion	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
streams	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_exit.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
51	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: There are no suitable jobs
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Ambiguous job
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is not a job
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: No suitable job: %d
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Can't put job %d, '%ls' to foreground because it is not under job control
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	FG_MSG
call to c_str	_(wstr)
call to wgettext	FG_MSG
call to wgettext	_(wstr)
"Send job %d, '%ls' to foreground
"	FG_MSG
array to pointer conversion	FG_MSG
(reference dereference)	FG_MSG
(reference dereference)	_(wstr)
stderr	stderr
call to c_str	FG_MSG
call to c_str	_(wstr)
call to wgettext	FG_MSG
call to wgettext	_(wstr)
"Send job %d, '%ls' to foreground
"	FG_MSG
array to pointer conversion	FG_MSG
(reference dereference)	FG_MSG
(reference dereference)	_(wstr)
Unknown literal	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to expression	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
Unknown literal	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to expression	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	STDOUT_FILENO
8	CHAR_BIT
(unsigned long)...	CHAR_BIT
call to operator bool	assert(expr)
source	assert(expr)
(reference dereference)	assert(expr)
(const __shared_ptr<const parsed_source_t, _S_atomic>)...	assert(expr)
Missing source in builtin_function	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"source && ""Missing source in builtin_function"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_function.cpp	assert(expr)
array to pointer conversion	assert(expr)
204	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int builtin_function(parser_t &, io_streams_t &, const std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &, const std::shared_ptr<const parsed_source_t> &, const ast::block_statement_t &)	__ASSERT_FUNCTION
int builtin_function(parser_t &, io_streams_t &, const std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &, const std::shared_ptr<const parsed_source_t> &, const ast::block_statement_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	BUILTIN_ERR_VARNAME
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_VARNAME
call to wgettext	_(wstr)
"%ls: Variable name '%ls' is not valid. See `help identifiers`.
"	BUILTIN_ERR_VARNAME
array to pointer conversion	BUILTIN_ERR_VARNAME
(reference dereference)	BUILTIN_ERR_VARNAME
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: Unexpected positional argument '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: Expected function name	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: Illegal function name '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: The name '%ls' is reserved, and cannot be used as a function name	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: Unexpected positional argument '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: Unknown signal '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_VARNAME
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_VARNAME
call to wgettext	_(wstr)
"%ls: Variable name '%ls' is not valid. See `help identifiers`.
"	BUILTIN_ERR_VARNAME
array to pointer conversion	BUILTIN_ERR_VARNAME
(reference dereference)	BUILTIN_ERR_VARNAME
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: Cannot find calling job for event handler	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: Invalid process id '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_VARNAME
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_VARNAME
call to wgettext	_(wstr)
"%ls: Variable name '%ls' is not valid. See `help identifiers`.
"	BUILTIN_ERR_VARNAME
array to pointer conversion	BUILTIN_ERR_VARNAME
(reference dereference)	BUILTIN_ERR_VARNAME
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_function.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
166	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
1	required_argument
1	required_argument
1	required_argument
1	required_argument
1	required_argument
1	required_argument
1	required_argument
0	no_argument
1	required_argument
0	no_argument
1	required_argument
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to c_str	BUILTIN_ERR_COMBO
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO
call to wgettext	_(wstr)
"%ls: Invalid combination of options
"	BUILTIN_ERR_COMBO
array to pointer conversion	BUILTIN_ERR_COMBO
(reference dereference)	BUILTIN_ERR_COMBO
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Expected exactly one function name
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Function '%ls' does not exist
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Expected generic | variable | signal | exit | job-id for --handlers-type
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
1	STDOUT_FILENO
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Expected exactly two names (current function name, and new function name)
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Function '%ls' does not exist
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Illegal function name '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Function '%ls' already exists. Cannot create copy '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
1	STDOUT_FILENO
1	STDOUT_FILENO
call to empty	assert(expr)
name	assert(expr)
(reference dereference)	assert(expr)
! ...	assert(expr)
Empty name	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!name.empty() && ""Empty name"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_functions.cpp	assert(expr)
array to pointer conversion	assert(expr)
134	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> functions_def(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> functions_def(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
props	assert(expr)
(const __shared_ptr<const function_properties_t, _S_atomic>)...	assert(expr)
Should have function properties	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"props && ""Should have function properties"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_functions.cpp	assert(expr)
array to pointer conversion	assert(expr)
163	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
unexpected next->type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_functions.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
196	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_functions.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
123	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = event_type_t]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = event_type_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = event_type_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = event_type_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
call to c_str	_(wstr)
call to wgettext	_(wstr)
"builtin history delete only supports --exact
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"builtin history delete --exact requires --case-sensitive
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
Unexpected HIST_UNDEF seen	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_history.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
307	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_history.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
193	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: you cannot use any options with the %ls command
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
you cannot do both '%ls' and '%ls' in the same invocation	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
0	no_argument
0	no_argument
0	no_argument
2	optional_argument
0	no_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1024	_SIGSET_NWORDS
(unsigned long)...	_SIGSET_NWORDS
8	_SIGSET_NWORDS
(unsigned long)...	_SIGSET_NWORDS
sizeof(unsigned long)	_SIGSET_NWORDS
... * ...	_SIGSET_NWORDS
(...)	_SIGSET_NWORDS
... / ...	_SIGSET_NWORDS
(...)	_SIGSET_NWORDS
1024	__FD_SETSIZE
8	__NFDBITS
sizeof(__fd_mask)	__NFDBITS
(int)...	__NFDBITS
... * ...	__NFDBITS
(...)	__NFDBITS
1	STDOUT_FILENO
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_jobs.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
177	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: '%ls' is not a valid job id	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is not a valid process id
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: No suitable job: %ls
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: There are no jobs
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Job	Group	"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"CPU	"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"State	Command
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
stopped	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
running	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Group
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Process
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Command
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected mode	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_jobs.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
118	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
declaration of __issignaling	__MATHDECL_1(type,function,suffix,args)
declaration of __issignaling	__CONCAT(x,y)
declaration of __issignaling	__MATH_PRECNAME(name,r)
declaration of __iseqsig	__MATHDECL_1(type,function,suffix,args)
declaration of __iseqsig	__CONCAT(x,y)
declaration of __iseqsig	__MATH_PRECNAME(name,r)
declaration of __isnan	__MATHDECL_1(type,function,suffix,args)
declaration of __isnan	__CONCAT(x,y)
declaration of __isnan	__MATH_PRECNAME(name,r)
declaration of __finite	__MATHDECL_1(type,function,suffix,args)
declaration of __finite	__CONCAT(x,y)
declaration of __finite	__MATH_PRECNAME(name,r)
declaration of __isinf	__MATHDECL_1(type,function,suffix,args)
declaration of __isinf	__CONCAT(x,y)
declaration of __isinf	__MATH_PRECNAME(name,r)
declaration of __signbit	__MATHDECL_1(type,function,suffix,args)
declaration of __signbit	__CONCAT(x,y)
declaration of __signbit	__MATH_PRECNAME(name,r)
declaration of __fpclassify	__MATHDECL_1(type,function,suffix,args)
declaration of __fpclassify	__CONCAT(x,y)
declaration of __fpclassify	__MATH_PRECNAME(name,r)
declaration of __scalb	__MATHCALL(function,suffix,args)
declaration of __scalb	__CONCAT(x,y)
declaration of __scalb	__MATH_PRECNAME(name,r)
declaration of __scalb	__MATHDECL_1(type,function,suffix,args)
declaration of __scalb	__MATHDECL(type,function,suffix,args)
declaration of scalb	__MATHCALL(function,suffix,args)
declaration of scalb	__MATHDECL(type,function,suffix,args)
declaration of scalb	__CONCAT(x,y)
declaration of scalb	__MATH_PRECNAME(name,r)
declaration of scalb	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsig	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsig	__CONCAT(x,y)
declaration of setpayloadsig	__MATH_PRECNAME(name,r)
declaration of setpayload	__MATHDECL_1(type,function,suffix,args)
declaration of setpayload	__CONCAT(x,y)
declaration of setpayload	__MATH_PRECNAME(name,r)
declaration of __getpayload	__MATHCALL(function,suffix,args)
declaration of __getpayload	__CONCAT(x,y)
declaration of __getpayload	__MATH_PRECNAME(name,r)
declaration of __getpayload	__MATHDECL_1(type,function,suffix,args)
declaration of __getpayload	__MATHDECL(type,function,suffix,args)
declaration of getpayload	__MATHCALL(function,suffix,args)
declaration of getpayload	__MATHDECL(type,function,suffix,args)
declaration of getpayload	__CONCAT(x,y)
declaration of getpayload	__MATH_PRECNAME(name,r)
declaration of getpayload	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalize	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalize	__CONCAT(x,y)
declaration of canonicalize	__MATH_PRECNAME(name,r)
declaration of totalordermag	__MATHDECL_1(type,function,suffix,args)
declaration of totalordermag	__CONCAT(x,y)
declaration of totalordermag	__MATH_PRECNAME(name,r)
declaration of totalorder	__MATHDECL_1(type,function,suffix,args)
declaration of totalorder	__CONCAT(x,y)
declaration of totalorder	__MATH_PRECNAME(name,r)
declaration of __fminmag	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminmag	__CONCAT(x,y)
declaration of __fminmag	__MATH_PRECNAME(name,r)
declaration of __fminmag	__MATHDECL_1(type,function,suffix,args)
declaration of __fminmag	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmag	__MATHCALLX(function,suffix,args,attrib)
declaration of fminmag	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmag	__CONCAT(x,y)
declaration of fminmag	__MATH_PRECNAME(name,r)
declaration of fminmag	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmag	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxmag	__CONCAT(x,y)
declaration of __fmaxmag	__MATH_PRECNAME(name,r)
declaration of __fmaxmag	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmag	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmag	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxmag	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmag	__CONCAT(x,y)
declaration of fmaxmag	__MATH_PRECNAME(name,r)
declaration of fmaxmag	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpx	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpx	__CONCAT(x,y)
declaration of __ufromfpx	__MATH_PRECNAME(name,r)
declaration of __ufromfpx	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpx	__MATHDECL(type,function,suffix,args)
declaration of ufromfpx	__CONCAT(x,y)
declaration of ufromfpx	__MATH_PRECNAME(name,r)
declaration of ufromfpx	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpx	__MATHDECL(type,function,suffix,args)
declaration of __fromfpx	__CONCAT(x,y)
declaration of __fromfpx	__MATH_PRECNAME(name,r)
declaration of __fromfpx	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpx	__MATHDECL(type,function,suffix,args)
declaration of fromfpx	__CONCAT(x,y)
declaration of fromfpx	__MATH_PRECNAME(name,r)
declaration of fromfpx	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfp	__MATHDECL(type,function,suffix,args)
declaration of __ufromfp	__CONCAT(x,y)
declaration of __ufromfp	__MATH_PRECNAME(name,r)
declaration of __ufromfp	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfp	__MATHDECL(type,function,suffix,args)
declaration of ufromfp	__CONCAT(x,y)
declaration of ufromfp	__MATH_PRECNAME(name,r)
declaration of ufromfp	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfp	__MATHDECL(type,function,suffix,args)
declaration of __fromfp	__CONCAT(x,y)
declaration of __fromfp	__MATH_PRECNAME(name,r)
declaration of __fromfp	__MATHDECL_1(type,function,suffix,args)
declaration of fromfp	__MATHDECL(type,function,suffix,args)
declaration of fromfp	__CONCAT(x,y)
declaration of fromfp	__MATH_PRECNAME(name,r)
declaration of fromfp	__MATHDECL_1(type,function,suffix,args)
declaration of __roundeven	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundeven	__CONCAT(x,y)
declaration of __roundeven	__MATH_PRECNAME(name,r)
declaration of __roundeven	__MATHDECL_1(type,function,suffix,args)
declaration of __roundeven	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundeven	__MATHCALLX(function,suffix,args,attrib)
declaration of roundeven	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundeven	__CONCAT(x,y)
declaration of roundeven	__MATH_PRECNAME(name,r)
declaration of roundeven	__MATHDECL_1(type,function,suffix,args)
declaration of __fma	__MATHCALL(function,suffix,args)
declaration of __fma	__CONCAT(x,y)
declaration of __fma	__MATH_PRECNAME(name,r)
declaration of __fma	__MATHDECL_1(type,function,suffix,args)
declaration of __fma	__MATHDECL(type,function,suffix,args)
declaration of fma	__MATHCALL(function,suffix,args)
declaration of fma	__MATHDECL(type,function,suffix,args)
declaration of fma	__CONCAT(x,y)
declaration of fma	__MATH_PRECNAME(name,r)
declaration of fma	__MATHDECL_1(type,function,suffix,args)
declaration of __fmin	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmin	__CONCAT(x,y)
declaration of __fmin	__MATH_PRECNAME(name,r)
declaration of __fmin	__MATHDECL_1(type,function,suffix,args)
declaration of __fmin	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmin	__MATHCALLX(function,suffix,args,attrib)
declaration of fmin	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmin	__CONCAT(x,y)
declaration of fmin	__MATH_PRECNAME(name,r)
declaration of fmin	__MATHDECL_1(type,function,suffix,args)
declaration of __fmax	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmax	__CONCAT(x,y)
declaration of __fmax	__MATH_PRECNAME(name,r)
declaration of __fmax	__MATHDECL_1(type,function,suffix,args)
declaration of __fmax	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmax	__MATHCALLX(function,suffix,args,attrib)
declaration of fmax	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmax	__CONCAT(x,y)
declaration of fmax	__MATH_PRECNAME(name,r)
declaration of fmax	__MATHDECL_1(type,function,suffix,args)
declaration of __fdim	__MATHCALL(function,suffix,args)
declaration of __fdim	__CONCAT(x,y)
declaration of __fdim	__MATH_PRECNAME(name,r)
declaration of __fdim	__MATHDECL_1(type,function,suffix,args)
declaration of __fdim	__MATHDECL(type,function,suffix,args)
declaration of fdim	__MATHCALL(function,suffix,args)
declaration of fdim	__MATHDECL(type,function,suffix,args)
declaration of fdim	__CONCAT(x,y)
declaration of fdim	__MATH_PRECNAME(name,r)
declaration of fdim	__MATHDECL_1(type,function,suffix,args)
declaration of __llround	__MATHDECL(type,function,suffix,args)
declaration of __llround	__CONCAT(x,y)
declaration of __llround	__MATH_PRECNAME(name,r)
declaration of __llround	__MATHDECL_1(type,function,suffix,args)
declaration of llround	__MATHDECL(type,function,suffix,args)
declaration of llround	__CONCAT(x,y)
declaration of llround	__MATH_PRECNAME(name,r)
declaration of llround	__MATHDECL_1(type,function,suffix,args)
declaration of __lround	__MATHDECL(type,function,suffix,args)
declaration of __lround	__CONCAT(x,y)
declaration of __lround	__MATH_PRECNAME(name,r)
declaration of __lround	__MATHDECL_1(type,function,suffix,args)
declaration of lround	__MATHDECL(type,function,suffix,args)
declaration of lround	__CONCAT(x,y)
declaration of lround	__MATH_PRECNAME(name,r)
declaration of lround	__MATHDECL_1(type,function,suffix,args)
declaration of __llrint	__MATHDECL(type,function,suffix,args)
declaration of __llrint	__CONCAT(x,y)
declaration of __llrint	__MATH_PRECNAME(name,r)
declaration of __llrint	__MATHDECL_1(type,function,suffix,args)
declaration of llrint	__MATHDECL(type,function,suffix,args)
declaration of llrint	__CONCAT(x,y)
declaration of llrint	__MATH_PRECNAME(name,r)
declaration of llrint	__MATHDECL_1(type,function,suffix,args)
declaration of __lrint	__MATHDECL(type,function,suffix,args)
declaration of __lrint	__CONCAT(x,y)
declaration of __lrint	__MATH_PRECNAME(name,r)
declaration of __lrint	__MATHDECL_1(type,function,suffix,args)
declaration of lrint	__MATHDECL(type,function,suffix,args)
declaration of lrint	__CONCAT(x,y)
declaration of lrint	__MATH_PRECNAME(name,r)
declaration of lrint	__MATHDECL_1(type,function,suffix,args)
declaration of __remquo	__MATHCALL(function,suffix,args)
declaration of __remquo	__CONCAT(x,y)
declaration of __remquo	__MATH_PRECNAME(name,r)
declaration of __remquo	__MATHDECL_1(type,function,suffix,args)
declaration of __remquo	__MATHDECL(type,function,suffix,args)
declaration of remquo	__MATHCALL(function,suffix,args)
declaration of remquo	__MATHDECL(type,function,suffix,args)
declaration of remquo	__CONCAT(x,y)
declaration of remquo	__MATH_PRECNAME(name,r)
declaration of remquo	__MATHDECL_1(type,function,suffix,args)
declaration of __trunc	__MATHCALLX(function,suffix,args,attrib)
declaration of __trunc	__CONCAT(x,y)
declaration of __trunc	__MATH_PRECNAME(name,r)
declaration of __trunc	__MATHDECL_1(type,function,suffix,args)
declaration of __trunc	__MATHDECLX(type,function,suffix,args,attrib)
declaration of trunc	__MATHCALLX(function,suffix,args,attrib)
declaration of trunc	__MATHDECLX(type,function,suffix,args,attrib)
declaration of trunc	__CONCAT(x,y)
declaration of trunc	__MATH_PRECNAME(name,r)
declaration of trunc	__MATHDECL_1(type,function,suffix,args)
declaration of __round	__MATHCALLX(function,suffix,args,attrib)
declaration of __round	__CONCAT(x,y)
declaration of __round	__MATH_PRECNAME(name,r)
declaration of __round	__MATHDECL_1(type,function,suffix,args)
declaration of __round	__MATHDECLX(type,function,suffix,args,attrib)
declaration of round	__MATHCALLX(function,suffix,args,attrib)
declaration of round	__MATHDECLX(type,function,suffix,args,attrib)
declaration of round	__CONCAT(x,y)
declaration of round	__MATH_PRECNAME(name,r)
declaration of round	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyint	__MATHCALL(function,suffix,args)
declaration of __nearbyint	__CONCAT(x,y)
declaration of __nearbyint	__MATH_PRECNAME(name,r)
declaration of __nearbyint	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyint	__MATHDECL(type,function,suffix,args)
declaration of nearbyint	__MATHCALL(function,suffix,args)
declaration of nearbyint	__MATHDECL(type,function,suffix,args)
declaration of nearbyint	__CONCAT(x,y)
declaration of nearbyint	__MATH_PRECNAME(name,r)
declaration of nearbyint	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbln	__MATHCALL(function,suffix,args)
declaration of __scalbln	__CONCAT(x,y)
declaration of __scalbln	__MATH_PRECNAME(name,r)
declaration of __scalbln	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbln	__MATHDECL(type,function,suffix,args)
declaration of scalbln	__MATHCALL(function,suffix,args)
declaration of scalbln	__MATHDECL(type,function,suffix,args)
declaration of scalbln	__CONCAT(x,y)
declaration of scalbln	__MATH_PRECNAME(name,r)
declaration of scalbln	__MATHDECL_1(type,function,suffix,args)
declaration of __llogb	__MATHDECL(type,function,suffix,args)
declaration of __llogb	__CONCAT(x,y)
declaration of __llogb	__MATH_PRECNAME(name,r)
declaration of __llogb	__MATHDECL_1(type,function,suffix,args)
declaration of llogb	__MATHDECL(type,function,suffix,args)
declaration of llogb	__CONCAT(x,y)
declaration of llogb	__MATH_PRECNAME(name,r)
declaration of llogb	__MATHDECL_1(type,function,suffix,args)
declaration of __ilogb	__MATHDECL(type,function,suffix,args)
declaration of __ilogb	__CONCAT(x,y)
declaration of __ilogb	__MATH_PRECNAME(name,r)
declaration of __ilogb	__MATHDECL_1(type,function,suffix,args)
declaration of ilogb	__MATHDECL(type,function,suffix,args)
declaration of ilogb	__CONCAT(x,y)
declaration of ilogb	__MATH_PRECNAME(name,r)
declaration of ilogb	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbn	__MATHCALL(function,suffix,args)
declaration of __scalbn	__CONCAT(x,y)
declaration of __scalbn	__MATH_PRECNAME(name,r)
declaration of __scalbn	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbn	__MATHDECL(type,function,suffix,args)
declaration of scalbn	__MATHCALL(function,suffix,args)
declaration of scalbn	__MATHDECL(type,function,suffix,args)
declaration of scalbn	__CONCAT(x,y)
declaration of scalbn	__MATH_PRECNAME(name,r)
declaration of scalbn	__MATHDECL_1(type,function,suffix,args)
declaration of __remainder	__MATHCALL(function,suffix,args)
declaration of __remainder	__CONCAT(x,y)
declaration of __remainder	__MATH_PRECNAME(name,r)
declaration of __remainder	__MATHDECL_1(type,function,suffix,args)
declaration of __remainder	__MATHDECL(type,function,suffix,args)
declaration of remainder	__MATHCALL(function,suffix,args)
declaration of remainder	__MATHDECL(type,function,suffix,args)
declaration of remainder	__CONCAT(x,y)
declaration of remainder	__MATH_PRECNAME(name,r)
declaration of remainder	__MATHDECL_1(type,function,suffix,args)
declaration of __nextup	__MATHCALL(function,suffix,args)
declaration of __nextup	__CONCAT(x,y)
declaration of __nextup	__MATH_PRECNAME(name,r)
declaration of __nextup	__MATHDECL_1(type,function,suffix,args)
declaration of __nextup	__MATHDECL(type,function,suffix,args)
declaration of nextup	__MATHCALL(function,suffix,args)
declaration of nextup	__MATHDECL(type,function,suffix,args)
declaration of nextup	__CONCAT(x,y)
declaration of nextup	__MATH_PRECNAME(name,r)
declaration of nextup	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdown	__MATHCALL(function,suffix,args)
declaration of __nextdown	__CONCAT(x,y)
declaration of __nextdown	__MATH_PRECNAME(name,r)
declaration of __nextdown	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdown	__MATHDECL(type,function,suffix,args)
declaration of nextdown	__MATHCALL(function,suffix,args)
declaration of nextdown	__MATHDECL(type,function,suffix,args)
declaration of nextdown	__CONCAT(x,y)
declaration of nextdown	__MATH_PRECNAME(name,r)
declaration of nextdown	__MATHDECL_1(type,function,suffix,args)
declaration of __nexttoward	__MATHCALL(function,suffix,args)
declaration of __nexttoward	__CONCAT(x,y)
declaration of __nexttoward	__MATH_PRECNAME(name,r)
declaration of __nexttoward	__MATHDECL_1(type,function,suffix,args)
declaration of __nexttoward	__MATHDECL(type,function,suffix,args)
declaration of nexttoward	__MATHCALL(function,suffix,args)
declaration of nexttoward	__MATHDECL(type,function,suffix,args)
declaration of nexttoward	__CONCAT(x,y)
declaration of nexttoward	__MATH_PRECNAME(name,r)
declaration of nexttoward	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafter	__MATHCALL(function,suffix,args)
declaration of __nextafter	__CONCAT(x,y)
declaration of __nextafter	__MATH_PRECNAME(name,r)
declaration of __nextafter	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafter	__MATHDECL(type,function,suffix,args)
declaration of nextafter	__MATHCALL(function,suffix,args)
declaration of nextafter	__MATHDECL(type,function,suffix,args)
declaration of nextafter	__CONCAT(x,y)
declaration of nextafter	__MATH_PRECNAME(name,r)
declaration of nextafter	__MATHDECL_1(type,function,suffix,args)
declaration of __rint	__MATHCALL(function,suffix,args)
declaration of __rint	__CONCAT(x,y)
declaration of __rint	__MATH_PRECNAME(name,r)
declaration of __rint	__MATHDECL_1(type,function,suffix,args)
declaration of __rint	__MATHDECL(type,function,suffix,args)
declaration of rint	__MATHCALL(function,suffix,args)
declaration of rint	__MATHDECL(type,function,suffix,args)
declaration of rint	__CONCAT(x,y)
declaration of rint	__MATH_PRECNAME(name,r)
declaration of rint	__MATHDECL_1(type,function,suffix,args)
declaration of __lgamma_r	__MATHCALL(function,suffix,args)
declaration of __lgamma_r	__CONCAT(x,y)
declaration of __lgamma_r	__MATH_PRECNAME(name,r)
declaration of __lgamma_r	__MATHDECL_1(type,function,suffix,args)
declaration of __lgamma_r	__MATHDECL(type,function,suffix,args)
declaration of lgamma_r	__MATHCALL(function,suffix,args)
declaration of lgamma_r	__MATHDECL(type,function,suffix,args)
declaration of lgamma_r	__CONCAT(x,y)
declaration of lgamma_r	__MATH_PRECNAME(name,r)
declaration of lgamma_r	__MATHDECL_1(type,function,suffix,args)
declaration of __gamma	__MATHCALL(function,suffix,args)
declaration of __gamma	__CONCAT(x,y)
declaration of __gamma	__MATH_PRECNAME(name,r)
declaration of __gamma	__MATHDECL_1(type,function,suffix,args)
declaration of __gamma	__MATHDECL(type,function,suffix,args)
declaration of gamma	__MATHCALL(function,suffix,args)
declaration of gamma	__MATHDECL(type,function,suffix,args)
declaration of gamma	__CONCAT(x,y)
declaration of gamma	__MATH_PRECNAME(name,r)
declaration of gamma	__MATHDECL_1(type,function,suffix,args)
declaration of __tgamma	__MATHCALL(function,suffix,args)
declaration of __tgamma	__CONCAT(x,y)
declaration of __tgamma	__MATH_PRECNAME(name,r)
declaration of __tgamma	__MATHDECL_1(type,function,suffix,args)
declaration of __tgamma	__MATHDECL(type,function,suffix,args)
declaration of tgamma	__MATHCALL(function,suffix,args)
declaration of tgamma	__MATHDECL(type,function,suffix,args)
declaration of tgamma	__CONCAT(x,y)
declaration of tgamma	__MATH_PRECNAME(name,r)
declaration of tgamma	__MATHDECL_1(type,function,suffix,args)
declaration of __lgamma	__MATHCALL(function,suffix,args)
declaration of __lgamma	__CONCAT(x,y)
declaration of __lgamma	__MATH_PRECNAME(name,r)
declaration of __lgamma	__MATHDECL_1(type,function,suffix,args)
declaration of __lgamma	__MATHDECL(type,function,suffix,args)
declaration of lgamma	__MATHCALL(function,suffix,args)
declaration of lgamma	__MATHDECL(type,function,suffix,args)
declaration of lgamma	__CONCAT(x,y)
declaration of lgamma	__MATH_PRECNAME(name,r)
declaration of lgamma	__MATHDECL_1(type,function,suffix,args)
declaration of __erfc	__MATHCALL(function,suffix,args)
declaration of __erfc	__CONCAT(x,y)
declaration of __erfc	__MATH_PRECNAME(name,r)
declaration of __erfc	__MATHDECL_1(type,function,suffix,args)
declaration of __erfc	__MATHDECL(type,function,suffix,args)
declaration of erfc	__MATHCALL(function,suffix,args)
declaration of erfc	__MATHDECL(type,function,suffix,args)
declaration of erfc	__CONCAT(x,y)
declaration of erfc	__MATH_PRECNAME(name,r)
declaration of erfc	__MATHDECL_1(type,function,suffix,args)
declaration of __erf	__MATHCALL(function,suffix,args)
declaration of __erf	__CONCAT(x,y)
declaration of __erf	__MATH_PRECNAME(name,r)
declaration of __erf	__MATHDECL_1(type,function,suffix,args)
declaration of __erf	__MATHDECL(type,function,suffix,args)
declaration of erf	__MATHCALL(function,suffix,args)
declaration of erf	__MATHDECL(type,function,suffix,args)
declaration of erf	__CONCAT(x,y)
declaration of erf	__MATH_PRECNAME(name,r)
declaration of erf	__MATHDECL_1(type,function,suffix,args)
declaration of __yn	__MATHCALL(function,suffix,args)
declaration of __yn	__CONCAT(x,y)
declaration of __yn	__MATH_PRECNAME(name,r)
declaration of __yn	__MATHDECL_1(type,function,suffix,args)
declaration of __yn	__MATHDECL(type,function,suffix,args)
declaration of yn	__MATHCALL(function,suffix,args)
declaration of yn	__MATHDECL(type,function,suffix,args)
declaration of yn	__CONCAT(x,y)
declaration of yn	__MATH_PRECNAME(name,r)
declaration of yn	__MATHDECL_1(type,function,suffix,args)
declaration of __y1	__MATHCALL(function,suffix,args)
declaration of __y1	__CONCAT(x,y)
declaration of __y1	__MATH_PRECNAME(name,r)
declaration of __y1	__MATHDECL_1(type,function,suffix,args)
declaration of __y1	__MATHDECL(type,function,suffix,args)
declaration of y1	__MATHCALL(function,suffix,args)
declaration of y1	__MATHDECL(type,function,suffix,args)
declaration of y1	__CONCAT(x,y)
declaration of y1	__MATH_PRECNAME(name,r)
declaration of y1	__MATHDECL_1(type,function,suffix,args)
declaration of __y0	__MATHCALL(function,suffix,args)
declaration of __y0	__CONCAT(x,y)
declaration of __y0	__MATH_PRECNAME(name,r)
declaration of __y0	__MATHDECL_1(type,function,suffix,args)
declaration of __y0	__MATHDECL(type,function,suffix,args)
declaration of y0	__MATHCALL(function,suffix,args)
declaration of y0	__MATHDECL(type,function,suffix,args)
declaration of y0	__CONCAT(x,y)
declaration of y0	__MATH_PRECNAME(name,r)
declaration of y0	__MATHDECL_1(type,function,suffix,args)
declaration of __jn	__MATHCALL(function,suffix,args)
declaration of __jn	__CONCAT(x,y)
declaration of __jn	__MATH_PRECNAME(name,r)
declaration of __jn	__MATHDECL_1(type,function,suffix,args)
declaration of __jn	__MATHDECL(type,function,suffix,args)
declaration of jn	__MATHCALL(function,suffix,args)
declaration of jn	__MATHDECL(type,function,suffix,args)
declaration of jn	__CONCAT(x,y)
declaration of jn	__MATH_PRECNAME(name,r)
declaration of jn	__MATHDECL_1(type,function,suffix,args)
declaration of __j1	__MATHCALL(function,suffix,args)
declaration of __j1	__CONCAT(x,y)
declaration of __j1	__MATH_PRECNAME(name,r)
declaration of __j1	__MATHDECL_1(type,function,suffix,args)
declaration of __j1	__MATHDECL(type,function,suffix,args)
declaration of j1	__MATHCALL(function,suffix,args)
declaration of j1	__MATHDECL(type,function,suffix,args)
declaration of j1	__CONCAT(x,y)
declaration of j1	__MATH_PRECNAME(name,r)
declaration of j1	__MATHDECL_1(type,function,suffix,args)
declaration of __j0	__MATHCALL(function,suffix,args)
declaration of __j0	__CONCAT(x,y)
declaration of __j0	__MATH_PRECNAME(name,r)
declaration of __j0	__MATHDECL_1(type,function,suffix,args)
declaration of __j0	__MATHDECL(type,function,suffix,args)
declaration of j0	__MATHCALL(function,suffix,args)
declaration of j0	__MATHDECL(type,function,suffix,args)
declaration of j0	__CONCAT(x,y)
declaration of j0	__MATH_PRECNAME(name,r)
declaration of j0	__MATHDECL_1(type,function,suffix,args)
declaration of __nan	__MATHCALL(function,suffix,args)
declaration of __nan	__CONCAT(x,y)
declaration of __nan	__MATH_PRECNAME(name,r)
declaration of __nan	__MATHDECL_1(type,function,suffix,args)
declaration of __nan	__MATHDECL(type,function,suffix,args)
declaration of nan	__MATHCALL(function,suffix,args)
declaration of nan	__MATHDECL(type,function,suffix,args)
declaration of nan	__CONCAT(x,y)
declaration of nan	__MATH_PRECNAME(name,r)
declaration of nan	__MATHDECL_1(type,function,suffix,args)
declaration of __copysign	__MATHCALLX(function,suffix,args,attrib)
declaration of __copysign	__CONCAT(x,y)
declaration of __copysign	__MATH_PRECNAME(name,r)
declaration of __copysign	__MATHDECL_1(type,function,suffix,args)
declaration of __copysign	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysign	__MATHCALLX(function,suffix,args,attrib)
declaration of copysign	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysign	__CONCAT(x,y)
declaration of copysign	__MATH_PRECNAME(name,r)
declaration of copysign	__MATHDECL_1(type,function,suffix,args)
declaration of __significand	__MATHCALL(function,suffix,args)
declaration of __significand	__CONCAT(x,y)
declaration of __significand	__MATH_PRECNAME(name,r)
declaration of __significand	__MATHDECL_1(type,function,suffix,args)
declaration of __significand	__MATHDECL(type,function,suffix,args)
declaration of significand	__MATHCALL(function,suffix,args)
declaration of significand	__MATHDECL(type,function,suffix,args)
declaration of significand	__CONCAT(x,y)
declaration of significand	__MATH_PRECNAME(name,r)
declaration of significand	__MATHDECL_1(type,function,suffix,args)
declaration of __drem	__MATHCALL(function,suffix,args)
declaration of __drem	__CONCAT(x,y)
declaration of __drem	__MATH_PRECNAME(name,r)
declaration of __drem	__MATHDECL_1(type,function,suffix,args)
declaration of __drem	__MATHDECL(type,function,suffix,args)
declaration of drem	__MATHCALL(function,suffix,args)
declaration of drem	__MATHDECL(type,function,suffix,args)
declaration of drem	__CONCAT(x,y)
declaration of drem	__MATH_PRECNAME(name,r)
declaration of drem	__MATHDECL_1(type,function,suffix,args)
declaration of finite	__MATHDECL_1(type,function,suffix,args)
declaration of finite	__CONCAT(x,y)
declaration of finite	__MATH_PRECNAME(name,r)
declaration of __fmod	__MATHCALL(function,suffix,args)
declaration of __fmod	__CONCAT(x,y)
declaration of __fmod	__MATH_PRECNAME(name,r)
declaration of __fmod	__MATHDECL_1(type,function,suffix,args)
declaration of __fmod	__MATHDECL(type,function,suffix,args)
declaration of fmod	__MATHCALL(function,suffix,args)
declaration of fmod	__MATHDECL(type,function,suffix,args)
declaration of fmod	__CONCAT(x,y)
declaration of fmod	__MATH_PRECNAME(name,r)
declaration of fmod	__MATHDECL_1(type,function,suffix,args)
declaration of __floor	__MATHCALLX(function,suffix,args,attrib)
declaration of __floor	__CONCAT(x,y)
declaration of __floor	__MATH_PRECNAME(name,r)
declaration of __floor	__MATHDECL_1(type,function,suffix,args)
declaration of __floor	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floor	__MATHCALLX(function,suffix,args,attrib)
declaration of floor	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floor	__CONCAT(x,y)
declaration of floor	__MATH_PRECNAME(name,r)
declaration of floor	__MATHDECL_1(type,function,suffix,args)
declaration of __fabs	__MATHCALLX(function,suffix,args,attrib)
declaration of __fabs	__CONCAT(x,y)
declaration of __fabs	__MATH_PRECNAME(name,r)
declaration of __fabs	__MATHDECL_1(type,function,suffix,args)
declaration of __fabs	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabs	__MATHCALLX(function,suffix,args,attrib)
declaration of fabs	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabs	__CONCAT(x,y)
declaration of fabs	__MATH_PRECNAME(name,r)
declaration of fabs	__MATHDECL_1(type,function,suffix,args)
declaration of __ceil	__MATHCALLX(function,suffix,args,attrib)
declaration of __ceil	__CONCAT(x,y)
declaration of __ceil	__MATH_PRECNAME(name,r)
declaration of __ceil	__MATHDECL_1(type,function,suffix,args)
declaration of __ceil	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceil	__MATHCALLX(function,suffix,args,attrib)
declaration of ceil	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceil	__CONCAT(x,y)
declaration of ceil	__MATH_PRECNAME(name,r)
declaration of ceil	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrt	__MATHCALL(function,suffix,args)
declaration of __cbrt	__CONCAT(x,y)
declaration of __cbrt	__MATH_PRECNAME(name,r)
declaration of __cbrt	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrt	__MATHDECL(type,function,suffix,args)
declaration of cbrt	__MATHCALL(function,suffix,args)
declaration of cbrt	__MATHDECL(type,function,suffix,args)
declaration of cbrt	__CONCAT(x,y)
declaration of cbrt	__MATH_PRECNAME(name,r)
declaration of cbrt	__MATHDECL_1(type,function,suffix,args)
declaration of __hypot	__MATHCALL(function,suffix,args)
declaration of __hypot	__CONCAT(x,y)
declaration of __hypot	__MATH_PRECNAME(name,r)
declaration of __hypot	__MATHDECL_1(type,function,suffix,args)
declaration of __hypot	__MATHDECL(type,function,suffix,args)
declaration of hypot	__MATHCALL(function,suffix,args)
declaration of hypot	__MATHDECL(type,function,suffix,args)
declaration of hypot	__CONCAT(x,y)
declaration of hypot	__MATH_PRECNAME(name,r)
declaration of hypot	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrt	__MATHCALL(function,suffix,args)
declaration of __sqrt	__CONCAT(x,y)
declaration of __sqrt	__MATH_PRECNAME(name,r)
declaration of __sqrt	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrt	__MATHDECL(type,function,suffix,args)
declaration of sqrt	__MATHCALL(function,suffix,args)
declaration of sqrt	__MATHDECL(type,function,suffix,args)
declaration of sqrt	__CONCAT(x,y)
declaration of sqrt	__MATH_PRECNAME(name,r)
declaration of sqrt	__MATHDECL_1(type,function,suffix,args)
declaration of __pow	__MATHCALL(function,suffix,args)
declaration of __pow	__MATHCALL_VEC(function,suffix,args)
declaration of __pow	__CONCAT(x,y)
declaration of __pow	__MATH_PRECNAME(name,r)
declaration of __pow	__MATHDECL_1(type,function,suffix,args)
declaration of __pow	__MATHDECL(type,function,suffix,args)
declaration of pow	__MATHCALL(function,suffix,args)
declaration of pow	__MATHCALL_VEC(function,suffix,args)
declaration of pow	__MATHDECL(type,function,suffix,args)
declaration of pow	__CONCAT(x,y)
declaration of pow	__MATH_PRECNAME(name,r)
declaration of pow	__MATHDECL_1(type,function,suffix,args)
declaration of __log2	__MATHCALL(function,suffix,args)
declaration of __log2	__CONCAT(x,y)
declaration of __log2	__MATH_PRECNAME(name,r)
declaration of __log2	__MATHDECL_1(type,function,suffix,args)
declaration of __log2	__MATHDECL(type,function,suffix,args)
declaration of log2	__MATHCALL(function,suffix,args)
declaration of log2	__MATHDECL(type,function,suffix,args)
declaration of log2	__CONCAT(x,y)
declaration of log2	__MATH_PRECNAME(name,r)
declaration of log2	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2	__MATHCALL(function,suffix,args)
declaration of __exp2	__CONCAT(x,y)
declaration of __exp2	__MATH_PRECNAME(name,r)
declaration of __exp2	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2	__MATHDECL(type,function,suffix,args)
declaration of exp2	__MATHCALL(function,suffix,args)
declaration of exp2	__MATHDECL(type,function,suffix,args)
declaration of exp2	__CONCAT(x,y)
declaration of exp2	__MATH_PRECNAME(name,r)
declaration of exp2	__MATHDECL_1(type,function,suffix,args)
declaration of __logb	__MATHCALL(function,suffix,args)
declaration of __logb	__CONCAT(x,y)
declaration of __logb	__MATH_PRECNAME(name,r)
declaration of __logb	__MATHDECL_1(type,function,suffix,args)
declaration of __logb	__MATHDECL(type,function,suffix,args)
declaration of logb	__MATHCALL(function,suffix,args)
declaration of logb	__MATHDECL(type,function,suffix,args)
declaration of logb	__CONCAT(x,y)
declaration of logb	__MATH_PRECNAME(name,r)
declaration of logb	__MATHDECL_1(type,function,suffix,args)
declaration of __log1p	__MATHCALL(function,suffix,args)
declaration of __log1p	__CONCAT(x,y)
declaration of __log1p	__MATH_PRECNAME(name,r)
declaration of __log1p	__MATHDECL_1(type,function,suffix,args)
declaration of __log1p	__MATHDECL(type,function,suffix,args)
declaration of log1p	__MATHCALL(function,suffix,args)
declaration of log1p	__MATHDECL(type,function,suffix,args)
declaration of log1p	__CONCAT(x,y)
declaration of log1p	__MATH_PRECNAME(name,r)
declaration of log1p	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1	__MATHCALL(function,suffix,args)
declaration of __expm1	__CONCAT(x,y)
declaration of __expm1	__MATH_PRECNAME(name,r)
declaration of __expm1	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1	__MATHDECL(type,function,suffix,args)
declaration of expm1	__MATHCALL(function,suffix,args)
declaration of expm1	__MATHDECL(type,function,suffix,args)
declaration of expm1	__CONCAT(x,y)
declaration of expm1	__MATH_PRECNAME(name,r)
declaration of expm1	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10	__MATHCALL(function,suffix,args)
declaration of __exp10	__CONCAT(x,y)
declaration of __exp10	__MATH_PRECNAME(name,r)
declaration of __exp10	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10	__MATHDECL(type,function,suffix,args)
declaration of exp10	__MATHCALL(function,suffix,args)
declaration of exp10	__MATHDECL(type,function,suffix,args)
declaration of exp10	__CONCAT(x,y)
declaration of exp10	__MATH_PRECNAME(name,r)
declaration of exp10	__MATHDECL_1(type,function,suffix,args)
declaration of __modf	__MATHCALL(function,suffix,args)
declaration of __modf	__CONCAT(x,y)
declaration of __modf	__MATH_PRECNAME(name,r)
declaration of __modf	__MATHDECL_1(type,function,suffix,args)
declaration of __modf	__MATHDECL(type,function,suffix,args)
declaration of modf	__MATHCALL(function,suffix,args)
declaration of modf	__MATHDECL(type,function,suffix,args)
declaration of modf	__CONCAT(x,y)
declaration of modf	__MATH_PRECNAME(name,r)
declaration of modf	__MATHDECL_1(type,function,suffix,args)
declaration of __log10	__MATHCALL(function,suffix,args)
declaration of __log10	__CONCAT(x,y)
declaration of __log10	__MATH_PRECNAME(name,r)
declaration of __log10	__MATHDECL_1(type,function,suffix,args)
declaration of __log10	__MATHDECL(type,function,suffix,args)
declaration of log10	__MATHCALL(function,suffix,args)
declaration of log10	__MATHDECL(type,function,suffix,args)
declaration of log10	__CONCAT(x,y)
declaration of log10	__MATH_PRECNAME(name,r)
declaration of log10	__MATHDECL_1(type,function,suffix,args)
declaration of __log	__MATHCALL(function,suffix,args)
declaration of __log	__MATHCALL_VEC(function,suffix,args)
declaration of __log	__CONCAT(x,y)
declaration of __log	__MATH_PRECNAME(name,r)
declaration of __log	__MATHDECL_1(type,function,suffix,args)
declaration of __log	__MATHDECL(type,function,suffix,args)
declaration of log	__MATHCALL(function,suffix,args)
declaration of log	__MATHCALL_VEC(function,suffix,args)
declaration of log	__MATHDECL(type,function,suffix,args)
declaration of log	__CONCAT(x,y)
declaration of log	__MATH_PRECNAME(name,r)
declaration of log	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexp	__MATHCALL(function,suffix,args)
declaration of __ldexp	__CONCAT(x,y)
declaration of __ldexp	__MATH_PRECNAME(name,r)
declaration of __ldexp	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexp	__MATHDECL(type,function,suffix,args)
declaration of ldexp	__MATHCALL(function,suffix,args)
declaration of ldexp	__MATHDECL(type,function,suffix,args)
declaration of ldexp	__CONCAT(x,y)
declaration of ldexp	__MATH_PRECNAME(name,r)
declaration of ldexp	__MATHDECL_1(type,function,suffix,args)
declaration of __frexp	__MATHCALL(function,suffix,args)
declaration of __frexp	__CONCAT(x,y)
declaration of __frexp	__MATH_PRECNAME(name,r)
declaration of __frexp	__MATHDECL_1(type,function,suffix,args)
declaration of __frexp	__MATHDECL(type,function,suffix,args)
declaration of frexp	__MATHCALL(function,suffix,args)
declaration of frexp	__MATHDECL(type,function,suffix,args)
declaration of frexp	__CONCAT(x,y)
declaration of frexp	__MATH_PRECNAME(name,r)
declaration of frexp	__MATHDECL_1(type,function,suffix,args)
declaration of __exp	__MATHCALL(function,suffix,args)
declaration of __exp	__MATHCALL_VEC(function,suffix,args)
declaration of __exp	__CONCAT(x,y)
declaration of __exp	__MATH_PRECNAME(name,r)
declaration of __exp	__MATHDECL_1(type,function,suffix,args)
declaration of __exp	__MATHDECL(type,function,suffix,args)
declaration of exp	__MATHCALL(function,suffix,args)
declaration of exp	__MATHCALL_VEC(function,suffix,args)
declaration of exp	__MATHDECL(type,function,suffix,args)
declaration of exp	__CONCAT(x,y)
declaration of exp	__MATH_PRECNAME(name,r)
declaration of exp	__MATHDECL_1(type,function,suffix,args)
declaration of __atanh	__MATHCALL(function,suffix,args)
declaration of __atanh	__CONCAT(x,y)
declaration of __atanh	__MATH_PRECNAME(name,r)
declaration of __atanh	__MATHDECL_1(type,function,suffix,args)
declaration of __atanh	__MATHDECL(type,function,suffix,args)
declaration of atanh	__MATHCALL(function,suffix,args)
declaration of atanh	__MATHDECL(type,function,suffix,args)
declaration of atanh	__CONCAT(x,y)
declaration of atanh	__MATH_PRECNAME(name,r)
declaration of atanh	__MATHDECL_1(type,function,suffix,args)
declaration of __asinh	__MATHCALL(function,suffix,args)
declaration of __asinh	__CONCAT(x,y)
declaration of __asinh	__MATH_PRECNAME(name,r)
declaration of __asinh	__MATHDECL_1(type,function,suffix,args)
declaration of __asinh	__MATHDECL(type,function,suffix,args)
declaration of asinh	__MATHCALL(function,suffix,args)
declaration of asinh	__MATHDECL(type,function,suffix,args)
declaration of asinh	__CONCAT(x,y)
declaration of asinh	__MATH_PRECNAME(name,r)
declaration of asinh	__MATHDECL_1(type,function,suffix,args)
declaration of __acosh	__MATHCALL(function,suffix,args)
declaration of __acosh	__CONCAT(x,y)
declaration of __acosh	__MATH_PRECNAME(name,r)
declaration of __acosh	__MATHDECL_1(type,function,suffix,args)
declaration of __acosh	__MATHDECL(type,function,suffix,args)
declaration of acosh	__MATHCALL(function,suffix,args)
declaration of acosh	__MATHDECL(type,function,suffix,args)
declaration of acosh	__CONCAT(x,y)
declaration of acosh	__MATH_PRECNAME(name,r)
declaration of acosh	__MATHDECL_1(type,function,suffix,args)
declaration of __sincos	__MATHDECL_VEC(type,function,suffix,args)
declaration of __sincos	__CONCAT(x,y)
declaration of __sincos	__MATH_PRECNAME(name,r)
declaration of __sincos	__MATHDECL_1(type,function,suffix,args)
declaration of __sincos	__MATHDECL(type,function,suffix,args)
declaration of sincos	__MATHDECL_VEC(type,function,suffix,args)
declaration of sincos	__MATHDECL(type,function,suffix,args)
declaration of sincos	__CONCAT(x,y)
declaration of sincos	__MATH_PRECNAME(name,r)
declaration of sincos	__MATHDECL_1(type,function,suffix,args)
declaration of __tanh	__MATHCALL(function,suffix,args)
declaration of __tanh	__CONCAT(x,y)
declaration of __tanh	__MATH_PRECNAME(name,r)
declaration of __tanh	__MATHDECL_1(type,function,suffix,args)
declaration of __tanh	__MATHDECL(type,function,suffix,args)
declaration of tanh	__MATHCALL(function,suffix,args)
declaration of tanh	__MATHDECL(type,function,suffix,args)
declaration of tanh	__CONCAT(x,y)
declaration of tanh	__MATH_PRECNAME(name,r)
declaration of tanh	__MATHDECL_1(type,function,suffix,args)
declaration of __sinh	__MATHCALL(function,suffix,args)
declaration of __sinh	__CONCAT(x,y)
declaration of __sinh	__MATH_PRECNAME(name,r)
declaration of __sinh	__MATHDECL_1(type,function,suffix,args)
declaration of __sinh	__MATHDECL(type,function,suffix,args)
declaration of sinh	__MATHCALL(function,suffix,args)
declaration of sinh	__MATHDECL(type,function,suffix,args)
declaration of sinh	__CONCAT(x,y)
declaration of sinh	__MATH_PRECNAME(name,r)
declaration of sinh	__MATHDECL_1(type,function,suffix,args)
declaration of __cosh	__MATHCALL(function,suffix,args)
declaration of __cosh	__CONCAT(x,y)
declaration of __cosh	__MATH_PRECNAME(name,r)
declaration of __cosh	__MATHDECL_1(type,function,suffix,args)
declaration of __cosh	__MATHDECL(type,function,suffix,args)
declaration of cosh	__MATHCALL(function,suffix,args)
declaration of cosh	__MATHDECL(type,function,suffix,args)
declaration of cosh	__CONCAT(x,y)
declaration of cosh	__MATH_PRECNAME(name,r)
declaration of cosh	__MATHDECL_1(type,function,suffix,args)
declaration of __tan	__MATHCALL(function,suffix,args)
declaration of __tan	__CONCAT(x,y)
declaration of __tan	__MATH_PRECNAME(name,r)
declaration of __tan	__MATHDECL_1(type,function,suffix,args)
declaration of __tan	__MATHDECL(type,function,suffix,args)
declaration of tan	__MATHCALL(function,suffix,args)
declaration of tan	__MATHDECL(type,function,suffix,args)
declaration of tan	__CONCAT(x,y)
declaration of tan	__MATH_PRECNAME(name,r)
declaration of tan	__MATHDECL_1(type,function,suffix,args)
declaration of __sin	__MATHCALL(function,suffix,args)
declaration of __sin	__MATHCALL_VEC(function,suffix,args)
declaration of __sin	__CONCAT(x,y)
declaration of __sin	__MATH_PRECNAME(name,r)
declaration of __sin	__MATHDECL_1(type,function,suffix,args)
declaration of __sin	__MATHDECL(type,function,suffix,args)
declaration of sin	__MATHCALL(function,suffix,args)
declaration of sin	__MATHCALL_VEC(function,suffix,args)
declaration of sin	__MATHDECL(type,function,suffix,args)
declaration of sin	__CONCAT(x,y)
declaration of sin	__MATH_PRECNAME(name,r)
declaration of sin	__MATHDECL_1(type,function,suffix,args)
declaration of __cos	__MATHCALL(function,suffix,args)
declaration of __cos	__MATHCALL_VEC(function,suffix,args)
declaration of __cos	__CONCAT(x,y)
declaration of __cos	__MATH_PRECNAME(name,r)
declaration of __cos	__MATHDECL_1(type,function,suffix,args)
declaration of __cos	__MATHDECL(type,function,suffix,args)
declaration of cos	__MATHCALL(function,suffix,args)
declaration of cos	__MATHCALL_VEC(function,suffix,args)
declaration of cos	__MATHDECL(type,function,suffix,args)
declaration of cos	__CONCAT(x,y)
declaration of cos	__MATH_PRECNAME(name,r)
declaration of cos	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2	__MATHCALL(function,suffix,args)
declaration of __atan2	__CONCAT(x,y)
declaration of __atan2	__MATH_PRECNAME(name,r)
declaration of __atan2	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2	__MATHDECL(type,function,suffix,args)
declaration of atan2	__MATHCALL(function,suffix,args)
declaration of atan2	__MATHDECL(type,function,suffix,args)
declaration of atan2	__CONCAT(x,y)
declaration of atan2	__MATH_PRECNAME(name,r)
declaration of atan2	__MATHDECL_1(type,function,suffix,args)
declaration of __atan	__MATHCALL(function,suffix,args)
declaration of __atan	__CONCAT(x,y)
declaration of __atan	__MATH_PRECNAME(name,r)
declaration of __atan	__MATHDECL_1(type,function,suffix,args)
declaration of __atan	__MATHDECL(type,function,suffix,args)
declaration of atan	__MATHCALL(function,suffix,args)
declaration of atan	__MATHDECL(type,function,suffix,args)
declaration of atan	__CONCAT(x,y)
declaration of atan	__MATH_PRECNAME(name,r)
declaration of atan	__MATHDECL_1(type,function,suffix,args)
declaration of __asin	__MATHCALL(function,suffix,args)
declaration of __asin	__CONCAT(x,y)
declaration of __asin	__MATH_PRECNAME(name,r)
declaration of __asin	__MATHDECL_1(type,function,suffix,args)
declaration of __asin	__MATHDECL(type,function,suffix,args)
declaration of asin	__MATHCALL(function,suffix,args)
declaration of asin	__MATHDECL(type,function,suffix,args)
declaration of asin	__CONCAT(x,y)
declaration of asin	__MATH_PRECNAME(name,r)
declaration of asin	__MATHDECL_1(type,function,suffix,args)
declaration of __acos	__MATHCALL(function,suffix,args)
declaration of __acos	__CONCAT(x,y)
declaration of __acos	__MATH_PRECNAME(name,r)
declaration of __acos	__MATHDECL_1(type,function,suffix,args)
declaration of __acos	__MATHDECL(type,function,suffix,args)
declaration of acos	__MATHCALL(function,suffix,args)
declaration of acos	__MATHDECL(type,function,suffix,args)
declaration of acos	__CONCAT(x,y)
declaration of acos	__MATH_PRECNAME(name,r)
declaration of acos	__MATHDECL_1(type,function,suffix,args)
declaration of __issignalingf	__MATHDECL_1(type,function,suffix,args)
declaration of __issignalingf	__MATH_PRECNAME(name,r)
declaration of __iseqsigf	__MATHDECL_1(type,function,suffix,args)
declaration of __iseqsigf	__MATH_PRECNAME(name,r)
declaration of __isnanf	__MATHDECL_1(type,function,suffix,args)
declaration of __isnanf	__MATH_PRECNAME(name,r)
declaration of __finitef	__MATHDECL_1(type,function,suffix,args)
declaration of __finitef	__MATH_PRECNAME(name,r)
declaration of __isinff	__MATHDECL_1(type,function,suffix,args)
declaration of __isinff	__MATH_PRECNAME(name,r)
declaration of __signbitf	__MATHDECL_1(type,function,suffix,args)
declaration of __signbitf	__MATH_PRECNAME(name,r)
declaration of __fpclassifyf	__MATHDECL_1(type,function,suffix,args)
declaration of __fpclassifyf	__MATH_PRECNAME(name,r)
declaration of __scalbf	__MATHCALL(function,suffix,args)
declaration of __scalbf	__MATH_PRECNAME(name,r)
declaration of __scalbf	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbf	__MATHDECL(type,function,suffix,args)
declaration of scalbf	__MATHCALL(function,suffix,args)
declaration of scalbf	__MATHDECL(type,function,suffix,args)
declaration of scalbf	__MATH_PRECNAME(name,r)
declaration of scalbf	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf	__MATH_PRECNAME(name,r)
declaration of setpayloadf	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadf	__MATH_PRECNAME(name,r)
declaration of __getpayloadf	__MATHCALL(function,suffix,args)
declaration of __getpayloadf	__MATH_PRECNAME(name,r)
declaration of __getpayloadf	__MATHDECL_1(type,function,suffix,args)
declaration of __getpayloadf	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf	__MATHCALL(function,suffix,args)
declaration of getpayloadf	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf	__MATH_PRECNAME(name,r)
declaration of getpayloadf	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef	__MATH_PRECNAME(name,r)
declaration of totalordermagf	__MATHDECL_1(type,function,suffix,args)
declaration of totalordermagf	__MATH_PRECNAME(name,r)
declaration of totalorderf	__MATHDECL_1(type,function,suffix,args)
declaration of totalorderf	__MATH_PRECNAME(name,r)
declaration of __fminmagf	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminmagf	__MATH_PRECNAME(name,r)
declaration of __fminmagf	__MATHDECL_1(type,function,suffix,args)
declaration of __fminmagf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf	__MATHCALLX(function,suffix,args,attrib)
declaration of fminmagf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf	__MATH_PRECNAME(name,r)
declaration of fminmagf	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxmagf	__MATH_PRECNAME(name,r)
declaration of __fmaxmagf	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxmagf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf	__MATH_PRECNAME(name,r)
declaration of fmaxmagf	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpxf	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpxf	__MATH_PRECNAME(name,r)
declaration of __ufromfpxf	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpxf	__MATHDECL(type,function,suffix,args)
declaration of ufromfpxf	__MATH_PRECNAME(name,r)
declaration of ufromfpxf	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpxf	__MATHDECL(type,function,suffix,args)
declaration of __fromfpxf	__MATH_PRECNAME(name,r)
declaration of __fromfpxf	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpxf	__MATHDECL(type,function,suffix,args)
declaration of fromfpxf	__MATH_PRECNAME(name,r)
declaration of fromfpxf	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpf	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpf	__MATH_PRECNAME(name,r)
declaration of __ufromfpf	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpf	__MATHDECL(type,function,suffix,args)
declaration of ufromfpf	__MATH_PRECNAME(name,r)
declaration of ufromfpf	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpf	__MATHDECL(type,function,suffix,args)
declaration of __fromfpf	__MATH_PRECNAME(name,r)
declaration of __fromfpf	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpf	__MATHDECL(type,function,suffix,args)
declaration of fromfpf	__MATH_PRECNAME(name,r)
declaration of fromfpf	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundevenf	__MATH_PRECNAME(name,r)
declaration of __roundevenf	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf	__MATHCALLX(function,suffix,args,attrib)
declaration of roundevenf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf	__MATH_PRECNAME(name,r)
declaration of roundevenf	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf	__MATHCALL(function,suffix,args)
declaration of __fmaf	__MATH_PRECNAME(name,r)
declaration of __fmaf	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf	__MATHDECL(type,function,suffix,args)
declaration of fmaf	__MATHCALL(function,suffix,args)
declaration of fmaf	__MATHDECL(type,function,suffix,args)
declaration of fmaf	__MATH_PRECNAME(name,r)
declaration of fmaf	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminf	__MATH_PRECNAME(name,r)
declaration of __fminf	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf	__MATHCALLX(function,suffix,args,attrib)
declaration of fminf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf	__MATH_PRECNAME(name,r)
declaration of fminf	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxf	__MATH_PRECNAME(name,r)
declaration of __fmaxf	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf	__MATH_PRECNAME(name,r)
declaration of fmaxf	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf	__MATHCALL(function,suffix,args)
declaration of __fdimf	__MATH_PRECNAME(name,r)
declaration of __fdimf	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf	__MATHDECL(type,function,suffix,args)
declaration of fdimf	__MATHCALL(function,suffix,args)
declaration of fdimf	__MATHDECL(type,function,suffix,args)
declaration of fdimf	__MATH_PRECNAME(name,r)
declaration of fdimf	__MATHDECL_1(type,function,suffix,args)
declaration of __llroundf	__MATHDECL(type,function,suffix,args)
declaration of __llroundf	__MATH_PRECNAME(name,r)
declaration of __llroundf	__MATHDECL_1(type,function,suffix,args)
declaration of llroundf	__MATHDECL(type,function,suffix,args)
declaration of llroundf	__MATH_PRECNAME(name,r)
declaration of llroundf	__MATHDECL_1(type,function,suffix,args)
declaration of __lroundf	__MATHDECL(type,function,suffix,args)
declaration of __lroundf	__MATH_PRECNAME(name,r)
declaration of __lroundf	__MATHDECL_1(type,function,suffix,args)
declaration of lroundf	__MATHDECL(type,function,suffix,args)
declaration of lroundf	__MATH_PRECNAME(name,r)
declaration of lroundf	__MATHDECL_1(type,function,suffix,args)
declaration of __llrintf	__MATHDECL(type,function,suffix,args)
declaration of __llrintf	__MATH_PRECNAME(name,r)
declaration of __llrintf	__MATHDECL_1(type,function,suffix,args)
declaration of llrintf	__MATHDECL(type,function,suffix,args)
declaration of llrintf	__MATH_PRECNAME(name,r)
declaration of llrintf	__MATHDECL_1(type,function,suffix,args)
declaration of __lrintf	__MATHDECL(type,function,suffix,args)
declaration of __lrintf	__MATH_PRECNAME(name,r)
declaration of __lrintf	__MATHDECL_1(type,function,suffix,args)
declaration of lrintf	__MATHDECL(type,function,suffix,args)
declaration of lrintf	__MATH_PRECNAME(name,r)
declaration of lrintf	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof	__MATHCALL(function,suffix,args)
declaration of __remquof	__MATH_PRECNAME(name,r)
declaration of __remquof	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof	__MATHDECL(type,function,suffix,args)
declaration of remquof	__MATHCALL(function,suffix,args)
declaration of remquof	__MATHDECL(type,function,suffix,args)
declaration of remquof	__MATH_PRECNAME(name,r)
declaration of remquof	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf	__MATHCALLX(function,suffix,args,attrib)
declaration of __truncf	__MATH_PRECNAME(name,r)
declaration of __truncf	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf	__MATHCALLX(function,suffix,args,attrib)
declaration of truncf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf	__MATH_PRECNAME(name,r)
declaration of truncf	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundf	__MATH_PRECNAME(name,r)
declaration of __roundf	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf	__MATHCALLX(function,suffix,args,attrib)
declaration of roundf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf	__MATH_PRECNAME(name,r)
declaration of roundf	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf	__MATHCALL(function,suffix,args)
declaration of __nearbyintf	__MATH_PRECNAME(name,r)
declaration of __nearbyintf	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf	__MATHCALL(function,suffix,args)
declaration of nearbyintf	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf	__MATH_PRECNAME(name,r)
declaration of nearbyintf	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf	__MATHCALL(function,suffix,args)
declaration of __scalblnf	__MATH_PRECNAME(name,r)
declaration of __scalblnf	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf	__MATHDECL(type,function,suffix,args)
declaration of scalblnf	__MATHCALL(function,suffix,args)
declaration of scalblnf	__MATHDECL(type,function,suffix,args)
declaration of scalblnf	__MATH_PRECNAME(name,r)
declaration of scalblnf	__MATHDECL_1(type,function,suffix,args)
declaration of __llogbf	__MATHDECL(type,function,suffix,args)
declaration of __llogbf	__MATH_PRECNAME(name,r)
declaration of __llogbf	__MATHDECL_1(type,function,suffix,args)
declaration of llogbf	__MATHDECL(type,function,suffix,args)
declaration of llogbf	__MATH_PRECNAME(name,r)
declaration of llogbf	__MATHDECL_1(type,function,suffix,args)
declaration of __ilogbf	__MATHDECL(type,function,suffix,args)
declaration of __ilogbf	__MATH_PRECNAME(name,r)
declaration of __ilogbf	__MATHDECL_1(type,function,suffix,args)
declaration of ilogbf	__MATHDECL(type,function,suffix,args)
declaration of ilogbf	__MATH_PRECNAME(name,r)
declaration of ilogbf	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf	__MATHCALL(function,suffix,args)
declaration of __scalbnf	__MATH_PRECNAME(name,r)
declaration of __scalbnf	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf	__MATHDECL(type,function,suffix,args)
declaration of scalbnf	__MATHCALL(function,suffix,args)
declaration of scalbnf	__MATHDECL(type,function,suffix,args)
declaration of scalbnf	__MATH_PRECNAME(name,r)
declaration of scalbnf	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf	__MATHCALL(function,suffix,args)
declaration of __remainderf	__MATH_PRECNAME(name,r)
declaration of __remainderf	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf	__MATHDECL(type,function,suffix,args)
declaration of remainderf	__MATHCALL(function,suffix,args)
declaration of remainderf	__MATHDECL(type,function,suffix,args)
declaration of remainderf	__MATH_PRECNAME(name,r)
declaration of remainderf	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf	__MATHCALL(function,suffix,args)
declaration of __nextupf	__MATH_PRECNAME(name,r)
declaration of __nextupf	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf	__MATHDECL(type,function,suffix,args)
declaration of nextupf	__MATHCALL(function,suffix,args)
declaration of nextupf	__MATHDECL(type,function,suffix,args)
declaration of nextupf	__MATH_PRECNAME(name,r)
declaration of nextupf	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf	__MATHCALL(function,suffix,args)
declaration of __nextdownf	__MATH_PRECNAME(name,r)
declaration of __nextdownf	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf	__MATHDECL(type,function,suffix,args)
declaration of nextdownf	__MATHCALL(function,suffix,args)
declaration of nextdownf	__MATHDECL(type,function,suffix,args)
declaration of nextdownf	__MATH_PRECNAME(name,r)
declaration of nextdownf	__MATHDECL_1(type,function,suffix,args)
declaration of __nexttowardf	__MATHCALL(function,suffix,args)
declaration of __nexttowardf	__MATH_PRECNAME(name,r)
declaration of __nexttowardf	__MATHDECL_1(type,function,suffix,args)
declaration of __nexttowardf	__MATHDECL(type,function,suffix,args)
declaration of nexttowardf	__MATHCALL(function,suffix,args)
declaration of nexttowardf	__MATHDECL(type,function,suffix,args)
declaration of nexttowardf	__MATH_PRECNAME(name,r)
declaration of nexttowardf	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf	__MATHCALL(function,suffix,args)
declaration of __nextafterf	__MATH_PRECNAME(name,r)
declaration of __nextafterf	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf	__MATHDECL(type,function,suffix,args)
declaration of nextafterf	__MATHCALL(function,suffix,args)
declaration of nextafterf	__MATHDECL(type,function,suffix,args)
declaration of nextafterf	__MATH_PRECNAME(name,r)
declaration of nextafterf	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf	__MATHCALL(function,suffix,args)
declaration of __rintf	__MATH_PRECNAME(name,r)
declaration of __rintf	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf	__MATHDECL(type,function,suffix,args)
declaration of rintf	__MATHCALL(function,suffix,args)
declaration of rintf	__MATHDECL(type,function,suffix,args)
declaration of rintf	__MATH_PRECNAME(name,r)
declaration of rintf	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf_r	__MATHCALL(function,suffix,args)
declaration of __lgammaf_r	__MATH_PRECNAME(name,r)
declaration of __lgammaf_r	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf_r	__MATHCALL(function,suffix,args)
declaration of lgammaf_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf_r	__MATH_PRECNAME(name,r)
declaration of lgammaf_r	__MATHDECL_1(type,function,suffix,args)
declaration of __gammaf	__MATHCALL(function,suffix,args)
declaration of __gammaf	__MATH_PRECNAME(name,r)
declaration of __gammaf	__MATHDECL_1(type,function,suffix,args)
declaration of __gammaf	__MATHDECL(type,function,suffix,args)
declaration of gammaf	__MATHCALL(function,suffix,args)
declaration of gammaf	__MATHDECL(type,function,suffix,args)
declaration of gammaf	__MATH_PRECNAME(name,r)
declaration of gammaf	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf	__MATHCALL(function,suffix,args)
declaration of __tgammaf	__MATH_PRECNAME(name,r)
declaration of __tgammaf	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf	__MATHDECL(type,function,suffix,args)
declaration of tgammaf	__MATHCALL(function,suffix,args)
declaration of tgammaf	__MATHDECL(type,function,suffix,args)
declaration of tgammaf	__MATH_PRECNAME(name,r)
declaration of tgammaf	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf	__MATHCALL(function,suffix,args)
declaration of __lgammaf	__MATH_PRECNAME(name,r)
declaration of __lgammaf	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf	__MATHDECL(type,function,suffix,args)
declaration of lgammaf	__MATHCALL(function,suffix,args)
declaration of lgammaf	__MATHDECL(type,function,suffix,args)
declaration of lgammaf	__MATH_PRECNAME(name,r)
declaration of lgammaf	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf	__MATHCALL(function,suffix,args)
declaration of __erfcf	__MATH_PRECNAME(name,r)
declaration of __erfcf	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf	__MATHDECL(type,function,suffix,args)
declaration of erfcf	__MATHCALL(function,suffix,args)
declaration of erfcf	__MATHDECL(type,function,suffix,args)
declaration of erfcf	__MATH_PRECNAME(name,r)
declaration of erfcf	__MATHDECL_1(type,function,suffix,args)
declaration of __erff	__MATHCALL(function,suffix,args)
declaration of __erff	__MATH_PRECNAME(name,r)
declaration of __erff	__MATHDECL_1(type,function,suffix,args)
declaration of __erff	__MATHDECL(type,function,suffix,args)
declaration of erff	__MATHCALL(function,suffix,args)
declaration of erff	__MATHDECL(type,function,suffix,args)
declaration of erff	__MATH_PRECNAME(name,r)
declaration of erff	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf	__MATHCALL(function,suffix,args)
declaration of __ynf	__MATH_PRECNAME(name,r)
declaration of __ynf	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf	__MATHDECL(type,function,suffix,args)
declaration of ynf	__MATHCALL(function,suffix,args)
declaration of ynf	__MATHDECL(type,function,suffix,args)
declaration of ynf	__MATH_PRECNAME(name,r)
declaration of ynf	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f	__MATHCALL(function,suffix,args)
declaration of __y1f	__MATH_PRECNAME(name,r)
declaration of __y1f	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f	__MATHDECL(type,function,suffix,args)
declaration of y1f	__MATHCALL(function,suffix,args)
declaration of y1f	__MATHDECL(type,function,suffix,args)
declaration of y1f	__MATH_PRECNAME(name,r)
declaration of y1f	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f	__MATHCALL(function,suffix,args)
declaration of __y0f	__MATH_PRECNAME(name,r)
declaration of __y0f	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f	__MATHDECL(type,function,suffix,args)
declaration of y0f	__MATHCALL(function,suffix,args)
declaration of y0f	__MATHDECL(type,function,suffix,args)
declaration of y0f	__MATH_PRECNAME(name,r)
declaration of y0f	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf	__MATHCALL(function,suffix,args)
declaration of __jnf	__MATH_PRECNAME(name,r)
declaration of __jnf	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf	__MATHDECL(type,function,suffix,args)
declaration of jnf	__MATHCALL(function,suffix,args)
declaration of jnf	__MATHDECL(type,function,suffix,args)
declaration of jnf	__MATH_PRECNAME(name,r)
declaration of jnf	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f	__MATHCALL(function,suffix,args)
declaration of __j1f	__MATH_PRECNAME(name,r)
declaration of __j1f	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f	__MATHDECL(type,function,suffix,args)
declaration of j1f	__MATHCALL(function,suffix,args)
declaration of j1f	__MATHDECL(type,function,suffix,args)
declaration of j1f	__MATH_PRECNAME(name,r)
declaration of j1f	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f	__MATHCALL(function,suffix,args)
declaration of __j0f	__MATH_PRECNAME(name,r)
declaration of __j0f	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f	__MATHDECL(type,function,suffix,args)
declaration of j0f	__MATHCALL(function,suffix,args)
declaration of j0f	__MATHDECL(type,function,suffix,args)
declaration of j0f	__MATH_PRECNAME(name,r)
declaration of j0f	__MATHDECL_1(type,function,suffix,args)
declaration of isnanf	__MATHDECL_1(type,function,suffix,args)
declaration of isnanf	__MATH_PRECNAME(name,r)
declaration of __nanf	__MATHCALL(function,suffix,args)
declaration of __nanf	__MATH_PRECNAME(name,r)
declaration of __nanf	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf	__MATHDECL(type,function,suffix,args)
declaration of nanf	__MATHCALL(function,suffix,args)
declaration of nanf	__MATHDECL(type,function,suffix,args)
declaration of nanf	__MATH_PRECNAME(name,r)
declaration of nanf	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf	__MATHCALLX(function,suffix,args,attrib)
declaration of __copysignf	__MATH_PRECNAME(name,r)
declaration of __copysignf	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf	__MATHCALLX(function,suffix,args,attrib)
declaration of copysignf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf	__MATH_PRECNAME(name,r)
declaration of copysignf	__MATHDECL_1(type,function,suffix,args)
declaration of __significandf	__MATHCALL(function,suffix,args)
declaration of __significandf	__MATH_PRECNAME(name,r)
declaration of __significandf	__MATHDECL_1(type,function,suffix,args)
declaration of __significandf	__MATHDECL(type,function,suffix,args)
declaration of significandf	__MATHCALL(function,suffix,args)
declaration of significandf	__MATHDECL(type,function,suffix,args)
declaration of significandf	__MATH_PRECNAME(name,r)
declaration of significandf	__MATHDECL_1(type,function,suffix,args)
declaration of __dremf	__MATHCALL(function,suffix,args)
declaration of __dremf	__MATH_PRECNAME(name,r)
declaration of __dremf	__MATHDECL_1(type,function,suffix,args)
declaration of __dremf	__MATHDECL(type,function,suffix,args)
declaration of dremf	__MATHCALL(function,suffix,args)
declaration of dremf	__MATHDECL(type,function,suffix,args)
declaration of dremf	__MATH_PRECNAME(name,r)
declaration of dremf	__MATHDECL_1(type,function,suffix,args)
declaration of finitef	__MATHDECL_1(type,function,suffix,args)
declaration of finitef	__MATH_PRECNAME(name,r)
declaration of isinff	__MATHDECL_1(type,function,suffix,args)
declaration of isinff	__MATH_PRECNAME(name,r)
declaration of __fmodf	__MATHCALL(function,suffix,args)
declaration of __fmodf	__MATH_PRECNAME(name,r)
declaration of __fmodf	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf	__MATHDECL(type,function,suffix,args)
declaration of fmodf	__MATHCALL(function,suffix,args)
declaration of fmodf	__MATHDECL(type,function,suffix,args)
declaration of fmodf	__MATH_PRECNAME(name,r)
declaration of fmodf	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf	__MATHCALLX(function,suffix,args,attrib)
declaration of __floorf	__MATH_PRECNAME(name,r)
declaration of __floorf	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf	__MATHCALLX(function,suffix,args,attrib)
declaration of floorf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf	__MATH_PRECNAME(name,r)
declaration of floorf	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf	__MATHCALLX(function,suffix,args,attrib)
declaration of __fabsf	__MATH_PRECNAME(name,r)
declaration of __fabsf	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf	__MATHCALLX(function,suffix,args,attrib)
declaration of fabsf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf	__MATH_PRECNAME(name,r)
declaration of fabsf	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf	__MATHCALLX(function,suffix,args,attrib)
declaration of __ceilf	__MATH_PRECNAME(name,r)
declaration of __ceilf	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf	__MATHCALLX(function,suffix,args,attrib)
declaration of ceilf	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf	__MATH_PRECNAME(name,r)
declaration of ceilf	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf	__MATHCALL(function,suffix,args)
declaration of __cbrtf	__MATH_PRECNAME(name,r)
declaration of __cbrtf	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf	__MATHDECL(type,function,suffix,args)
declaration of cbrtf	__MATHCALL(function,suffix,args)
declaration of cbrtf	__MATHDECL(type,function,suffix,args)
declaration of cbrtf	__MATH_PRECNAME(name,r)
declaration of cbrtf	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf	__MATHCALL(function,suffix,args)
declaration of __hypotf	__MATH_PRECNAME(name,r)
declaration of __hypotf	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf	__MATHDECL(type,function,suffix,args)
declaration of hypotf	__MATHCALL(function,suffix,args)
declaration of hypotf	__MATHDECL(type,function,suffix,args)
declaration of hypotf	__MATH_PRECNAME(name,r)
declaration of hypotf	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf	__MATHCALL(function,suffix,args)
declaration of __sqrtf	__MATH_PRECNAME(name,r)
declaration of __sqrtf	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf	__MATHDECL(type,function,suffix,args)
declaration of sqrtf	__MATHCALL(function,suffix,args)
declaration of sqrtf	__MATHDECL(type,function,suffix,args)
declaration of sqrtf	__MATH_PRECNAME(name,r)
declaration of sqrtf	__MATHDECL_1(type,function,suffix,args)
declaration of __powf	__MATHCALL(function,suffix,args)
declaration of __powf	__MATHCALL_VEC(function,suffix,args)
declaration of __powf	__MATH_PRECNAME(name,r)
declaration of __powf	__MATHDECL_1(type,function,suffix,args)
declaration of __powf	__MATHDECL(type,function,suffix,args)
declaration of powf	__MATHCALL(function,suffix,args)
declaration of powf	__MATHCALL_VEC(function,suffix,args)
declaration of powf	__MATHDECL(type,function,suffix,args)
declaration of powf	__MATH_PRECNAME(name,r)
declaration of powf	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f	__MATHCALL(function,suffix,args)
declaration of __log2f	__MATH_PRECNAME(name,r)
declaration of __log2f	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f	__MATHDECL(type,function,suffix,args)
declaration of log2f	__MATHCALL(function,suffix,args)
declaration of log2f	__MATHDECL(type,function,suffix,args)
declaration of log2f	__MATH_PRECNAME(name,r)
declaration of log2f	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f	__MATHCALL(function,suffix,args)
declaration of __exp2f	__MATH_PRECNAME(name,r)
declaration of __exp2f	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f	__MATHDECL(type,function,suffix,args)
declaration of exp2f	__MATHCALL(function,suffix,args)
declaration of exp2f	__MATHDECL(type,function,suffix,args)
declaration of exp2f	__MATH_PRECNAME(name,r)
declaration of exp2f	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf	__MATHCALL(function,suffix,args)
declaration of __logbf	__MATH_PRECNAME(name,r)
declaration of __logbf	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf	__MATHDECL(type,function,suffix,args)
declaration of logbf	__MATHCALL(function,suffix,args)
declaration of logbf	__MATHDECL(type,function,suffix,args)
declaration of logbf	__MATH_PRECNAME(name,r)
declaration of logbf	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf	__MATHCALL(function,suffix,args)
declaration of __log1pf	__MATH_PRECNAME(name,r)
declaration of __log1pf	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf	__MATHDECL(type,function,suffix,args)
declaration of log1pf	__MATHCALL(function,suffix,args)
declaration of log1pf	__MATHDECL(type,function,suffix,args)
declaration of log1pf	__MATH_PRECNAME(name,r)
declaration of log1pf	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f	__MATHCALL(function,suffix,args)
declaration of __expm1f	__MATH_PRECNAME(name,r)
declaration of __expm1f	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f	__MATHDECL(type,function,suffix,args)
declaration of expm1f	__MATHCALL(function,suffix,args)
declaration of expm1f	__MATHDECL(type,function,suffix,args)
declaration of expm1f	__MATH_PRECNAME(name,r)
declaration of expm1f	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f	__MATHCALL(function,suffix,args)
declaration of __exp10f	__MATH_PRECNAME(name,r)
declaration of __exp10f	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f	__MATHDECL(type,function,suffix,args)
declaration of exp10f	__MATHCALL(function,suffix,args)
declaration of exp10f	__MATHDECL(type,function,suffix,args)
declaration of exp10f	__MATH_PRECNAME(name,r)
declaration of exp10f	__MATHDECL_1(type,function,suffix,args)
declaration of __modff	__MATHCALL(function,suffix,args)
declaration of __modff	__MATH_PRECNAME(name,r)
declaration of __modff	__MATHDECL_1(type,function,suffix,args)
declaration of __modff	__MATHDECL(type,function,suffix,args)
declaration of modff	__MATHCALL(function,suffix,args)
declaration of modff	__MATHDECL(type,function,suffix,args)
declaration of modff	__MATH_PRECNAME(name,r)
declaration of modff	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f	__MATHCALL(function,suffix,args)
declaration of __log10f	__MATH_PRECNAME(name,r)
declaration of __log10f	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f	__MATHDECL(type,function,suffix,args)
declaration of log10f	__MATHCALL(function,suffix,args)
declaration of log10f	__MATHDECL(type,function,suffix,args)
declaration of log10f	__MATH_PRECNAME(name,r)
declaration of log10f	__MATHDECL_1(type,function,suffix,args)
declaration of __logf	__MATHCALL(function,suffix,args)
declaration of __logf	__MATHCALL_VEC(function,suffix,args)
declaration of __logf	__MATH_PRECNAME(name,r)
declaration of __logf	__MATHDECL_1(type,function,suffix,args)
declaration of __logf	__MATHDECL(type,function,suffix,args)
declaration of logf	__MATHCALL(function,suffix,args)
declaration of logf	__MATHCALL_VEC(function,suffix,args)
declaration of logf	__MATHDECL(type,function,suffix,args)
declaration of logf	__MATH_PRECNAME(name,r)
declaration of logf	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf	__MATHCALL(function,suffix,args)
declaration of __ldexpf	__MATH_PRECNAME(name,r)
declaration of __ldexpf	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf	__MATHDECL(type,function,suffix,args)
declaration of ldexpf	__MATHCALL(function,suffix,args)
declaration of ldexpf	__MATHDECL(type,function,suffix,args)
declaration of ldexpf	__MATH_PRECNAME(name,r)
declaration of ldexpf	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf	__MATHCALL(function,suffix,args)
declaration of __frexpf	__MATH_PRECNAME(name,r)
declaration of __frexpf	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf	__MATHDECL(type,function,suffix,args)
declaration of frexpf	__MATHCALL(function,suffix,args)
declaration of frexpf	__MATHDECL(type,function,suffix,args)
declaration of frexpf	__MATH_PRECNAME(name,r)
declaration of frexpf	__MATHDECL_1(type,function,suffix,args)
declaration of __expf	__MATHCALL(function,suffix,args)
declaration of __expf	__MATHCALL_VEC(function,suffix,args)
declaration of __expf	__MATH_PRECNAME(name,r)
declaration of __expf	__MATHDECL_1(type,function,suffix,args)
declaration of __expf	__MATHDECL(type,function,suffix,args)
declaration of expf	__MATHCALL(function,suffix,args)
declaration of expf	__MATHCALL_VEC(function,suffix,args)
declaration of expf	__MATHDECL(type,function,suffix,args)
declaration of expf	__MATH_PRECNAME(name,r)
declaration of expf	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf	__MATHCALL(function,suffix,args)
declaration of __atanhf	__MATH_PRECNAME(name,r)
declaration of __atanhf	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf	__MATHDECL(type,function,suffix,args)
declaration of atanhf	__MATHCALL(function,suffix,args)
declaration of atanhf	__MATHDECL(type,function,suffix,args)
declaration of atanhf	__MATH_PRECNAME(name,r)
declaration of atanhf	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf	__MATHCALL(function,suffix,args)
declaration of __asinhf	__MATH_PRECNAME(name,r)
declaration of __asinhf	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf	__MATHDECL(type,function,suffix,args)
declaration of asinhf	__MATHCALL(function,suffix,args)
declaration of asinhf	__MATHDECL(type,function,suffix,args)
declaration of asinhf	__MATH_PRECNAME(name,r)
declaration of asinhf	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf	__MATHCALL(function,suffix,args)
declaration of __acoshf	__MATH_PRECNAME(name,r)
declaration of __acoshf	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf	__MATHDECL(type,function,suffix,args)
declaration of acoshf	__MATHCALL(function,suffix,args)
declaration of acoshf	__MATHDECL(type,function,suffix,args)
declaration of acoshf	__MATH_PRECNAME(name,r)
declaration of acoshf	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf	__MATHDECL_VEC(type,function,suffix,args)
declaration of __sincosf	__MATH_PRECNAME(name,r)
declaration of __sincosf	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf	__MATHDECL(type,function,suffix,args)
declaration of sincosf	__MATHDECL_VEC(type,function,suffix,args)
declaration of sincosf	__MATHDECL(type,function,suffix,args)
declaration of sincosf	__MATH_PRECNAME(name,r)
declaration of sincosf	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf	__MATHCALL(function,suffix,args)
declaration of __tanhf	__MATH_PRECNAME(name,r)
declaration of __tanhf	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf	__MATHDECL(type,function,suffix,args)
declaration of tanhf	__MATHCALL(function,suffix,args)
declaration of tanhf	__MATHDECL(type,function,suffix,args)
declaration of tanhf	__MATH_PRECNAME(name,r)
declaration of tanhf	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf	__MATHCALL(function,suffix,args)
declaration of __sinhf	__MATH_PRECNAME(name,r)
declaration of __sinhf	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf	__MATHDECL(type,function,suffix,args)
declaration of sinhf	__MATHCALL(function,suffix,args)
declaration of sinhf	__MATHDECL(type,function,suffix,args)
declaration of sinhf	__MATH_PRECNAME(name,r)
declaration of sinhf	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf	__MATHCALL(function,suffix,args)
declaration of __coshf	__MATH_PRECNAME(name,r)
declaration of __coshf	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf	__MATHDECL(type,function,suffix,args)
declaration of coshf	__MATHCALL(function,suffix,args)
declaration of coshf	__MATHDECL(type,function,suffix,args)
declaration of coshf	__MATH_PRECNAME(name,r)
declaration of coshf	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf	__MATHCALL(function,suffix,args)
declaration of __tanf	__MATH_PRECNAME(name,r)
declaration of __tanf	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf	__MATHDECL(type,function,suffix,args)
declaration of tanf	__MATHCALL(function,suffix,args)
declaration of tanf	__MATHDECL(type,function,suffix,args)
declaration of tanf	__MATH_PRECNAME(name,r)
declaration of tanf	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf	__MATHCALL(function,suffix,args)
declaration of __sinf	__MATHCALL_VEC(function,suffix,args)
declaration of __sinf	__MATH_PRECNAME(name,r)
declaration of __sinf	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf	__MATHDECL(type,function,suffix,args)
declaration of sinf	__MATHCALL(function,suffix,args)
declaration of sinf	__MATHCALL_VEC(function,suffix,args)
declaration of sinf	__MATHDECL(type,function,suffix,args)
declaration of sinf	__MATH_PRECNAME(name,r)
declaration of sinf	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf	__MATHCALL(function,suffix,args)
declaration of __cosf	__MATHCALL_VEC(function,suffix,args)
declaration of __cosf	__MATH_PRECNAME(name,r)
declaration of __cosf	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf	__MATHDECL(type,function,suffix,args)
declaration of cosf	__MATHCALL(function,suffix,args)
declaration of cosf	__MATHCALL_VEC(function,suffix,args)
declaration of cosf	__MATHDECL(type,function,suffix,args)
declaration of cosf	__MATH_PRECNAME(name,r)
declaration of cosf	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f	__MATHCALL(function,suffix,args)
declaration of __atan2f	__MATH_PRECNAME(name,r)
declaration of __atan2f	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f	__MATHDECL(type,function,suffix,args)
declaration of atan2f	__MATHCALL(function,suffix,args)
declaration of atan2f	__MATHDECL(type,function,suffix,args)
declaration of atan2f	__MATH_PRECNAME(name,r)
declaration of atan2f	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf	__MATHCALL(function,suffix,args)
declaration of __atanf	__MATH_PRECNAME(name,r)
declaration of __atanf	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf	__MATHDECL(type,function,suffix,args)
declaration of atanf	__MATHCALL(function,suffix,args)
declaration of atanf	__MATHDECL(type,function,suffix,args)
declaration of atanf	__MATH_PRECNAME(name,r)
declaration of atanf	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf	__MATHCALL(function,suffix,args)
declaration of __asinf	__MATH_PRECNAME(name,r)
declaration of __asinf	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf	__MATHDECL(type,function,suffix,args)
declaration of asinf	__MATHCALL(function,suffix,args)
declaration of asinf	__MATHDECL(type,function,suffix,args)
declaration of asinf	__MATH_PRECNAME(name,r)
declaration of asinf	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf	__MATHCALL(function,suffix,args)
declaration of __acosf	__MATH_PRECNAME(name,r)
declaration of __acosf	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf	__MATHDECL(type,function,suffix,args)
declaration of acosf	__MATHCALL(function,suffix,args)
declaration of acosf	__MATHDECL(type,function,suffix,args)
declaration of acosf	__MATH_PRECNAME(name,r)
declaration of acosf	__MATHDECL_1(type,function,suffix,args)
declaration of __issignalingl	__MATHDECL_1(type,function,suffix,args)
declaration of __issignalingl	__MATH_PRECNAME(name,r)
declaration of __iseqsigl	__MATHDECL_1(type,function,suffix,args)
declaration of __iseqsigl	__MATH_PRECNAME(name,r)
declaration of __isnanl	__MATHDECL_1(type,function,suffix,args)
declaration of __isnanl	__MATH_PRECNAME(name,r)
declaration of __finitel	__MATHDECL_1(type,function,suffix,args)
declaration of __finitel	__MATH_PRECNAME(name,r)
declaration of __isinfl	__MATHDECL_1(type,function,suffix,args)
declaration of __isinfl	__MATH_PRECNAME(name,r)
declaration of __signbitl	__MATHDECL_1(type,function,suffix,args)
declaration of __signbitl	__MATH_PRECNAME(name,r)
declaration of __fpclassifyl	__MATHDECL_1(type,function,suffix,args)
declaration of __fpclassifyl	__MATH_PRECNAME(name,r)
declaration of __scalbl	__MATHCALL(function,suffix,args)
declaration of __scalbl	__MATH_PRECNAME(name,r)
declaration of __scalbl	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbl	__MATHDECL(type,function,suffix,args)
declaration of scalbl	__MATHCALL(function,suffix,args)
declaration of scalbl	__MATHDECL(type,function,suffix,args)
declaration of scalbl	__MATH_PRECNAME(name,r)
declaration of scalbl	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigl	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigl	__MATH_PRECNAME(name,r)
declaration of setpayloadl	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadl	__MATH_PRECNAME(name,r)
declaration of __getpayloadl	__MATHCALL(function,suffix,args)
declaration of __getpayloadl	__MATH_PRECNAME(name,r)
declaration of __getpayloadl	__MATHDECL_1(type,function,suffix,args)
declaration of __getpayloadl	__MATHDECL(type,function,suffix,args)
declaration of getpayloadl	__MATHCALL(function,suffix,args)
declaration of getpayloadl	__MATHDECL(type,function,suffix,args)
declaration of getpayloadl	__MATH_PRECNAME(name,r)
declaration of getpayloadl	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizel	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizel	__MATH_PRECNAME(name,r)
declaration of totalordermagl	__MATHDECL_1(type,function,suffix,args)
declaration of totalordermagl	__MATH_PRECNAME(name,r)
declaration of totalorderl	__MATHDECL_1(type,function,suffix,args)
declaration of totalorderl	__MATH_PRECNAME(name,r)
declaration of __fminmagl	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminmagl	__MATH_PRECNAME(name,r)
declaration of __fminmagl	__MATHDECL_1(type,function,suffix,args)
declaration of __fminmagl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagl	__MATHCALLX(function,suffix,args,attrib)
declaration of fminmagl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagl	__MATH_PRECNAME(name,r)
declaration of fminmagl	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagl	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxmagl	__MATH_PRECNAME(name,r)
declaration of __fmaxmagl	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagl	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxmagl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagl	__MATH_PRECNAME(name,r)
declaration of fmaxmagl	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpxl	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpxl	__MATH_PRECNAME(name,r)
declaration of __ufromfpxl	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpxl	__MATHDECL(type,function,suffix,args)
declaration of ufromfpxl	__MATH_PRECNAME(name,r)
declaration of ufromfpxl	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpxl	__MATHDECL(type,function,suffix,args)
declaration of __fromfpxl	__MATH_PRECNAME(name,r)
declaration of __fromfpxl	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpxl	__MATHDECL(type,function,suffix,args)
declaration of fromfpxl	__MATH_PRECNAME(name,r)
declaration of fromfpxl	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpl	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpl	__MATH_PRECNAME(name,r)
declaration of __ufromfpl	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpl	__MATHDECL(type,function,suffix,args)
declaration of ufromfpl	__MATH_PRECNAME(name,r)
declaration of ufromfpl	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpl	__MATHDECL(type,function,suffix,args)
declaration of __fromfpl	__MATH_PRECNAME(name,r)
declaration of __fromfpl	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpl	__MATHDECL(type,function,suffix,args)
declaration of fromfpl	__MATH_PRECNAME(name,r)
declaration of fromfpl	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenl	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundevenl	__MATH_PRECNAME(name,r)
declaration of __roundevenl	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenl	__MATHCALLX(function,suffix,args,attrib)
declaration of roundevenl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenl	__MATH_PRECNAME(name,r)
declaration of roundevenl	__MATHDECL_1(type,function,suffix,args)
declaration of __fmal	__MATHCALL(function,suffix,args)
declaration of __fmal	__MATH_PRECNAME(name,r)
declaration of __fmal	__MATHDECL_1(type,function,suffix,args)
declaration of __fmal	__MATHDECL(type,function,suffix,args)
declaration of fmal	__MATHCALL(function,suffix,args)
declaration of fmal	__MATHDECL(type,function,suffix,args)
declaration of fmal	__MATH_PRECNAME(name,r)
declaration of fmal	__MATHDECL_1(type,function,suffix,args)
declaration of __fminl	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminl	__MATH_PRECNAME(name,r)
declaration of __fminl	__MATHDECL_1(type,function,suffix,args)
declaration of __fminl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminl	__MATHCALLX(function,suffix,args,attrib)
declaration of fminl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminl	__MATH_PRECNAME(name,r)
declaration of fminl	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxl	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxl	__MATH_PRECNAME(name,r)
declaration of __fmaxl	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxl	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxl	__MATH_PRECNAME(name,r)
declaration of fmaxl	__MATHDECL_1(type,function,suffix,args)
declaration of __fdiml	__MATHCALL(function,suffix,args)
declaration of __fdiml	__MATH_PRECNAME(name,r)
declaration of __fdiml	__MATHDECL_1(type,function,suffix,args)
declaration of __fdiml	__MATHDECL(type,function,suffix,args)
declaration of fdiml	__MATHCALL(function,suffix,args)
declaration of fdiml	__MATHDECL(type,function,suffix,args)
declaration of fdiml	__MATH_PRECNAME(name,r)
declaration of fdiml	__MATHDECL_1(type,function,suffix,args)
declaration of __llroundl	__MATHDECL(type,function,suffix,args)
declaration of __llroundl	__MATH_PRECNAME(name,r)
declaration of __llroundl	__MATHDECL_1(type,function,suffix,args)
declaration of llroundl	__MATHDECL(type,function,suffix,args)
declaration of llroundl	__MATH_PRECNAME(name,r)
declaration of llroundl	__MATHDECL_1(type,function,suffix,args)
declaration of __lroundl	__MATHDECL(type,function,suffix,args)
declaration of __lroundl	__MATH_PRECNAME(name,r)
declaration of __lroundl	__MATHDECL_1(type,function,suffix,args)
declaration of lroundl	__MATHDECL(type,function,suffix,args)
declaration of lroundl	__MATH_PRECNAME(name,r)
declaration of lroundl	__MATHDECL_1(type,function,suffix,args)
declaration of __llrintl	__MATHDECL(type,function,suffix,args)
declaration of __llrintl	__MATH_PRECNAME(name,r)
declaration of __llrintl	__MATHDECL_1(type,function,suffix,args)
declaration of llrintl	__MATHDECL(type,function,suffix,args)
declaration of llrintl	__MATH_PRECNAME(name,r)
declaration of llrintl	__MATHDECL_1(type,function,suffix,args)
declaration of __lrintl	__MATHDECL(type,function,suffix,args)
declaration of __lrintl	__MATH_PRECNAME(name,r)
declaration of __lrintl	__MATHDECL_1(type,function,suffix,args)
declaration of lrintl	__MATHDECL(type,function,suffix,args)
declaration of lrintl	__MATH_PRECNAME(name,r)
declaration of lrintl	__MATHDECL_1(type,function,suffix,args)
declaration of __remquol	__MATHCALL(function,suffix,args)
declaration of __remquol	__MATH_PRECNAME(name,r)
declaration of __remquol	__MATHDECL_1(type,function,suffix,args)
declaration of __remquol	__MATHDECL(type,function,suffix,args)
declaration of remquol	__MATHCALL(function,suffix,args)
declaration of remquol	__MATHDECL(type,function,suffix,args)
declaration of remquol	__MATH_PRECNAME(name,r)
declaration of remquol	__MATHDECL_1(type,function,suffix,args)
declaration of __truncl	__MATHCALLX(function,suffix,args,attrib)
declaration of __truncl	__MATH_PRECNAME(name,r)
declaration of __truncl	__MATHDECL_1(type,function,suffix,args)
declaration of __truncl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncl	__MATHCALLX(function,suffix,args,attrib)
declaration of truncl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncl	__MATH_PRECNAME(name,r)
declaration of truncl	__MATHDECL_1(type,function,suffix,args)
declaration of __roundl	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundl	__MATH_PRECNAME(name,r)
declaration of __roundl	__MATHDECL_1(type,function,suffix,args)
declaration of __roundl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundl	__MATHCALLX(function,suffix,args,attrib)
declaration of roundl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundl	__MATH_PRECNAME(name,r)
declaration of roundl	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintl	__MATHCALL(function,suffix,args)
declaration of __nearbyintl	__MATH_PRECNAME(name,r)
declaration of __nearbyintl	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintl	__MATHDECL(type,function,suffix,args)
declaration of nearbyintl	__MATHCALL(function,suffix,args)
declaration of nearbyintl	__MATHDECL(type,function,suffix,args)
declaration of nearbyintl	__MATH_PRECNAME(name,r)
declaration of nearbyintl	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnl	__MATHCALL(function,suffix,args)
declaration of __scalblnl	__MATH_PRECNAME(name,r)
declaration of __scalblnl	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnl	__MATHDECL(type,function,suffix,args)
declaration of scalblnl	__MATHCALL(function,suffix,args)
declaration of scalblnl	__MATHDECL(type,function,suffix,args)
declaration of scalblnl	__MATH_PRECNAME(name,r)
declaration of scalblnl	__MATHDECL_1(type,function,suffix,args)
declaration of __llogbl	__MATHDECL(type,function,suffix,args)
declaration of __llogbl	__MATH_PRECNAME(name,r)
declaration of __llogbl	__MATHDECL_1(type,function,suffix,args)
declaration of llogbl	__MATHDECL(type,function,suffix,args)
declaration of llogbl	__MATH_PRECNAME(name,r)
declaration of llogbl	__MATHDECL_1(type,function,suffix,args)
declaration of __ilogbl	__MATHDECL(type,function,suffix,args)
declaration of __ilogbl	__MATH_PRECNAME(name,r)
declaration of __ilogbl	__MATHDECL_1(type,function,suffix,args)
declaration of ilogbl	__MATHDECL(type,function,suffix,args)
declaration of ilogbl	__MATH_PRECNAME(name,r)
declaration of ilogbl	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnl	__MATHCALL(function,suffix,args)
declaration of __scalbnl	__MATH_PRECNAME(name,r)
declaration of __scalbnl	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnl	__MATHDECL(type,function,suffix,args)
declaration of scalbnl	__MATHCALL(function,suffix,args)
declaration of scalbnl	__MATHDECL(type,function,suffix,args)
declaration of scalbnl	__MATH_PRECNAME(name,r)
declaration of scalbnl	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderl	__MATHCALL(function,suffix,args)
declaration of __remainderl	__MATH_PRECNAME(name,r)
declaration of __remainderl	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderl	__MATHDECL(type,function,suffix,args)
declaration of remainderl	__MATHCALL(function,suffix,args)
declaration of remainderl	__MATHDECL(type,function,suffix,args)
declaration of remainderl	__MATH_PRECNAME(name,r)
declaration of remainderl	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupl	__MATHCALL(function,suffix,args)
declaration of __nextupl	__MATH_PRECNAME(name,r)
declaration of __nextupl	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupl	__MATHDECL(type,function,suffix,args)
declaration of nextupl	__MATHCALL(function,suffix,args)
declaration of nextupl	__MATHDECL(type,function,suffix,args)
declaration of nextupl	__MATH_PRECNAME(name,r)
declaration of nextupl	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownl	__MATHCALL(function,suffix,args)
declaration of __nextdownl	__MATH_PRECNAME(name,r)
declaration of __nextdownl	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownl	__MATHDECL(type,function,suffix,args)
declaration of nextdownl	__MATHCALL(function,suffix,args)
declaration of nextdownl	__MATHDECL(type,function,suffix,args)
declaration of nextdownl	__MATH_PRECNAME(name,r)
declaration of nextdownl	__MATHDECL_1(type,function,suffix,args)
declaration of __nexttowardl	__MATHCALL(function,suffix,args)
declaration of __nexttowardl	__MATH_PRECNAME(name,r)
declaration of __nexttowardl	__MATHDECL_1(type,function,suffix,args)
declaration of __nexttowardl	__MATHDECL(type,function,suffix,args)
declaration of nexttowardl	__MATHCALL(function,suffix,args)
declaration of nexttowardl	__MATHDECL(type,function,suffix,args)
declaration of nexttowardl	__MATH_PRECNAME(name,r)
declaration of nexttowardl	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterl	__MATHCALL(function,suffix,args)
declaration of __nextafterl	__MATH_PRECNAME(name,r)
declaration of __nextafterl	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterl	__MATHDECL(type,function,suffix,args)
declaration of nextafterl	__MATHCALL(function,suffix,args)
declaration of nextafterl	__MATHDECL(type,function,suffix,args)
declaration of nextafterl	__MATH_PRECNAME(name,r)
declaration of nextafterl	__MATHDECL_1(type,function,suffix,args)
declaration of __rintl	__MATHCALL(function,suffix,args)
declaration of __rintl	__MATH_PRECNAME(name,r)
declaration of __rintl	__MATHDECL_1(type,function,suffix,args)
declaration of __rintl	__MATHDECL(type,function,suffix,args)
declaration of rintl	__MATHCALL(function,suffix,args)
declaration of rintl	__MATHDECL(type,function,suffix,args)
declaration of rintl	__MATH_PRECNAME(name,r)
declaration of rintl	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammal_r	__MATHCALL(function,suffix,args)
declaration of __lgammal_r	__MATH_PRECNAME(name,r)
declaration of __lgammal_r	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammal_r	__MATHDECL(type,function,suffix,args)
declaration of lgammal_r	__MATHCALL(function,suffix,args)
declaration of lgammal_r	__MATHDECL(type,function,suffix,args)
declaration of lgammal_r	__MATH_PRECNAME(name,r)
declaration of lgammal_r	__MATHDECL_1(type,function,suffix,args)
declaration of __gammal	__MATHCALL(function,suffix,args)
declaration of __gammal	__MATH_PRECNAME(name,r)
declaration of __gammal	__MATHDECL_1(type,function,suffix,args)
declaration of __gammal	__MATHDECL(type,function,suffix,args)
declaration of gammal	__MATHCALL(function,suffix,args)
declaration of gammal	__MATHDECL(type,function,suffix,args)
declaration of gammal	__MATH_PRECNAME(name,r)
declaration of gammal	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammal	__MATHCALL(function,suffix,args)
declaration of __tgammal	__MATH_PRECNAME(name,r)
declaration of __tgammal	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammal	__MATHDECL(type,function,suffix,args)
declaration of tgammal	__MATHCALL(function,suffix,args)
declaration of tgammal	__MATHDECL(type,function,suffix,args)
declaration of tgammal	__MATH_PRECNAME(name,r)
declaration of tgammal	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammal	__MATHCALL(function,suffix,args)
declaration of __lgammal	__MATH_PRECNAME(name,r)
declaration of __lgammal	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammal	__MATHDECL(type,function,suffix,args)
declaration of lgammal	__MATHCALL(function,suffix,args)
declaration of lgammal	__MATHDECL(type,function,suffix,args)
declaration of lgammal	__MATH_PRECNAME(name,r)
declaration of lgammal	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcl	__MATHCALL(function,suffix,args)
declaration of __erfcl	__MATH_PRECNAME(name,r)
declaration of __erfcl	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcl	__MATHDECL(type,function,suffix,args)
declaration of erfcl	__MATHCALL(function,suffix,args)
declaration of erfcl	__MATHDECL(type,function,suffix,args)
declaration of erfcl	__MATH_PRECNAME(name,r)
declaration of erfcl	__MATHDECL_1(type,function,suffix,args)
declaration of __erfl	__MATHCALL(function,suffix,args)
declaration of __erfl	__MATH_PRECNAME(name,r)
declaration of __erfl	__MATHDECL_1(type,function,suffix,args)
declaration of __erfl	__MATHDECL(type,function,suffix,args)
declaration of erfl	__MATHCALL(function,suffix,args)
declaration of erfl	__MATHDECL(type,function,suffix,args)
declaration of erfl	__MATH_PRECNAME(name,r)
declaration of erfl	__MATHDECL_1(type,function,suffix,args)
declaration of __ynl	__MATHCALL(function,suffix,args)
declaration of __ynl	__MATH_PRECNAME(name,r)
declaration of __ynl	__MATHDECL_1(type,function,suffix,args)
declaration of __ynl	__MATHDECL(type,function,suffix,args)
declaration of ynl	__MATHCALL(function,suffix,args)
declaration of ynl	__MATHDECL(type,function,suffix,args)
declaration of ynl	__MATH_PRECNAME(name,r)
declaration of ynl	__MATHDECL_1(type,function,suffix,args)
declaration of __y1l	__MATHCALL(function,suffix,args)
declaration of __y1l	__MATH_PRECNAME(name,r)
declaration of __y1l	__MATHDECL_1(type,function,suffix,args)
declaration of __y1l	__MATHDECL(type,function,suffix,args)
declaration of y1l	__MATHCALL(function,suffix,args)
declaration of y1l	__MATHDECL(type,function,suffix,args)
declaration of y1l	__MATH_PRECNAME(name,r)
declaration of y1l	__MATHDECL_1(type,function,suffix,args)
declaration of __y0l	__MATHCALL(function,suffix,args)
declaration of __y0l	__MATH_PRECNAME(name,r)
declaration of __y0l	__MATHDECL_1(type,function,suffix,args)
declaration of __y0l	__MATHDECL(type,function,suffix,args)
declaration of y0l	__MATHCALL(function,suffix,args)
declaration of y0l	__MATHDECL(type,function,suffix,args)
declaration of y0l	__MATH_PRECNAME(name,r)
declaration of y0l	__MATHDECL_1(type,function,suffix,args)
declaration of __jnl	__MATHCALL(function,suffix,args)
declaration of __jnl	__MATH_PRECNAME(name,r)
declaration of __jnl	__MATHDECL_1(type,function,suffix,args)
declaration of __jnl	__MATHDECL(type,function,suffix,args)
declaration of jnl	__MATHCALL(function,suffix,args)
declaration of jnl	__MATHDECL(type,function,suffix,args)
declaration of jnl	__MATH_PRECNAME(name,r)
declaration of jnl	__MATHDECL_1(type,function,suffix,args)
declaration of __j1l	__MATHCALL(function,suffix,args)
declaration of __j1l	__MATH_PRECNAME(name,r)
declaration of __j1l	__MATHDECL_1(type,function,suffix,args)
declaration of __j1l	__MATHDECL(type,function,suffix,args)
declaration of j1l	__MATHCALL(function,suffix,args)
declaration of j1l	__MATHDECL(type,function,suffix,args)
declaration of j1l	__MATH_PRECNAME(name,r)
declaration of j1l	__MATHDECL_1(type,function,suffix,args)
declaration of __j0l	__MATHCALL(function,suffix,args)
declaration of __j0l	__MATH_PRECNAME(name,r)
declaration of __j0l	__MATHDECL_1(type,function,suffix,args)
declaration of __j0l	__MATHDECL(type,function,suffix,args)
declaration of j0l	__MATHCALL(function,suffix,args)
declaration of j0l	__MATHDECL(type,function,suffix,args)
declaration of j0l	__MATH_PRECNAME(name,r)
declaration of j0l	__MATHDECL_1(type,function,suffix,args)
declaration of isnanl	__MATHDECL_1(type,function,suffix,args)
declaration of isnanl	__MATH_PRECNAME(name,r)
declaration of __nanl	__MATHCALL(function,suffix,args)
declaration of __nanl	__MATH_PRECNAME(name,r)
declaration of __nanl	__MATHDECL_1(type,function,suffix,args)
declaration of __nanl	__MATHDECL(type,function,suffix,args)
declaration of nanl	__MATHCALL(function,suffix,args)
declaration of nanl	__MATHDECL(type,function,suffix,args)
declaration of nanl	__MATH_PRECNAME(name,r)
declaration of nanl	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignl	__MATHCALLX(function,suffix,args,attrib)
declaration of __copysignl	__MATH_PRECNAME(name,r)
declaration of __copysignl	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignl	__MATHCALLX(function,suffix,args,attrib)
declaration of copysignl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignl	__MATH_PRECNAME(name,r)
declaration of copysignl	__MATHDECL_1(type,function,suffix,args)
declaration of __significandl	__MATHCALL(function,suffix,args)
declaration of __significandl	__MATH_PRECNAME(name,r)
declaration of __significandl	__MATHDECL_1(type,function,suffix,args)
declaration of __significandl	__MATHDECL(type,function,suffix,args)
declaration of significandl	__MATHCALL(function,suffix,args)
declaration of significandl	__MATHDECL(type,function,suffix,args)
declaration of significandl	__MATH_PRECNAME(name,r)
declaration of significandl	__MATHDECL_1(type,function,suffix,args)
declaration of __dreml	__MATHCALL(function,suffix,args)
declaration of __dreml	__MATH_PRECNAME(name,r)
declaration of __dreml	__MATHDECL_1(type,function,suffix,args)
declaration of __dreml	__MATHDECL(type,function,suffix,args)
declaration of dreml	__MATHCALL(function,suffix,args)
declaration of dreml	__MATHDECL(type,function,suffix,args)
declaration of dreml	__MATH_PRECNAME(name,r)
declaration of dreml	__MATHDECL_1(type,function,suffix,args)
declaration of finitel	__MATHDECL_1(type,function,suffix,args)
declaration of finitel	__MATH_PRECNAME(name,r)
declaration of isinfl	__MATHDECL_1(type,function,suffix,args)
declaration of isinfl	__MATH_PRECNAME(name,r)
declaration of __fmodl	__MATHCALL(function,suffix,args)
declaration of __fmodl	__MATH_PRECNAME(name,r)
declaration of __fmodl	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodl	__MATHDECL(type,function,suffix,args)
declaration of fmodl	__MATHCALL(function,suffix,args)
declaration of fmodl	__MATHDECL(type,function,suffix,args)
declaration of fmodl	__MATH_PRECNAME(name,r)
declaration of fmodl	__MATHDECL_1(type,function,suffix,args)
declaration of __floorl	__MATHCALLX(function,suffix,args,attrib)
declaration of __floorl	__MATH_PRECNAME(name,r)
declaration of __floorl	__MATHDECL_1(type,function,suffix,args)
declaration of __floorl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorl	__MATHCALLX(function,suffix,args,attrib)
declaration of floorl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorl	__MATH_PRECNAME(name,r)
declaration of floorl	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsl	__MATHCALLX(function,suffix,args,attrib)
declaration of __fabsl	__MATH_PRECNAME(name,r)
declaration of __fabsl	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsl	__MATHCALLX(function,suffix,args,attrib)
declaration of fabsl	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsl	__MATH_PRECNAME(name,r)
declaration of fabsl	__MATHDECL_1(type,function,suffix,args)
declaration of __ceill	__MATHCALLX(function,suffix,args,attrib)
declaration of __ceill	__MATH_PRECNAME(name,r)
declaration of __ceill	__MATHDECL_1(type,function,suffix,args)
declaration of __ceill	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceill	__MATHCALLX(function,suffix,args,attrib)
declaration of ceill	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceill	__MATH_PRECNAME(name,r)
declaration of ceill	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtl	__MATHCALL(function,suffix,args)
declaration of __cbrtl	__MATH_PRECNAME(name,r)
declaration of __cbrtl	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtl	__MATHDECL(type,function,suffix,args)
declaration of cbrtl	__MATHCALL(function,suffix,args)
declaration of cbrtl	__MATHDECL(type,function,suffix,args)
declaration of cbrtl	__MATH_PRECNAME(name,r)
declaration of cbrtl	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotl	__MATHCALL(function,suffix,args)
declaration of __hypotl	__MATH_PRECNAME(name,r)
declaration of __hypotl	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotl	__MATHDECL(type,function,suffix,args)
declaration of hypotl	__MATHCALL(function,suffix,args)
declaration of hypotl	__MATHDECL(type,function,suffix,args)
declaration of hypotl	__MATH_PRECNAME(name,r)
declaration of hypotl	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtl	__MATHCALL(function,suffix,args)
declaration of __sqrtl	__MATH_PRECNAME(name,r)
declaration of __sqrtl	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtl	__MATHDECL(type,function,suffix,args)
declaration of sqrtl	__MATHCALL(function,suffix,args)
declaration of sqrtl	__MATHDECL(type,function,suffix,args)
declaration of sqrtl	__MATH_PRECNAME(name,r)
declaration of sqrtl	__MATHDECL_1(type,function,suffix,args)
declaration of __powl	__MATHCALL(function,suffix,args)
declaration of __powl	__MATHCALL_VEC(function,suffix,args)
declaration of __powl	__MATH_PRECNAME(name,r)
declaration of __powl	__MATHDECL_1(type,function,suffix,args)
declaration of __powl	__MATHDECL(type,function,suffix,args)
declaration of powl	__MATHCALL(function,suffix,args)
declaration of powl	__MATHCALL_VEC(function,suffix,args)
declaration of powl	__MATHDECL(type,function,suffix,args)
declaration of powl	__MATH_PRECNAME(name,r)
declaration of powl	__MATHDECL_1(type,function,suffix,args)
declaration of __log2l	__MATHCALL(function,suffix,args)
declaration of __log2l	__MATH_PRECNAME(name,r)
declaration of __log2l	__MATHDECL_1(type,function,suffix,args)
declaration of __log2l	__MATHDECL(type,function,suffix,args)
declaration of log2l	__MATHCALL(function,suffix,args)
declaration of log2l	__MATHDECL(type,function,suffix,args)
declaration of log2l	__MATH_PRECNAME(name,r)
declaration of log2l	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2l	__MATHCALL(function,suffix,args)
declaration of __exp2l	__MATH_PRECNAME(name,r)
declaration of __exp2l	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2l	__MATHDECL(type,function,suffix,args)
declaration of exp2l	__MATHCALL(function,suffix,args)
declaration of exp2l	__MATHDECL(type,function,suffix,args)
declaration of exp2l	__MATH_PRECNAME(name,r)
declaration of exp2l	__MATHDECL_1(type,function,suffix,args)
declaration of __logbl	__MATHCALL(function,suffix,args)
declaration of __logbl	__MATH_PRECNAME(name,r)
declaration of __logbl	__MATHDECL_1(type,function,suffix,args)
declaration of __logbl	__MATHDECL(type,function,suffix,args)
declaration of logbl	__MATHCALL(function,suffix,args)
declaration of logbl	__MATHDECL(type,function,suffix,args)
declaration of logbl	__MATH_PRECNAME(name,r)
declaration of logbl	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pl	__MATHCALL(function,suffix,args)
declaration of __log1pl	__MATH_PRECNAME(name,r)
declaration of __log1pl	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pl	__MATHDECL(type,function,suffix,args)
declaration of log1pl	__MATHCALL(function,suffix,args)
declaration of log1pl	__MATHDECL(type,function,suffix,args)
declaration of log1pl	__MATH_PRECNAME(name,r)
declaration of log1pl	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1l	__MATHCALL(function,suffix,args)
declaration of __expm1l	__MATH_PRECNAME(name,r)
declaration of __expm1l	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1l	__MATHDECL(type,function,suffix,args)
declaration of expm1l	__MATHCALL(function,suffix,args)
declaration of expm1l	__MATHDECL(type,function,suffix,args)
declaration of expm1l	__MATH_PRECNAME(name,r)
declaration of expm1l	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10l	__MATHCALL(function,suffix,args)
declaration of __exp10l	__MATH_PRECNAME(name,r)
declaration of __exp10l	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10l	__MATHDECL(type,function,suffix,args)
declaration of exp10l	__MATHCALL(function,suffix,args)
declaration of exp10l	__MATHDECL(type,function,suffix,args)
declaration of exp10l	__MATH_PRECNAME(name,r)
declaration of exp10l	__MATHDECL_1(type,function,suffix,args)
declaration of __modfl	__MATHCALL(function,suffix,args)
declaration of __modfl	__MATH_PRECNAME(name,r)
declaration of __modfl	__MATHDECL_1(type,function,suffix,args)
declaration of __modfl	__MATHDECL(type,function,suffix,args)
declaration of modfl	__MATHCALL(function,suffix,args)
declaration of modfl	__MATHDECL(type,function,suffix,args)
declaration of modfl	__MATH_PRECNAME(name,r)
declaration of modfl	__MATHDECL_1(type,function,suffix,args)
declaration of __log10l	__MATHCALL(function,suffix,args)
declaration of __log10l	__MATH_PRECNAME(name,r)
declaration of __log10l	__MATHDECL_1(type,function,suffix,args)
declaration of __log10l	__MATHDECL(type,function,suffix,args)
declaration of log10l	__MATHCALL(function,suffix,args)
declaration of log10l	__MATHDECL(type,function,suffix,args)
declaration of log10l	__MATH_PRECNAME(name,r)
declaration of log10l	__MATHDECL_1(type,function,suffix,args)
declaration of __logl	__MATHCALL(function,suffix,args)
declaration of __logl	__MATHCALL_VEC(function,suffix,args)
declaration of __logl	__MATH_PRECNAME(name,r)
declaration of __logl	__MATHDECL_1(type,function,suffix,args)
declaration of __logl	__MATHDECL(type,function,suffix,args)
declaration of logl	__MATHCALL(function,suffix,args)
declaration of logl	__MATHCALL_VEC(function,suffix,args)
declaration of logl	__MATHDECL(type,function,suffix,args)
declaration of logl	__MATH_PRECNAME(name,r)
declaration of logl	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpl	__MATHCALL(function,suffix,args)
declaration of __ldexpl	__MATH_PRECNAME(name,r)
declaration of __ldexpl	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpl	__MATHDECL(type,function,suffix,args)
declaration of ldexpl	__MATHCALL(function,suffix,args)
declaration of ldexpl	__MATHDECL(type,function,suffix,args)
declaration of ldexpl	__MATH_PRECNAME(name,r)
declaration of ldexpl	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpl	__MATHCALL(function,suffix,args)
declaration of __frexpl	__MATH_PRECNAME(name,r)
declaration of __frexpl	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpl	__MATHDECL(type,function,suffix,args)
declaration of frexpl	__MATHCALL(function,suffix,args)
declaration of frexpl	__MATHDECL(type,function,suffix,args)
declaration of frexpl	__MATH_PRECNAME(name,r)
declaration of frexpl	__MATHDECL_1(type,function,suffix,args)
declaration of __expl	__MATHCALL(function,suffix,args)
declaration of __expl	__MATHCALL_VEC(function,suffix,args)
declaration of __expl	__MATH_PRECNAME(name,r)
declaration of __expl	__MATHDECL_1(type,function,suffix,args)
declaration of __expl	__MATHDECL(type,function,suffix,args)
declaration of expl	__MATHCALL(function,suffix,args)
declaration of expl	__MATHCALL_VEC(function,suffix,args)
declaration of expl	__MATHDECL(type,function,suffix,args)
declaration of expl	__MATH_PRECNAME(name,r)
declaration of expl	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhl	__MATHCALL(function,suffix,args)
declaration of __atanhl	__MATH_PRECNAME(name,r)
declaration of __atanhl	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhl	__MATHDECL(type,function,suffix,args)
declaration of atanhl	__MATHCALL(function,suffix,args)
declaration of atanhl	__MATHDECL(type,function,suffix,args)
declaration of atanhl	__MATH_PRECNAME(name,r)
declaration of atanhl	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhl	__MATHCALL(function,suffix,args)
declaration of __asinhl	__MATH_PRECNAME(name,r)
declaration of __asinhl	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhl	__MATHDECL(type,function,suffix,args)
declaration of asinhl	__MATHCALL(function,suffix,args)
declaration of asinhl	__MATHDECL(type,function,suffix,args)
declaration of asinhl	__MATH_PRECNAME(name,r)
declaration of asinhl	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshl	__MATHCALL(function,suffix,args)
declaration of __acoshl	__MATH_PRECNAME(name,r)
declaration of __acoshl	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshl	__MATHDECL(type,function,suffix,args)
declaration of acoshl	__MATHCALL(function,suffix,args)
declaration of acoshl	__MATHDECL(type,function,suffix,args)
declaration of acoshl	__MATH_PRECNAME(name,r)
declaration of acoshl	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosl	__MATHDECL_VEC(type,function,suffix,args)
declaration of __sincosl	__MATH_PRECNAME(name,r)
declaration of __sincosl	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosl	__MATHDECL(type,function,suffix,args)
declaration of sincosl	__MATHDECL_VEC(type,function,suffix,args)
declaration of sincosl	__MATHDECL(type,function,suffix,args)
declaration of sincosl	__MATH_PRECNAME(name,r)
declaration of sincosl	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhl	__MATHCALL(function,suffix,args)
declaration of __tanhl	__MATH_PRECNAME(name,r)
declaration of __tanhl	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhl	__MATHDECL(type,function,suffix,args)
declaration of tanhl	__MATHCALL(function,suffix,args)
declaration of tanhl	__MATHDECL(type,function,suffix,args)
declaration of tanhl	__MATH_PRECNAME(name,r)
declaration of tanhl	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhl	__MATHCALL(function,suffix,args)
declaration of __sinhl	__MATH_PRECNAME(name,r)
declaration of __sinhl	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhl	__MATHDECL(type,function,suffix,args)
declaration of sinhl	__MATHCALL(function,suffix,args)
declaration of sinhl	__MATHDECL(type,function,suffix,args)
declaration of sinhl	__MATH_PRECNAME(name,r)
declaration of sinhl	__MATHDECL_1(type,function,suffix,args)
declaration of __coshl	__MATHCALL(function,suffix,args)
declaration of __coshl	__MATH_PRECNAME(name,r)
declaration of __coshl	__MATHDECL_1(type,function,suffix,args)
declaration of __coshl	__MATHDECL(type,function,suffix,args)
declaration of coshl	__MATHCALL(function,suffix,args)
declaration of coshl	__MATHDECL(type,function,suffix,args)
declaration of coshl	__MATH_PRECNAME(name,r)
declaration of coshl	__MATHDECL_1(type,function,suffix,args)
declaration of __tanl	__MATHCALL(function,suffix,args)
declaration of __tanl	__MATH_PRECNAME(name,r)
declaration of __tanl	__MATHDECL_1(type,function,suffix,args)
declaration of __tanl	__MATHDECL(type,function,suffix,args)
declaration of tanl	__MATHCALL(function,suffix,args)
declaration of tanl	__MATHDECL(type,function,suffix,args)
declaration of tanl	__MATH_PRECNAME(name,r)
declaration of tanl	__MATHDECL_1(type,function,suffix,args)
declaration of __sinl	__MATHCALL(function,suffix,args)
declaration of __sinl	__MATHCALL_VEC(function,suffix,args)
declaration of __sinl	__MATH_PRECNAME(name,r)
declaration of __sinl	__MATHDECL_1(type,function,suffix,args)
declaration of __sinl	__MATHDECL(type,function,suffix,args)
declaration of sinl	__MATHCALL(function,suffix,args)
declaration of sinl	__MATHCALL_VEC(function,suffix,args)
declaration of sinl	__MATHDECL(type,function,suffix,args)
declaration of sinl	__MATH_PRECNAME(name,r)
declaration of sinl	__MATHDECL_1(type,function,suffix,args)
declaration of __cosl	__MATHCALL(function,suffix,args)
declaration of __cosl	__MATHCALL_VEC(function,suffix,args)
declaration of __cosl	__MATH_PRECNAME(name,r)
declaration of __cosl	__MATHDECL_1(type,function,suffix,args)
declaration of __cosl	__MATHDECL(type,function,suffix,args)
declaration of cosl	__MATHCALL(function,suffix,args)
declaration of cosl	__MATHCALL_VEC(function,suffix,args)
declaration of cosl	__MATHDECL(type,function,suffix,args)
declaration of cosl	__MATH_PRECNAME(name,r)
declaration of cosl	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2l	__MATHCALL(function,suffix,args)
declaration of __atan2l	__MATH_PRECNAME(name,r)
declaration of __atan2l	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2l	__MATHDECL(type,function,suffix,args)
declaration of atan2l	__MATHCALL(function,suffix,args)
declaration of atan2l	__MATHDECL(type,function,suffix,args)
declaration of atan2l	__MATH_PRECNAME(name,r)
declaration of atan2l	__MATHDECL_1(type,function,suffix,args)
declaration of __atanl	__MATHCALL(function,suffix,args)
declaration of __atanl	__MATH_PRECNAME(name,r)
declaration of __atanl	__MATHDECL_1(type,function,suffix,args)
declaration of __atanl	__MATHDECL(type,function,suffix,args)
declaration of atanl	__MATHCALL(function,suffix,args)
declaration of atanl	__MATHDECL(type,function,suffix,args)
declaration of atanl	__MATH_PRECNAME(name,r)
declaration of atanl	__MATHDECL_1(type,function,suffix,args)
declaration of __asinl	__MATHCALL(function,suffix,args)
declaration of __asinl	__MATH_PRECNAME(name,r)
declaration of __asinl	__MATHDECL_1(type,function,suffix,args)
declaration of __asinl	__MATHDECL(type,function,suffix,args)
declaration of asinl	__MATHCALL(function,suffix,args)
declaration of asinl	__MATHDECL(type,function,suffix,args)
declaration of asinl	__MATH_PRECNAME(name,r)
declaration of asinl	__MATHDECL_1(type,function,suffix,args)
declaration of __acosl	__MATHCALL(function,suffix,args)
declaration of __acosl	__MATH_PRECNAME(name,r)
declaration of __acosl	__MATHDECL_1(type,function,suffix,args)
declaration of __acosl	__MATHDECL(type,function,suffix,args)
declaration of acosl	__MATHCALL(function,suffix,args)
declaration of acosl	__MATHDECL(type,function,suffix,args)
declaration of acosl	__MATH_PRECNAME(name,r)
declaration of acosl	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf32	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf32	__MATH_PRECNAME(name,r)
declaration of setpayloadf32	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadf32	__MATH_PRECNAME(name,r)
declaration of __getpayloadf32	__MATHCALL(function,suffix,args)
declaration of __getpayloadf32	__MATH_PRECNAME(name,r)
declaration of __getpayloadf32	__MATHDECL_1(type,function,suffix,args)
declaration of __getpayloadf32	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf32	__MATHCALL(function,suffix,args)
declaration of getpayloadf32	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf32	__MATH_PRECNAME(name,r)
declaration of getpayloadf32	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef32	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef32	__MATH_PRECNAME(name,r)
declaration of totalordermagf32	__MATHDECL_1(type,function,suffix,args)
declaration of totalordermagf32	__MATH_PRECNAME(name,r)
declaration of totalorderf32	__MATHDECL_1(type,function,suffix,args)
declaration of totalorderf32	__MATH_PRECNAME(name,r)
declaration of __fminmagf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminmagf32	__MATH_PRECNAME(name,r)
declaration of __fminmagf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fminmagf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf32	__MATHCALLX(function,suffix,args,attrib)
declaration of fminmagf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf32	__MATH_PRECNAME(name,r)
declaration of fminmagf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxmagf32	__MATH_PRECNAME(name,r)
declaration of __fmaxmagf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf32	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxmagf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf32	__MATH_PRECNAME(name,r)
declaration of fmaxmagf32	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpxf32	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpxf32	__MATH_PRECNAME(name,r)
declaration of __ufromfpxf32	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpxf32	__MATHDECL(type,function,suffix,args)
declaration of ufromfpxf32	__MATH_PRECNAME(name,r)
declaration of ufromfpxf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpxf32	__MATHDECL(type,function,suffix,args)
declaration of __fromfpxf32	__MATH_PRECNAME(name,r)
declaration of __fromfpxf32	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpxf32	__MATHDECL(type,function,suffix,args)
declaration of fromfpxf32	__MATH_PRECNAME(name,r)
declaration of fromfpxf32	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpf32	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpf32	__MATH_PRECNAME(name,r)
declaration of __ufromfpf32	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpf32	__MATHDECL(type,function,suffix,args)
declaration of ufromfpf32	__MATH_PRECNAME(name,r)
declaration of ufromfpf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpf32	__MATHDECL(type,function,suffix,args)
declaration of __fromfpf32	__MATH_PRECNAME(name,r)
declaration of __fromfpf32	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpf32	__MATHDECL(type,function,suffix,args)
declaration of fromfpf32	__MATH_PRECNAME(name,r)
declaration of fromfpf32	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundevenf32	__MATH_PRECNAME(name,r)
declaration of __roundevenf32	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf32	__MATHCALLX(function,suffix,args,attrib)
declaration of roundevenf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf32	__MATH_PRECNAME(name,r)
declaration of roundevenf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf32	__MATHCALL(function,suffix,args)
declaration of __fmaf32	__MATH_PRECNAME(name,r)
declaration of __fmaf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf32	__MATHDECL(type,function,suffix,args)
declaration of fmaf32	__MATHCALL(function,suffix,args)
declaration of fmaf32	__MATHDECL(type,function,suffix,args)
declaration of fmaf32	__MATH_PRECNAME(name,r)
declaration of fmaf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminf32	__MATH_PRECNAME(name,r)
declaration of __fminf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf32	__MATHCALLX(function,suffix,args,attrib)
declaration of fminf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf32	__MATH_PRECNAME(name,r)
declaration of fminf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxf32	__MATH_PRECNAME(name,r)
declaration of __fmaxf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf32	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf32	__MATH_PRECNAME(name,r)
declaration of fmaxf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf32	__MATHCALL(function,suffix,args)
declaration of __fdimf32	__MATH_PRECNAME(name,r)
declaration of __fdimf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf32	__MATHDECL(type,function,suffix,args)
declaration of fdimf32	__MATHCALL(function,suffix,args)
declaration of fdimf32	__MATHDECL(type,function,suffix,args)
declaration of fdimf32	__MATH_PRECNAME(name,r)
declaration of fdimf32	__MATHDECL_1(type,function,suffix,args)
declaration of __llroundf32	__MATHDECL(type,function,suffix,args)
declaration of __llroundf32	__MATH_PRECNAME(name,r)
declaration of __llroundf32	__MATHDECL_1(type,function,suffix,args)
declaration of llroundf32	__MATHDECL(type,function,suffix,args)
declaration of llroundf32	__MATH_PRECNAME(name,r)
declaration of llroundf32	__MATHDECL_1(type,function,suffix,args)
declaration of __lroundf32	__MATHDECL(type,function,suffix,args)
declaration of __lroundf32	__MATH_PRECNAME(name,r)
declaration of __lroundf32	__MATHDECL_1(type,function,suffix,args)
declaration of lroundf32	__MATHDECL(type,function,suffix,args)
declaration of lroundf32	__MATH_PRECNAME(name,r)
declaration of lroundf32	__MATHDECL_1(type,function,suffix,args)
declaration of __llrintf32	__MATHDECL(type,function,suffix,args)
declaration of __llrintf32	__MATH_PRECNAME(name,r)
declaration of __llrintf32	__MATHDECL_1(type,function,suffix,args)
declaration of llrintf32	__MATHDECL(type,function,suffix,args)
declaration of llrintf32	__MATH_PRECNAME(name,r)
declaration of llrintf32	__MATHDECL_1(type,function,suffix,args)
declaration of __lrintf32	__MATHDECL(type,function,suffix,args)
declaration of __lrintf32	__MATH_PRECNAME(name,r)
declaration of __lrintf32	__MATHDECL_1(type,function,suffix,args)
declaration of lrintf32	__MATHDECL(type,function,suffix,args)
declaration of lrintf32	__MATH_PRECNAME(name,r)
declaration of lrintf32	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof32	__MATHCALL(function,suffix,args)
declaration of __remquof32	__MATH_PRECNAME(name,r)
declaration of __remquof32	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof32	__MATHDECL(type,function,suffix,args)
declaration of remquof32	__MATHCALL(function,suffix,args)
declaration of remquof32	__MATHDECL(type,function,suffix,args)
declaration of remquof32	__MATH_PRECNAME(name,r)
declaration of remquof32	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __truncf32	__MATH_PRECNAME(name,r)
declaration of __truncf32	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf32	__MATHCALLX(function,suffix,args,attrib)
declaration of truncf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf32	__MATH_PRECNAME(name,r)
declaration of truncf32	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundf32	__MATH_PRECNAME(name,r)
declaration of __roundf32	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf32	__MATHCALLX(function,suffix,args,attrib)
declaration of roundf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf32	__MATH_PRECNAME(name,r)
declaration of roundf32	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf32	__MATHCALL(function,suffix,args)
declaration of __nearbyintf32	__MATH_PRECNAME(name,r)
declaration of __nearbyintf32	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf32	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf32	__MATHCALL(function,suffix,args)
declaration of nearbyintf32	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf32	__MATH_PRECNAME(name,r)
declaration of nearbyintf32	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf32	__MATHCALL(function,suffix,args)
declaration of __scalblnf32	__MATH_PRECNAME(name,r)
declaration of __scalblnf32	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf32	__MATHDECL(type,function,suffix,args)
declaration of scalblnf32	__MATHCALL(function,suffix,args)
declaration of scalblnf32	__MATHDECL(type,function,suffix,args)
declaration of scalblnf32	__MATH_PRECNAME(name,r)
declaration of scalblnf32	__MATHDECL_1(type,function,suffix,args)
declaration of __llogbf32	__MATHDECL(type,function,suffix,args)
declaration of __llogbf32	__MATH_PRECNAME(name,r)
declaration of __llogbf32	__MATHDECL_1(type,function,suffix,args)
declaration of llogbf32	__MATHDECL(type,function,suffix,args)
declaration of llogbf32	__MATH_PRECNAME(name,r)
declaration of llogbf32	__MATHDECL_1(type,function,suffix,args)
declaration of __ilogbf32	__MATHDECL(type,function,suffix,args)
declaration of __ilogbf32	__MATH_PRECNAME(name,r)
declaration of __ilogbf32	__MATHDECL_1(type,function,suffix,args)
declaration of ilogbf32	__MATHDECL(type,function,suffix,args)
declaration of ilogbf32	__MATH_PRECNAME(name,r)
declaration of ilogbf32	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf32	__MATHCALL(function,suffix,args)
declaration of __scalbnf32	__MATH_PRECNAME(name,r)
declaration of __scalbnf32	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf32	__MATHDECL(type,function,suffix,args)
declaration of scalbnf32	__MATHCALL(function,suffix,args)
declaration of scalbnf32	__MATHDECL(type,function,suffix,args)
declaration of scalbnf32	__MATH_PRECNAME(name,r)
declaration of scalbnf32	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf32	__MATHCALL(function,suffix,args)
declaration of __remainderf32	__MATH_PRECNAME(name,r)
declaration of __remainderf32	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf32	__MATHDECL(type,function,suffix,args)
declaration of remainderf32	__MATHCALL(function,suffix,args)
declaration of remainderf32	__MATHDECL(type,function,suffix,args)
declaration of remainderf32	__MATH_PRECNAME(name,r)
declaration of remainderf32	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf32	__MATHCALL(function,suffix,args)
declaration of __nextupf32	__MATH_PRECNAME(name,r)
declaration of __nextupf32	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf32	__MATHDECL(type,function,suffix,args)
declaration of nextupf32	__MATHCALL(function,suffix,args)
declaration of nextupf32	__MATHDECL(type,function,suffix,args)
declaration of nextupf32	__MATH_PRECNAME(name,r)
declaration of nextupf32	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf32	__MATHCALL(function,suffix,args)
declaration of __nextdownf32	__MATH_PRECNAME(name,r)
declaration of __nextdownf32	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf32	__MATHDECL(type,function,suffix,args)
declaration of nextdownf32	__MATHCALL(function,suffix,args)
declaration of nextdownf32	__MATHDECL(type,function,suffix,args)
declaration of nextdownf32	__MATH_PRECNAME(name,r)
declaration of nextdownf32	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf32	__MATHCALL(function,suffix,args)
declaration of __nextafterf32	__MATH_PRECNAME(name,r)
declaration of __nextafterf32	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf32	__MATHDECL(type,function,suffix,args)
declaration of nextafterf32	__MATHCALL(function,suffix,args)
declaration of nextafterf32	__MATHDECL(type,function,suffix,args)
declaration of nextafterf32	__MATH_PRECNAME(name,r)
declaration of nextafterf32	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf32	__MATHCALL(function,suffix,args)
declaration of __rintf32	__MATH_PRECNAME(name,r)
declaration of __rintf32	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf32	__MATHDECL(type,function,suffix,args)
declaration of rintf32	__MATHCALL(function,suffix,args)
declaration of rintf32	__MATHDECL(type,function,suffix,args)
declaration of rintf32	__MATH_PRECNAME(name,r)
declaration of rintf32	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf32_r	__MATHCALL(function,suffix,args)
declaration of __lgammaf32_r	__MATH_PRECNAME(name,r)
declaration of __lgammaf32_r	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf32_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf32_r	__MATHCALL(function,suffix,args)
declaration of lgammaf32_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf32_r	__MATH_PRECNAME(name,r)
declaration of lgammaf32_r	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf32	__MATHCALL(function,suffix,args)
declaration of __tgammaf32	__MATH_PRECNAME(name,r)
declaration of __tgammaf32	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf32	__MATHDECL(type,function,suffix,args)
declaration of tgammaf32	__MATHCALL(function,suffix,args)
declaration of tgammaf32	__MATHDECL(type,function,suffix,args)
declaration of tgammaf32	__MATH_PRECNAME(name,r)
declaration of tgammaf32	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf32	__MATHCALL(function,suffix,args)
declaration of __lgammaf32	__MATH_PRECNAME(name,r)
declaration of __lgammaf32	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf32	__MATHDECL(type,function,suffix,args)
declaration of lgammaf32	__MATHCALL(function,suffix,args)
declaration of lgammaf32	__MATHDECL(type,function,suffix,args)
declaration of lgammaf32	__MATH_PRECNAME(name,r)
declaration of lgammaf32	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf32	__MATHCALL(function,suffix,args)
declaration of __erfcf32	__MATH_PRECNAME(name,r)
declaration of __erfcf32	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf32	__MATHDECL(type,function,suffix,args)
declaration of erfcf32	__MATHCALL(function,suffix,args)
declaration of erfcf32	__MATHDECL(type,function,suffix,args)
declaration of erfcf32	__MATH_PRECNAME(name,r)
declaration of erfcf32	__MATHDECL_1(type,function,suffix,args)
declaration of __erff32	__MATHCALL(function,suffix,args)
declaration of __erff32	__MATH_PRECNAME(name,r)
declaration of __erff32	__MATHDECL_1(type,function,suffix,args)
declaration of __erff32	__MATHDECL(type,function,suffix,args)
declaration of erff32	__MATHCALL(function,suffix,args)
declaration of erff32	__MATHDECL(type,function,suffix,args)
declaration of erff32	__MATH_PRECNAME(name,r)
declaration of erff32	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf32	__MATHCALL(function,suffix,args)
declaration of __ynf32	__MATH_PRECNAME(name,r)
declaration of __ynf32	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf32	__MATHDECL(type,function,suffix,args)
declaration of ynf32	__MATHCALL(function,suffix,args)
declaration of ynf32	__MATHDECL(type,function,suffix,args)
declaration of ynf32	__MATH_PRECNAME(name,r)
declaration of ynf32	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f32	__MATHCALL(function,suffix,args)
declaration of __y1f32	__MATH_PRECNAME(name,r)
declaration of __y1f32	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f32	__MATHDECL(type,function,suffix,args)
declaration of y1f32	__MATHCALL(function,suffix,args)
declaration of y1f32	__MATHDECL(type,function,suffix,args)
declaration of y1f32	__MATH_PRECNAME(name,r)
declaration of y1f32	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f32	__MATHCALL(function,suffix,args)
declaration of __y0f32	__MATH_PRECNAME(name,r)
declaration of __y0f32	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f32	__MATHDECL(type,function,suffix,args)
declaration of y0f32	__MATHCALL(function,suffix,args)
declaration of y0f32	__MATHDECL(type,function,suffix,args)
declaration of y0f32	__MATH_PRECNAME(name,r)
declaration of y0f32	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf32	__MATHCALL(function,suffix,args)
declaration of __jnf32	__MATH_PRECNAME(name,r)
declaration of __jnf32	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf32	__MATHDECL(type,function,suffix,args)
declaration of jnf32	__MATHCALL(function,suffix,args)
declaration of jnf32	__MATHDECL(type,function,suffix,args)
declaration of jnf32	__MATH_PRECNAME(name,r)
declaration of jnf32	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f32	__MATHCALL(function,suffix,args)
declaration of __j1f32	__MATH_PRECNAME(name,r)
declaration of __j1f32	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f32	__MATHDECL(type,function,suffix,args)
declaration of j1f32	__MATHCALL(function,suffix,args)
declaration of j1f32	__MATHDECL(type,function,suffix,args)
declaration of j1f32	__MATH_PRECNAME(name,r)
declaration of j1f32	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f32	__MATHCALL(function,suffix,args)
declaration of __j0f32	__MATH_PRECNAME(name,r)
declaration of __j0f32	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f32	__MATHDECL(type,function,suffix,args)
declaration of j0f32	__MATHCALL(function,suffix,args)
declaration of j0f32	__MATHDECL(type,function,suffix,args)
declaration of j0f32	__MATH_PRECNAME(name,r)
declaration of j0f32	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf32	__MATHCALL(function,suffix,args)
declaration of __nanf32	__MATH_PRECNAME(name,r)
declaration of __nanf32	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf32	__MATHDECL(type,function,suffix,args)
declaration of nanf32	__MATHCALL(function,suffix,args)
declaration of nanf32	__MATHDECL(type,function,suffix,args)
declaration of nanf32	__MATH_PRECNAME(name,r)
declaration of nanf32	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __copysignf32	__MATH_PRECNAME(name,r)
declaration of __copysignf32	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf32	__MATHCALLX(function,suffix,args,attrib)
declaration of copysignf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf32	__MATH_PRECNAME(name,r)
declaration of copysignf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf32	__MATHCALL(function,suffix,args)
declaration of __fmodf32	__MATH_PRECNAME(name,r)
declaration of __fmodf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf32	__MATHDECL(type,function,suffix,args)
declaration of fmodf32	__MATHCALL(function,suffix,args)
declaration of fmodf32	__MATHDECL(type,function,suffix,args)
declaration of fmodf32	__MATH_PRECNAME(name,r)
declaration of fmodf32	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __floorf32	__MATH_PRECNAME(name,r)
declaration of __floorf32	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf32	__MATHCALLX(function,suffix,args,attrib)
declaration of floorf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf32	__MATH_PRECNAME(name,r)
declaration of floorf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __fabsf32	__MATH_PRECNAME(name,r)
declaration of __fabsf32	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf32	__MATHCALLX(function,suffix,args,attrib)
declaration of fabsf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf32	__MATH_PRECNAME(name,r)
declaration of fabsf32	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf32	__MATHCALLX(function,suffix,args,attrib)
declaration of __ceilf32	__MATH_PRECNAME(name,r)
declaration of __ceilf32	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf32	__MATHCALLX(function,suffix,args,attrib)
declaration of ceilf32	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf32	__MATH_PRECNAME(name,r)
declaration of ceilf32	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf32	__MATHCALL(function,suffix,args)
declaration of __cbrtf32	__MATH_PRECNAME(name,r)
declaration of __cbrtf32	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf32	__MATHDECL(type,function,suffix,args)
declaration of cbrtf32	__MATHCALL(function,suffix,args)
declaration of cbrtf32	__MATHDECL(type,function,suffix,args)
declaration of cbrtf32	__MATH_PRECNAME(name,r)
declaration of cbrtf32	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf32	__MATHCALL(function,suffix,args)
declaration of __hypotf32	__MATH_PRECNAME(name,r)
declaration of __hypotf32	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf32	__MATHDECL(type,function,suffix,args)
declaration of hypotf32	__MATHCALL(function,suffix,args)
declaration of hypotf32	__MATHDECL(type,function,suffix,args)
declaration of hypotf32	__MATH_PRECNAME(name,r)
declaration of hypotf32	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf32	__MATHCALL(function,suffix,args)
declaration of __sqrtf32	__MATH_PRECNAME(name,r)
declaration of __sqrtf32	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf32	__MATHDECL(type,function,suffix,args)
declaration of sqrtf32	__MATHCALL(function,suffix,args)
declaration of sqrtf32	__MATHDECL(type,function,suffix,args)
declaration of sqrtf32	__MATH_PRECNAME(name,r)
declaration of sqrtf32	__MATHDECL_1(type,function,suffix,args)
declaration of __powf32	__MATHCALL(function,suffix,args)
declaration of __powf32	__MATHCALL_VEC(function,suffix,args)
declaration of __powf32	__MATH_PRECNAME(name,r)
declaration of __powf32	__MATHDECL_1(type,function,suffix,args)
declaration of __powf32	__MATHDECL(type,function,suffix,args)
declaration of powf32	__MATHCALL(function,suffix,args)
declaration of powf32	__MATHCALL_VEC(function,suffix,args)
declaration of powf32	__MATHDECL(type,function,suffix,args)
declaration of powf32	__MATH_PRECNAME(name,r)
declaration of powf32	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f32	__MATHCALL(function,suffix,args)
declaration of __log2f32	__MATH_PRECNAME(name,r)
declaration of __log2f32	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f32	__MATHDECL(type,function,suffix,args)
declaration of log2f32	__MATHCALL(function,suffix,args)
declaration of log2f32	__MATHDECL(type,function,suffix,args)
declaration of log2f32	__MATH_PRECNAME(name,r)
declaration of log2f32	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f32	__MATHCALL(function,suffix,args)
declaration of __exp2f32	__MATH_PRECNAME(name,r)
declaration of __exp2f32	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f32	__MATHDECL(type,function,suffix,args)
declaration of exp2f32	__MATHCALL(function,suffix,args)
declaration of exp2f32	__MATHDECL(type,function,suffix,args)
declaration of exp2f32	__MATH_PRECNAME(name,r)
declaration of exp2f32	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf32	__MATHCALL(function,suffix,args)
declaration of __logbf32	__MATH_PRECNAME(name,r)
declaration of __logbf32	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf32	__MATHDECL(type,function,suffix,args)
declaration of logbf32	__MATHCALL(function,suffix,args)
declaration of logbf32	__MATHDECL(type,function,suffix,args)
declaration of logbf32	__MATH_PRECNAME(name,r)
declaration of logbf32	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf32	__MATHCALL(function,suffix,args)
declaration of __log1pf32	__MATH_PRECNAME(name,r)
declaration of __log1pf32	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf32	__MATHDECL(type,function,suffix,args)
declaration of log1pf32	__MATHCALL(function,suffix,args)
declaration of log1pf32	__MATHDECL(type,function,suffix,args)
declaration of log1pf32	__MATH_PRECNAME(name,r)
declaration of log1pf32	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f32	__MATHCALL(function,suffix,args)
declaration of __expm1f32	__MATH_PRECNAME(name,r)
declaration of __expm1f32	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f32	__MATHDECL(type,function,suffix,args)
declaration of expm1f32	__MATHCALL(function,suffix,args)
declaration of expm1f32	__MATHDECL(type,function,suffix,args)
declaration of expm1f32	__MATH_PRECNAME(name,r)
declaration of expm1f32	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f32	__MATHCALL(function,suffix,args)
declaration of __exp10f32	__MATH_PRECNAME(name,r)
declaration of __exp10f32	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f32	__MATHDECL(type,function,suffix,args)
declaration of exp10f32	__MATHCALL(function,suffix,args)
declaration of exp10f32	__MATHDECL(type,function,suffix,args)
declaration of exp10f32	__MATH_PRECNAME(name,r)
declaration of exp10f32	__MATHDECL_1(type,function,suffix,args)
declaration of __modff32	__MATHCALL(function,suffix,args)
declaration of __modff32	__MATH_PRECNAME(name,r)
declaration of __modff32	__MATHDECL_1(type,function,suffix,args)
declaration of __modff32	__MATHDECL(type,function,suffix,args)
declaration of modff32	__MATHCALL(function,suffix,args)
declaration of modff32	__MATHDECL(type,function,suffix,args)
declaration of modff32	__MATH_PRECNAME(name,r)
declaration of modff32	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f32	__MATHCALL(function,suffix,args)
declaration of __log10f32	__MATH_PRECNAME(name,r)
declaration of __log10f32	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f32	__MATHDECL(type,function,suffix,args)
declaration of log10f32	__MATHCALL(function,suffix,args)
declaration of log10f32	__MATHDECL(type,function,suffix,args)
declaration of log10f32	__MATH_PRECNAME(name,r)
declaration of log10f32	__MATHDECL_1(type,function,suffix,args)
declaration of __logf32	__MATHCALL(function,suffix,args)
declaration of __logf32	__MATHCALL_VEC(function,suffix,args)
declaration of __logf32	__MATH_PRECNAME(name,r)
declaration of __logf32	__MATHDECL_1(type,function,suffix,args)
declaration of __logf32	__MATHDECL(type,function,suffix,args)
declaration of logf32	__MATHCALL(function,suffix,args)
declaration of logf32	__MATHCALL_VEC(function,suffix,args)
declaration of logf32	__MATHDECL(type,function,suffix,args)
declaration of logf32	__MATH_PRECNAME(name,r)
declaration of logf32	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf32	__MATHCALL(function,suffix,args)
declaration of __ldexpf32	__MATH_PRECNAME(name,r)
declaration of __ldexpf32	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf32	__MATHDECL(type,function,suffix,args)
declaration of ldexpf32	__MATHCALL(function,suffix,args)
declaration of ldexpf32	__MATHDECL(type,function,suffix,args)
declaration of ldexpf32	__MATH_PRECNAME(name,r)
declaration of ldexpf32	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf32	__MATHCALL(function,suffix,args)
declaration of __frexpf32	__MATH_PRECNAME(name,r)
declaration of __frexpf32	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf32	__MATHDECL(type,function,suffix,args)
declaration of frexpf32	__MATHCALL(function,suffix,args)
declaration of frexpf32	__MATHDECL(type,function,suffix,args)
declaration of frexpf32	__MATH_PRECNAME(name,r)
declaration of frexpf32	__MATHDECL_1(type,function,suffix,args)
declaration of __expf32	__MATHCALL(function,suffix,args)
declaration of __expf32	__MATHCALL_VEC(function,suffix,args)
declaration of __expf32	__MATH_PRECNAME(name,r)
declaration of __expf32	__MATHDECL_1(type,function,suffix,args)
declaration of __expf32	__MATHDECL(type,function,suffix,args)
declaration of expf32	__MATHCALL(function,suffix,args)
declaration of expf32	__MATHCALL_VEC(function,suffix,args)
declaration of expf32	__MATHDECL(type,function,suffix,args)
declaration of expf32	__MATH_PRECNAME(name,r)
declaration of expf32	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf32	__MATHCALL(function,suffix,args)
declaration of __atanhf32	__MATH_PRECNAME(name,r)
declaration of __atanhf32	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf32	__MATHDECL(type,function,suffix,args)
declaration of atanhf32	__MATHCALL(function,suffix,args)
declaration of atanhf32	__MATHDECL(type,function,suffix,args)
declaration of atanhf32	__MATH_PRECNAME(name,r)
declaration of atanhf32	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf32	__MATHCALL(function,suffix,args)
declaration of __asinhf32	__MATH_PRECNAME(name,r)
declaration of __asinhf32	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf32	__MATHDECL(type,function,suffix,args)
declaration of asinhf32	__MATHCALL(function,suffix,args)
declaration of asinhf32	__MATHDECL(type,function,suffix,args)
declaration of asinhf32	__MATH_PRECNAME(name,r)
declaration of asinhf32	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf32	__MATHCALL(function,suffix,args)
declaration of __acoshf32	__MATH_PRECNAME(name,r)
declaration of __acoshf32	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf32	__MATHDECL(type,function,suffix,args)
declaration of acoshf32	__MATHCALL(function,suffix,args)
declaration of acoshf32	__MATHDECL(type,function,suffix,args)
declaration of acoshf32	__MATH_PRECNAME(name,r)
declaration of acoshf32	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf32	__MATHDECL_VEC(type,function,suffix,args)
declaration of __sincosf32	__MATH_PRECNAME(name,r)
declaration of __sincosf32	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf32	__MATHDECL(type,function,suffix,args)
declaration of sincosf32	__MATHDECL_VEC(type,function,suffix,args)
declaration of sincosf32	__MATHDECL(type,function,suffix,args)
declaration of sincosf32	__MATH_PRECNAME(name,r)
declaration of sincosf32	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf32	__MATHCALL(function,suffix,args)
declaration of __tanhf32	__MATH_PRECNAME(name,r)
declaration of __tanhf32	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf32	__MATHDECL(type,function,suffix,args)
declaration of tanhf32	__MATHCALL(function,suffix,args)
declaration of tanhf32	__MATHDECL(type,function,suffix,args)
declaration of tanhf32	__MATH_PRECNAME(name,r)
declaration of tanhf32	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf32	__MATHCALL(function,suffix,args)
declaration of __sinhf32	__MATH_PRECNAME(name,r)
declaration of __sinhf32	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf32	__MATHDECL(type,function,suffix,args)
declaration of sinhf32	__MATHCALL(function,suffix,args)
declaration of sinhf32	__MATHDECL(type,function,suffix,args)
declaration of sinhf32	__MATH_PRECNAME(name,r)
declaration of sinhf32	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf32	__MATHCALL(function,suffix,args)
declaration of __coshf32	__MATH_PRECNAME(name,r)
declaration of __coshf32	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf32	__MATHDECL(type,function,suffix,args)
declaration of coshf32	__MATHCALL(function,suffix,args)
declaration of coshf32	__MATHDECL(type,function,suffix,args)
declaration of coshf32	__MATH_PRECNAME(name,r)
declaration of coshf32	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf32	__MATHCALL(function,suffix,args)
declaration of __tanf32	__MATH_PRECNAME(name,r)
declaration of __tanf32	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf32	__MATHDECL(type,function,suffix,args)
declaration of tanf32	__MATHCALL(function,suffix,args)
declaration of tanf32	__MATHDECL(type,function,suffix,args)
declaration of tanf32	__MATH_PRECNAME(name,r)
declaration of tanf32	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf32	__MATHCALL(function,suffix,args)
declaration of __sinf32	__MATHCALL_VEC(function,suffix,args)
declaration of __sinf32	__MATH_PRECNAME(name,r)
declaration of __sinf32	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf32	__MATHDECL(type,function,suffix,args)
declaration of sinf32	__MATHCALL(function,suffix,args)
declaration of sinf32	__MATHCALL_VEC(function,suffix,args)
declaration of sinf32	__MATHDECL(type,function,suffix,args)
declaration of sinf32	__MATH_PRECNAME(name,r)
declaration of sinf32	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf32	__MATHCALL(function,suffix,args)
declaration of __cosf32	__MATHCALL_VEC(function,suffix,args)
declaration of __cosf32	__MATH_PRECNAME(name,r)
declaration of __cosf32	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf32	__MATHDECL(type,function,suffix,args)
declaration of cosf32	__MATHCALL(function,suffix,args)
declaration of cosf32	__MATHCALL_VEC(function,suffix,args)
declaration of cosf32	__MATHDECL(type,function,suffix,args)
declaration of cosf32	__MATH_PRECNAME(name,r)
declaration of cosf32	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f32	__MATHCALL(function,suffix,args)
declaration of __atan2f32	__MATH_PRECNAME(name,r)
declaration of __atan2f32	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f32	__MATHDECL(type,function,suffix,args)
declaration of atan2f32	__MATHCALL(function,suffix,args)
declaration of atan2f32	__MATHDECL(type,function,suffix,args)
declaration of atan2f32	__MATH_PRECNAME(name,r)
declaration of atan2f32	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf32	__MATHCALL(function,suffix,args)
declaration of __atanf32	__MATH_PRECNAME(name,r)
declaration of __atanf32	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf32	__MATHDECL(type,function,suffix,args)
declaration of atanf32	__MATHCALL(function,suffix,args)
declaration of atanf32	__MATHDECL(type,function,suffix,args)
declaration of atanf32	__MATH_PRECNAME(name,r)
declaration of atanf32	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf32	__MATHCALL(function,suffix,args)
declaration of __asinf32	__MATH_PRECNAME(name,r)
declaration of __asinf32	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf32	__MATHDECL(type,function,suffix,args)
declaration of asinf32	__MATHCALL(function,suffix,args)
declaration of asinf32	__MATHDECL(type,function,suffix,args)
declaration of asinf32	__MATH_PRECNAME(name,r)
declaration of asinf32	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf32	__MATHCALL(function,suffix,args)
declaration of __acosf32	__MATH_PRECNAME(name,r)
declaration of __acosf32	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf32	__MATHDECL(type,function,suffix,args)
declaration of acosf32	__MATHCALL(function,suffix,args)
declaration of acosf32	__MATHDECL(type,function,suffix,args)
declaration of acosf32	__MATH_PRECNAME(name,r)
declaration of acosf32	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf64	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf64	__MATH_PRECNAME(name,r)
declaration of setpayloadf64	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadf64	__MATH_PRECNAME(name,r)
declaration of __getpayloadf64	__MATHCALL(function,suffix,args)
declaration of __getpayloadf64	__MATH_PRECNAME(name,r)
declaration of __getpayloadf64	__MATHDECL_1(type,function,suffix,args)
declaration of __getpayloadf64	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf64	__MATHCALL(function,suffix,args)
declaration of getpayloadf64	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf64	__MATH_PRECNAME(name,r)
declaration of getpayloadf64	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef64	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef64	__MATH_PRECNAME(name,r)
declaration of totalordermagf64	__MATHDECL_1(type,function,suffix,args)
declaration of totalordermagf64	__MATH_PRECNAME(name,r)
declaration of totalorderf64	__MATHDECL_1(type,function,suffix,args)
declaration of totalorderf64	__MATH_PRECNAME(name,r)
declaration of __fminmagf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminmagf64	__MATH_PRECNAME(name,r)
declaration of __fminmagf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fminmagf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf64	__MATHCALLX(function,suffix,args,attrib)
declaration of fminmagf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf64	__MATH_PRECNAME(name,r)
declaration of fminmagf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxmagf64	__MATH_PRECNAME(name,r)
declaration of __fmaxmagf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf64	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxmagf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf64	__MATH_PRECNAME(name,r)
declaration of fmaxmagf64	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpxf64	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpxf64	__MATH_PRECNAME(name,r)
declaration of __ufromfpxf64	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpxf64	__MATHDECL(type,function,suffix,args)
declaration of ufromfpxf64	__MATH_PRECNAME(name,r)
declaration of ufromfpxf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpxf64	__MATHDECL(type,function,suffix,args)
declaration of __fromfpxf64	__MATH_PRECNAME(name,r)
declaration of __fromfpxf64	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpxf64	__MATHDECL(type,function,suffix,args)
declaration of fromfpxf64	__MATH_PRECNAME(name,r)
declaration of fromfpxf64	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpf64	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpf64	__MATH_PRECNAME(name,r)
declaration of __ufromfpf64	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpf64	__MATHDECL(type,function,suffix,args)
declaration of ufromfpf64	__MATH_PRECNAME(name,r)
declaration of ufromfpf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpf64	__MATHDECL(type,function,suffix,args)
declaration of __fromfpf64	__MATH_PRECNAME(name,r)
declaration of __fromfpf64	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpf64	__MATHDECL(type,function,suffix,args)
declaration of fromfpf64	__MATH_PRECNAME(name,r)
declaration of fromfpf64	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundevenf64	__MATH_PRECNAME(name,r)
declaration of __roundevenf64	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf64	__MATHCALLX(function,suffix,args,attrib)
declaration of roundevenf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf64	__MATH_PRECNAME(name,r)
declaration of roundevenf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf64	__MATHCALL(function,suffix,args)
declaration of __fmaf64	__MATH_PRECNAME(name,r)
declaration of __fmaf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf64	__MATHDECL(type,function,suffix,args)
declaration of fmaf64	__MATHCALL(function,suffix,args)
declaration of fmaf64	__MATHDECL(type,function,suffix,args)
declaration of fmaf64	__MATH_PRECNAME(name,r)
declaration of fmaf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminf64	__MATH_PRECNAME(name,r)
declaration of __fminf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf64	__MATHCALLX(function,suffix,args,attrib)
declaration of fminf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf64	__MATH_PRECNAME(name,r)
declaration of fminf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxf64	__MATH_PRECNAME(name,r)
declaration of __fmaxf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf64	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf64	__MATH_PRECNAME(name,r)
declaration of fmaxf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf64	__MATHCALL(function,suffix,args)
declaration of __fdimf64	__MATH_PRECNAME(name,r)
declaration of __fdimf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf64	__MATHDECL(type,function,suffix,args)
declaration of fdimf64	__MATHCALL(function,suffix,args)
declaration of fdimf64	__MATHDECL(type,function,suffix,args)
declaration of fdimf64	__MATH_PRECNAME(name,r)
declaration of fdimf64	__MATHDECL_1(type,function,suffix,args)
declaration of __llroundf64	__MATHDECL(type,function,suffix,args)
declaration of __llroundf64	__MATH_PRECNAME(name,r)
declaration of __llroundf64	__MATHDECL_1(type,function,suffix,args)
declaration of llroundf64	__MATHDECL(type,function,suffix,args)
declaration of llroundf64	__MATH_PRECNAME(name,r)
declaration of llroundf64	__MATHDECL_1(type,function,suffix,args)
declaration of __lroundf64	__MATHDECL(type,function,suffix,args)
declaration of __lroundf64	__MATH_PRECNAME(name,r)
declaration of __lroundf64	__MATHDECL_1(type,function,suffix,args)
declaration of lroundf64	__MATHDECL(type,function,suffix,args)
declaration of lroundf64	__MATH_PRECNAME(name,r)
declaration of lroundf64	__MATHDECL_1(type,function,suffix,args)
declaration of __llrintf64	__MATHDECL(type,function,suffix,args)
declaration of __llrintf64	__MATH_PRECNAME(name,r)
declaration of __llrintf64	__MATHDECL_1(type,function,suffix,args)
declaration of llrintf64	__MATHDECL(type,function,suffix,args)
declaration of llrintf64	__MATH_PRECNAME(name,r)
declaration of llrintf64	__MATHDECL_1(type,function,suffix,args)
declaration of __lrintf64	__MATHDECL(type,function,suffix,args)
declaration of __lrintf64	__MATH_PRECNAME(name,r)
declaration of __lrintf64	__MATHDECL_1(type,function,suffix,args)
declaration of lrintf64	__MATHDECL(type,function,suffix,args)
declaration of lrintf64	__MATH_PRECNAME(name,r)
declaration of lrintf64	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof64	__MATHCALL(function,suffix,args)
declaration of __remquof64	__MATH_PRECNAME(name,r)
declaration of __remquof64	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof64	__MATHDECL(type,function,suffix,args)
declaration of remquof64	__MATHCALL(function,suffix,args)
declaration of remquof64	__MATHDECL(type,function,suffix,args)
declaration of remquof64	__MATH_PRECNAME(name,r)
declaration of remquof64	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __truncf64	__MATH_PRECNAME(name,r)
declaration of __truncf64	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf64	__MATHCALLX(function,suffix,args,attrib)
declaration of truncf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf64	__MATH_PRECNAME(name,r)
declaration of truncf64	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundf64	__MATH_PRECNAME(name,r)
declaration of __roundf64	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf64	__MATHCALLX(function,suffix,args,attrib)
declaration of roundf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf64	__MATH_PRECNAME(name,r)
declaration of roundf64	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf64	__MATHCALL(function,suffix,args)
declaration of __nearbyintf64	__MATH_PRECNAME(name,r)
declaration of __nearbyintf64	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf64	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf64	__MATHCALL(function,suffix,args)
declaration of nearbyintf64	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf64	__MATH_PRECNAME(name,r)
declaration of nearbyintf64	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf64	__MATHCALL(function,suffix,args)
declaration of __scalblnf64	__MATH_PRECNAME(name,r)
declaration of __scalblnf64	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf64	__MATHDECL(type,function,suffix,args)
declaration of scalblnf64	__MATHCALL(function,suffix,args)
declaration of scalblnf64	__MATHDECL(type,function,suffix,args)
declaration of scalblnf64	__MATH_PRECNAME(name,r)
declaration of scalblnf64	__MATHDECL_1(type,function,suffix,args)
declaration of __llogbf64	__MATHDECL(type,function,suffix,args)
declaration of __llogbf64	__MATH_PRECNAME(name,r)
declaration of __llogbf64	__MATHDECL_1(type,function,suffix,args)
declaration of llogbf64	__MATHDECL(type,function,suffix,args)
declaration of llogbf64	__MATH_PRECNAME(name,r)
declaration of llogbf64	__MATHDECL_1(type,function,suffix,args)
declaration of __ilogbf64	__MATHDECL(type,function,suffix,args)
declaration of __ilogbf64	__MATH_PRECNAME(name,r)
declaration of __ilogbf64	__MATHDECL_1(type,function,suffix,args)
declaration of ilogbf64	__MATHDECL(type,function,suffix,args)
declaration of ilogbf64	__MATH_PRECNAME(name,r)
declaration of ilogbf64	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf64	__MATHCALL(function,suffix,args)
declaration of __scalbnf64	__MATH_PRECNAME(name,r)
declaration of __scalbnf64	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf64	__MATHDECL(type,function,suffix,args)
declaration of scalbnf64	__MATHCALL(function,suffix,args)
declaration of scalbnf64	__MATHDECL(type,function,suffix,args)
declaration of scalbnf64	__MATH_PRECNAME(name,r)
declaration of scalbnf64	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf64	__MATHCALL(function,suffix,args)
declaration of __remainderf64	__MATH_PRECNAME(name,r)
declaration of __remainderf64	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf64	__MATHDECL(type,function,suffix,args)
declaration of remainderf64	__MATHCALL(function,suffix,args)
declaration of remainderf64	__MATHDECL(type,function,suffix,args)
declaration of remainderf64	__MATH_PRECNAME(name,r)
declaration of remainderf64	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf64	__MATHCALL(function,suffix,args)
declaration of __nextupf64	__MATH_PRECNAME(name,r)
declaration of __nextupf64	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf64	__MATHDECL(type,function,suffix,args)
declaration of nextupf64	__MATHCALL(function,suffix,args)
declaration of nextupf64	__MATHDECL(type,function,suffix,args)
declaration of nextupf64	__MATH_PRECNAME(name,r)
declaration of nextupf64	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf64	__MATHCALL(function,suffix,args)
declaration of __nextdownf64	__MATH_PRECNAME(name,r)
declaration of __nextdownf64	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf64	__MATHDECL(type,function,suffix,args)
declaration of nextdownf64	__MATHCALL(function,suffix,args)
declaration of nextdownf64	__MATHDECL(type,function,suffix,args)
declaration of nextdownf64	__MATH_PRECNAME(name,r)
declaration of nextdownf64	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf64	__MATHCALL(function,suffix,args)
declaration of __nextafterf64	__MATH_PRECNAME(name,r)
declaration of __nextafterf64	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf64	__MATHDECL(type,function,suffix,args)
declaration of nextafterf64	__MATHCALL(function,suffix,args)
declaration of nextafterf64	__MATHDECL(type,function,suffix,args)
declaration of nextafterf64	__MATH_PRECNAME(name,r)
declaration of nextafterf64	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf64	__MATHCALL(function,suffix,args)
declaration of __rintf64	__MATH_PRECNAME(name,r)
declaration of __rintf64	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf64	__MATHDECL(type,function,suffix,args)
declaration of rintf64	__MATHCALL(function,suffix,args)
declaration of rintf64	__MATHDECL(type,function,suffix,args)
declaration of rintf64	__MATH_PRECNAME(name,r)
declaration of rintf64	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf64_r	__MATHCALL(function,suffix,args)
declaration of __lgammaf64_r	__MATH_PRECNAME(name,r)
declaration of __lgammaf64_r	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf64_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf64_r	__MATHCALL(function,suffix,args)
declaration of lgammaf64_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf64_r	__MATH_PRECNAME(name,r)
declaration of lgammaf64_r	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf64	__MATHCALL(function,suffix,args)
declaration of __tgammaf64	__MATH_PRECNAME(name,r)
declaration of __tgammaf64	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf64	__MATHDECL(type,function,suffix,args)
declaration of tgammaf64	__MATHCALL(function,suffix,args)
declaration of tgammaf64	__MATHDECL(type,function,suffix,args)
declaration of tgammaf64	__MATH_PRECNAME(name,r)
declaration of tgammaf64	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf64	__MATHCALL(function,suffix,args)
declaration of __lgammaf64	__MATH_PRECNAME(name,r)
declaration of __lgammaf64	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf64	__MATHDECL(type,function,suffix,args)
declaration of lgammaf64	__MATHCALL(function,suffix,args)
declaration of lgammaf64	__MATHDECL(type,function,suffix,args)
declaration of lgammaf64	__MATH_PRECNAME(name,r)
declaration of lgammaf64	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf64	__MATHCALL(function,suffix,args)
declaration of __erfcf64	__MATH_PRECNAME(name,r)
declaration of __erfcf64	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf64	__MATHDECL(type,function,suffix,args)
declaration of erfcf64	__MATHCALL(function,suffix,args)
declaration of erfcf64	__MATHDECL(type,function,suffix,args)
declaration of erfcf64	__MATH_PRECNAME(name,r)
declaration of erfcf64	__MATHDECL_1(type,function,suffix,args)
declaration of __erff64	__MATHCALL(function,suffix,args)
declaration of __erff64	__MATH_PRECNAME(name,r)
declaration of __erff64	__MATHDECL_1(type,function,suffix,args)
declaration of __erff64	__MATHDECL(type,function,suffix,args)
declaration of erff64	__MATHCALL(function,suffix,args)
declaration of erff64	__MATHDECL(type,function,suffix,args)
declaration of erff64	__MATH_PRECNAME(name,r)
declaration of erff64	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf64	__MATHCALL(function,suffix,args)
declaration of __ynf64	__MATH_PRECNAME(name,r)
declaration of __ynf64	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf64	__MATHDECL(type,function,suffix,args)
declaration of ynf64	__MATHCALL(function,suffix,args)
declaration of ynf64	__MATHDECL(type,function,suffix,args)
declaration of ynf64	__MATH_PRECNAME(name,r)
declaration of ynf64	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f64	__MATHCALL(function,suffix,args)
declaration of __y1f64	__MATH_PRECNAME(name,r)
declaration of __y1f64	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f64	__MATHDECL(type,function,suffix,args)
declaration of y1f64	__MATHCALL(function,suffix,args)
declaration of y1f64	__MATHDECL(type,function,suffix,args)
declaration of y1f64	__MATH_PRECNAME(name,r)
declaration of y1f64	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f64	__MATHCALL(function,suffix,args)
declaration of __y0f64	__MATH_PRECNAME(name,r)
declaration of __y0f64	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f64	__MATHDECL(type,function,suffix,args)
declaration of y0f64	__MATHCALL(function,suffix,args)
declaration of y0f64	__MATHDECL(type,function,suffix,args)
declaration of y0f64	__MATH_PRECNAME(name,r)
declaration of y0f64	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf64	__MATHCALL(function,suffix,args)
declaration of __jnf64	__MATH_PRECNAME(name,r)
declaration of __jnf64	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf64	__MATHDECL(type,function,suffix,args)
declaration of jnf64	__MATHCALL(function,suffix,args)
declaration of jnf64	__MATHDECL(type,function,suffix,args)
declaration of jnf64	__MATH_PRECNAME(name,r)
declaration of jnf64	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f64	__MATHCALL(function,suffix,args)
declaration of __j1f64	__MATH_PRECNAME(name,r)
declaration of __j1f64	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f64	__MATHDECL(type,function,suffix,args)
declaration of j1f64	__MATHCALL(function,suffix,args)
declaration of j1f64	__MATHDECL(type,function,suffix,args)
declaration of j1f64	__MATH_PRECNAME(name,r)
declaration of j1f64	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f64	__MATHCALL(function,suffix,args)
declaration of __j0f64	__MATH_PRECNAME(name,r)
declaration of __j0f64	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f64	__MATHDECL(type,function,suffix,args)
declaration of j0f64	__MATHCALL(function,suffix,args)
declaration of j0f64	__MATHDECL(type,function,suffix,args)
declaration of j0f64	__MATH_PRECNAME(name,r)
declaration of j0f64	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf64	__MATHCALL(function,suffix,args)
declaration of __nanf64	__MATH_PRECNAME(name,r)
declaration of __nanf64	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf64	__MATHDECL(type,function,suffix,args)
declaration of nanf64	__MATHCALL(function,suffix,args)
declaration of nanf64	__MATHDECL(type,function,suffix,args)
declaration of nanf64	__MATH_PRECNAME(name,r)
declaration of nanf64	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __copysignf64	__MATH_PRECNAME(name,r)
declaration of __copysignf64	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf64	__MATHCALLX(function,suffix,args,attrib)
declaration of copysignf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf64	__MATH_PRECNAME(name,r)
declaration of copysignf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf64	__MATHCALL(function,suffix,args)
declaration of __fmodf64	__MATH_PRECNAME(name,r)
declaration of __fmodf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf64	__MATHDECL(type,function,suffix,args)
declaration of fmodf64	__MATHCALL(function,suffix,args)
declaration of fmodf64	__MATHDECL(type,function,suffix,args)
declaration of fmodf64	__MATH_PRECNAME(name,r)
declaration of fmodf64	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __floorf64	__MATH_PRECNAME(name,r)
declaration of __floorf64	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf64	__MATHCALLX(function,suffix,args,attrib)
declaration of floorf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf64	__MATH_PRECNAME(name,r)
declaration of floorf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __fabsf64	__MATH_PRECNAME(name,r)
declaration of __fabsf64	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf64	__MATHCALLX(function,suffix,args,attrib)
declaration of fabsf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf64	__MATH_PRECNAME(name,r)
declaration of fabsf64	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf64	__MATHCALLX(function,suffix,args,attrib)
declaration of __ceilf64	__MATH_PRECNAME(name,r)
declaration of __ceilf64	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf64	__MATHCALLX(function,suffix,args,attrib)
declaration of ceilf64	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf64	__MATH_PRECNAME(name,r)
declaration of ceilf64	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf64	__MATHCALL(function,suffix,args)
declaration of __cbrtf64	__MATH_PRECNAME(name,r)
declaration of __cbrtf64	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf64	__MATHDECL(type,function,suffix,args)
declaration of cbrtf64	__MATHCALL(function,suffix,args)
declaration of cbrtf64	__MATHDECL(type,function,suffix,args)
declaration of cbrtf64	__MATH_PRECNAME(name,r)
declaration of cbrtf64	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf64	__MATHCALL(function,suffix,args)
declaration of __hypotf64	__MATH_PRECNAME(name,r)
declaration of __hypotf64	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf64	__MATHDECL(type,function,suffix,args)
declaration of hypotf64	__MATHCALL(function,suffix,args)
declaration of hypotf64	__MATHDECL(type,function,suffix,args)
declaration of hypotf64	__MATH_PRECNAME(name,r)
declaration of hypotf64	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf64	__MATHCALL(function,suffix,args)
declaration of __sqrtf64	__MATH_PRECNAME(name,r)
declaration of __sqrtf64	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf64	__MATHDECL(type,function,suffix,args)
declaration of sqrtf64	__MATHCALL(function,suffix,args)
declaration of sqrtf64	__MATHDECL(type,function,suffix,args)
declaration of sqrtf64	__MATH_PRECNAME(name,r)
declaration of sqrtf64	__MATHDECL_1(type,function,suffix,args)
declaration of __powf64	__MATHCALL(function,suffix,args)
declaration of __powf64	__MATHCALL_VEC(function,suffix,args)
declaration of __powf64	__MATH_PRECNAME(name,r)
declaration of __powf64	__MATHDECL_1(type,function,suffix,args)
declaration of __powf64	__MATHDECL(type,function,suffix,args)
declaration of powf64	__MATHCALL(function,suffix,args)
declaration of powf64	__MATHCALL_VEC(function,suffix,args)
declaration of powf64	__MATHDECL(type,function,suffix,args)
declaration of powf64	__MATH_PRECNAME(name,r)
declaration of powf64	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f64	__MATHCALL(function,suffix,args)
declaration of __log2f64	__MATH_PRECNAME(name,r)
declaration of __log2f64	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f64	__MATHDECL(type,function,suffix,args)
declaration of log2f64	__MATHCALL(function,suffix,args)
declaration of log2f64	__MATHDECL(type,function,suffix,args)
declaration of log2f64	__MATH_PRECNAME(name,r)
declaration of log2f64	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f64	__MATHCALL(function,suffix,args)
declaration of __exp2f64	__MATH_PRECNAME(name,r)
declaration of __exp2f64	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f64	__MATHDECL(type,function,suffix,args)
declaration of exp2f64	__MATHCALL(function,suffix,args)
declaration of exp2f64	__MATHDECL(type,function,suffix,args)
declaration of exp2f64	__MATH_PRECNAME(name,r)
declaration of exp2f64	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf64	__MATHCALL(function,suffix,args)
declaration of __logbf64	__MATH_PRECNAME(name,r)
declaration of __logbf64	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf64	__MATHDECL(type,function,suffix,args)
declaration of logbf64	__MATHCALL(function,suffix,args)
declaration of logbf64	__MATHDECL(type,function,suffix,args)
declaration of logbf64	__MATH_PRECNAME(name,r)
declaration of logbf64	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf64	__MATHCALL(function,suffix,args)
declaration of __log1pf64	__MATH_PRECNAME(name,r)
declaration of __log1pf64	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf64	__MATHDECL(type,function,suffix,args)
declaration of log1pf64	__MATHCALL(function,suffix,args)
declaration of log1pf64	__MATHDECL(type,function,suffix,args)
declaration of log1pf64	__MATH_PRECNAME(name,r)
declaration of log1pf64	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f64	__MATHCALL(function,suffix,args)
declaration of __expm1f64	__MATH_PRECNAME(name,r)
declaration of __expm1f64	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f64	__MATHDECL(type,function,suffix,args)
declaration of expm1f64	__MATHCALL(function,suffix,args)
declaration of expm1f64	__MATHDECL(type,function,suffix,args)
declaration of expm1f64	__MATH_PRECNAME(name,r)
declaration of expm1f64	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f64	__MATHCALL(function,suffix,args)
declaration of __exp10f64	__MATH_PRECNAME(name,r)
declaration of __exp10f64	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f64	__MATHDECL(type,function,suffix,args)
declaration of exp10f64	__MATHCALL(function,suffix,args)
declaration of exp10f64	__MATHDECL(type,function,suffix,args)
declaration of exp10f64	__MATH_PRECNAME(name,r)
declaration of exp10f64	__MATHDECL_1(type,function,suffix,args)
declaration of __modff64	__MATHCALL(function,suffix,args)
declaration of __modff64	__MATH_PRECNAME(name,r)
declaration of __modff64	__MATHDECL_1(type,function,suffix,args)
declaration of __modff64	__MATHDECL(type,function,suffix,args)
declaration of modff64	__MATHCALL(function,suffix,args)
declaration of modff64	__MATHDECL(type,function,suffix,args)
declaration of modff64	__MATH_PRECNAME(name,r)
declaration of modff64	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f64	__MATHCALL(function,suffix,args)
declaration of __log10f64	__MATH_PRECNAME(name,r)
declaration of __log10f64	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f64	__MATHDECL(type,function,suffix,args)
declaration of log10f64	__MATHCALL(function,suffix,args)
declaration of log10f64	__MATHDECL(type,function,suffix,args)
declaration of log10f64	__MATH_PRECNAME(name,r)
declaration of log10f64	__MATHDECL_1(type,function,suffix,args)
declaration of __logf64	__MATHCALL(function,suffix,args)
declaration of __logf64	__MATHCALL_VEC(function,suffix,args)
declaration of __logf64	__MATH_PRECNAME(name,r)
declaration of __logf64	__MATHDECL_1(type,function,suffix,args)
declaration of __logf64	__MATHDECL(type,function,suffix,args)
declaration of logf64	__MATHCALL(function,suffix,args)
declaration of logf64	__MATHCALL_VEC(function,suffix,args)
declaration of logf64	__MATHDECL(type,function,suffix,args)
declaration of logf64	__MATH_PRECNAME(name,r)
declaration of logf64	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf64	__MATHCALL(function,suffix,args)
declaration of __ldexpf64	__MATH_PRECNAME(name,r)
declaration of __ldexpf64	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf64	__MATHDECL(type,function,suffix,args)
declaration of ldexpf64	__MATHCALL(function,suffix,args)
declaration of ldexpf64	__MATHDECL(type,function,suffix,args)
declaration of ldexpf64	__MATH_PRECNAME(name,r)
declaration of ldexpf64	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf64	__MATHCALL(function,suffix,args)
declaration of __frexpf64	__MATH_PRECNAME(name,r)
declaration of __frexpf64	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf64	__MATHDECL(type,function,suffix,args)
declaration of frexpf64	__MATHCALL(function,suffix,args)
declaration of frexpf64	__MATHDECL(type,function,suffix,args)
declaration of frexpf64	__MATH_PRECNAME(name,r)
declaration of frexpf64	__MATHDECL_1(type,function,suffix,args)
declaration of __expf64	__MATHCALL(function,suffix,args)
declaration of __expf64	__MATHCALL_VEC(function,suffix,args)
declaration of __expf64	__MATH_PRECNAME(name,r)
declaration of __expf64	__MATHDECL_1(type,function,suffix,args)
declaration of __expf64	__MATHDECL(type,function,suffix,args)
declaration of expf64	__MATHCALL(function,suffix,args)
declaration of expf64	__MATHCALL_VEC(function,suffix,args)
declaration of expf64	__MATHDECL(type,function,suffix,args)
declaration of expf64	__MATH_PRECNAME(name,r)
declaration of expf64	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf64	__MATHCALL(function,suffix,args)
declaration of __atanhf64	__MATH_PRECNAME(name,r)
declaration of __atanhf64	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf64	__MATHDECL(type,function,suffix,args)
declaration of atanhf64	__MATHCALL(function,suffix,args)
declaration of atanhf64	__MATHDECL(type,function,suffix,args)
declaration of atanhf64	__MATH_PRECNAME(name,r)
declaration of atanhf64	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf64	__MATHCALL(function,suffix,args)
declaration of __asinhf64	__MATH_PRECNAME(name,r)
declaration of __asinhf64	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf64	__MATHDECL(type,function,suffix,args)
declaration of asinhf64	__MATHCALL(function,suffix,args)
declaration of asinhf64	__MATHDECL(type,function,suffix,args)
declaration of asinhf64	__MATH_PRECNAME(name,r)
declaration of asinhf64	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf64	__MATHCALL(function,suffix,args)
declaration of __acoshf64	__MATH_PRECNAME(name,r)
declaration of __acoshf64	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf64	__MATHDECL(type,function,suffix,args)
declaration of acoshf64	__MATHCALL(function,suffix,args)
declaration of acoshf64	__MATHDECL(type,function,suffix,args)
declaration of acoshf64	__MATH_PRECNAME(name,r)
declaration of acoshf64	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf64	__MATHDECL_VEC(type,function,suffix,args)
declaration of __sincosf64	__MATH_PRECNAME(name,r)
declaration of __sincosf64	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf64	__MATHDECL(type,function,suffix,args)
declaration of sincosf64	__MATHDECL_VEC(type,function,suffix,args)
declaration of sincosf64	__MATHDECL(type,function,suffix,args)
declaration of sincosf64	__MATH_PRECNAME(name,r)
declaration of sincosf64	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf64	__MATHCALL(function,suffix,args)
declaration of __tanhf64	__MATH_PRECNAME(name,r)
declaration of __tanhf64	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf64	__MATHDECL(type,function,suffix,args)
declaration of tanhf64	__MATHCALL(function,suffix,args)
declaration of tanhf64	__MATHDECL(type,function,suffix,args)
declaration of tanhf64	__MATH_PRECNAME(name,r)
declaration of tanhf64	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf64	__MATHCALL(function,suffix,args)
declaration of __sinhf64	__MATH_PRECNAME(name,r)
declaration of __sinhf64	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf64	__MATHDECL(type,function,suffix,args)
declaration of sinhf64	__MATHCALL(function,suffix,args)
declaration of sinhf64	__MATHDECL(type,function,suffix,args)
declaration of sinhf64	__MATH_PRECNAME(name,r)
declaration of sinhf64	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf64	__MATHCALL(function,suffix,args)
declaration of __coshf64	__MATH_PRECNAME(name,r)
declaration of __coshf64	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf64	__MATHDECL(type,function,suffix,args)
declaration of coshf64	__MATHCALL(function,suffix,args)
declaration of coshf64	__MATHDECL(type,function,suffix,args)
declaration of coshf64	__MATH_PRECNAME(name,r)
declaration of coshf64	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf64	__MATHCALL(function,suffix,args)
declaration of __tanf64	__MATH_PRECNAME(name,r)
declaration of __tanf64	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf64	__MATHDECL(type,function,suffix,args)
declaration of tanf64	__MATHCALL(function,suffix,args)
declaration of tanf64	__MATHDECL(type,function,suffix,args)
declaration of tanf64	__MATH_PRECNAME(name,r)
declaration of tanf64	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf64	__MATHCALL(function,suffix,args)
declaration of __sinf64	__MATHCALL_VEC(function,suffix,args)
declaration of __sinf64	__MATH_PRECNAME(name,r)
declaration of __sinf64	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf64	__MATHDECL(type,function,suffix,args)
declaration of sinf64	__MATHCALL(function,suffix,args)
declaration of sinf64	__MATHCALL_VEC(function,suffix,args)
declaration of sinf64	__MATHDECL(type,function,suffix,args)
declaration of sinf64	__MATH_PRECNAME(name,r)
declaration of sinf64	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf64	__MATHCALL(function,suffix,args)
declaration of __cosf64	__MATHCALL_VEC(function,suffix,args)
declaration of __cosf64	__MATH_PRECNAME(name,r)
declaration of __cosf64	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf64	__MATHDECL(type,function,suffix,args)
declaration of cosf64	__MATHCALL(function,suffix,args)
declaration of cosf64	__MATHCALL_VEC(function,suffix,args)
declaration of cosf64	__MATHDECL(type,function,suffix,args)
declaration of cosf64	__MATH_PRECNAME(name,r)
declaration of cosf64	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f64	__MATHCALL(function,suffix,args)
declaration of __atan2f64	__MATH_PRECNAME(name,r)
declaration of __atan2f64	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f64	__MATHDECL(type,function,suffix,args)
declaration of atan2f64	__MATHCALL(function,suffix,args)
declaration of atan2f64	__MATHDECL(type,function,suffix,args)
declaration of atan2f64	__MATH_PRECNAME(name,r)
declaration of atan2f64	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf64	__MATHCALL(function,suffix,args)
declaration of __atanf64	__MATH_PRECNAME(name,r)
declaration of __atanf64	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf64	__MATHDECL(type,function,suffix,args)
declaration of atanf64	__MATHCALL(function,suffix,args)
declaration of atanf64	__MATHDECL(type,function,suffix,args)
declaration of atanf64	__MATH_PRECNAME(name,r)
declaration of atanf64	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf64	__MATHCALL(function,suffix,args)
declaration of __asinf64	__MATH_PRECNAME(name,r)
declaration of __asinf64	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf64	__MATHDECL(type,function,suffix,args)
declaration of asinf64	__MATHCALL(function,suffix,args)
declaration of asinf64	__MATHDECL(type,function,suffix,args)
declaration of asinf64	__MATH_PRECNAME(name,r)
declaration of asinf64	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf64	__MATHCALL(function,suffix,args)
declaration of __acosf64	__MATH_PRECNAME(name,r)
declaration of __acosf64	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf64	__MATHDECL(type,function,suffix,args)
declaration of acosf64	__MATHCALL(function,suffix,args)
declaration of acosf64	__MATHDECL(type,function,suffix,args)
declaration of acosf64	__MATH_PRECNAME(name,r)
declaration of acosf64	__MATHDECL_1(type,function,suffix,args)
declaration of __issignalingf128	__MATHDECL_1(type,function,suffix,args)
declaration of __issignalingf128	__MATH_PRECNAME(name,r)
declaration of __iseqsigf128	__MATHDECL_1(type,function,suffix,args)
declaration of __iseqsigf128	__MATH_PRECNAME(name,r)
declaration of __isnanf128	__MATHDECL_1(type,function,suffix,args)
declaration of __isnanf128	__MATH_PRECNAME(name,r)
declaration of __finitef128	__MATHDECL_1(type,function,suffix,args)
declaration of __finitef128	__MATH_PRECNAME(name,r)
declaration of __isinff128	__MATHDECL_1(type,function,suffix,args)
declaration of __isinff128	__MATH_PRECNAME(name,r)
declaration of __signbitf128	__MATHDECL_1(type,function,suffix,args)
declaration of __signbitf128	__MATH_PRECNAME(name,r)
declaration of __fpclassifyf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fpclassifyf128	__MATH_PRECNAME(name,r)
declaration of setpayloadsigf128	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf128	__MATH_PRECNAME(name,r)
declaration of setpayloadf128	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadf128	__MATH_PRECNAME(name,r)
declaration of __getpayloadf128	__MATHCALL(function,suffix,args)
declaration of __getpayloadf128	__MATH_PRECNAME(name,r)
declaration of __getpayloadf128	__MATHDECL_1(type,function,suffix,args)
declaration of __getpayloadf128	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf128	__MATHCALL(function,suffix,args)
declaration of getpayloadf128	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf128	__MATH_PRECNAME(name,r)
declaration of getpayloadf128	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef128	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef128	__MATH_PRECNAME(name,r)
declaration of totalordermagf128	__MATHDECL_1(type,function,suffix,args)
declaration of totalordermagf128	__MATH_PRECNAME(name,r)
declaration of totalorderf128	__MATHDECL_1(type,function,suffix,args)
declaration of totalorderf128	__MATH_PRECNAME(name,r)
declaration of __fminmagf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminmagf128	__MATH_PRECNAME(name,r)
declaration of __fminmagf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fminmagf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf128	__MATHCALLX(function,suffix,args,attrib)
declaration of fminmagf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf128	__MATH_PRECNAME(name,r)
declaration of fminmagf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxmagf128	__MATH_PRECNAME(name,r)
declaration of __fmaxmagf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf128	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxmagf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf128	__MATH_PRECNAME(name,r)
declaration of fmaxmagf128	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpxf128	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpxf128	__MATH_PRECNAME(name,r)
declaration of __ufromfpxf128	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpxf128	__MATHDECL(type,function,suffix,args)
declaration of ufromfpxf128	__MATH_PRECNAME(name,r)
declaration of ufromfpxf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpxf128	__MATHDECL(type,function,suffix,args)
declaration of __fromfpxf128	__MATH_PRECNAME(name,r)
declaration of __fromfpxf128	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpxf128	__MATHDECL(type,function,suffix,args)
declaration of fromfpxf128	__MATH_PRECNAME(name,r)
declaration of fromfpxf128	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpf128	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpf128	__MATH_PRECNAME(name,r)
declaration of __ufromfpf128	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpf128	__MATHDECL(type,function,suffix,args)
declaration of ufromfpf128	__MATH_PRECNAME(name,r)
declaration of ufromfpf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpf128	__MATHDECL(type,function,suffix,args)
declaration of __fromfpf128	__MATH_PRECNAME(name,r)
declaration of __fromfpf128	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpf128	__MATHDECL(type,function,suffix,args)
declaration of fromfpf128	__MATH_PRECNAME(name,r)
declaration of fromfpf128	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundevenf128	__MATH_PRECNAME(name,r)
declaration of __roundevenf128	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf128	__MATHCALLX(function,suffix,args,attrib)
declaration of roundevenf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf128	__MATH_PRECNAME(name,r)
declaration of roundevenf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf128	__MATHCALL(function,suffix,args)
declaration of __fmaf128	__MATH_PRECNAME(name,r)
declaration of __fmaf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf128	__MATHDECL(type,function,suffix,args)
declaration of fmaf128	__MATHCALL(function,suffix,args)
declaration of fmaf128	__MATHDECL(type,function,suffix,args)
declaration of fmaf128	__MATH_PRECNAME(name,r)
declaration of fmaf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminf128	__MATH_PRECNAME(name,r)
declaration of __fminf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf128	__MATHCALLX(function,suffix,args,attrib)
declaration of fminf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf128	__MATH_PRECNAME(name,r)
declaration of fminf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxf128	__MATH_PRECNAME(name,r)
declaration of __fmaxf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf128	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf128	__MATH_PRECNAME(name,r)
declaration of fmaxf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf128	__MATHCALL(function,suffix,args)
declaration of __fdimf128	__MATH_PRECNAME(name,r)
declaration of __fdimf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf128	__MATHDECL(type,function,suffix,args)
declaration of fdimf128	__MATHCALL(function,suffix,args)
declaration of fdimf128	__MATHDECL(type,function,suffix,args)
declaration of fdimf128	__MATH_PRECNAME(name,r)
declaration of fdimf128	__MATHDECL_1(type,function,suffix,args)
declaration of __llroundf128	__MATHDECL(type,function,suffix,args)
declaration of __llroundf128	__MATH_PRECNAME(name,r)
declaration of __llroundf128	__MATHDECL_1(type,function,suffix,args)
declaration of llroundf128	__MATHDECL(type,function,suffix,args)
declaration of llroundf128	__MATH_PRECNAME(name,r)
declaration of llroundf128	__MATHDECL_1(type,function,suffix,args)
declaration of __lroundf128	__MATHDECL(type,function,suffix,args)
declaration of __lroundf128	__MATH_PRECNAME(name,r)
declaration of __lroundf128	__MATHDECL_1(type,function,suffix,args)
declaration of lroundf128	__MATHDECL(type,function,suffix,args)
declaration of lroundf128	__MATH_PRECNAME(name,r)
declaration of lroundf128	__MATHDECL_1(type,function,suffix,args)
declaration of __llrintf128	__MATHDECL(type,function,suffix,args)
declaration of __llrintf128	__MATH_PRECNAME(name,r)
declaration of __llrintf128	__MATHDECL_1(type,function,suffix,args)
declaration of llrintf128	__MATHDECL(type,function,suffix,args)
declaration of llrintf128	__MATH_PRECNAME(name,r)
declaration of llrintf128	__MATHDECL_1(type,function,suffix,args)
declaration of __lrintf128	__MATHDECL(type,function,suffix,args)
declaration of __lrintf128	__MATH_PRECNAME(name,r)
declaration of __lrintf128	__MATHDECL_1(type,function,suffix,args)
declaration of lrintf128	__MATHDECL(type,function,suffix,args)
declaration of lrintf128	__MATH_PRECNAME(name,r)
declaration of lrintf128	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof128	__MATHCALL(function,suffix,args)
declaration of __remquof128	__MATH_PRECNAME(name,r)
declaration of __remquof128	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof128	__MATHDECL(type,function,suffix,args)
declaration of remquof128	__MATHCALL(function,suffix,args)
declaration of remquof128	__MATHDECL(type,function,suffix,args)
declaration of remquof128	__MATH_PRECNAME(name,r)
declaration of remquof128	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __truncf128	__MATH_PRECNAME(name,r)
declaration of __truncf128	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf128	__MATHCALLX(function,suffix,args,attrib)
declaration of truncf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf128	__MATH_PRECNAME(name,r)
declaration of truncf128	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundf128	__MATH_PRECNAME(name,r)
declaration of __roundf128	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf128	__MATHCALLX(function,suffix,args,attrib)
declaration of roundf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf128	__MATH_PRECNAME(name,r)
declaration of roundf128	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf128	__MATHCALL(function,suffix,args)
declaration of __nearbyintf128	__MATH_PRECNAME(name,r)
declaration of __nearbyintf128	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf128	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf128	__MATHCALL(function,suffix,args)
declaration of nearbyintf128	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf128	__MATH_PRECNAME(name,r)
declaration of nearbyintf128	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf128	__MATHCALL(function,suffix,args)
declaration of __scalblnf128	__MATH_PRECNAME(name,r)
declaration of __scalblnf128	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf128	__MATHDECL(type,function,suffix,args)
declaration of scalblnf128	__MATHCALL(function,suffix,args)
declaration of scalblnf128	__MATHDECL(type,function,suffix,args)
declaration of scalblnf128	__MATH_PRECNAME(name,r)
declaration of scalblnf128	__MATHDECL_1(type,function,suffix,args)
declaration of __llogbf128	__MATHDECL(type,function,suffix,args)
declaration of __llogbf128	__MATH_PRECNAME(name,r)
declaration of __llogbf128	__MATHDECL_1(type,function,suffix,args)
declaration of llogbf128	__MATHDECL(type,function,suffix,args)
declaration of llogbf128	__MATH_PRECNAME(name,r)
declaration of llogbf128	__MATHDECL_1(type,function,suffix,args)
declaration of __ilogbf128	__MATHDECL(type,function,suffix,args)
declaration of __ilogbf128	__MATH_PRECNAME(name,r)
declaration of __ilogbf128	__MATHDECL_1(type,function,suffix,args)
declaration of ilogbf128	__MATHDECL(type,function,suffix,args)
declaration of ilogbf128	__MATH_PRECNAME(name,r)
declaration of ilogbf128	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf128	__MATHCALL(function,suffix,args)
declaration of __scalbnf128	__MATH_PRECNAME(name,r)
declaration of __scalbnf128	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf128	__MATHDECL(type,function,suffix,args)
declaration of scalbnf128	__MATHCALL(function,suffix,args)
declaration of scalbnf128	__MATHDECL(type,function,suffix,args)
declaration of scalbnf128	__MATH_PRECNAME(name,r)
declaration of scalbnf128	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf128	__MATHCALL(function,suffix,args)
declaration of __remainderf128	__MATH_PRECNAME(name,r)
declaration of __remainderf128	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf128	__MATHDECL(type,function,suffix,args)
declaration of remainderf128	__MATHCALL(function,suffix,args)
declaration of remainderf128	__MATHDECL(type,function,suffix,args)
declaration of remainderf128	__MATH_PRECNAME(name,r)
declaration of remainderf128	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf128	__MATHCALL(function,suffix,args)
declaration of __nextupf128	__MATH_PRECNAME(name,r)
declaration of __nextupf128	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf128	__MATHDECL(type,function,suffix,args)
declaration of nextupf128	__MATHCALL(function,suffix,args)
declaration of nextupf128	__MATHDECL(type,function,suffix,args)
declaration of nextupf128	__MATH_PRECNAME(name,r)
declaration of nextupf128	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf128	__MATHCALL(function,suffix,args)
declaration of __nextdownf128	__MATH_PRECNAME(name,r)
declaration of __nextdownf128	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf128	__MATHDECL(type,function,suffix,args)
declaration of nextdownf128	__MATHCALL(function,suffix,args)
declaration of nextdownf128	__MATHDECL(type,function,suffix,args)
declaration of nextdownf128	__MATH_PRECNAME(name,r)
declaration of nextdownf128	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf128	__MATHCALL(function,suffix,args)
declaration of __nextafterf128	__MATH_PRECNAME(name,r)
declaration of __nextafterf128	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf128	__MATHDECL(type,function,suffix,args)
declaration of nextafterf128	__MATHCALL(function,suffix,args)
declaration of nextafterf128	__MATHDECL(type,function,suffix,args)
declaration of nextafterf128	__MATH_PRECNAME(name,r)
declaration of nextafterf128	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf128	__MATHCALL(function,suffix,args)
declaration of __rintf128	__MATH_PRECNAME(name,r)
declaration of __rintf128	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf128	__MATHDECL(type,function,suffix,args)
declaration of rintf128	__MATHCALL(function,suffix,args)
declaration of rintf128	__MATHDECL(type,function,suffix,args)
declaration of rintf128	__MATH_PRECNAME(name,r)
declaration of rintf128	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf128_r	__MATHCALL(function,suffix,args)
declaration of __lgammaf128_r	__MATH_PRECNAME(name,r)
declaration of __lgammaf128_r	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf128_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf128_r	__MATHCALL(function,suffix,args)
declaration of lgammaf128_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf128_r	__MATH_PRECNAME(name,r)
declaration of lgammaf128_r	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf128	__MATHCALL(function,suffix,args)
declaration of __tgammaf128	__MATH_PRECNAME(name,r)
declaration of __tgammaf128	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf128	__MATHDECL(type,function,suffix,args)
declaration of tgammaf128	__MATHCALL(function,suffix,args)
declaration of tgammaf128	__MATHDECL(type,function,suffix,args)
declaration of tgammaf128	__MATH_PRECNAME(name,r)
declaration of tgammaf128	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf128	__MATHCALL(function,suffix,args)
declaration of __lgammaf128	__MATH_PRECNAME(name,r)
declaration of __lgammaf128	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf128	__MATHDECL(type,function,suffix,args)
declaration of lgammaf128	__MATHCALL(function,suffix,args)
declaration of lgammaf128	__MATHDECL(type,function,suffix,args)
declaration of lgammaf128	__MATH_PRECNAME(name,r)
declaration of lgammaf128	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf128	__MATHCALL(function,suffix,args)
declaration of __erfcf128	__MATH_PRECNAME(name,r)
declaration of __erfcf128	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf128	__MATHDECL(type,function,suffix,args)
declaration of erfcf128	__MATHCALL(function,suffix,args)
declaration of erfcf128	__MATHDECL(type,function,suffix,args)
declaration of erfcf128	__MATH_PRECNAME(name,r)
declaration of erfcf128	__MATHDECL_1(type,function,suffix,args)
declaration of __erff128	__MATHCALL(function,suffix,args)
declaration of __erff128	__MATH_PRECNAME(name,r)
declaration of __erff128	__MATHDECL_1(type,function,suffix,args)
declaration of __erff128	__MATHDECL(type,function,suffix,args)
declaration of erff128	__MATHCALL(function,suffix,args)
declaration of erff128	__MATHDECL(type,function,suffix,args)
declaration of erff128	__MATH_PRECNAME(name,r)
declaration of erff128	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf128	__MATHCALL(function,suffix,args)
declaration of __ynf128	__MATH_PRECNAME(name,r)
declaration of __ynf128	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf128	__MATHDECL(type,function,suffix,args)
declaration of ynf128	__MATHCALL(function,suffix,args)
declaration of ynf128	__MATHDECL(type,function,suffix,args)
declaration of ynf128	__MATH_PRECNAME(name,r)
declaration of ynf128	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f128	__MATHCALL(function,suffix,args)
declaration of __y1f128	__MATH_PRECNAME(name,r)
declaration of __y1f128	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f128	__MATHDECL(type,function,suffix,args)
declaration of y1f128	__MATHCALL(function,suffix,args)
declaration of y1f128	__MATHDECL(type,function,suffix,args)
declaration of y1f128	__MATH_PRECNAME(name,r)
declaration of y1f128	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f128	__MATHCALL(function,suffix,args)
declaration of __y0f128	__MATH_PRECNAME(name,r)
declaration of __y0f128	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f128	__MATHDECL(type,function,suffix,args)
declaration of y0f128	__MATHCALL(function,suffix,args)
declaration of y0f128	__MATHDECL(type,function,suffix,args)
declaration of y0f128	__MATH_PRECNAME(name,r)
declaration of y0f128	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf128	__MATHCALL(function,suffix,args)
declaration of __jnf128	__MATH_PRECNAME(name,r)
declaration of __jnf128	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf128	__MATHDECL(type,function,suffix,args)
declaration of jnf128	__MATHCALL(function,suffix,args)
declaration of jnf128	__MATHDECL(type,function,suffix,args)
declaration of jnf128	__MATH_PRECNAME(name,r)
declaration of jnf128	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f128	__MATHCALL(function,suffix,args)
declaration of __j1f128	__MATH_PRECNAME(name,r)
declaration of __j1f128	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f128	__MATHDECL(type,function,suffix,args)
declaration of j1f128	__MATHCALL(function,suffix,args)
declaration of j1f128	__MATHDECL(type,function,suffix,args)
declaration of j1f128	__MATH_PRECNAME(name,r)
declaration of j1f128	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f128	__MATHCALL(function,suffix,args)
declaration of __j0f128	__MATH_PRECNAME(name,r)
declaration of __j0f128	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f128	__MATHDECL(type,function,suffix,args)
declaration of j0f128	__MATHCALL(function,suffix,args)
declaration of j0f128	__MATHDECL(type,function,suffix,args)
declaration of j0f128	__MATH_PRECNAME(name,r)
declaration of j0f128	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf128	__MATHCALL(function,suffix,args)
declaration of __nanf128	__MATH_PRECNAME(name,r)
declaration of __nanf128	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf128	__MATHDECL(type,function,suffix,args)
declaration of nanf128	__MATHCALL(function,suffix,args)
declaration of nanf128	__MATHDECL(type,function,suffix,args)
declaration of nanf128	__MATH_PRECNAME(name,r)
declaration of nanf128	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __copysignf128	__MATH_PRECNAME(name,r)
declaration of __copysignf128	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf128	__MATHCALLX(function,suffix,args,attrib)
declaration of copysignf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf128	__MATH_PRECNAME(name,r)
declaration of copysignf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf128	__MATHCALL(function,suffix,args)
declaration of __fmodf128	__MATH_PRECNAME(name,r)
declaration of __fmodf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf128	__MATHDECL(type,function,suffix,args)
declaration of fmodf128	__MATHCALL(function,suffix,args)
declaration of fmodf128	__MATHDECL(type,function,suffix,args)
declaration of fmodf128	__MATH_PRECNAME(name,r)
declaration of fmodf128	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __floorf128	__MATH_PRECNAME(name,r)
declaration of __floorf128	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf128	__MATHCALLX(function,suffix,args,attrib)
declaration of floorf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf128	__MATH_PRECNAME(name,r)
declaration of floorf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __fabsf128	__MATH_PRECNAME(name,r)
declaration of __fabsf128	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf128	__MATHCALLX(function,suffix,args,attrib)
declaration of fabsf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf128	__MATH_PRECNAME(name,r)
declaration of fabsf128	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf128	__MATHCALLX(function,suffix,args,attrib)
declaration of __ceilf128	__MATH_PRECNAME(name,r)
declaration of __ceilf128	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf128	__MATHCALLX(function,suffix,args,attrib)
declaration of ceilf128	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf128	__MATH_PRECNAME(name,r)
declaration of ceilf128	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf128	__MATHCALL(function,suffix,args)
declaration of __cbrtf128	__MATH_PRECNAME(name,r)
declaration of __cbrtf128	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf128	__MATHDECL(type,function,suffix,args)
declaration of cbrtf128	__MATHCALL(function,suffix,args)
declaration of cbrtf128	__MATHDECL(type,function,suffix,args)
declaration of cbrtf128	__MATH_PRECNAME(name,r)
declaration of cbrtf128	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf128	__MATHCALL(function,suffix,args)
declaration of __hypotf128	__MATH_PRECNAME(name,r)
declaration of __hypotf128	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf128	__MATHDECL(type,function,suffix,args)
declaration of hypotf128	__MATHCALL(function,suffix,args)
declaration of hypotf128	__MATHDECL(type,function,suffix,args)
declaration of hypotf128	__MATH_PRECNAME(name,r)
declaration of hypotf128	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf128	__MATHCALL(function,suffix,args)
declaration of __sqrtf128	__MATH_PRECNAME(name,r)
declaration of __sqrtf128	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf128	__MATHDECL(type,function,suffix,args)
declaration of sqrtf128	__MATHCALL(function,suffix,args)
declaration of sqrtf128	__MATHDECL(type,function,suffix,args)
declaration of sqrtf128	__MATH_PRECNAME(name,r)
declaration of sqrtf128	__MATHDECL_1(type,function,suffix,args)
declaration of __powf128	__MATHCALL(function,suffix,args)
declaration of __powf128	__MATHCALL_VEC(function,suffix,args)
declaration of __powf128	__MATH_PRECNAME(name,r)
declaration of __powf128	__MATHDECL_1(type,function,suffix,args)
declaration of __powf128	__MATHDECL(type,function,suffix,args)
declaration of powf128	__MATHCALL(function,suffix,args)
declaration of powf128	__MATHCALL_VEC(function,suffix,args)
declaration of powf128	__MATHDECL(type,function,suffix,args)
declaration of powf128	__MATH_PRECNAME(name,r)
declaration of powf128	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f128	__MATHCALL(function,suffix,args)
declaration of __log2f128	__MATH_PRECNAME(name,r)
declaration of __log2f128	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f128	__MATHDECL(type,function,suffix,args)
declaration of log2f128	__MATHCALL(function,suffix,args)
declaration of log2f128	__MATHDECL(type,function,suffix,args)
declaration of log2f128	__MATH_PRECNAME(name,r)
declaration of log2f128	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f128	__MATHCALL(function,suffix,args)
declaration of __exp2f128	__MATH_PRECNAME(name,r)
declaration of __exp2f128	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f128	__MATHDECL(type,function,suffix,args)
declaration of exp2f128	__MATHCALL(function,suffix,args)
declaration of exp2f128	__MATHDECL(type,function,suffix,args)
declaration of exp2f128	__MATH_PRECNAME(name,r)
declaration of exp2f128	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf128	__MATHCALL(function,suffix,args)
declaration of __logbf128	__MATH_PRECNAME(name,r)
declaration of __logbf128	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf128	__MATHDECL(type,function,suffix,args)
declaration of logbf128	__MATHCALL(function,suffix,args)
declaration of logbf128	__MATHDECL(type,function,suffix,args)
declaration of logbf128	__MATH_PRECNAME(name,r)
declaration of logbf128	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf128	__MATHCALL(function,suffix,args)
declaration of __log1pf128	__MATH_PRECNAME(name,r)
declaration of __log1pf128	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf128	__MATHDECL(type,function,suffix,args)
declaration of log1pf128	__MATHCALL(function,suffix,args)
declaration of log1pf128	__MATHDECL(type,function,suffix,args)
declaration of log1pf128	__MATH_PRECNAME(name,r)
declaration of log1pf128	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f128	__MATHCALL(function,suffix,args)
declaration of __expm1f128	__MATH_PRECNAME(name,r)
declaration of __expm1f128	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f128	__MATHDECL(type,function,suffix,args)
declaration of expm1f128	__MATHCALL(function,suffix,args)
declaration of expm1f128	__MATHDECL(type,function,suffix,args)
declaration of expm1f128	__MATH_PRECNAME(name,r)
declaration of expm1f128	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f128	__MATHCALL(function,suffix,args)
declaration of __exp10f128	__MATH_PRECNAME(name,r)
declaration of __exp10f128	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f128	__MATHDECL(type,function,suffix,args)
declaration of exp10f128	__MATHCALL(function,suffix,args)
declaration of exp10f128	__MATHDECL(type,function,suffix,args)
declaration of exp10f128	__MATH_PRECNAME(name,r)
declaration of exp10f128	__MATHDECL_1(type,function,suffix,args)
declaration of __modff128	__MATHCALL(function,suffix,args)
declaration of __modff128	__MATH_PRECNAME(name,r)
declaration of __modff128	__MATHDECL_1(type,function,suffix,args)
declaration of __modff128	__MATHDECL(type,function,suffix,args)
declaration of modff128	__MATHCALL(function,suffix,args)
declaration of modff128	__MATHDECL(type,function,suffix,args)
declaration of modff128	__MATH_PRECNAME(name,r)
declaration of modff128	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f128	__MATHCALL(function,suffix,args)
declaration of __log10f128	__MATH_PRECNAME(name,r)
declaration of __log10f128	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f128	__MATHDECL(type,function,suffix,args)
declaration of log10f128	__MATHCALL(function,suffix,args)
declaration of log10f128	__MATHDECL(type,function,suffix,args)
declaration of log10f128	__MATH_PRECNAME(name,r)
declaration of log10f128	__MATHDECL_1(type,function,suffix,args)
declaration of __logf128	__MATHCALL(function,suffix,args)
declaration of __logf128	__MATHCALL_VEC(function,suffix,args)
declaration of __logf128	__MATH_PRECNAME(name,r)
declaration of __logf128	__MATHDECL_1(type,function,suffix,args)
declaration of __logf128	__MATHDECL(type,function,suffix,args)
declaration of logf128	__MATHCALL(function,suffix,args)
declaration of logf128	__MATHCALL_VEC(function,suffix,args)
declaration of logf128	__MATHDECL(type,function,suffix,args)
declaration of logf128	__MATH_PRECNAME(name,r)
declaration of logf128	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf128	__MATHCALL(function,suffix,args)
declaration of __ldexpf128	__MATH_PRECNAME(name,r)
declaration of __ldexpf128	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf128	__MATHDECL(type,function,suffix,args)
declaration of ldexpf128	__MATHCALL(function,suffix,args)
declaration of ldexpf128	__MATHDECL(type,function,suffix,args)
declaration of ldexpf128	__MATH_PRECNAME(name,r)
declaration of ldexpf128	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf128	__MATHCALL(function,suffix,args)
declaration of __frexpf128	__MATH_PRECNAME(name,r)
declaration of __frexpf128	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf128	__MATHDECL(type,function,suffix,args)
declaration of frexpf128	__MATHCALL(function,suffix,args)
declaration of frexpf128	__MATHDECL(type,function,suffix,args)
declaration of frexpf128	__MATH_PRECNAME(name,r)
declaration of frexpf128	__MATHDECL_1(type,function,suffix,args)
declaration of __expf128	__MATHCALL(function,suffix,args)
declaration of __expf128	__MATHCALL_VEC(function,suffix,args)
declaration of __expf128	__MATH_PRECNAME(name,r)
declaration of __expf128	__MATHDECL_1(type,function,suffix,args)
declaration of __expf128	__MATHDECL(type,function,suffix,args)
declaration of expf128	__MATHCALL(function,suffix,args)
declaration of expf128	__MATHCALL_VEC(function,suffix,args)
declaration of expf128	__MATHDECL(type,function,suffix,args)
declaration of expf128	__MATH_PRECNAME(name,r)
declaration of expf128	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf128	__MATHCALL(function,suffix,args)
declaration of __atanhf128	__MATH_PRECNAME(name,r)
declaration of __atanhf128	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf128	__MATHDECL(type,function,suffix,args)
declaration of atanhf128	__MATHCALL(function,suffix,args)
declaration of atanhf128	__MATHDECL(type,function,suffix,args)
declaration of atanhf128	__MATH_PRECNAME(name,r)
declaration of atanhf128	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf128	__MATHCALL(function,suffix,args)
declaration of __asinhf128	__MATH_PRECNAME(name,r)
declaration of __asinhf128	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf128	__MATHDECL(type,function,suffix,args)
declaration of asinhf128	__MATHCALL(function,suffix,args)
declaration of asinhf128	__MATHDECL(type,function,suffix,args)
declaration of asinhf128	__MATH_PRECNAME(name,r)
declaration of asinhf128	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf128	__MATHCALL(function,suffix,args)
declaration of __acoshf128	__MATH_PRECNAME(name,r)
declaration of __acoshf128	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf128	__MATHDECL(type,function,suffix,args)
declaration of acoshf128	__MATHCALL(function,suffix,args)
declaration of acoshf128	__MATHDECL(type,function,suffix,args)
declaration of acoshf128	__MATH_PRECNAME(name,r)
declaration of acoshf128	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf128	__MATHDECL_VEC(type,function,suffix,args)
declaration of __sincosf128	__MATH_PRECNAME(name,r)
declaration of __sincosf128	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf128	__MATHDECL(type,function,suffix,args)
declaration of sincosf128	__MATHDECL_VEC(type,function,suffix,args)
declaration of sincosf128	__MATHDECL(type,function,suffix,args)
declaration of sincosf128	__MATH_PRECNAME(name,r)
declaration of sincosf128	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf128	__MATHCALL(function,suffix,args)
declaration of __tanhf128	__MATH_PRECNAME(name,r)
declaration of __tanhf128	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf128	__MATHDECL(type,function,suffix,args)
declaration of tanhf128	__MATHCALL(function,suffix,args)
declaration of tanhf128	__MATHDECL(type,function,suffix,args)
declaration of tanhf128	__MATH_PRECNAME(name,r)
declaration of tanhf128	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf128	__MATHCALL(function,suffix,args)
declaration of __sinhf128	__MATH_PRECNAME(name,r)
declaration of __sinhf128	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf128	__MATHDECL(type,function,suffix,args)
declaration of sinhf128	__MATHCALL(function,suffix,args)
declaration of sinhf128	__MATHDECL(type,function,suffix,args)
declaration of sinhf128	__MATH_PRECNAME(name,r)
declaration of sinhf128	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf128	__MATHCALL(function,suffix,args)
declaration of __coshf128	__MATH_PRECNAME(name,r)
declaration of __coshf128	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf128	__MATHDECL(type,function,suffix,args)
declaration of coshf128	__MATHCALL(function,suffix,args)
declaration of coshf128	__MATHDECL(type,function,suffix,args)
declaration of coshf128	__MATH_PRECNAME(name,r)
declaration of coshf128	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf128	__MATHCALL(function,suffix,args)
declaration of __tanf128	__MATH_PRECNAME(name,r)
declaration of __tanf128	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf128	__MATHDECL(type,function,suffix,args)
declaration of tanf128	__MATHCALL(function,suffix,args)
declaration of tanf128	__MATHDECL(type,function,suffix,args)
declaration of tanf128	__MATH_PRECNAME(name,r)
declaration of tanf128	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf128	__MATHCALL(function,suffix,args)
declaration of __sinf128	__MATHCALL_VEC(function,suffix,args)
declaration of __sinf128	__MATH_PRECNAME(name,r)
declaration of __sinf128	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf128	__MATHDECL(type,function,suffix,args)
declaration of sinf128	__MATHCALL(function,suffix,args)
declaration of sinf128	__MATHCALL_VEC(function,suffix,args)
declaration of sinf128	__MATHDECL(type,function,suffix,args)
declaration of sinf128	__MATH_PRECNAME(name,r)
declaration of sinf128	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf128	__MATHCALL(function,suffix,args)
declaration of __cosf128	__MATHCALL_VEC(function,suffix,args)
declaration of __cosf128	__MATH_PRECNAME(name,r)
declaration of __cosf128	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf128	__MATHDECL(type,function,suffix,args)
declaration of cosf128	__MATHCALL(function,suffix,args)
declaration of cosf128	__MATHCALL_VEC(function,suffix,args)
declaration of cosf128	__MATHDECL(type,function,suffix,args)
declaration of cosf128	__MATH_PRECNAME(name,r)
declaration of cosf128	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f128	__MATHCALL(function,suffix,args)
declaration of __atan2f128	__MATH_PRECNAME(name,r)
declaration of __atan2f128	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f128	__MATHDECL(type,function,suffix,args)
declaration of atan2f128	__MATHCALL(function,suffix,args)
declaration of atan2f128	__MATHDECL(type,function,suffix,args)
declaration of atan2f128	__MATH_PRECNAME(name,r)
declaration of atan2f128	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf128	__MATHCALL(function,suffix,args)
declaration of __atanf128	__MATH_PRECNAME(name,r)
declaration of __atanf128	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf128	__MATHDECL(type,function,suffix,args)
declaration of atanf128	__MATHCALL(function,suffix,args)
declaration of atanf128	__MATHDECL(type,function,suffix,args)
declaration of atanf128	__MATH_PRECNAME(name,r)
declaration of atanf128	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf128	__MATHCALL(function,suffix,args)
declaration of __asinf128	__MATH_PRECNAME(name,r)
declaration of __asinf128	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf128	__MATHDECL(type,function,suffix,args)
declaration of asinf128	__MATHCALL(function,suffix,args)
declaration of asinf128	__MATHDECL(type,function,suffix,args)
declaration of asinf128	__MATH_PRECNAME(name,r)
declaration of asinf128	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf128	__MATHCALL(function,suffix,args)
declaration of __acosf128	__MATH_PRECNAME(name,r)
declaration of __acosf128	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf128	__MATHDECL(type,function,suffix,args)
declaration of acosf128	__MATHCALL(function,suffix,args)
declaration of acosf128	__MATHDECL(type,function,suffix,args)
declaration of acosf128	__MATH_PRECNAME(name,r)
declaration of acosf128	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf32x	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf32x	__MATH_PRECNAME(name,r)
declaration of setpayloadf32x	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadf32x	__MATH_PRECNAME(name,r)
declaration of __getpayloadf32x	__MATHCALL(function,suffix,args)
declaration of __getpayloadf32x	__MATH_PRECNAME(name,r)
declaration of __getpayloadf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __getpayloadf32x	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf32x	__MATHCALL(function,suffix,args)
declaration of getpayloadf32x	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf32x	__MATH_PRECNAME(name,r)
declaration of getpayloadf32x	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef32x	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef32x	__MATH_PRECNAME(name,r)
declaration of totalordermagf32x	__MATHDECL_1(type,function,suffix,args)
declaration of totalordermagf32x	__MATH_PRECNAME(name,r)
declaration of totalorderf32x	__MATHDECL_1(type,function,suffix,args)
declaration of totalorderf32x	__MATH_PRECNAME(name,r)
declaration of __fminmagf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminmagf32x	__MATH_PRECNAME(name,r)
declaration of __fminmagf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fminmagf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of fminmagf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf32x	__MATH_PRECNAME(name,r)
declaration of fminmagf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxmagf32x	__MATH_PRECNAME(name,r)
declaration of __fmaxmagf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxmagf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf32x	__MATH_PRECNAME(name,r)
declaration of fmaxmagf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpxf32x	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpxf32x	__MATH_PRECNAME(name,r)
declaration of __ufromfpxf32x	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpxf32x	__MATHDECL(type,function,suffix,args)
declaration of ufromfpxf32x	__MATH_PRECNAME(name,r)
declaration of ufromfpxf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpxf32x	__MATHDECL(type,function,suffix,args)
declaration of __fromfpxf32x	__MATH_PRECNAME(name,r)
declaration of __fromfpxf32x	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpxf32x	__MATHDECL(type,function,suffix,args)
declaration of fromfpxf32x	__MATH_PRECNAME(name,r)
declaration of fromfpxf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpf32x	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpf32x	__MATH_PRECNAME(name,r)
declaration of __ufromfpf32x	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpf32x	__MATHDECL(type,function,suffix,args)
declaration of ufromfpf32x	__MATH_PRECNAME(name,r)
declaration of ufromfpf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpf32x	__MATHDECL(type,function,suffix,args)
declaration of __fromfpf32x	__MATH_PRECNAME(name,r)
declaration of __fromfpf32x	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpf32x	__MATHDECL(type,function,suffix,args)
declaration of fromfpf32x	__MATH_PRECNAME(name,r)
declaration of fromfpf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundevenf32x	__MATH_PRECNAME(name,r)
declaration of __roundevenf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of roundevenf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf32x	__MATH_PRECNAME(name,r)
declaration of roundevenf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf32x	__MATHCALL(function,suffix,args)
declaration of __fmaf32x	__MATH_PRECNAME(name,r)
declaration of __fmaf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf32x	__MATHDECL(type,function,suffix,args)
declaration of fmaf32x	__MATHCALL(function,suffix,args)
declaration of fmaf32x	__MATHDECL(type,function,suffix,args)
declaration of fmaf32x	__MATH_PRECNAME(name,r)
declaration of fmaf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminf32x	__MATH_PRECNAME(name,r)
declaration of __fminf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of fminf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf32x	__MATH_PRECNAME(name,r)
declaration of fminf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxf32x	__MATH_PRECNAME(name,r)
declaration of __fmaxf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf32x	__MATH_PRECNAME(name,r)
declaration of fmaxf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf32x	__MATHCALL(function,suffix,args)
declaration of __fdimf32x	__MATH_PRECNAME(name,r)
declaration of __fdimf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf32x	__MATHDECL(type,function,suffix,args)
declaration of fdimf32x	__MATHCALL(function,suffix,args)
declaration of fdimf32x	__MATHDECL(type,function,suffix,args)
declaration of fdimf32x	__MATH_PRECNAME(name,r)
declaration of fdimf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __llroundf32x	__MATHDECL(type,function,suffix,args)
declaration of __llroundf32x	__MATH_PRECNAME(name,r)
declaration of __llroundf32x	__MATHDECL_1(type,function,suffix,args)
declaration of llroundf32x	__MATHDECL(type,function,suffix,args)
declaration of llroundf32x	__MATH_PRECNAME(name,r)
declaration of llroundf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __lroundf32x	__MATHDECL(type,function,suffix,args)
declaration of __lroundf32x	__MATH_PRECNAME(name,r)
declaration of __lroundf32x	__MATHDECL_1(type,function,suffix,args)
declaration of lroundf32x	__MATHDECL(type,function,suffix,args)
declaration of lroundf32x	__MATH_PRECNAME(name,r)
declaration of lroundf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __llrintf32x	__MATHDECL(type,function,suffix,args)
declaration of __llrintf32x	__MATH_PRECNAME(name,r)
declaration of __llrintf32x	__MATHDECL_1(type,function,suffix,args)
declaration of llrintf32x	__MATHDECL(type,function,suffix,args)
declaration of llrintf32x	__MATH_PRECNAME(name,r)
declaration of llrintf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __lrintf32x	__MATHDECL(type,function,suffix,args)
declaration of __lrintf32x	__MATH_PRECNAME(name,r)
declaration of __lrintf32x	__MATHDECL_1(type,function,suffix,args)
declaration of lrintf32x	__MATHDECL(type,function,suffix,args)
declaration of lrintf32x	__MATH_PRECNAME(name,r)
declaration of lrintf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof32x	__MATHCALL(function,suffix,args)
declaration of __remquof32x	__MATH_PRECNAME(name,r)
declaration of __remquof32x	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof32x	__MATHDECL(type,function,suffix,args)
declaration of remquof32x	__MATHCALL(function,suffix,args)
declaration of remquof32x	__MATHDECL(type,function,suffix,args)
declaration of remquof32x	__MATH_PRECNAME(name,r)
declaration of remquof32x	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __truncf32x	__MATH_PRECNAME(name,r)
declaration of __truncf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of truncf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf32x	__MATH_PRECNAME(name,r)
declaration of truncf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundf32x	__MATH_PRECNAME(name,r)
declaration of __roundf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of roundf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf32x	__MATH_PRECNAME(name,r)
declaration of roundf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf32x	__MATHCALL(function,suffix,args)
declaration of __nearbyintf32x	__MATH_PRECNAME(name,r)
declaration of __nearbyintf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf32x	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf32x	__MATHCALL(function,suffix,args)
declaration of nearbyintf32x	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf32x	__MATH_PRECNAME(name,r)
declaration of nearbyintf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf32x	__MATHCALL(function,suffix,args)
declaration of __scalblnf32x	__MATH_PRECNAME(name,r)
declaration of __scalblnf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf32x	__MATHDECL(type,function,suffix,args)
declaration of scalblnf32x	__MATHCALL(function,suffix,args)
declaration of scalblnf32x	__MATHDECL(type,function,suffix,args)
declaration of scalblnf32x	__MATH_PRECNAME(name,r)
declaration of scalblnf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __llogbf32x	__MATHDECL(type,function,suffix,args)
declaration of __llogbf32x	__MATH_PRECNAME(name,r)
declaration of __llogbf32x	__MATHDECL_1(type,function,suffix,args)
declaration of llogbf32x	__MATHDECL(type,function,suffix,args)
declaration of llogbf32x	__MATH_PRECNAME(name,r)
declaration of llogbf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __ilogbf32x	__MATHDECL(type,function,suffix,args)
declaration of __ilogbf32x	__MATH_PRECNAME(name,r)
declaration of __ilogbf32x	__MATHDECL_1(type,function,suffix,args)
declaration of ilogbf32x	__MATHDECL(type,function,suffix,args)
declaration of ilogbf32x	__MATH_PRECNAME(name,r)
declaration of ilogbf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf32x	__MATHCALL(function,suffix,args)
declaration of __scalbnf32x	__MATH_PRECNAME(name,r)
declaration of __scalbnf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf32x	__MATHDECL(type,function,suffix,args)
declaration of scalbnf32x	__MATHCALL(function,suffix,args)
declaration of scalbnf32x	__MATHDECL(type,function,suffix,args)
declaration of scalbnf32x	__MATH_PRECNAME(name,r)
declaration of scalbnf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf32x	__MATHCALL(function,suffix,args)
declaration of __remainderf32x	__MATH_PRECNAME(name,r)
declaration of __remainderf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf32x	__MATHDECL(type,function,suffix,args)
declaration of remainderf32x	__MATHCALL(function,suffix,args)
declaration of remainderf32x	__MATHDECL(type,function,suffix,args)
declaration of remainderf32x	__MATH_PRECNAME(name,r)
declaration of remainderf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf32x	__MATHCALL(function,suffix,args)
declaration of __nextupf32x	__MATH_PRECNAME(name,r)
declaration of __nextupf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf32x	__MATHDECL(type,function,suffix,args)
declaration of nextupf32x	__MATHCALL(function,suffix,args)
declaration of nextupf32x	__MATHDECL(type,function,suffix,args)
declaration of nextupf32x	__MATH_PRECNAME(name,r)
declaration of nextupf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf32x	__MATHCALL(function,suffix,args)
declaration of __nextdownf32x	__MATH_PRECNAME(name,r)
declaration of __nextdownf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf32x	__MATHDECL(type,function,suffix,args)
declaration of nextdownf32x	__MATHCALL(function,suffix,args)
declaration of nextdownf32x	__MATHDECL(type,function,suffix,args)
declaration of nextdownf32x	__MATH_PRECNAME(name,r)
declaration of nextdownf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf32x	__MATHCALL(function,suffix,args)
declaration of __nextafterf32x	__MATH_PRECNAME(name,r)
declaration of __nextafterf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf32x	__MATHDECL(type,function,suffix,args)
declaration of nextafterf32x	__MATHCALL(function,suffix,args)
declaration of nextafterf32x	__MATHDECL(type,function,suffix,args)
declaration of nextafterf32x	__MATH_PRECNAME(name,r)
declaration of nextafterf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf32x	__MATHCALL(function,suffix,args)
declaration of __rintf32x	__MATH_PRECNAME(name,r)
declaration of __rintf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf32x	__MATHDECL(type,function,suffix,args)
declaration of rintf32x	__MATHCALL(function,suffix,args)
declaration of rintf32x	__MATHDECL(type,function,suffix,args)
declaration of rintf32x	__MATH_PRECNAME(name,r)
declaration of rintf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf32x_r	__MATHCALL(function,suffix,args)
declaration of __lgammaf32x_r	__MATH_PRECNAME(name,r)
declaration of __lgammaf32x_r	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf32x_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf32x_r	__MATHCALL(function,suffix,args)
declaration of lgammaf32x_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf32x_r	__MATH_PRECNAME(name,r)
declaration of lgammaf32x_r	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf32x	__MATHCALL(function,suffix,args)
declaration of __tgammaf32x	__MATH_PRECNAME(name,r)
declaration of __tgammaf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf32x	__MATHDECL(type,function,suffix,args)
declaration of tgammaf32x	__MATHCALL(function,suffix,args)
declaration of tgammaf32x	__MATHDECL(type,function,suffix,args)
declaration of tgammaf32x	__MATH_PRECNAME(name,r)
declaration of tgammaf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf32x	__MATHCALL(function,suffix,args)
declaration of __lgammaf32x	__MATH_PRECNAME(name,r)
declaration of __lgammaf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf32x	__MATHDECL(type,function,suffix,args)
declaration of lgammaf32x	__MATHCALL(function,suffix,args)
declaration of lgammaf32x	__MATHDECL(type,function,suffix,args)
declaration of lgammaf32x	__MATH_PRECNAME(name,r)
declaration of lgammaf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf32x	__MATHCALL(function,suffix,args)
declaration of __erfcf32x	__MATH_PRECNAME(name,r)
declaration of __erfcf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf32x	__MATHDECL(type,function,suffix,args)
declaration of erfcf32x	__MATHCALL(function,suffix,args)
declaration of erfcf32x	__MATHDECL(type,function,suffix,args)
declaration of erfcf32x	__MATH_PRECNAME(name,r)
declaration of erfcf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __erff32x	__MATHCALL(function,suffix,args)
declaration of __erff32x	__MATH_PRECNAME(name,r)
declaration of __erff32x	__MATHDECL_1(type,function,suffix,args)
declaration of __erff32x	__MATHDECL(type,function,suffix,args)
declaration of erff32x	__MATHCALL(function,suffix,args)
declaration of erff32x	__MATHDECL(type,function,suffix,args)
declaration of erff32x	__MATH_PRECNAME(name,r)
declaration of erff32x	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf32x	__MATHCALL(function,suffix,args)
declaration of __ynf32x	__MATH_PRECNAME(name,r)
declaration of __ynf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf32x	__MATHDECL(type,function,suffix,args)
declaration of ynf32x	__MATHCALL(function,suffix,args)
declaration of ynf32x	__MATHDECL(type,function,suffix,args)
declaration of ynf32x	__MATH_PRECNAME(name,r)
declaration of ynf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f32x	__MATHCALL(function,suffix,args)
declaration of __y1f32x	__MATH_PRECNAME(name,r)
declaration of __y1f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f32x	__MATHDECL(type,function,suffix,args)
declaration of y1f32x	__MATHCALL(function,suffix,args)
declaration of y1f32x	__MATHDECL(type,function,suffix,args)
declaration of y1f32x	__MATH_PRECNAME(name,r)
declaration of y1f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f32x	__MATHCALL(function,suffix,args)
declaration of __y0f32x	__MATH_PRECNAME(name,r)
declaration of __y0f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f32x	__MATHDECL(type,function,suffix,args)
declaration of y0f32x	__MATHCALL(function,suffix,args)
declaration of y0f32x	__MATHDECL(type,function,suffix,args)
declaration of y0f32x	__MATH_PRECNAME(name,r)
declaration of y0f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf32x	__MATHCALL(function,suffix,args)
declaration of __jnf32x	__MATH_PRECNAME(name,r)
declaration of __jnf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf32x	__MATHDECL(type,function,suffix,args)
declaration of jnf32x	__MATHCALL(function,suffix,args)
declaration of jnf32x	__MATHDECL(type,function,suffix,args)
declaration of jnf32x	__MATH_PRECNAME(name,r)
declaration of jnf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f32x	__MATHCALL(function,suffix,args)
declaration of __j1f32x	__MATH_PRECNAME(name,r)
declaration of __j1f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f32x	__MATHDECL(type,function,suffix,args)
declaration of j1f32x	__MATHCALL(function,suffix,args)
declaration of j1f32x	__MATHDECL(type,function,suffix,args)
declaration of j1f32x	__MATH_PRECNAME(name,r)
declaration of j1f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f32x	__MATHCALL(function,suffix,args)
declaration of __j0f32x	__MATH_PRECNAME(name,r)
declaration of __j0f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f32x	__MATHDECL(type,function,suffix,args)
declaration of j0f32x	__MATHCALL(function,suffix,args)
declaration of j0f32x	__MATHDECL(type,function,suffix,args)
declaration of j0f32x	__MATH_PRECNAME(name,r)
declaration of j0f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf32x	__MATHCALL(function,suffix,args)
declaration of __nanf32x	__MATH_PRECNAME(name,r)
declaration of __nanf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf32x	__MATHDECL(type,function,suffix,args)
declaration of nanf32x	__MATHCALL(function,suffix,args)
declaration of nanf32x	__MATHDECL(type,function,suffix,args)
declaration of nanf32x	__MATH_PRECNAME(name,r)
declaration of nanf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __copysignf32x	__MATH_PRECNAME(name,r)
declaration of __copysignf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of copysignf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf32x	__MATH_PRECNAME(name,r)
declaration of copysignf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf32x	__MATHCALL(function,suffix,args)
declaration of __fmodf32x	__MATH_PRECNAME(name,r)
declaration of __fmodf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf32x	__MATHDECL(type,function,suffix,args)
declaration of fmodf32x	__MATHCALL(function,suffix,args)
declaration of fmodf32x	__MATHDECL(type,function,suffix,args)
declaration of fmodf32x	__MATH_PRECNAME(name,r)
declaration of fmodf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __floorf32x	__MATH_PRECNAME(name,r)
declaration of __floorf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of floorf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf32x	__MATH_PRECNAME(name,r)
declaration of floorf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fabsf32x	__MATH_PRECNAME(name,r)
declaration of __fabsf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of fabsf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf32x	__MATH_PRECNAME(name,r)
declaration of fabsf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of __ceilf32x	__MATH_PRECNAME(name,r)
declaration of __ceilf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf32x	__MATHCALLX(function,suffix,args,attrib)
declaration of ceilf32x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf32x	__MATH_PRECNAME(name,r)
declaration of ceilf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf32x	__MATHCALL(function,suffix,args)
declaration of __cbrtf32x	__MATH_PRECNAME(name,r)
declaration of __cbrtf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf32x	__MATHDECL(type,function,suffix,args)
declaration of cbrtf32x	__MATHCALL(function,suffix,args)
declaration of cbrtf32x	__MATHDECL(type,function,suffix,args)
declaration of cbrtf32x	__MATH_PRECNAME(name,r)
declaration of cbrtf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf32x	__MATHCALL(function,suffix,args)
declaration of __hypotf32x	__MATH_PRECNAME(name,r)
declaration of __hypotf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf32x	__MATHDECL(type,function,suffix,args)
declaration of hypotf32x	__MATHCALL(function,suffix,args)
declaration of hypotf32x	__MATHDECL(type,function,suffix,args)
declaration of hypotf32x	__MATH_PRECNAME(name,r)
declaration of hypotf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf32x	__MATHCALL(function,suffix,args)
declaration of __sqrtf32x	__MATH_PRECNAME(name,r)
declaration of __sqrtf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf32x	__MATHDECL(type,function,suffix,args)
declaration of sqrtf32x	__MATHCALL(function,suffix,args)
declaration of sqrtf32x	__MATHDECL(type,function,suffix,args)
declaration of sqrtf32x	__MATH_PRECNAME(name,r)
declaration of sqrtf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __powf32x	__MATHCALL(function,suffix,args)
declaration of __powf32x	__MATHCALL_VEC(function,suffix,args)
declaration of __powf32x	__MATH_PRECNAME(name,r)
declaration of __powf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __powf32x	__MATHDECL(type,function,suffix,args)
declaration of powf32x	__MATHCALL(function,suffix,args)
declaration of powf32x	__MATHCALL_VEC(function,suffix,args)
declaration of powf32x	__MATHDECL(type,function,suffix,args)
declaration of powf32x	__MATH_PRECNAME(name,r)
declaration of powf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f32x	__MATHCALL(function,suffix,args)
declaration of __log2f32x	__MATH_PRECNAME(name,r)
declaration of __log2f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f32x	__MATHDECL(type,function,suffix,args)
declaration of log2f32x	__MATHCALL(function,suffix,args)
declaration of log2f32x	__MATHDECL(type,function,suffix,args)
declaration of log2f32x	__MATH_PRECNAME(name,r)
declaration of log2f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f32x	__MATHCALL(function,suffix,args)
declaration of __exp2f32x	__MATH_PRECNAME(name,r)
declaration of __exp2f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f32x	__MATHDECL(type,function,suffix,args)
declaration of exp2f32x	__MATHCALL(function,suffix,args)
declaration of exp2f32x	__MATHDECL(type,function,suffix,args)
declaration of exp2f32x	__MATH_PRECNAME(name,r)
declaration of exp2f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf32x	__MATHCALL(function,suffix,args)
declaration of __logbf32x	__MATH_PRECNAME(name,r)
declaration of __logbf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf32x	__MATHDECL(type,function,suffix,args)
declaration of logbf32x	__MATHCALL(function,suffix,args)
declaration of logbf32x	__MATHDECL(type,function,suffix,args)
declaration of logbf32x	__MATH_PRECNAME(name,r)
declaration of logbf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf32x	__MATHCALL(function,suffix,args)
declaration of __log1pf32x	__MATH_PRECNAME(name,r)
declaration of __log1pf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf32x	__MATHDECL(type,function,suffix,args)
declaration of log1pf32x	__MATHCALL(function,suffix,args)
declaration of log1pf32x	__MATHDECL(type,function,suffix,args)
declaration of log1pf32x	__MATH_PRECNAME(name,r)
declaration of log1pf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f32x	__MATHCALL(function,suffix,args)
declaration of __expm1f32x	__MATH_PRECNAME(name,r)
declaration of __expm1f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f32x	__MATHDECL(type,function,suffix,args)
declaration of expm1f32x	__MATHCALL(function,suffix,args)
declaration of expm1f32x	__MATHDECL(type,function,suffix,args)
declaration of expm1f32x	__MATH_PRECNAME(name,r)
declaration of expm1f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f32x	__MATHCALL(function,suffix,args)
declaration of __exp10f32x	__MATH_PRECNAME(name,r)
declaration of __exp10f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f32x	__MATHDECL(type,function,suffix,args)
declaration of exp10f32x	__MATHCALL(function,suffix,args)
declaration of exp10f32x	__MATHDECL(type,function,suffix,args)
declaration of exp10f32x	__MATH_PRECNAME(name,r)
declaration of exp10f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __modff32x	__MATHCALL(function,suffix,args)
declaration of __modff32x	__MATH_PRECNAME(name,r)
declaration of __modff32x	__MATHDECL_1(type,function,suffix,args)
declaration of __modff32x	__MATHDECL(type,function,suffix,args)
declaration of modff32x	__MATHCALL(function,suffix,args)
declaration of modff32x	__MATHDECL(type,function,suffix,args)
declaration of modff32x	__MATH_PRECNAME(name,r)
declaration of modff32x	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f32x	__MATHCALL(function,suffix,args)
declaration of __log10f32x	__MATH_PRECNAME(name,r)
declaration of __log10f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f32x	__MATHDECL(type,function,suffix,args)
declaration of log10f32x	__MATHCALL(function,suffix,args)
declaration of log10f32x	__MATHDECL(type,function,suffix,args)
declaration of log10f32x	__MATH_PRECNAME(name,r)
declaration of log10f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __logf32x	__MATHCALL(function,suffix,args)
declaration of __logf32x	__MATHCALL_VEC(function,suffix,args)
declaration of __logf32x	__MATH_PRECNAME(name,r)
declaration of __logf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __logf32x	__MATHDECL(type,function,suffix,args)
declaration of logf32x	__MATHCALL(function,suffix,args)
declaration of logf32x	__MATHCALL_VEC(function,suffix,args)
declaration of logf32x	__MATHDECL(type,function,suffix,args)
declaration of logf32x	__MATH_PRECNAME(name,r)
declaration of logf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf32x	__MATHCALL(function,suffix,args)
declaration of __ldexpf32x	__MATH_PRECNAME(name,r)
declaration of __ldexpf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf32x	__MATHDECL(type,function,suffix,args)
declaration of ldexpf32x	__MATHCALL(function,suffix,args)
declaration of ldexpf32x	__MATHDECL(type,function,suffix,args)
declaration of ldexpf32x	__MATH_PRECNAME(name,r)
declaration of ldexpf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf32x	__MATHCALL(function,suffix,args)
declaration of __frexpf32x	__MATH_PRECNAME(name,r)
declaration of __frexpf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf32x	__MATHDECL(type,function,suffix,args)
declaration of frexpf32x	__MATHCALL(function,suffix,args)
declaration of frexpf32x	__MATHDECL(type,function,suffix,args)
declaration of frexpf32x	__MATH_PRECNAME(name,r)
declaration of frexpf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __expf32x	__MATHCALL(function,suffix,args)
declaration of __expf32x	__MATHCALL_VEC(function,suffix,args)
declaration of __expf32x	__MATH_PRECNAME(name,r)
declaration of __expf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __expf32x	__MATHDECL(type,function,suffix,args)
declaration of expf32x	__MATHCALL(function,suffix,args)
declaration of expf32x	__MATHCALL_VEC(function,suffix,args)
declaration of expf32x	__MATHDECL(type,function,suffix,args)
declaration of expf32x	__MATH_PRECNAME(name,r)
declaration of expf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf32x	__MATHCALL(function,suffix,args)
declaration of __atanhf32x	__MATH_PRECNAME(name,r)
declaration of __atanhf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf32x	__MATHDECL(type,function,suffix,args)
declaration of atanhf32x	__MATHCALL(function,suffix,args)
declaration of atanhf32x	__MATHDECL(type,function,suffix,args)
declaration of atanhf32x	__MATH_PRECNAME(name,r)
declaration of atanhf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf32x	__MATHCALL(function,suffix,args)
declaration of __asinhf32x	__MATH_PRECNAME(name,r)
declaration of __asinhf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf32x	__MATHDECL(type,function,suffix,args)
declaration of asinhf32x	__MATHCALL(function,suffix,args)
declaration of asinhf32x	__MATHDECL(type,function,suffix,args)
declaration of asinhf32x	__MATH_PRECNAME(name,r)
declaration of asinhf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf32x	__MATHCALL(function,suffix,args)
declaration of __acoshf32x	__MATH_PRECNAME(name,r)
declaration of __acoshf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf32x	__MATHDECL(type,function,suffix,args)
declaration of acoshf32x	__MATHCALL(function,suffix,args)
declaration of acoshf32x	__MATHDECL(type,function,suffix,args)
declaration of acoshf32x	__MATH_PRECNAME(name,r)
declaration of acoshf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf32x	__MATHDECL_VEC(type,function,suffix,args)
declaration of __sincosf32x	__MATH_PRECNAME(name,r)
declaration of __sincosf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf32x	__MATHDECL(type,function,suffix,args)
declaration of sincosf32x	__MATHDECL_VEC(type,function,suffix,args)
declaration of sincosf32x	__MATHDECL(type,function,suffix,args)
declaration of sincosf32x	__MATH_PRECNAME(name,r)
declaration of sincosf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf32x	__MATHCALL(function,suffix,args)
declaration of __tanhf32x	__MATH_PRECNAME(name,r)
declaration of __tanhf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf32x	__MATHDECL(type,function,suffix,args)
declaration of tanhf32x	__MATHCALL(function,suffix,args)
declaration of tanhf32x	__MATHDECL(type,function,suffix,args)
declaration of tanhf32x	__MATH_PRECNAME(name,r)
declaration of tanhf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf32x	__MATHCALL(function,suffix,args)
declaration of __sinhf32x	__MATH_PRECNAME(name,r)
declaration of __sinhf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf32x	__MATHDECL(type,function,suffix,args)
declaration of sinhf32x	__MATHCALL(function,suffix,args)
declaration of sinhf32x	__MATHDECL(type,function,suffix,args)
declaration of sinhf32x	__MATH_PRECNAME(name,r)
declaration of sinhf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf32x	__MATHCALL(function,suffix,args)
declaration of __coshf32x	__MATH_PRECNAME(name,r)
declaration of __coshf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf32x	__MATHDECL(type,function,suffix,args)
declaration of coshf32x	__MATHCALL(function,suffix,args)
declaration of coshf32x	__MATHDECL(type,function,suffix,args)
declaration of coshf32x	__MATH_PRECNAME(name,r)
declaration of coshf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf32x	__MATHCALL(function,suffix,args)
declaration of __tanf32x	__MATH_PRECNAME(name,r)
declaration of __tanf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf32x	__MATHDECL(type,function,suffix,args)
declaration of tanf32x	__MATHCALL(function,suffix,args)
declaration of tanf32x	__MATHDECL(type,function,suffix,args)
declaration of tanf32x	__MATH_PRECNAME(name,r)
declaration of tanf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf32x	__MATHCALL(function,suffix,args)
declaration of __sinf32x	__MATHCALL_VEC(function,suffix,args)
declaration of __sinf32x	__MATH_PRECNAME(name,r)
declaration of __sinf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf32x	__MATHDECL(type,function,suffix,args)
declaration of sinf32x	__MATHCALL(function,suffix,args)
declaration of sinf32x	__MATHCALL_VEC(function,suffix,args)
declaration of sinf32x	__MATHDECL(type,function,suffix,args)
declaration of sinf32x	__MATH_PRECNAME(name,r)
declaration of sinf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf32x	__MATHCALL(function,suffix,args)
declaration of __cosf32x	__MATHCALL_VEC(function,suffix,args)
declaration of __cosf32x	__MATH_PRECNAME(name,r)
declaration of __cosf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf32x	__MATHDECL(type,function,suffix,args)
declaration of cosf32x	__MATHCALL(function,suffix,args)
declaration of cosf32x	__MATHCALL_VEC(function,suffix,args)
declaration of cosf32x	__MATHDECL(type,function,suffix,args)
declaration of cosf32x	__MATH_PRECNAME(name,r)
declaration of cosf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f32x	__MATHCALL(function,suffix,args)
declaration of __atan2f32x	__MATH_PRECNAME(name,r)
declaration of __atan2f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f32x	__MATHDECL(type,function,suffix,args)
declaration of atan2f32x	__MATHCALL(function,suffix,args)
declaration of atan2f32x	__MATHDECL(type,function,suffix,args)
declaration of atan2f32x	__MATH_PRECNAME(name,r)
declaration of atan2f32x	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf32x	__MATHCALL(function,suffix,args)
declaration of __atanf32x	__MATH_PRECNAME(name,r)
declaration of __atanf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf32x	__MATHDECL(type,function,suffix,args)
declaration of atanf32x	__MATHCALL(function,suffix,args)
declaration of atanf32x	__MATHDECL(type,function,suffix,args)
declaration of atanf32x	__MATH_PRECNAME(name,r)
declaration of atanf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf32x	__MATHCALL(function,suffix,args)
declaration of __asinf32x	__MATH_PRECNAME(name,r)
declaration of __asinf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf32x	__MATHDECL(type,function,suffix,args)
declaration of asinf32x	__MATHCALL(function,suffix,args)
declaration of asinf32x	__MATHDECL(type,function,suffix,args)
declaration of asinf32x	__MATH_PRECNAME(name,r)
declaration of asinf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf32x	__MATHCALL(function,suffix,args)
declaration of __acosf32x	__MATH_PRECNAME(name,r)
declaration of __acosf32x	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf32x	__MATHDECL(type,function,suffix,args)
declaration of acosf32x	__MATHCALL(function,suffix,args)
declaration of acosf32x	__MATHDECL(type,function,suffix,args)
declaration of acosf32x	__MATH_PRECNAME(name,r)
declaration of acosf32x	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf64x	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadsigf64x	__MATH_PRECNAME(name,r)
declaration of setpayloadf64x	__MATHDECL_1(type,function,suffix,args)
declaration of setpayloadf64x	__MATH_PRECNAME(name,r)
declaration of __getpayloadf64x	__MATHCALL(function,suffix,args)
declaration of __getpayloadf64x	__MATH_PRECNAME(name,r)
declaration of __getpayloadf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __getpayloadf64x	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf64x	__MATHCALL(function,suffix,args)
declaration of getpayloadf64x	__MATHDECL(type,function,suffix,args)
declaration of getpayloadf64x	__MATH_PRECNAME(name,r)
declaration of getpayloadf64x	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef64x	__MATHDECL_1(type,function,suffix,args)
declaration of canonicalizef64x	__MATH_PRECNAME(name,r)
declaration of totalordermagf64x	__MATHDECL_1(type,function,suffix,args)
declaration of totalordermagf64x	__MATH_PRECNAME(name,r)
declaration of totalorderf64x	__MATHDECL_1(type,function,suffix,args)
declaration of totalorderf64x	__MATH_PRECNAME(name,r)
declaration of __fminmagf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminmagf64x	__MATH_PRECNAME(name,r)
declaration of __fminmagf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fminmagf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of fminmagf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminmagf64x	__MATH_PRECNAME(name,r)
declaration of fminmagf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxmagf64x	__MATH_PRECNAME(name,r)
declaration of __fmaxmagf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxmagf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxmagf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxmagf64x	__MATH_PRECNAME(name,r)
declaration of fmaxmagf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpxf64x	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpxf64x	__MATH_PRECNAME(name,r)
declaration of __ufromfpxf64x	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpxf64x	__MATHDECL(type,function,suffix,args)
declaration of ufromfpxf64x	__MATH_PRECNAME(name,r)
declaration of ufromfpxf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpxf64x	__MATHDECL(type,function,suffix,args)
declaration of __fromfpxf64x	__MATH_PRECNAME(name,r)
declaration of __fromfpxf64x	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpxf64x	__MATHDECL(type,function,suffix,args)
declaration of fromfpxf64x	__MATH_PRECNAME(name,r)
declaration of fromfpxf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __ufromfpf64x	__MATHDECL(type,function,suffix,args)
declaration of __ufromfpf64x	__MATH_PRECNAME(name,r)
declaration of __ufromfpf64x	__MATHDECL_1(type,function,suffix,args)
declaration of ufromfpf64x	__MATHDECL(type,function,suffix,args)
declaration of ufromfpf64x	__MATH_PRECNAME(name,r)
declaration of ufromfpf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fromfpf64x	__MATHDECL(type,function,suffix,args)
declaration of __fromfpf64x	__MATH_PRECNAME(name,r)
declaration of __fromfpf64x	__MATHDECL_1(type,function,suffix,args)
declaration of fromfpf64x	__MATHDECL(type,function,suffix,args)
declaration of fromfpf64x	__MATH_PRECNAME(name,r)
declaration of fromfpf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundevenf64x	__MATH_PRECNAME(name,r)
declaration of __roundevenf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __roundevenf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of roundevenf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundevenf64x	__MATH_PRECNAME(name,r)
declaration of roundevenf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf64x	__MATHCALL(function,suffix,args)
declaration of __fmaf64x	__MATH_PRECNAME(name,r)
declaration of __fmaf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaf64x	__MATHDECL(type,function,suffix,args)
declaration of fmaf64x	__MATHCALL(function,suffix,args)
declaration of fmaf64x	__MATHDECL(type,function,suffix,args)
declaration of fmaf64x	__MATH_PRECNAME(name,r)
declaration of fmaf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fminf64x	__MATH_PRECNAME(name,r)
declaration of __fminf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fminf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of fminf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fminf64x	__MATH_PRECNAME(name,r)
declaration of fminf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fmaxf64x	__MATH_PRECNAME(name,r)
declaration of __fmaxf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmaxf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of fmaxf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fmaxf64x	__MATH_PRECNAME(name,r)
declaration of fmaxf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf64x	__MATHCALL(function,suffix,args)
declaration of __fdimf64x	__MATH_PRECNAME(name,r)
declaration of __fdimf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fdimf64x	__MATHDECL(type,function,suffix,args)
declaration of fdimf64x	__MATHCALL(function,suffix,args)
declaration of fdimf64x	__MATHDECL(type,function,suffix,args)
declaration of fdimf64x	__MATH_PRECNAME(name,r)
declaration of fdimf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __llroundf64x	__MATHDECL(type,function,suffix,args)
declaration of __llroundf64x	__MATH_PRECNAME(name,r)
declaration of __llroundf64x	__MATHDECL_1(type,function,suffix,args)
declaration of llroundf64x	__MATHDECL(type,function,suffix,args)
declaration of llroundf64x	__MATH_PRECNAME(name,r)
declaration of llroundf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __lroundf64x	__MATHDECL(type,function,suffix,args)
declaration of __lroundf64x	__MATH_PRECNAME(name,r)
declaration of __lroundf64x	__MATHDECL_1(type,function,suffix,args)
declaration of lroundf64x	__MATHDECL(type,function,suffix,args)
declaration of lroundf64x	__MATH_PRECNAME(name,r)
declaration of lroundf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __llrintf64x	__MATHDECL(type,function,suffix,args)
declaration of __llrintf64x	__MATH_PRECNAME(name,r)
declaration of __llrintf64x	__MATHDECL_1(type,function,suffix,args)
declaration of llrintf64x	__MATHDECL(type,function,suffix,args)
declaration of llrintf64x	__MATH_PRECNAME(name,r)
declaration of llrintf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __lrintf64x	__MATHDECL(type,function,suffix,args)
declaration of __lrintf64x	__MATH_PRECNAME(name,r)
declaration of __lrintf64x	__MATHDECL_1(type,function,suffix,args)
declaration of lrintf64x	__MATHDECL(type,function,suffix,args)
declaration of lrintf64x	__MATH_PRECNAME(name,r)
declaration of lrintf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof64x	__MATHCALL(function,suffix,args)
declaration of __remquof64x	__MATH_PRECNAME(name,r)
declaration of __remquof64x	__MATHDECL_1(type,function,suffix,args)
declaration of __remquof64x	__MATHDECL(type,function,suffix,args)
declaration of remquof64x	__MATHCALL(function,suffix,args)
declaration of remquof64x	__MATHDECL(type,function,suffix,args)
declaration of remquof64x	__MATH_PRECNAME(name,r)
declaration of remquof64x	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __truncf64x	__MATH_PRECNAME(name,r)
declaration of __truncf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __truncf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of truncf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of truncf64x	__MATH_PRECNAME(name,r)
declaration of truncf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __roundf64x	__MATH_PRECNAME(name,r)
declaration of __roundf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __roundf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of roundf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of roundf64x	__MATH_PRECNAME(name,r)
declaration of roundf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf64x	__MATHCALL(function,suffix,args)
declaration of __nearbyintf64x	__MATH_PRECNAME(name,r)
declaration of __nearbyintf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nearbyintf64x	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf64x	__MATHCALL(function,suffix,args)
declaration of nearbyintf64x	__MATHDECL(type,function,suffix,args)
declaration of nearbyintf64x	__MATH_PRECNAME(name,r)
declaration of nearbyintf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf64x	__MATHCALL(function,suffix,args)
declaration of __scalblnf64x	__MATH_PRECNAME(name,r)
declaration of __scalblnf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __scalblnf64x	__MATHDECL(type,function,suffix,args)
declaration of scalblnf64x	__MATHCALL(function,suffix,args)
declaration of scalblnf64x	__MATHDECL(type,function,suffix,args)
declaration of scalblnf64x	__MATH_PRECNAME(name,r)
declaration of scalblnf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __llogbf64x	__MATHDECL(type,function,suffix,args)
declaration of __llogbf64x	__MATH_PRECNAME(name,r)
declaration of __llogbf64x	__MATHDECL_1(type,function,suffix,args)
declaration of llogbf64x	__MATHDECL(type,function,suffix,args)
declaration of llogbf64x	__MATH_PRECNAME(name,r)
declaration of llogbf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __ilogbf64x	__MATHDECL(type,function,suffix,args)
declaration of __ilogbf64x	__MATH_PRECNAME(name,r)
declaration of __ilogbf64x	__MATHDECL_1(type,function,suffix,args)
declaration of ilogbf64x	__MATHDECL(type,function,suffix,args)
declaration of ilogbf64x	__MATH_PRECNAME(name,r)
declaration of ilogbf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf64x	__MATHCALL(function,suffix,args)
declaration of __scalbnf64x	__MATH_PRECNAME(name,r)
declaration of __scalbnf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __scalbnf64x	__MATHDECL(type,function,suffix,args)
declaration of scalbnf64x	__MATHCALL(function,suffix,args)
declaration of scalbnf64x	__MATHDECL(type,function,suffix,args)
declaration of scalbnf64x	__MATH_PRECNAME(name,r)
declaration of scalbnf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf64x	__MATHCALL(function,suffix,args)
declaration of __remainderf64x	__MATH_PRECNAME(name,r)
declaration of __remainderf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __remainderf64x	__MATHDECL(type,function,suffix,args)
declaration of remainderf64x	__MATHCALL(function,suffix,args)
declaration of remainderf64x	__MATHDECL(type,function,suffix,args)
declaration of remainderf64x	__MATH_PRECNAME(name,r)
declaration of remainderf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf64x	__MATHCALL(function,suffix,args)
declaration of __nextupf64x	__MATH_PRECNAME(name,r)
declaration of __nextupf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextupf64x	__MATHDECL(type,function,suffix,args)
declaration of nextupf64x	__MATHCALL(function,suffix,args)
declaration of nextupf64x	__MATHDECL(type,function,suffix,args)
declaration of nextupf64x	__MATH_PRECNAME(name,r)
declaration of nextupf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf64x	__MATHCALL(function,suffix,args)
declaration of __nextdownf64x	__MATH_PRECNAME(name,r)
declaration of __nextdownf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextdownf64x	__MATHDECL(type,function,suffix,args)
declaration of nextdownf64x	__MATHCALL(function,suffix,args)
declaration of nextdownf64x	__MATHDECL(type,function,suffix,args)
declaration of nextdownf64x	__MATH_PRECNAME(name,r)
declaration of nextdownf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf64x	__MATHCALL(function,suffix,args)
declaration of __nextafterf64x	__MATH_PRECNAME(name,r)
declaration of __nextafterf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nextafterf64x	__MATHDECL(type,function,suffix,args)
declaration of nextafterf64x	__MATHCALL(function,suffix,args)
declaration of nextafterf64x	__MATHDECL(type,function,suffix,args)
declaration of nextafterf64x	__MATH_PRECNAME(name,r)
declaration of nextafterf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf64x	__MATHCALL(function,suffix,args)
declaration of __rintf64x	__MATH_PRECNAME(name,r)
declaration of __rintf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __rintf64x	__MATHDECL(type,function,suffix,args)
declaration of rintf64x	__MATHCALL(function,suffix,args)
declaration of rintf64x	__MATHDECL(type,function,suffix,args)
declaration of rintf64x	__MATH_PRECNAME(name,r)
declaration of rintf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf64x_r	__MATHCALL(function,suffix,args)
declaration of __lgammaf64x_r	__MATH_PRECNAME(name,r)
declaration of __lgammaf64x_r	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf64x_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf64x_r	__MATHCALL(function,suffix,args)
declaration of lgammaf64x_r	__MATHDECL(type,function,suffix,args)
declaration of lgammaf64x_r	__MATH_PRECNAME(name,r)
declaration of lgammaf64x_r	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf64x	__MATHCALL(function,suffix,args)
declaration of __tgammaf64x	__MATH_PRECNAME(name,r)
declaration of __tgammaf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __tgammaf64x	__MATHDECL(type,function,suffix,args)
declaration of tgammaf64x	__MATHCALL(function,suffix,args)
declaration of tgammaf64x	__MATHDECL(type,function,suffix,args)
declaration of tgammaf64x	__MATH_PRECNAME(name,r)
declaration of tgammaf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf64x	__MATHCALL(function,suffix,args)
declaration of __lgammaf64x	__MATH_PRECNAME(name,r)
declaration of __lgammaf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __lgammaf64x	__MATHDECL(type,function,suffix,args)
declaration of lgammaf64x	__MATHCALL(function,suffix,args)
declaration of lgammaf64x	__MATHDECL(type,function,suffix,args)
declaration of lgammaf64x	__MATH_PRECNAME(name,r)
declaration of lgammaf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf64x	__MATHCALL(function,suffix,args)
declaration of __erfcf64x	__MATH_PRECNAME(name,r)
declaration of __erfcf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __erfcf64x	__MATHDECL(type,function,suffix,args)
declaration of erfcf64x	__MATHCALL(function,suffix,args)
declaration of erfcf64x	__MATHDECL(type,function,suffix,args)
declaration of erfcf64x	__MATH_PRECNAME(name,r)
declaration of erfcf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __erff64x	__MATHCALL(function,suffix,args)
declaration of __erff64x	__MATH_PRECNAME(name,r)
declaration of __erff64x	__MATHDECL_1(type,function,suffix,args)
declaration of __erff64x	__MATHDECL(type,function,suffix,args)
declaration of erff64x	__MATHCALL(function,suffix,args)
declaration of erff64x	__MATHDECL(type,function,suffix,args)
declaration of erff64x	__MATH_PRECNAME(name,r)
declaration of erff64x	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf64x	__MATHCALL(function,suffix,args)
declaration of __ynf64x	__MATH_PRECNAME(name,r)
declaration of __ynf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __ynf64x	__MATHDECL(type,function,suffix,args)
declaration of ynf64x	__MATHCALL(function,suffix,args)
declaration of ynf64x	__MATHDECL(type,function,suffix,args)
declaration of ynf64x	__MATH_PRECNAME(name,r)
declaration of ynf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f64x	__MATHCALL(function,suffix,args)
declaration of __y1f64x	__MATH_PRECNAME(name,r)
declaration of __y1f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __y1f64x	__MATHDECL(type,function,suffix,args)
declaration of y1f64x	__MATHCALL(function,suffix,args)
declaration of y1f64x	__MATHDECL(type,function,suffix,args)
declaration of y1f64x	__MATH_PRECNAME(name,r)
declaration of y1f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f64x	__MATHCALL(function,suffix,args)
declaration of __y0f64x	__MATH_PRECNAME(name,r)
declaration of __y0f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __y0f64x	__MATHDECL(type,function,suffix,args)
declaration of y0f64x	__MATHCALL(function,suffix,args)
declaration of y0f64x	__MATHDECL(type,function,suffix,args)
declaration of y0f64x	__MATH_PRECNAME(name,r)
declaration of y0f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf64x	__MATHCALL(function,suffix,args)
declaration of __jnf64x	__MATH_PRECNAME(name,r)
declaration of __jnf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __jnf64x	__MATHDECL(type,function,suffix,args)
declaration of jnf64x	__MATHCALL(function,suffix,args)
declaration of jnf64x	__MATHDECL(type,function,suffix,args)
declaration of jnf64x	__MATH_PRECNAME(name,r)
declaration of jnf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f64x	__MATHCALL(function,suffix,args)
declaration of __j1f64x	__MATH_PRECNAME(name,r)
declaration of __j1f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __j1f64x	__MATHDECL(type,function,suffix,args)
declaration of j1f64x	__MATHCALL(function,suffix,args)
declaration of j1f64x	__MATHDECL(type,function,suffix,args)
declaration of j1f64x	__MATH_PRECNAME(name,r)
declaration of j1f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f64x	__MATHCALL(function,suffix,args)
declaration of __j0f64x	__MATH_PRECNAME(name,r)
declaration of __j0f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __j0f64x	__MATHDECL(type,function,suffix,args)
declaration of j0f64x	__MATHCALL(function,suffix,args)
declaration of j0f64x	__MATHDECL(type,function,suffix,args)
declaration of j0f64x	__MATH_PRECNAME(name,r)
declaration of j0f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf64x	__MATHCALL(function,suffix,args)
declaration of __nanf64x	__MATH_PRECNAME(name,r)
declaration of __nanf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __nanf64x	__MATHDECL(type,function,suffix,args)
declaration of nanf64x	__MATHCALL(function,suffix,args)
declaration of nanf64x	__MATHDECL(type,function,suffix,args)
declaration of nanf64x	__MATH_PRECNAME(name,r)
declaration of nanf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __copysignf64x	__MATH_PRECNAME(name,r)
declaration of __copysignf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __copysignf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of copysignf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of copysignf64x	__MATH_PRECNAME(name,r)
declaration of copysignf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf64x	__MATHCALL(function,suffix,args)
declaration of __fmodf64x	__MATH_PRECNAME(name,r)
declaration of __fmodf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fmodf64x	__MATHDECL(type,function,suffix,args)
declaration of fmodf64x	__MATHCALL(function,suffix,args)
declaration of fmodf64x	__MATHDECL(type,function,suffix,args)
declaration of fmodf64x	__MATH_PRECNAME(name,r)
declaration of fmodf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __floorf64x	__MATH_PRECNAME(name,r)
declaration of __floorf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __floorf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of floorf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of floorf64x	__MATH_PRECNAME(name,r)
declaration of floorf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __fabsf64x	__MATH_PRECNAME(name,r)
declaration of __fabsf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __fabsf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of fabsf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of fabsf64x	__MATH_PRECNAME(name,r)
declaration of fabsf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of __ceilf64x	__MATH_PRECNAME(name,r)
declaration of __ceilf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __ceilf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf64x	__MATHCALLX(function,suffix,args,attrib)
declaration of ceilf64x	__MATHDECLX(type,function,suffix,args,attrib)
declaration of ceilf64x	__MATH_PRECNAME(name,r)
declaration of ceilf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf64x	__MATHCALL(function,suffix,args)
declaration of __cbrtf64x	__MATH_PRECNAME(name,r)
declaration of __cbrtf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __cbrtf64x	__MATHDECL(type,function,suffix,args)
declaration of cbrtf64x	__MATHCALL(function,suffix,args)
declaration of cbrtf64x	__MATHDECL(type,function,suffix,args)
declaration of cbrtf64x	__MATH_PRECNAME(name,r)
declaration of cbrtf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf64x	__MATHCALL(function,suffix,args)
declaration of __hypotf64x	__MATH_PRECNAME(name,r)
declaration of __hypotf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __hypotf64x	__MATHDECL(type,function,suffix,args)
declaration of hypotf64x	__MATHCALL(function,suffix,args)
declaration of hypotf64x	__MATHDECL(type,function,suffix,args)
declaration of hypotf64x	__MATH_PRECNAME(name,r)
declaration of hypotf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf64x	__MATHCALL(function,suffix,args)
declaration of __sqrtf64x	__MATH_PRECNAME(name,r)
declaration of __sqrtf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __sqrtf64x	__MATHDECL(type,function,suffix,args)
declaration of sqrtf64x	__MATHCALL(function,suffix,args)
declaration of sqrtf64x	__MATHDECL(type,function,suffix,args)
declaration of sqrtf64x	__MATH_PRECNAME(name,r)
declaration of sqrtf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __powf64x	__MATHCALL(function,suffix,args)
declaration of __powf64x	__MATHCALL_VEC(function,suffix,args)
declaration of __powf64x	__MATH_PRECNAME(name,r)
declaration of __powf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __powf64x	__MATHDECL(type,function,suffix,args)
declaration of powf64x	__MATHCALL(function,suffix,args)
declaration of powf64x	__MATHCALL_VEC(function,suffix,args)
declaration of powf64x	__MATHDECL(type,function,suffix,args)
declaration of powf64x	__MATH_PRECNAME(name,r)
declaration of powf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f64x	__MATHCALL(function,suffix,args)
declaration of __log2f64x	__MATH_PRECNAME(name,r)
declaration of __log2f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __log2f64x	__MATHDECL(type,function,suffix,args)
declaration of log2f64x	__MATHCALL(function,suffix,args)
declaration of log2f64x	__MATHDECL(type,function,suffix,args)
declaration of log2f64x	__MATH_PRECNAME(name,r)
declaration of log2f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f64x	__MATHCALL(function,suffix,args)
declaration of __exp2f64x	__MATH_PRECNAME(name,r)
declaration of __exp2f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __exp2f64x	__MATHDECL(type,function,suffix,args)
declaration of exp2f64x	__MATHCALL(function,suffix,args)
declaration of exp2f64x	__MATHDECL(type,function,suffix,args)
declaration of exp2f64x	__MATH_PRECNAME(name,r)
declaration of exp2f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf64x	__MATHCALL(function,suffix,args)
declaration of __logbf64x	__MATH_PRECNAME(name,r)
declaration of __logbf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __logbf64x	__MATHDECL(type,function,suffix,args)
declaration of logbf64x	__MATHCALL(function,suffix,args)
declaration of logbf64x	__MATHDECL(type,function,suffix,args)
declaration of logbf64x	__MATH_PRECNAME(name,r)
declaration of logbf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf64x	__MATHCALL(function,suffix,args)
declaration of __log1pf64x	__MATH_PRECNAME(name,r)
declaration of __log1pf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __log1pf64x	__MATHDECL(type,function,suffix,args)
declaration of log1pf64x	__MATHCALL(function,suffix,args)
declaration of log1pf64x	__MATHDECL(type,function,suffix,args)
declaration of log1pf64x	__MATH_PRECNAME(name,r)
declaration of log1pf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f64x	__MATHCALL(function,suffix,args)
declaration of __expm1f64x	__MATH_PRECNAME(name,r)
declaration of __expm1f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __expm1f64x	__MATHDECL(type,function,suffix,args)
declaration of expm1f64x	__MATHCALL(function,suffix,args)
declaration of expm1f64x	__MATHDECL(type,function,suffix,args)
declaration of expm1f64x	__MATH_PRECNAME(name,r)
declaration of expm1f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f64x	__MATHCALL(function,suffix,args)
declaration of __exp10f64x	__MATH_PRECNAME(name,r)
declaration of __exp10f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __exp10f64x	__MATHDECL(type,function,suffix,args)
declaration of exp10f64x	__MATHCALL(function,suffix,args)
declaration of exp10f64x	__MATHDECL(type,function,suffix,args)
declaration of exp10f64x	__MATH_PRECNAME(name,r)
declaration of exp10f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __modff64x	__MATHCALL(function,suffix,args)
declaration of __modff64x	__MATH_PRECNAME(name,r)
declaration of __modff64x	__MATHDECL_1(type,function,suffix,args)
declaration of __modff64x	__MATHDECL(type,function,suffix,args)
declaration of modff64x	__MATHCALL(function,suffix,args)
declaration of modff64x	__MATHDECL(type,function,suffix,args)
declaration of modff64x	__MATH_PRECNAME(name,r)
declaration of modff64x	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f64x	__MATHCALL(function,suffix,args)
declaration of __log10f64x	__MATH_PRECNAME(name,r)
declaration of __log10f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __log10f64x	__MATHDECL(type,function,suffix,args)
declaration of log10f64x	__MATHCALL(function,suffix,args)
declaration of log10f64x	__MATHDECL(type,function,suffix,args)
declaration of log10f64x	__MATH_PRECNAME(name,r)
declaration of log10f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __logf64x	__MATHCALL(function,suffix,args)
declaration of __logf64x	__MATHCALL_VEC(function,suffix,args)
declaration of __logf64x	__MATH_PRECNAME(name,r)
declaration of __logf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __logf64x	__MATHDECL(type,function,suffix,args)
declaration of logf64x	__MATHCALL(function,suffix,args)
declaration of logf64x	__MATHCALL_VEC(function,suffix,args)
declaration of logf64x	__MATHDECL(type,function,suffix,args)
declaration of logf64x	__MATH_PRECNAME(name,r)
declaration of logf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf64x	__MATHCALL(function,suffix,args)
declaration of __ldexpf64x	__MATH_PRECNAME(name,r)
declaration of __ldexpf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __ldexpf64x	__MATHDECL(type,function,suffix,args)
declaration of ldexpf64x	__MATHCALL(function,suffix,args)
declaration of ldexpf64x	__MATHDECL(type,function,suffix,args)
declaration of ldexpf64x	__MATH_PRECNAME(name,r)
declaration of ldexpf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf64x	__MATHCALL(function,suffix,args)
declaration of __frexpf64x	__MATH_PRECNAME(name,r)
declaration of __frexpf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __frexpf64x	__MATHDECL(type,function,suffix,args)
declaration of frexpf64x	__MATHCALL(function,suffix,args)
declaration of frexpf64x	__MATHDECL(type,function,suffix,args)
declaration of frexpf64x	__MATH_PRECNAME(name,r)
declaration of frexpf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __expf64x	__MATHCALL(function,suffix,args)
declaration of __expf64x	__MATHCALL_VEC(function,suffix,args)
declaration of __expf64x	__MATH_PRECNAME(name,r)
declaration of __expf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __expf64x	__MATHDECL(type,function,suffix,args)
declaration of expf64x	__MATHCALL(function,suffix,args)
declaration of expf64x	__MATHCALL_VEC(function,suffix,args)
declaration of expf64x	__MATHDECL(type,function,suffix,args)
declaration of expf64x	__MATH_PRECNAME(name,r)
declaration of expf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf64x	__MATHCALL(function,suffix,args)
declaration of __atanhf64x	__MATH_PRECNAME(name,r)
declaration of __atanhf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __atanhf64x	__MATHDECL(type,function,suffix,args)
declaration of atanhf64x	__MATHCALL(function,suffix,args)
declaration of atanhf64x	__MATHDECL(type,function,suffix,args)
declaration of atanhf64x	__MATH_PRECNAME(name,r)
declaration of atanhf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf64x	__MATHCALL(function,suffix,args)
declaration of __asinhf64x	__MATH_PRECNAME(name,r)
declaration of __asinhf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __asinhf64x	__MATHDECL(type,function,suffix,args)
declaration of asinhf64x	__MATHCALL(function,suffix,args)
declaration of asinhf64x	__MATHDECL(type,function,suffix,args)
declaration of asinhf64x	__MATH_PRECNAME(name,r)
declaration of asinhf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf64x	__MATHCALL(function,suffix,args)
declaration of __acoshf64x	__MATH_PRECNAME(name,r)
declaration of __acoshf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __acoshf64x	__MATHDECL(type,function,suffix,args)
declaration of acoshf64x	__MATHCALL(function,suffix,args)
declaration of acoshf64x	__MATHDECL(type,function,suffix,args)
declaration of acoshf64x	__MATH_PRECNAME(name,r)
declaration of acoshf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf64x	__MATHDECL_VEC(type,function,suffix,args)
declaration of __sincosf64x	__MATH_PRECNAME(name,r)
declaration of __sincosf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __sincosf64x	__MATHDECL(type,function,suffix,args)
declaration of sincosf64x	__MATHDECL_VEC(type,function,suffix,args)
declaration of sincosf64x	__MATHDECL(type,function,suffix,args)
declaration of sincosf64x	__MATH_PRECNAME(name,r)
declaration of sincosf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf64x	__MATHCALL(function,suffix,args)
declaration of __tanhf64x	__MATH_PRECNAME(name,r)
declaration of __tanhf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __tanhf64x	__MATHDECL(type,function,suffix,args)
declaration of tanhf64x	__MATHCALL(function,suffix,args)
declaration of tanhf64x	__MATHDECL(type,function,suffix,args)
declaration of tanhf64x	__MATH_PRECNAME(name,r)
declaration of tanhf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf64x	__MATHCALL(function,suffix,args)
declaration of __sinhf64x	__MATH_PRECNAME(name,r)
declaration of __sinhf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __sinhf64x	__MATHDECL(type,function,suffix,args)
declaration of sinhf64x	__MATHCALL(function,suffix,args)
declaration of sinhf64x	__MATHDECL(type,function,suffix,args)
declaration of sinhf64x	__MATH_PRECNAME(name,r)
declaration of sinhf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf64x	__MATHCALL(function,suffix,args)
declaration of __coshf64x	__MATH_PRECNAME(name,r)
declaration of __coshf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __coshf64x	__MATHDECL(type,function,suffix,args)
declaration of coshf64x	__MATHCALL(function,suffix,args)
declaration of coshf64x	__MATHDECL(type,function,suffix,args)
declaration of coshf64x	__MATH_PRECNAME(name,r)
declaration of coshf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf64x	__MATHCALL(function,suffix,args)
declaration of __tanf64x	__MATH_PRECNAME(name,r)
declaration of __tanf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __tanf64x	__MATHDECL(type,function,suffix,args)
declaration of tanf64x	__MATHCALL(function,suffix,args)
declaration of tanf64x	__MATHDECL(type,function,suffix,args)
declaration of tanf64x	__MATH_PRECNAME(name,r)
declaration of tanf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf64x	__MATHCALL(function,suffix,args)
declaration of __sinf64x	__MATHCALL_VEC(function,suffix,args)
declaration of __sinf64x	__MATH_PRECNAME(name,r)
declaration of __sinf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __sinf64x	__MATHDECL(type,function,suffix,args)
declaration of sinf64x	__MATHCALL(function,suffix,args)
declaration of sinf64x	__MATHCALL_VEC(function,suffix,args)
declaration of sinf64x	__MATHDECL(type,function,suffix,args)
declaration of sinf64x	__MATH_PRECNAME(name,r)
declaration of sinf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf64x	__MATHCALL(function,suffix,args)
declaration of __cosf64x	__MATHCALL_VEC(function,suffix,args)
declaration of __cosf64x	__MATH_PRECNAME(name,r)
declaration of __cosf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __cosf64x	__MATHDECL(type,function,suffix,args)
declaration of cosf64x	__MATHCALL(function,suffix,args)
declaration of cosf64x	__MATHCALL_VEC(function,suffix,args)
declaration of cosf64x	__MATHDECL(type,function,suffix,args)
declaration of cosf64x	__MATH_PRECNAME(name,r)
declaration of cosf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f64x	__MATHCALL(function,suffix,args)
declaration of __atan2f64x	__MATH_PRECNAME(name,r)
declaration of __atan2f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __atan2f64x	__MATHDECL(type,function,suffix,args)
declaration of atan2f64x	__MATHCALL(function,suffix,args)
declaration of atan2f64x	__MATHDECL(type,function,suffix,args)
declaration of atan2f64x	__MATH_PRECNAME(name,r)
declaration of atan2f64x	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf64x	__MATHCALL(function,suffix,args)
declaration of __atanf64x	__MATH_PRECNAME(name,r)
declaration of __atanf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __atanf64x	__MATHDECL(type,function,suffix,args)
declaration of atanf64x	__MATHCALL(function,suffix,args)
declaration of atanf64x	__MATHDECL(type,function,suffix,args)
declaration of atanf64x	__MATH_PRECNAME(name,r)
declaration of atanf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf64x	__MATHCALL(function,suffix,args)
declaration of __asinf64x	__MATH_PRECNAME(name,r)
declaration of __asinf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __asinf64x	__MATHDECL(type,function,suffix,args)
declaration of asinf64x	__MATHCALL(function,suffix,args)
declaration of asinf64x	__MATHDECL(type,function,suffix,args)
declaration of asinf64x	__MATH_PRECNAME(name,r)
declaration of asinf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf64x	__MATHCALL(function,suffix,args)
declaration of __acosf64x	__MATH_PRECNAME(name,r)
declaration of __acosf64x	__MATHDECL_1(type,function,suffix,args)
declaration of __acosf64x	__MATHDECL(type,function,suffix,args)
declaration of acosf64x	__MATHCALL(function,suffix,args)
declaration of acosf64x	__MATHDECL(type,function,suffix,args)
declaration of acosf64x	__MATH_PRECNAME(name,r)
declaration of acosf64x	__MATHDECL_1(type,function,suffix,args)
declaration of fsub	__MATHCALL_NARROW(func,redir,nargs)
declaration of fsub	__MATHCALL_NAME(name)
declaration of fmul	__MATHCALL_NARROW(func,redir,nargs)
declaration of fmul	__MATHCALL_NAME(name)
declaration of fdiv	__MATHCALL_NARROW(func,redir,nargs)
declaration of fdiv	__MATHCALL_NAME(name)
declaration of fadd	__MATHCALL_NARROW(func,redir,nargs)
declaration of fadd	__MATHCALL_NAME(name)
declaration of fsubl	__MATHCALL_NARROW(func,redir,nargs)
declaration of fsubl	__MATHCALL_NAME(name)
declaration of fmull	__MATHCALL_NARROW(func,redir,nargs)
declaration of fmull	__MATHCALL_NAME(name)
declaration of fdivl	__MATHCALL_NARROW(func,redir,nargs)
declaration of fdivl	__MATHCALL_NAME(name)
declaration of faddl	__MATHCALL_NARROW(func,redir,nargs)
declaration of faddl	__MATHCALL_NAME(name)
declaration of dsubl	__MATHCALL_NARROW(func,redir,nargs)
declaration of dsubl	__MATHCALL_NAME(name)
declaration of dmull	__MATHCALL_NARROW(func,redir,nargs)
declaration of dmull	__MATHCALL_NAME(name)
declaration of ddivl	__MATHCALL_NARROW(func,redir,nargs)
declaration of ddivl	__MATHCALL_NAME(name)
declaration of daddl	__MATHCALL_NARROW(func,redir,nargs)
declaration of daddl	__MATHCALL_NAME(name)
declaration of f32subf32x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32subf32x	__MATHCALL_NAME(name)
declaration of f32mulf32x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32mulf32x	__MATHCALL_NAME(name)
declaration of f32divf32x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32divf32x	__MATHCALL_NAME(name)
declaration of f32addf32x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32addf32x	__MATHCALL_NAME(name)
declaration of f32subf64	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32subf64	__MATHCALL_NAME(name)
declaration of f32mulf64	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32mulf64	__MATHCALL_NAME(name)
declaration of f32divf64	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32divf64	__MATHCALL_NAME(name)
declaration of f32addf64	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32addf64	__MATHCALL_NAME(name)
declaration of f32subf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32subf64x	__MATHCALL_NAME(name)
declaration of f32mulf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32mulf64x	__MATHCALL_NAME(name)
declaration of f32divf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32divf64x	__MATHCALL_NAME(name)
declaration of f32addf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32addf64x	__MATHCALL_NAME(name)
declaration of f32subf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32subf128	__MATHCALL_NAME(name)
declaration of f32mulf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32mulf128	__MATHCALL_NAME(name)
declaration of f32divf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32divf128	__MATHCALL_NAME(name)
declaration of f32addf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32addf128	__MATHCALL_NAME(name)
declaration of f32xsubf64	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xsubf64	__MATHCALL_NAME(name)
declaration of f32xmulf64	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xmulf64	__MATHCALL_NAME(name)
declaration of f32xdivf64	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xdivf64	__MATHCALL_NAME(name)
declaration of f32xaddf64	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xaddf64	__MATHCALL_NAME(name)
declaration of f32xsubf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xsubf64x	__MATHCALL_NAME(name)
declaration of f32xmulf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xmulf64x	__MATHCALL_NAME(name)
declaration of f32xdivf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xdivf64x	__MATHCALL_NAME(name)
declaration of f32xaddf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xaddf64x	__MATHCALL_NAME(name)
declaration of f32xsubf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xsubf128	__MATHCALL_NAME(name)
declaration of f32xmulf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xmulf128	__MATHCALL_NAME(name)
declaration of f32xdivf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xdivf128	__MATHCALL_NAME(name)
declaration of f32xaddf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f32xaddf128	__MATHCALL_NAME(name)
declaration of f64subf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64subf64x	__MATHCALL_NAME(name)
declaration of f64mulf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64mulf64x	__MATHCALL_NAME(name)
declaration of f64divf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64divf64x	__MATHCALL_NAME(name)
declaration of f64addf64x	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64addf64x	__MATHCALL_NAME(name)
declaration of f64subf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64subf128	__MATHCALL_NAME(name)
declaration of f64mulf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64mulf128	__MATHCALL_NAME(name)
declaration of f64divf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64divf128	__MATHCALL_NAME(name)
declaration of f64addf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64addf128	__MATHCALL_NAME(name)
declaration of f64xsubf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64xsubf128	__MATHCALL_NAME(name)
declaration of f64xmulf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64xmulf128	__MATHCALL_NAME(name)
declaration of f64xdivf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64xdivf128	__MATHCALL_NAME(name)
declaration of f64xaddf128	__MATHCALL_NARROW(func,redir,nargs)
declaration of f64xaddf128	__MATHCALL_NAME(name)
__val	__iscanonicalf128(x)
(...)	__iscanonicalf128(x)
(_Float128)...	__iscanonicalf128(x)
(void)...	__iscanonicalf128(x)
1	__iscanonicalf128(x)
... , ...	__iscanonicalf128(x)
(...)	__iscanonicalf128(x)
__val	__iscanonical(x)
(...)	__iscanonical(x)
(double)...	__iscanonical(x)
(void)...	__iscanonical(x)
1	__iscanonical(x)
... , ...	__iscanonical(x)
(...)	__iscanonical(x)
__val	__iscanonicalf(x)
(...)	__iscanonicalf(x)
(float)...	__iscanonicalf(x)
(void)...	__iscanonicalf(x)
1	__iscanonicalf(x)
... , ...	__iscanonicalf(x)
(...)	__iscanonicalf(x)
0	FP_NAN
1	FP_INFINITE
2	FP_ZERO
3	FP_SUBNORMAL
4	FP_NORMAL
0	FP_INT_UPWARD
1	FP_INT_DOWNWARD
2	FP_INT_TOWARDZERO
3	FP_INT_TONEARESTFROMZERO
4	FP_INT_TONEAREST
0	FP_NAN
1	FP_INFINITE
4	FP_NORMAL
3	FP_SUBNORMAL
2	FP_ZERO
0	FP_NAN
1	FP_INFINITE
4	FP_NORMAL
3	FP_SUBNORMAL
2	FP_ZERO
0	FP_NAN
1	FP_INFINITE
4	FP_NORMAL
3	FP_SUBNORMAL
2	FP_ZERO
call to c_str	BUILTIN_ERR_MIN_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_MIN_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected at least %d args, got %d
"	BUILTIN_ERR_MIN_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
1	LC_NUMERIC
1	__LC_NUMERIC
1	LC_NUMERIC
1	__LC_NUMERIC
1	LC_NUMERIC
1	__LC_NUMERIC
call to __fish_assert	DIE(msg)
Error has no position	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_math.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
135	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unknown function	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Missing closing parenthesis	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Missing opening parenthesis	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Too few arguments	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Too many arguments	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Missing operator	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected token	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Logical operations are not supported, use `test` instead	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Expression is bogus	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is not a valid scale value
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_math.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
78	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
1	required_argument
0	no_argument
1024	__FD_SETSIZE
8	__NFDBITS
sizeof(__fd_mask)	__NFDBITS
(int)...	__NFDBITS
... * ...	__NFDBITS
(...)	__NFDBITS
4	__SIZEOF_PTHREAD_BARRIERATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIERATTR_T
32	__SIZEOF_PTHREAD_BARRIER_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIER_T
8	__SIZEOF_PTHREAD_RWLOCKATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCKATTR_T
56	__SIZEOF_PTHREAD_RWLOCK_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCK_T
56	__SIZEOF_PTHREAD_ATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_ATTR_T
4	__SIZEOF_PTHREAD_CONDATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_CONDATTR_T
4	__SIZEOF_PTHREAD_MUTEXATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEXATTR_T
48	__SIZEOF_PTHREAD_COND_T
(unsigned long)...	__SIZEOF_PTHREAD_COND_T
40	__SIZEOF_PTHREAD_MUTEX_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEX_T
1	STDOUT_FILENO
127	SCHAR_MAX
127	UCHAR_MAX
2	UCHAR_MAX
... * ...	UCHAR_MAX
1	UCHAR_MAX
... + ...	UCHAR_MAX
(...)	UCHAR_MAX
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
call to c_str	_(wstr)
call to wgettext	_(wstr)
missing hexadecimal number in escape	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
call to c_str	_(wstr)
call to wgettext	_(wstr)
Missing hexadecimal number in Unicode escape	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unicode character out of range: \%c%0*x	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
127	UCHAR_MAX
127	SCHAR_MAX
2	UCHAR_MAX
... * ...	UCHAR_MAX
1	UCHAR_MAX
... + ...	UCHAR_MAX
(...)	UCHAR_MAX
2147483647	INT_MIN
2147483647	INT_MAX
- ...	INT_MIN
1	INT_MIN
... - ...	INT_MIN
(...)	INT_MIN
(long)...	INT_MIN
2147483647	INT_MAX
(long)...	INT_MAX
call to c_str	_(wstr)
call to wgettext	_(wstr)
invalid field width: %ls	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
2147483647	INT_MAX
(long)...	INT_MAX
call to c_str	_(wstr)
call to wgettext	_(wstr)
invalid precision: %ls	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%.*ls: invalid conversion specification	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected opt	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_printf.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
572	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
Number out of range	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: expected a numeric value	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: value not completely converted	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_pwd.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
45	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	BUILTIN_ERR_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_ARG_COUNT1
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
0	no_argument
0	no_argument
0	no_argument
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to wgettext	_(wstr)
"%ls: Too many arguments
"	BUILTIN_ERR_TOO_MANY_ARGUMENTS
array to pointer conversion	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	_(wstr)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	STDOUT_FILENO
1	SEEK_CUR
1	TOK_ACCEPT_UNFINISHED
(tok_flags_t)...	TOK_ACCEPT_UNFINISHED
call to size	assert(expr)
splits	assert(expr)
(const vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>)...	assert(expr)
call to operator()	assert(expr)
vars_left	assert(expr)
(const lambda [] type at line 149574, col. 22)...	assert(expr)
static_cast<size_t>...	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
splits.size() <= static_cast<size_t>(vars_left())	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_read.cpp	assert(expr)
array to pointer conversion	assert(expr)
620	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int builtin_read(parser_t &, io_streams_t &, wchar_t **)	assert(expr)
int builtin_read(parser_t &, io_streams_t &, wchar_t **)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Options %ls and %ls cannot be used together
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Options %ls and %ls cannot be used together
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Options %ls and %ls cannot be used together
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
"set_color green; echo -n read; set_color normal; echo -n ""> """	DEFAULT_READ_PROMPT
array to pointer conversion	DEFAULT_READ_PROMPT
call to c_str	BUILTIN_ERR_EXPUNEXP
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_EXPUNEXP
call to wgettext	_(wstr)
"%ls: Variable can't be both exported and unexported
"	BUILTIN_ERR_EXPUNEXP
array to pointer conversion	BUILTIN_ERR_EXPUNEXP
(reference dereference)	BUILTIN_ERR_EXPUNEXP
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_GLOCAL
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_GLOCAL
call to wgettext	_(wstr)
"%ls: Variable scope can only be one of universal, global and local
"	BUILTIN_ERR_GLOCAL
array to pointer conversion	BUILTIN_ERR_GLOCAL
(reference dereference)	BUILTIN_ERR_GLOCAL
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_MIN_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_MIN_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected at least %d args, got %d
"	BUILTIN_ERR_MIN_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_ARG_COUNT1
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_MAX_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_MAX_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected at most %d args, got %d
"	BUILTIN_ERR_MAX_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_MAX_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_MAX_ARG_COUNT1
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_VARNAME
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_VARNAME
call to wgettext	_(wstr)
"%ls: Variable name '%ls' is not valid. See `help identifiers`.
"	BUILTIN_ERR_VARNAME
array to pointer conversion	BUILTIN_ERR_VARNAME
(reference dereference)	BUILTIN_ERR_VARNAME
(reference dereference)	_(wstr)
call to __ctype_get_mb_cur_max	MB_CUR_MAX
(...)	MB_CUR_MAX
128	READ_CHUNK_SIZE
128	READ_CHUNK_SIZE
(size_t)...	READ_CHUNK_SIZE
bytes_consumed	assert(expr)
bytes_read	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
bytes_consumed <= bytes_read	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_read.cpp	assert(expr)
array to pointer conversion	assert(expr)
270	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int read_in_chunks(int, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool)	assert(expr)
int read_in_chunks(int, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	SEEK_CUR
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: usage of -i for --silent is deprecated. Please use -s or --silent instead.
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Argument '%ls' is out of range
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_read.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
188	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
1	required_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
0	no_argument
1	required_argument
1	required_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
9223372036854775807	LONG_MAX
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
basic_string::_M_construct null not valid	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to c_str	BUILTIN_ERR_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_ARG_COUNT1
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"builtin %ls: Invalid path: %ls
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to wgettext	_(wstr)
"%ls: Too many arguments
"	BUILTIN_ERR_TOO_MANY_ARGUMENTS
array to pointer conversion	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Not inside of function
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
streams	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_return.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
50	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
1	__try
0	__catch(X)
Unknown literal	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
call to expression	_GLIBCXX_FORWARD(_Tp,__val)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
... + ...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	STDOUT_FILENO
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
call to c_str	BUILTIN_ERR_MIN_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_MIN_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected at least %d args, got %d
"	BUILTIN_ERR_MIN_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_VARNAME
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_VARNAME
call to wgettext	_(wstr)
"%ls: Variable name '%ls' is not valid. See `help identifiers`.
"	BUILTIN_ERR_VARNAME
array to pointer conversion	BUILTIN_ERR_VARNAME
(reference dereference)	BUILTIN_ERR_VARNAME
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to c_str	BUILTIN_SET_MISMATCHED_ARGS
call to c_str	_(wstr)
call to wgettext	BUILTIN_SET_MISMATCHED_ARGS
call to wgettext	_(wstr)
"%ls: You provided %d indexes but %d values
"	BUILTIN_SET_MISMATCHED_ARGS
array to pointer conversion	BUILTIN_SET_MISMATCHED_ARGS
(reference dereference)	BUILTIN_SET_MISMATCHED_ARGS
(reference dereference)	_(wstr)
call to c_str	BUILTIN_SET_ARRAY_BOUNDS_ERR
call to c_str	_(wstr)
call to wgettext	BUILTIN_SET_ARRAY_BOUNDS_ERR
call to wgettext	_(wstr)
"%ls: Array index out of bounds
"	BUILTIN_SET_ARRAY_BOUNDS_ERR
array to pointer conversion	BUILTIN_SET_ARRAY_BOUNDS_ERR
(reference dereference)	BUILTIN_SET_ARRAY_BOUNDS_ERR
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
cmd	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
streams	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_VARNAME
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_VARNAME
call to wgettext	_(wstr)
"%ls: Variable name '%ls' is not valid. See `help identifiers`.
"	BUILTIN_ERR_VARNAME
array to pointer conversion	BUILTIN_ERR_VARNAME
(reference dereference)	BUILTIN_ERR_VARNAME
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
opts	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"$%ls: invalid var name
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: `set --show` does not allow slices with the var names
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
invalid scope	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_set.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
572	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	_(wstr)
call to wgettext	_(wstr)
exported	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
unexported	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
 a path variable	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"$%ls: set in %ls scope, %ls,%ls with %d elements
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"$%ls[%d]: |%ls|
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
dest	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
dest	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_set.cpp	assert(expr)
array to pointer conversion	assert(expr)
527	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int builtin_set_query(const wchar_t *, set_cmd_opts_t &, int, wchar_t **, parser_t &, io_streams_t &)	assert(expr)
int builtin_set_query(const wchar_t *, set_cmd_opts_t &, int, wchar_t **, parser_t &, io_streams_t &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
cmd	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
argc	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
argv	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid index starting at '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Tried to change the read-only variable '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Tried to modify the special variable '%ls' with the wrong scope
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Tried to modify the special variable '%ls' to an invalid value
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: The variable '%ls' does not exist
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected vars.set() ret val	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_set.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
337	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
buff	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
call to __errno_location	errno
* ...	errno
(...)	errno
20	ENOTDIR
1	X_OK
call to c_str	BUILTIN_SET_PATH_ERROR
call to c_str	_(wstr)
call to wgettext	BUILTIN_SET_PATH_ERROR
call to wgettext	_(wstr)
"%ls: Warning: $%ls entry ""%ls"" is not valid (%s)
"	BUILTIN_SET_PATH_ERROR
array to pointer conversion	BUILTIN_SET_PATH_ERROR
(reference dereference)	BUILTIN_SET_PATH_ERROR
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to c_str	BUILTIN_SET_PATH_HINT
call to c_str	_(wstr)
call to wgettext	BUILTIN_SET_PATH_HINT
call to wgettext	_(wstr)
"%ls: Did you mean 'set %ls $%ls %ls'?
"	BUILTIN_SET_PATH_HINT
array to pointer conversion	BUILTIN_SET_PATH_HINT
(reference dereference)	BUILTIN_SET_PATH_HINT
(reference dereference)	_(wstr)
call to c_str	BUILTIN_SET_UVAR_ERR
call to c_str	_(wstr)
call to wgettext	BUILTIN_SET_UVAR_ERR
call to wgettext	_(wstr)
"%ls: Universal variable '%ls' is shadowed by the global variable of the same name.
"	BUILTIN_SET_UVAR_ERR
array to pointer conversion	BUILTIN_SET_UVAR_ERR
(reference dereference)	BUILTIN_SET_UVAR_ERR
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO
call to wgettext	_(wstr)
"%ls: Invalid combination of options
"	BUILTIN_ERR_COMBO
array to pointer conversion	BUILTIN_ERR_COMBO
(reference dereference)	BUILTIN_ERR_COMBO
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO
call to wgettext	_(wstr)
"%ls: Invalid combination of options
"	BUILTIN_ERR_COMBO
array to pointer conversion	BUILTIN_ERR_COMBO
(reference dereference)	BUILTIN_ERR_COMBO
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_GLOCAL
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_GLOCAL
call to wgettext	_(wstr)
"%ls: Variable scope can only be one of universal, global and local
"	BUILTIN_ERR_GLOCAL
array to pointer conversion	BUILTIN_ERR_GLOCAL
(reference dereference)	BUILTIN_ERR_GLOCAL
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_EXPUNEXP
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_EXPUNEXP
call to wgettext	_(wstr)
"%ls: Variable can't be both exported and unexported
"	BUILTIN_ERR_EXPUNEXP
array to pointer conversion	BUILTIN_ERR_EXPUNEXP
(reference dereference)	BUILTIN_ERR_EXPUNEXP
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_EXPUNEXP
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_EXPUNEXP
call to wgettext	_(wstr)
"%ls: Variable can't be both exported and unexported
"	BUILTIN_ERR_EXPUNEXP
array to pointer conversion	BUILTIN_ERR_EXPUNEXP
(reference dereference)	BUILTIN_ERR_EXPUNEXP
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO
call to wgettext	_(wstr)
"%ls: Invalid combination of options
"	BUILTIN_ERR_COMBO
array to pointer conversion	BUILTIN_ERR_COMBO
(reference dereference)	BUILTIN_ERR_COMBO
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO
call to wgettext	_(wstr)
"%ls: Invalid combination of options
"	BUILTIN_ERR_COMBO
array to pointer conversion	BUILTIN_ERR_COMBO
(reference dereference)	BUILTIN_ERR_COMBO
(reference dereference)	_(wstr)
call to c_str	BUILTIN_SET_ERASE_NO_VAR
call to c_str	_(wstr)
call to wgettext	BUILTIN_SET_ERASE_NO_VAR
call to wgettext	_(wstr)
"%ls: Erase needs a variable name
"	BUILTIN_SET_ERASE_NO_VAR
array to pointer conversion	BUILTIN_SET_ERASE_NO_VAR
(reference dereference)	BUILTIN_SET_ERASE_NO_VAR
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_set.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
165	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__x	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
declaration of unctrl_sp	NCURSES_SP_NAME(name)
declaration of NCURSES_OUTC_sp	NCURSES_SP_NAME(name)
declaration of NCURSES_OUTC_sp	NCURSES_SP_OUTC
5	CCHARW_MAX
(unsigned long)...	CCHARW_MAX
declaration of mcprint_sp	NCURSES_SP_NAME(name)
declaration of has_key_sp	NCURSES_SP_NAME(name)
declaration of mouseinterval_sp	NCURSES_SP_NAME(name)
declaration of mousemask_sp	NCURSES_SP_NAME(name)
declaration of ungetmouse_sp	NCURSES_SP_NAME(name)
declaration of getmouse_sp	NCURSES_SP_NAME(name)
declaration of has_mouse_sp	NCURSES_SP_NAME(name)
declaration of vid_puts_sp	NCURSES_SP_NAME(name)
declaration of vid_attr_sp	NCURSES_SP_NAME(name)
declaration of wunctrl_sp	NCURSES_SP_NAME(name)
declaration of unget_wch_sp	NCURSES_SP_NAME(name)
declaration of term_attrs_sp	NCURSES_SP_NAME(name)
declaration of use_legacy_coding_sp	NCURSES_SP_NAME(name)
declaration of use_default_colors_sp	NCURSES_SP_NAME(name)
declaration of set_tabsize_sp	NCURSES_SP_NAME(name)
declaration of set_escdelay_sp	NCURSES_SP_NAME(name)
declaration of resizeterm_sp	NCURSES_SP_NAME(name)
declaration of resize_term_sp	NCURSES_SP_NAME(name)
declaration of reset_color_pairs_sp	NCURSES_SP_NAME(name)
declaration of nofilter_sp	NCURSES_SP_NAME(name)
declaration of keyok_sp	NCURSES_SP_NAME(name)
declaration of key_defined_sp	NCURSES_SP_NAME(name)
declaration of is_term_resized_sp	NCURSES_SP_NAME(name)
declaration of init_extended_pair_sp	NCURSES_SP_NAME(name)
declaration of init_extended_color_sp	NCURSES_SP_NAME(name)
declaration of free_pair_sp	NCURSES_SP_NAME(name)
declaration of find_pair_sp	NCURSES_SP_NAME(name)
declaration of get_escdelay_sp	NCURSES_SP_NAME(name)
declaration of extended_slk_color_sp	NCURSES_SP_NAME(name)
declaration of extended_pair_content_sp	NCURSES_SP_NAME(name)
declaration of extended_color_content_sp	NCURSES_SP_NAME(name)
declaration of define_key_sp	NCURSES_SP_NAME(name)
declaration of assume_default_colors_sp	NCURSES_SP_NAME(name)
declaration of alloc_pair_sp	NCURSES_SP_NAME(name)
declaration of keybound_sp	NCURSES_SP_NAME(name)
declaration of vidputs_sp	NCURSES_SP_NAME(name)
declaration of vidattr_sp	NCURSES_SP_NAME(name)
declaration of use_tioctl_sp	NCURSES_SP_NAME(name)
declaration of use_env_sp	NCURSES_SP_NAME(name)
declaration of ungetch_sp	NCURSES_SP_NAME(name)
declaration of typeahead_sp	NCURSES_SP_NAME(name)
declaration of termname_sp	NCURSES_SP_NAME(name)
declaration of termattrs_sp	NCURSES_SP_NAME(name)
declaration of start_color_sp	NCURSES_SP_NAME(name)
declaration of slk_touch_sp	NCURSES_SP_NAME(name)
declaration of slk_set_sp	NCURSES_SP_NAME(name)
declaration of slk_restore_sp	NCURSES_SP_NAME(name)
declaration of slk_refresh_sp	NCURSES_SP_NAME(name)
declaration of slk_noutrefresh_sp	NCURSES_SP_NAME(name)
declaration of slk_label_sp	NCURSES_SP_NAME(name)
declaration of slk_init_sp	NCURSES_SP_NAME(name)
declaration of slk_color_sp	NCURSES_SP_NAME(name)
declaration of slk_clear_sp	NCURSES_SP_NAME(name)
declaration of slk_attr_set_sp	NCURSES_SP_NAME(name)
declaration of slk_attr_sp	NCURSES_SP_NAME(name)
declaration of slk_attrset_sp	NCURSES_SP_NAME(name)
declaration of slk_attron_sp	NCURSES_SP_NAME(name)
declaration of slk_attroff_sp	NCURSES_SP_NAME(name)
declaration of scr_set_sp	NCURSES_SP_NAME(name)
declaration of scr_restore_sp	NCURSES_SP_NAME(name)
declaration of scr_init_sp	NCURSES_SP_NAME(name)
declaration of savetty_sp	NCURSES_SP_NAME(name)
declaration of ripoffline_sp	NCURSES_SP_NAME(name)
declaration of resetty_sp	NCURSES_SP_NAME(name)
declaration of reset_shell_mode_sp	NCURSES_SP_NAME(name)
declaration of reset_prog_mode_sp	NCURSES_SP_NAME(name)
declaration of raw_sp	NCURSES_SP_NAME(name)
declaration of qiflush_sp	NCURSES_SP_NAME(name)
declaration of pair_content_sp	NCURSES_SP_NAME(name)
declaration of noraw_sp	NCURSES_SP_NAME(name)
declaration of noqiflush_sp	NCURSES_SP_NAME(name)
declaration of nonl_sp	NCURSES_SP_NAME(name)
declaration of noecho_sp	NCURSES_SP_NAME(name)
declaration of nocbreak_sp	NCURSES_SP_NAME(name)
declaration of nl_sp	NCURSES_SP_NAME(name)
declaration of newwin_sp	NCURSES_SP_NAME(name)
declaration of newterm_sp	NCURSES_SP_NAME(name)
declaration of newpad_sp	NCURSES_SP_NAME(name)
declaration of napms_sp	NCURSES_SP_NAME(name)
declaration of mvcur_sp	NCURSES_SP_NAME(name)
declaration of longname_sp	NCURSES_SP_NAME(name)
declaration of killchar_sp	NCURSES_SP_NAME(name)
declaration of keyname_sp	NCURSES_SP_NAME(name)
declaration of isendwin_sp	NCURSES_SP_NAME(name)
declaration of intrflush_sp	NCURSES_SP_NAME(name)
declaration of init_pair_sp	NCURSES_SP_NAME(name)
declaration of init_color_sp	NCURSES_SP_NAME(name)
declaration of has_il_sp	NCURSES_SP_NAME(name)
declaration of has_ic_sp	NCURSES_SP_NAME(name)
declaration of has_colors_sp	NCURSES_SP_NAME(name)
declaration of halfdelay_sp	NCURSES_SP_NAME(name)
declaration of getwin_sp	NCURSES_SP_NAME(name)
declaration of flushinp_sp	NCURSES_SP_NAME(name)
declaration of flash_sp	NCURSES_SP_NAME(name)
declaration of filter_sp	NCURSES_SP_NAME(name)
declaration of erasechar_sp	NCURSES_SP_NAME(name)
declaration of endwin_sp	NCURSES_SP_NAME(name)
declaration of echo_sp	NCURSES_SP_NAME(name)
declaration of doupdate_sp	NCURSES_SP_NAME(name)
declaration of delay_output_sp	NCURSES_SP_NAME(name)
declaration of def_shell_mode_sp	NCURSES_SP_NAME(name)
declaration of def_prog_mode_sp	NCURSES_SP_NAME(name)
declaration of color_content_sp	NCURSES_SP_NAME(name)
declaration of curs_set_sp	NCURSES_SP_NAME(name)
declaration of cbreak_sp	NCURSES_SP_NAME(name)
declaration of can_change_color_sp	NCURSES_SP_NAME(name)
declaration of beep_sp	NCURSES_SP_NAME(name)
declaration of baudrate_sp	NCURSES_SP_NAME(name)
32	NCCS
(unsigned long)...	NCCS
declaration of restartterm_sp	NCURSES_SP_NAME(name)
declaration of del_curterm_sp	NCURSES_SP_NAME(name)
declaration of set_curterm_sp	NCURSES_SP_NAME(name)
declaration of tputs_sp	NCURSES_SP_NAME(name)
declaration of tgetnum_sp	NCURSES_SP_NAME(name)
declaration of tgetflag_sp	NCURSES_SP_NAME(name)
declaration of tgetent_sp	NCURSES_SP_NAME(name)
declaration of tgoto_sp	NCURSES_SP_NAME(name)
declaration of tgetstr_sp	NCURSES_SP_NAME(name)
declaration of tparm_sp	NCURSES_SP_NAME(name)
declaration of tigetnum_sp	NCURSES_SP_NAME(name)
declaration of tigetflag_sp	NCURSES_SP_NAME(name)
declaration of putp_sp	NCURSES_SP_NAME(name)
declaration of tigetstr_sp	NCURSES_SP_NAME(name)
bufferCount_	assert(expr)
0	assert(expr)
(unsigned int)...	assert(expr)
... > ...	assert(expr)
bufferCount_ underflow	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"bufferCount_ > 0 && ""bufferCount_ underflow"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/output.h	assert(expr)
array to pointer conversion	assert(expr)
95	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void outputter_t::endBuffering()	__ASSERT_FUNCTION
void outputter_t::endBuffering()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
bufferCount_	assert(expr)
0	assert(expr)
(unsigned int)...	assert(expr)
... > ...	assert(expr)
bufferCount_ overflow	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"bufferCount_ > 0 && ""bufferCount_ overflow"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/output.h	assert(expr)
array to pointer conversion	assert(expr)
90	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void outputter_t::beginBuffering()	__ASSERT_FUNCTION
void outputter_t::beginBuffering()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
curses_initialized	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
curses_initialized	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_set_color.cpp	assert(expr)
array to pointer conversion	assert(expr)
72	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int builtin_set_color(parser_t &, io_streams_t &, wchar_t **)	__ASSERT_FUNCTION
int builtin_set_color(parser_t &, io_streams_t &, wchar_t **)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	EXIT_FAILURE
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_set_color.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
147	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Unknown color '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to empty	assert(expr)
fgcolors	assert(expr)
(const vector<rgb_color_t, allocator<rgb_color_t>>)...	assert(expr)
call to is_none	assert(expr)
fg	assert(expr)
! ...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
fgcolors.empty() || !fg.is_none()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_set_color.cpp	assert(expr)
array to pointer conversion	assert(expr)
166	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Unknown color '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	exit_attribute_mode
(...)	CUR
Strings	exit_attribute_mode
39	exit_attribute_mode
access to array	exit_attribute_mode
(bool)...	exit_attribute_mode
cur_term	enter_bold_mode
cur_term	CUR
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	enter_bold_mode
(...)	CUR
Strings	enter_bold_mode
27	enter_bold_mode
access to array	enter_bold_mode
(bool)...	enter_bold_mode
call to writembs_check	writembs_nofail(outp,mbs)
outp	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
call to tparm	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_bold_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_bold_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_bold_mode
27	writembs_nofail(outp,mbs)
27	enter_bold_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_bold_mode
const_cast<char *>...	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
tparm(const_cast<char *>(enter_bold_mode))	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/builtin_set_color.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
182	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_underline_mode
cur_term	CUR
(...)	enter_underline_mode
(...)	CUR
(TERMTYPE *)...	enter_underline_mode
(TERMTYPE *)...	CUR
(...)	enter_underline_mode
(...)	CUR
Strings	enter_underline_mode
36	enter_underline_mode
access to array	enter_underline_mode
(bool)...	enter_underline_mode
call to writembs_check	writembs_nofail(outp,mbs)
outp	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_underline_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_underline_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_underline_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_underline_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_underline_mode
36	writembs_nofail(outp,mbs)
36	enter_underline_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_underline_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_underline_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/builtin_set_color.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
186	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_italics_mode
cur_term	CUR
(...)	enter_italics_mode
(...)	CUR
(TERMTYPE *)...	enter_italics_mode
(TERMTYPE *)...	CUR
(...)	enter_italics_mode
(...)	CUR
Strings	enter_italics_mode
311	enter_italics_mode
access to array	enter_italics_mode
(bool)...	enter_italics_mode
call to writembs_check	writembs_nofail(outp,mbs)
outp	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_italics_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_italics_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_italics_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_italics_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_italics_mode
311	writembs_nofail(outp,mbs)
311	enter_italics_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_italics_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_italics_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/builtin_set_color.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
190	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_dim_mode
cur_term	CUR
(...)	enter_dim_mode
(...)	CUR
(TERMTYPE *)...	enter_dim_mode
(TERMTYPE *)...	CUR
(...)	enter_dim_mode
(...)	CUR
Strings	enter_dim_mode
30	enter_dim_mode
access to array	enter_dim_mode
(bool)...	enter_dim_mode
call to writembs_check	writembs_nofail(outp,mbs)
outp	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_dim_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_dim_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_dim_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_dim_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_dim_mode
30	writembs_nofail(outp,mbs)
30	enter_dim_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_dim_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_dim_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/builtin_set_color.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
194	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_reverse_mode
cur_term	CUR
(...)	enter_reverse_mode
(...)	CUR
(TERMTYPE *)...	enter_reverse_mode
(TERMTYPE *)...	CUR
(...)	enter_reverse_mode
(...)	CUR
Strings	enter_reverse_mode
34	enter_reverse_mode
access to array	enter_reverse_mode
(bool)...	enter_reverse_mode
call to writembs_check	writembs_nofail(outp,mbs)
outp	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_reverse_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_reverse_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_reverse_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_reverse_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_reverse_mode
34	writembs_nofail(outp,mbs)
34	enter_reverse_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_reverse_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_reverse_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/builtin_set_color.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
198	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_standout_mode
cur_term	CUR
(...)	enter_standout_mode
(...)	CUR
(TERMTYPE *)...	enter_standout_mode
(TERMTYPE *)...	CUR
(...)	enter_standout_mode
(...)	CUR
Strings	enter_standout_mode
35	enter_standout_mode
access to array	enter_standout_mode
(bool)...	enter_standout_mode
call to writembs_check	writembs_nofail(outp,mbs)
outp	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_standout_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_standout_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_standout_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_standout_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_standout_mode
35	writembs_nofail(outp,mbs)
35	enter_standout_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_standout_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_standout_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/builtin_set_color.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
200	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
call to writembs_check	writembs_nofail(outp,mbs)
outp	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
call to tparm	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	exit_attribute_mode
39	writembs_nofail(outp,mbs)
39	exit_attribute_mode
access to array	writembs_nofail(outp,mbs)
access to array	exit_attribute_mode
const_cast<char *>...	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
tparm(const_cast<char *>(exit_attribute_mode))	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/builtin_set_color.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
204	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
call to writembs_check	writembs_nofail(outp,mbs)
outp	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
call to tparm	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	exit_attribute_mode
39	writembs_nofail(outp,mbs)
39	exit_attribute_mode
access to array	writembs_nofail(outp,mbs)
access to array	exit_attribute_mode
const_cast<char *>...	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
tparm(const_cast<char *>(exit_attribute_mode))	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/builtin_set_color.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
209	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
1	STDOUT_FILENO
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
1	STDOUT_FILENO
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
builtin_source	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	O_RDONLY
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Error encountered while sourcing file '%ls':
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Error encountered while sourcing file '%ls':
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
buf	S_ISREG(mode)
st_mode	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISREG(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISREG(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
32768	S_ISREG(mode)
32768	__S_IFREG
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISREG(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is not a file
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
fd	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
Should have a valid fd	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"fd >= 0 && ""Should have a valid fd"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_source.cpp	assert(expr)
array to pointer conversion	assert(expr)
82	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int builtin_source(parser_t &, io_streams_t &, wchar_t **)	__ASSERT_FUNCTION
int builtin_source(parser_t &, io_streams_t &, wchar_t **)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Error while reading file '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
f	assert(expr)
(int)...	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
f	assert(expr)
(int)...	assert(expr)
flag_count	assert(expr)
(int)...	assert(expr)
... < ...	assert(expr)
... && ...	assert(expr)
Invalid flag	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"f >= 0 && f < flag_count && ""Invalid flag"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/future_feature_flags.h	assert(expr)
array to pointer conversion	assert(expr)
36	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void features_t::set(features_t::flag_t, bool)	__ASSERT_FUNCTION
void features_t::set(features_t::flag_t, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
f	assert(expr)
(int)...	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
f	assert(expr)
(int)...	assert(expr)
flag_count	assert(expr)
(int)...	assert(expr)
... < ...	assert(expr)
... && ...	assert(expr)
Invalid flag	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"f >= 0 && f < flag_count && ""Invalid flag"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/future_feature_flags.h	assert(expr)
array to pointer conversion	assert(expr)
30	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool features_t::test(features_t::flag_t) const	__ASSERT_FUNCTION
bool features_t::test(features_t::flag_t) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
sizeof(<expr>)	status_enum_map_len
status_enum_map	status_enum_map_len
sizeof(<expr>)	status_enum_map_len
status_enum_map	status_enum_map_len
array to pointer conversion	status_enum_map_len
* ...	status_enum_map_len
... / ...	status_enum_map_len
(...)	status_enum_map_len
(int)...	status_enum_map_len
call to c_str	BUILTIN_ERR_INVALID_SUBCMD
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_INVALID_SUBCMD
call to wgettext	_(wstr)
"%ls: Subcommand '%ls' is not valid
"	BUILTIN_ERR_INVALID_SUBCMD
array to pointer conversion	BUILTIN_ERR_INVALID_SUBCMD
(reference dereference)	BUILTIN_ERR_INVALID_SUBCMD
(reference dereference)	_(wstr)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"This is a login shell
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"This is not a login shell
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Job control: %ls
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Only on interactive jobs	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Never	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Always	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
call to operator bool	assert(expr)
opts	assert(expr)
new_job_control_mode	assert(expr)
(const maybe_t<job_control_t>)...	assert(expr)
Should have a new mode	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"opts.new_job_control_mode && ""Should have a new mode"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_status.cpp	assert(expr)
array to pointer conversion	assert(expr)
344	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int builtin_status(parser_t &, io_streams_t &, wchar_t **)	assert(expr)
int builtin_status(parser_t &, io_streams_t &, wchar_t **)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Standard input	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Not a function	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to empty	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to enum_to_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
opts	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
status_enum_map	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
definition of subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
declaration	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
if (...) ... 	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(bool)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
! ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
default	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to append_format	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
streams	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
err	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to c_str	BUILTIN_ERR_ARG_COUNT2
call to c_str	_(wstr)
call to wgettext	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to wgettext	BUILTIN_ERR_ARG_COUNT2
call to wgettext	_(wstr)
"%ls %ls: Expected %d args, got %d
"	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
"%ls %ls: Expected %d args, got %d
"	BUILTIN_ERR_ARG_COUNT2
array to pointer conversion	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
array to pointer conversion	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(reference dereference)	BUILTIN_ERR_ARG_COUNT2
(reference dereference)	_(wstr)
cmd	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
subcmd_str	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
0	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to size	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
args	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
ExprStmt	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
retval	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
STATUS_INVALID_ARGS	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
(int)...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
... = ...	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
break;	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
{ ... }	CHECK_FOR_UNEXPECTED_STATUS_ARGS(status_cmd)
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid level value '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_status.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
267	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	_(wstr)
call to wgettext	_(wstr)
you cannot do both '%ls' and '%ls' in the same invocation	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = job_control_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = job_control_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = job_control_t]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = job_control_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
1	STDOUT_FILENO
declaration of pcre2_callout_enumerate_block_32	PCRE2_JOIN(a,b)
declaration of pcre2_callout_enumerate_block_32	PCRE2_GLUE(a,b)
declaration of pcre2_callout_enumerate_block_32	PCRE2_SUFFIX(a)
declaration of pcre2_callout_enumerate_block_32	pcre2_callout_enumerate_block
declaration of pcre2_callout_enumerate_block_32	PCRE2_STRUCTURE_LIST
declaration of pcre2_callout_enumerate_block_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pcre2_callout_enumerate_block_32	PCRE2_STRUCTURE_LIST
definition of pcre2_callout_enumerate_block_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pcre2_callout_enumerate_block_32	PCRE2_JOIN(a,b)
definition of pcre2_callout_enumerate_block_32	PCRE2_GLUE(a,b)
definition of pcre2_callout_enumerate_block_32	PCRE2_SUFFIX(a)
definition of pcre2_callout_enumerate_block_32	pcre2_callout_enumerate_block
declaration of pcre2_callout_block_32	PCRE2_STRUCTURE_LIST
declaration of pcre2_callout_block_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_callout_block_32	PCRE2_JOIN(a,b)
declaration of pcre2_callout_block_32	PCRE2_GLUE(a,b)
declaration of pcre2_callout_block_32	PCRE2_SUFFIX(a)
declaration of pcre2_callout_block_32	pcre2_callout_block
definition of pcre2_callout_block_32	PCRE2_STRUCTURE_LIST
definition of pcre2_callout_block_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pcre2_callout_block_32	PCRE2_JOIN(a,b)
definition of pcre2_callout_block_32	PCRE2_GLUE(a,b)
definition of pcre2_callout_block_32	PCRE2_SUFFIX(a)
definition of pcre2_callout_block_32	pcre2_callout_block
declaration of pcre2_jit_callback_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_callback_32	PCRE2_JOIN(a,b)
declaration of pcre2_jit_callback_32	PCRE2_GLUE(a,b)
declaration of pcre2_jit_callback_32	PCRE2_SUFFIX(a)
declaration of pcre2_jit_callback_32	pcre2_jit_callback
declaration of pcre2_jit_callback_32	PCRE2_TYPES_LIST
declaration of pcre2_jit_stack_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_32	PCRE2_TYPES_LIST
declaration of pcre2_jit_stack_32	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_32	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_32	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_32	pcre2_jit_stack
declaration of pcre2_real_jit_stack_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_jit_stack_32	PCRE2_TYPES_LIST
declaration of pcre2_real_jit_stack_32	PCRE2_JOIN(a,b)
declaration of pcre2_real_jit_stack_32	PCRE2_GLUE(a,b)
declaration of pcre2_real_jit_stack_32	PCRE2_SUFFIX(a)
declaration of pcre2_real_jit_stack_32	pcre2_real_jit_stack
declaration of pcre2_convert_context_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_32	PCRE2_TYPES_LIST
declaration of pcre2_convert_context_32	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_32	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_32	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_32	pcre2_convert_context
declaration of pcre2_real_convert_context_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_convert_context_32	PCRE2_TYPES_LIST
declaration of pcre2_real_convert_context_32	PCRE2_JOIN(a,b)
declaration of pcre2_real_convert_context_32	PCRE2_GLUE(a,b)
declaration of pcre2_real_convert_context_32	PCRE2_SUFFIX(a)
declaration of pcre2_real_convert_context_32	pcre2_real_convert_context
declaration of pcre2_match_context_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_32	PCRE2_TYPES_LIST
declaration of pcre2_match_context_32	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_32	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_32	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_32	pcre2_match_context
declaration of pcre2_real_match_context_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_match_context_32	PCRE2_TYPES_LIST
declaration of pcre2_real_match_context_32	PCRE2_JOIN(a,b)
declaration of pcre2_real_match_context_32	PCRE2_GLUE(a,b)
declaration of pcre2_real_match_context_32	PCRE2_SUFFIX(a)
declaration of pcre2_real_match_context_32	pcre2_real_match_context
declaration of pcre2_compile_context_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_32	PCRE2_TYPES_LIST
declaration of pcre2_compile_context_32	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_32	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_32	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_32	pcre2_compile_context
declaration of pcre2_real_compile_context_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_compile_context_32	PCRE2_TYPES_LIST
declaration of pcre2_real_compile_context_32	PCRE2_JOIN(a,b)
declaration of pcre2_real_compile_context_32	PCRE2_GLUE(a,b)
declaration of pcre2_real_compile_context_32	PCRE2_SUFFIX(a)
declaration of pcre2_real_compile_context_32	pcre2_real_compile_context
declaration of pcre2_general_context_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_32	PCRE2_TYPES_LIST
declaration of pcre2_general_context_32	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_32	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_32	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_32	pcre2_general_context
declaration of pcre2_real_general_context_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_general_context_32	PCRE2_TYPES_LIST
declaration of pcre2_real_general_context_32	PCRE2_JOIN(a,b)
declaration of pcre2_real_general_context_32	PCRE2_GLUE(a,b)
declaration of pcre2_real_general_context_32	PCRE2_SUFFIX(a)
declaration of pcre2_real_general_context_32	pcre2_real_general_context
declaration of pcre2_callout_enumerate_block_16	PCRE2_JOIN(a,b)
declaration of pcre2_callout_enumerate_block_16	PCRE2_GLUE(a,b)
declaration of pcre2_callout_enumerate_block_16	PCRE2_SUFFIX(a)
declaration of pcre2_callout_enumerate_block_16	pcre2_callout_enumerate_block
declaration of pcre2_callout_enumerate_block_16	PCRE2_STRUCTURE_LIST
declaration of pcre2_callout_enumerate_block_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pcre2_callout_enumerate_block_16	PCRE2_STRUCTURE_LIST
definition of pcre2_callout_enumerate_block_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pcre2_callout_enumerate_block_16	PCRE2_JOIN(a,b)
definition of pcre2_callout_enumerate_block_16	PCRE2_GLUE(a,b)
definition of pcre2_callout_enumerate_block_16	PCRE2_SUFFIX(a)
definition of pcre2_callout_enumerate_block_16	pcre2_callout_enumerate_block
declaration of pcre2_callout_block_16	PCRE2_STRUCTURE_LIST
declaration of pcre2_callout_block_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_callout_block_16	PCRE2_JOIN(a,b)
declaration of pcre2_callout_block_16	PCRE2_GLUE(a,b)
declaration of pcre2_callout_block_16	PCRE2_SUFFIX(a)
declaration of pcre2_callout_block_16	pcre2_callout_block
definition of pcre2_callout_block_16	PCRE2_STRUCTURE_LIST
definition of pcre2_callout_block_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pcre2_callout_block_16	PCRE2_JOIN(a,b)
definition of pcre2_callout_block_16	PCRE2_GLUE(a,b)
definition of pcre2_callout_block_16	PCRE2_SUFFIX(a)
definition of pcre2_callout_block_16	pcre2_callout_block
declaration of pcre2_jit_callback_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_callback_16	PCRE2_JOIN(a,b)
declaration of pcre2_jit_callback_16	PCRE2_GLUE(a,b)
declaration of pcre2_jit_callback_16	PCRE2_SUFFIX(a)
declaration of pcre2_jit_callback_16	pcre2_jit_callback
declaration of pcre2_jit_callback_16	PCRE2_TYPES_LIST
declaration of pcre2_jit_stack_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_16	PCRE2_TYPES_LIST
declaration of pcre2_jit_stack_16	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_16	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_16	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_16	pcre2_jit_stack
declaration of pcre2_real_jit_stack_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_jit_stack_16	PCRE2_TYPES_LIST
declaration of pcre2_real_jit_stack_16	PCRE2_JOIN(a,b)
declaration of pcre2_real_jit_stack_16	PCRE2_GLUE(a,b)
declaration of pcre2_real_jit_stack_16	PCRE2_SUFFIX(a)
declaration of pcre2_real_jit_stack_16	pcre2_real_jit_stack
declaration of pcre2_match_data_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_16	PCRE2_TYPES_LIST
declaration of pcre2_match_data_16	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_16	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_16	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_16	pcre2_match_data
declaration of pcre2_real_match_data_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_match_data_16	PCRE2_TYPES_LIST
declaration of pcre2_real_match_data_16	PCRE2_JOIN(a,b)
declaration of pcre2_real_match_data_16	PCRE2_GLUE(a,b)
declaration of pcre2_real_match_data_16	PCRE2_SUFFIX(a)
declaration of pcre2_real_match_data_16	pcre2_real_match_data
declaration of pcre2_code_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_16	PCRE2_TYPES_LIST
declaration of pcre2_code_16	PCRE2_JOIN(a,b)
declaration of pcre2_code_16	PCRE2_GLUE(a,b)
declaration of pcre2_code_16	PCRE2_SUFFIX(a)
declaration of pcre2_code_16	pcre2_code
declaration of pcre2_real_code_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_code_16	PCRE2_TYPES_LIST
declaration of pcre2_real_code_16	PCRE2_JOIN(a,b)
declaration of pcre2_real_code_16	PCRE2_GLUE(a,b)
declaration of pcre2_real_code_16	PCRE2_SUFFIX(a)
declaration of pcre2_real_code_16	pcre2_real_code
declaration of pcre2_convert_context_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_16	PCRE2_TYPES_LIST
declaration of pcre2_convert_context_16	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_16	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_16	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_16	pcre2_convert_context
declaration of pcre2_real_convert_context_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_convert_context_16	PCRE2_TYPES_LIST
declaration of pcre2_real_convert_context_16	PCRE2_JOIN(a,b)
declaration of pcre2_real_convert_context_16	PCRE2_GLUE(a,b)
declaration of pcre2_real_convert_context_16	PCRE2_SUFFIX(a)
declaration of pcre2_real_convert_context_16	pcre2_real_convert_context
declaration of pcre2_match_context_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_16	PCRE2_TYPES_LIST
declaration of pcre2_match_context_16	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_16	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_16	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_16	pcre2_match_context
declaration of pcre2_real_match_context_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_match_context_16	PCRE2_TYPES_LIST
declaration of pcre2_real_match_context_16	PCRE2_JOIN(a,b)
declaration of pcre2_real_match_context_16	PCRE2_GLUE(a,b)
declaration of pcre2_real_match_context_16	PCRE2_SUFFIX(a)
declaration of pcre2_real_match_context_16	pcre2_real_match_context
declaration of pcre2_compile_context_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_16	PCRE2_TYPES_LIST
declaration of pcre2_compile_context_16	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_16	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_16	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_16	pcre2_compile_context
declaration of pcre2_real_compile_context_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_compile_context_16	PCRE2_TYPES_LIST
declaration of pcre2_real_compile_context_16	PCRE2_JOIN(a,b)
declaration of pcre2_real_compile_context_16	PCRE2_GLUE(a,b)
declaration of pcre2_real_compile_context_16	PCRE2_SUFFIX(a)
declaration of pcre2_real_compile_context_16	pcre2_real_compile_context
declaration of pcre2_general_context_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_16	PCRE2_TYPES_LIST
declaration of pcre2_general_context_16	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_16	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_16	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_16	pcre2_general_context
declaration of pcre2_real_general_context_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_general_context_16	PCRE2_TYPES_LIST
declaration of pcre2_real_general_context_16	PCRE2_JOIN(a,b)
declaration of pcre2_real_general_context_16	PCRE2_GLUE(a,b)
declaration of pcre2_real_general_context_16	PCRE2_SUFFIX(a)
declaration of pcre2_real_general_context_16	pcre2_real_general_context
declaration of pcre2_callout_enumerate_block_8	PCRE2_JOIN(a,b)
declaration of pcre2_callout_enumerate_block_8	PCRE2_GLUE(a,b)
declaration of pcre2_callout_enumerate_block_8	PCRE2_SUFFIX(a)
declaration of pcre2_callout_enumerate_block_8	pcre2_callout_enumerate_block
declaration of pcre2_callout_enumerate_block_8	PCRE2_STRUCTURE_LIST
declaration of pcre2_callout_enumerate_block_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pcre2_callout_enumerate_block_8	PCRE2_STRUCTURE_LIST
definition of pcre2_callout_enumerate_block_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pcre2_callout_enumerate_block_8	PCRE2_JOIN(a,b)
definition of pcre2_callout_enumerate_block_8	PCRE2_GLUE(a,b)
definition of pcre2_callout_enumerate_block_8	PCRE2_SUFFIX(a)
definition of pcre2_callout_enumerate_block_8	pcre2_callout_enumerate_block
declaration of pcre2_callout_block_8	PCRE2_STRUCTURE_LIST
declaration of pcre2_callout_block_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_callout_block_8	PCRE2_JOIN(a,b)
declaration of pcre2_callout_block_8	PCRE2_GLUE(a,b)
declaration of pcre2_callout_block_8	PCRE2_SUFFIX(a)
declaration of pcre2_callout_block_8	pcre2_callout_block
definition of pcre2_callout_block_8	PCRE2_STRUCTURE_LIST
definition of pcre2_callout_block_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pcre2_callout_block_8	PCRE2_JOIN(a,b)
definition of pcre2_callout_block_8	PCRE2_GLUE(a,b)
definition of pcre2_callout_block_8	PCRE2_SUFFIX(a)
definition of pcre2_callout_block_8	pcre2_callout_block
declaration of pcre2_jit_callback_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_callback_8	PCRE2_JOIN(a,b)
declaration of pcre2_jit_callback_8	PCRE2_GLUE(a,b)
declaration of pcre2_jit_callback_8	PCRE2_SUFFIX(a)
declaration of pcre2_jit_callback_8	pcre2_jit_callback
declaration of pcre2_jit_callback_8	PCRE2_TYPES_LIST
declaration of pcre2_jit_stack_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_8	PCRE2_TYPES_LIST
declaration of pcre2_jit_stack_8	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_8	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_8	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_8	pcre2_jit_stack
declaration of pcre2_real_jit_stack_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_jit_stack_8	PCRE2_TYPES_LIST
declaration of pcre2_real_jit_stack_8	PCRE2_JOIN(a,b)
declaration of pcre2_real_jit_stack_8	PCRE2_GLUE(a,b)
declaration of pcre2_real_jit_stack_8	PCRE2_SUFFIX(a)
declaration of pcre2_real_jit_stack_8	pcre2_real_jit_stack
declaration of pcre2_match_data_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_8	PCRE2_TYPES_LIST
declaration of pcre2_match_data_8	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_8	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_8	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_8	pcre2_match_data
declaration of pcre2_real_match_data_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_match_data_8	PCRE2_TYPES_LIST
declaration of pcre2_real_match_data_8	PCRE2_JOIN(a,b)
declaration of pcre2_real_match_data_8	PCRE2_GLUE(a,b)
declaration of pcre2_real_match_data_8	PCRE2_SUFFIX(a)
declaration of pcre2_real_match_data_8	pcre2_real_match_data
declaration of pcre2_code_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_8	PCRE2_TYPES_LIST
declaration of pcre2_code_8	PCRE2_JOIN(a,b)
declaration of pcre2_code_8	PCRE2_GLUE(a,b)
declaration of pcre2_code_8	PCRE2_SUFFIX(a)
declaration of pcre2_code_8	pcre2_code
declaration of pcre2_real_code_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_code_8	PCRE2_TYPES_LIST
declaration of pcre2_real_code_8	PCRE2_JOIN(a,b)
declaration of pcre2_real_code_8	PCRE2_GLUE(a,b)
declaration of pcre2_real_code_8	PCRE2_SUFFIX(a)
declaration of pcre2_real_code_8	pcre2_real_code
declaration of pcre2_convert_context_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_8	PCRE2_TYPES_LIST
declaration of pcre2_convert_context_8	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_8	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_8	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_8	pcre2_convert_context
declaration of pcre2_real_convert_context_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_convert_context_8	PCRE2_TYPES_LIST
declaration of pcre2_real_convert_context_8	PCRE2_JOIN(a,b)
declaration of pcre2_real_convert_context_8	PCRE2_GLUE(a,b)
declaration of pcre2_real_convert_context_8	PCRE2_SUFFIX(a)
declaration of pcre2_real_convert_context_8	pcre2_real_convert_context
declaration of pcre2_match_context_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_8	PCRE2_TYPES_LIST
declaration of pcre2_match_context_8	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_8	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_8	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_8	pcre2_match_context
declaration of pcre2_real_match_context_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_match_context_8	PCRE2_TYPES_LIST
declaration of pcre2_real_match_context_8	PCRE2_JOIN(a,b)
declaration of pcre2_real_match_context_8	PCRE2_GLUE(a,b)
declaration of pcre2_real_match_context_8	PCRE2_SUFFIX(a)
declaration of pcre2_real_match_context_8	pcre2_real_match_context
declaration of pcre2_compile_context_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_8	PCRE2_TYPES_LIST
declaration of pcre2_compile_context_8	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_8	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_8	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_8	pcre2_compile_context
declaration of pcre2_real_compile_context_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_compile_context_8	PCRE2_TYPES_LIST
declaration of pcre2_real_compile_context_8	PCRE2_JOIN(a,b)
declaration of pcre2_real_compile_context_8	PCRE2_GLUE(a,b)
declaration of pcre2_real_compile_context_8	PCRE2_SUFFIX(a)
declaration of pcre2_real_compile_context_8	pcre2_real_compile_context
declaration of pcre2_general_context_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_8	PCRE2_TYPES_LIST
declaration of pcre2_general_context_8	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_8	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_8	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_8	pcre2_general_context
declaration of pcre2_real_general_context_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_general_context_8	PCRE2_TYPES_LIST
declaration of pcre2_real_general_context_8	PCRE2_JOIN(a,b)
declaration of pcre2_real_general_context_8	PCRE2_GLUE(a,b)
declaration of pcre2_real_general_context_8	PCRE2_SUFFIX(a)
declaration of pcre2_real_general_context_8	pcre2_real_general_context
declaration of pcre2_match_data_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_32	PCRE2_TYPES_LIST
declaration of pcre2_match_data_32	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_32	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_32	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_32	pcre2_match_data
declaration of pcre2_real_match_data_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_match_data_32	PCRE2_TYPES_LIST
declaration of pcre2_real_match_data_32	PCRE2_JOIN(a,b)
declaration of pcre2_real_match_data_32	PCRE2_GLUE(a,b)
declaration of pcre2_real_match_data_32	PCRE2_SUFFIX(a)
declaration of pcre2_real_match_data_32	pcre2_real_match_data
declaration of pcre2_code_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_32	PCRE2_TYPES_LIST
declaration of pcre2_code_32	PCRE2_JOIN(a,b)
declaration of pcre2_code_32	PCRE2_GLUE(a,b)
declaration of pcre2_code_32	PCRE2_SUFFIX(a)
declaration of pcre2_code_32	pcre2_code
declaration of pcre2_real_code_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_real_code_32	PCRE2_TYPES_LIST
declaration of pcre2_real_code_32	PCRE2_JOIN(a,b)
declaration of pcre2_real_code_32	PCRE2_GLUE(a,b)
declaration of pcre2_real_code_32	PCRE2_SUFFIX(a)
declaration of pcre2_real_code_32	pcre2_real_code
definition of callout_string	PCRE2_STRUCTURE_LIST
definition of callout_string	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_length	PCRE2_STRUCTURE_LIST
definition of callout_string_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_offset	PCRE2_STRUCTURE_LIST
definition of callout_string_offset	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_number	PCRE2_STRUCTURE_LIST
definition of callout_number	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of next_item_length	PCRE2_STRUCTURE_LIST
definition of next_item_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pattern_position	PCRE2_STRUCTURE_LIST
definition of pattern_position	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of version	PCRE2_STRUCTURE_LIST
definition of version	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_flags	PCRE2_STRUCTURE_LIST
definition of callout_flags	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string	PCRE2_STRUCTURE_LIST
definition of callout_string	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_length	PCRE2_STRUCTURE_LIST
definition of callout_string_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_offset	PCRE2_STRUCTURE_LIST
definition of callout_string_offset	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of next_item_length	PCRE2_STRUCTURE_LIST
definition of next_item_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pattern_position	PCRE2_STRUCTURE_LIST
definition of pattern_position	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of current_position	PCRE2_STRUCTURE_LIST
definition of current_position	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of start_match	PCRE2_STRUCTURE_LIST
definition of start_match	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of subject_length	PCRE2_STRUCTURE_LIST
definition of subject_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of subject	PCRE2_STRUCTURE_LIST
definition of subject	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of mark	PCRE2_STRUCTURE_LIST
definition of mark	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of offset_vector	PCRE2_STRUCTURE_LIST
definition of offset_vector	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of capture_last	PCRE2_STRUCTURE_LIST
definition of capture_last	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of capture_top	PCRE2_STRUCTURE_LIST
definition of capture_top	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_number	PCRE2_STRUCTURE_LIST
definition of callout_number	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of version	PCRE2_STRUCTURE_LIST
definition of version	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string	PCRE2_STRUCTURE_LIST
definition of callout_string	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_length	PCRE2_STRUCTURE_LIST
definition of callout_string_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_offset	PCRE2_STRUCTURE_LIST
definition of callout_string_offset	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_number	PCRE2_STRUCTURE_LIST
definition of callout_number	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of next_item_length	PCRE2_STRUCTURE_LIST
definition of next_item_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pattern_position	PCRE2_STRUCTURE_LIST
definition of pattern_position	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of version	PCRE2_STRUCTURE_LIST
definition of version	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_flags	PCRE2_STRUCTURE_LIST
definition of callout_flags	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string	PCRE2_STRUCTURE_LIST
definition of callout_string	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_length	PCRE2_STRUCTURE_LIST
definition of callout_string_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_offset	PCRE2_STRUCTURE_LIST
definition of callout_string_offset	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of next_item_length	PCRE2_STRUCTURE_LIST
definition of next_item_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pattern_position	PCRE2_STRUCTURE_LIST
definition of pattern_position	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of current_position	PCRE2_STRUCTURE_LIST
definition of current_position	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of start_match	PCRE2_STRUCTURE_LIST
definition of start_match	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of subject_length	PCRE2_STRUCTURE_LIST
definition of subject_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of subject	PCRE2_STRUCTURE_LIST
definition of subject	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of mark	PCRE2_STRUCTURE_LIST
definition of mark	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of offset_vector	PCRE2_STRUCTURE_LIST
definition of offset_vector	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of capture_last	PCRE2_STRUCTURE_LIST
definition of capture_last	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of capture_top	PCRE2_STRUCTURE_LIST
definition of capture_top	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_number	PCRE2_STRUCTURE_LIST
definition of callout_number	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of version	PCRE2_STRUCTURE_LIST
definition of version	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string	PCRE2_STRUCTURE_LIST
definition of callout_string	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_length	PCRE2_STRUCTURE_LIST
definition of callout_string_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_offset	PCRE2_STRUCTURE_LIST
definition of callout_string_offset	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_number	PCRE2_STRUCTURE_LIST
definition of callout_number	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of next_item_length	PCRE2_STRUCTURE_LIST
definition of next_item_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pattern_position	PCRE2_STRUCTURE_LIST
definition of pattern_position	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of version	PCRE2_STRUCTURE_LIST
definition of version	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_flags	PCRE2_STRUCTURE_LIST
definition of callout_flags	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string	PCRE2_STRUCTURE_LIST
definition of callout_string	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_length	PCRE2_STRUCTURE_LIST
definition of callout_string_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_string_offset	PCRE2_STRUCTURE_LIST
definition of callout_string_offset	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of next_item_length	PCRE2_STRUCTURE_LIST
definition of next_item_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of pattern_position	PCRE2_STRUCTURE_LIST
definition of pattern_position	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of current_position	PCRE2_STRUCTURE_LIST
definition of current_position	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of start_match	PCRE2_STRUCTURE_LIST
definition of start_match	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of subject_length	PCRE2_STRUCTURE_LIST
definition of subject_length	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of subject	PCRE2_STRUCTURE_LIST
definition of subject	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of mark	PCRE2_STRUCTURE_LIST
definition of mark	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of offset_vector	PCRE2_STRUCTURE_LIST
definition of offset_vector	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of capture_last	PCRE2_STRUCTURE_LIST
definition of capture_last	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of capture_top	PCRE2_STRUCTURE_LIST
definition of capture_top	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of callout_number	PCRE2_STRUCTURE_LIST
definition of callout_number	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
definition of version	PCRE2_STRUCTURE_LIST
definition of version	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_maketables_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_maketables_32	PCRE2_OTHER_FUNCTIONS
declaration of pcre2_maketables_32	PCRE2_JOIN(a,b)
declaration of pcre2_maketables_32	PCRE2_GLUE(a,b)
declaration of pcre2_maketables_32	PCRE2_SUFFIX(a)
declaration of pcre2_maketables_32	pcre2_maketables
declaration of pcre2_get_error_message_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_error_message_32	PCRE2_OTHER_FUNCTIONS
declaration of pcre2_get_error_message_32	PCRE2_JOIN(a,b)
declaration of pcre2_get_error_message_32	PCRE2_GLUE(a,b)
declaration of pcre2_get_error_message_32	PCRE2_SUFFIX(a)
declaration of pcre2_get_error_message_32	pcre2_get_error_message
declaration of pcre2_jit_stack_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_free_32	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_stack_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_free_32	pcre2_jit_stack_free
declaration of pcre2_jit_stack_assign_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_assign_32	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_stack_assign_32	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_assign_32	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_assign_32	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_assign_32	pcre2_jit_stack_assign
declaration of pcre2_jit_stack_create_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_create_32	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_stack_create_32	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_create_32	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_create_32	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_create_32	pcre2_jit_stack_create
declaration of pcre2_jit_free_unused_memory_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_free_unused_memory_32	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_free_unused_memory_32	PCRE2_JOIN(a,b)
declaration of pcre2_jit_free_unused_memory_32	PCRE2_GLUE(a,b)
declaration of pcre2_jit_free_unused_memory_32	PCRE2_SUFFIX(a)
declaration of pcre2_jit_free_unused_memory_32	pcre2_jit_free_unused_memory
declaration of pcre2_jit_match_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_match_32	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_match_32	PCRE2_JOIN(a,b)
declaration of pcre2_jit_match_32	PCRE2_GLUE(a,b)
declaration of pcre2_jit_match_32	PCRE2_SUFFIX(a)
declaration of pcre2_jit_match_32	pcre2_jit_match
declaration of pcre2_jit_compile_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_compile_32	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_compile_32	PCRE2_JOIN(a,b)
declaration of pcre2_jit_compile_32	PCRE2_GLUE(a,b)
declaration of pcre2_jit_compile_32	PCRE2_SUFFIX(a)
declaration of pcre2_jit_compile_32	pcre2_jit_compile
declaration of pcre2_substitute_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substitute_32	PCRE2_SUBSTITUTE_FUNCTION
declaration of pcre2_substitute_32	PCRE2_JOIN(a,b)
declaration of pcre2_substitute_32	PCRE2_GLUE(a,b)
declaration of pcre2_substitute_32	PCRE2_SUFFIX(a)
declaration of pcre2_substitute_32	pcre2_substitute
declaration of pcre2_serialize_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_free_32	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_free_32	pcre2_serialize_free
declaration of pcre2_serialize_get_number_of_codes_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_get_number_of_codes_32	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_get_number_of_codes_32	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_get_number_of_codes_32	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_get_number_of_codes_32	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_get_number_of_codes_32	pcre2_serialize_get_number_of_codes
declaration of pcre2_serialize_decode_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_decode_32	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_decode_32	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_decode_32	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_decode_32	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_decode_32	pcre2_serialize_decode
declaration of pcre2_serialize_encode_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_encode_32	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_encode_32	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_encode_32	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_encode_32	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_encode_32	pcre2_serialize_encode
declaration of pcre2_substring_list_get_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_list_get_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_list_get_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_list_get_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_list_get_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_list_get_32	pcre2_substring_list_get
declaration of pcre2_substring_list_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_list_free_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_list_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_list_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_list_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_list_free_32	pcre2_substring_list_free
declaration of pcre2_substring_number_from_name_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_number_from_name_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_number_from_name_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_number_from_name_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_number_from_name_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_number_from_name_32	pcre2_substring_number_from_name
declaration of pcre2_substring_nametable_scan_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_nametable_scan_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_nametable_scan_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_nametable_scan_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_nametable_scan_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_nametable_scan_32	pcre2_substring_nametable_scan
declaration of pcre2_substring_length_bynumber_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_length_bynumber_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_length_bynumber_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_length_bynumber_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_length_bynumber_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_length_bynumber_32	pcre2_substring_length_bynumber
declaration of pcre2_substring_length_byname_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_length_byname_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_length_byname_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_length_byname_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_length_byname_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_length_byname_32	pcre2_substring_length_byname
declaration of pcre2_substring_get_bynumber_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_get_bynumber_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_get_bynumber_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_get_bynumber_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_get_bynumber_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_get_bynumber_32	pcre2_substring_get_bynumber
declaration of pcre2_substring_get_byname_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_get_byname_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_get_byname_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_get_byname_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_get_byname_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_get_byname_32	pcre2_substring_get_byname
declaration of pcre2_substring_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_free_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_free_32	pcre2_substring_free
declaration of pcre2_substring_copy_bynumber_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_copy_bynumber_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_copy_bynumber_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_copy_bynumber_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_copy_bynumber_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_copy_bynumber_32	pcre2_substring_copy_bynumber
declaration of pcre2_substring_copy_byname_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_copy_byname_32	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_copy_byname_32	PCRE2_JOIN(a,b)
declaration of pcre2_substring_copy_byname_32	PCRE2_GLUE(a,b)
declaration of pcre2_substring_copy_byname_32	PCRE2_SUFFIX(a)
declaration of pcre2_substring_copy_byname_32	pcre2_substring_copy_byname
declaration of pcre2_get_startchar_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_startchar_32	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_startchar_32	PCRE2_JOIN(a,b)
declaration of pcre2_get_startchar_32	PCRE2_GLUE(a,b)
declaration of pcre2_get_startchar_32	PCRE2_SUFFIX(a)
declaration of pcre2_get_startchar_32	pcre2_get_startchar
declaration of pcre2_get_ovector_pointer_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_ovector_pointer_32	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_ovector_pointer_32	PCRE2_JOIN(a,b)
declaration of pcre2_get_ovector_pointer_32	PCRE2_GLUE(a,b)
declaration of pcre2_get_ovector_pointer_32	PCRE2_SUFFIX(a)
declaration of pcre2_get_ovector_pointer_32	pcre2_get_ovector_pointer
declaration of pcre2_get_ovector_count_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_ovector_count_32	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_ovector_count_32	PCRE2_JOIN(a,b)
declaration of pcre2_get_ovector_count_32	PCRE2_GLUE(a,b)
declaration of pcre2_get_ovector_count_32	PCRE2_SUFFIX(a)
declaration of pcre2_get_ovector_count_32	pcre2_get_ovector_count
declaration of pcre2_get_mark_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_mark_32	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_mark_32	PCRE2_JOIN(a,b)
declaration of pcre2_get_mark_32	PCRE2_GLUE(a,b)
declaration of pcre2_get_mark_32	PCRE2_SUFFIX(a)
declaration of pcre2_get_mark_32	pcre2_get_mark
declaration of pcre2_match_data_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_free_32	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_data_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_free_32	pcre2_match_data_free
declaration of pcre2_match_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_32	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_32	PCRE2_JOIN(a,b)
declaration of pcre2_match_32	PCRE2_GLUE(a,b)
declaration of pcre2_match_32	PCRE2_SUFFIX(a)
declaration of pcre2_match_32	pcre2_match
declaration of pcre2_dfa_match_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_dfa_match_32	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_dfa_match_32	PCRE2_JOIN(a,b)
declaration of pcre2_dfa_match_32	PCRE2_GLUE(a,b)
declaration of pcre2_dfa_match_32	PCRE2_SUFFIX(a)
declaration of pcre2_dfa_match_32	pcre2_dfa_match
declaration of pcre2_match_data_create_from_pattern_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_create_from_pattern_32	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_data_create_from_pattern_32	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_create_from_pattern_32	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_create_from_pattern_32	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_create_from_pattern_32	pcre2_match_data_create_from_pattern
declaration of pcre2_match_data_create_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_create_32	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_data_create_32	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_create_32	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_create_32	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_create_32	pcre2_match_data_create
declaration of pcre2_callout_enumerate_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_callout_enumerate_32	PCRE2_PATTERN_INFO_FUNCTIONS
declaration of pcre2_callout_enumerate_32	PCRE2_JOIN(a,b)
declaration of pcre2_callout_enumerate_32	PCRE2_GLUE(a,b)
declaration of pcre2_callout_enumerate_32	PCRE2_SUFFIX(a)
declaration of pcre2_callout_enumerate_32	pcre2_callout_enumerate
declaration of pcre2_pattern_info_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_pattern_info_32	PCRE2_PATTERN_INFO_FUNCTIONS
declaration of pcre2_pattern_info_32	PCRE2_JOIN(a,b)
declaration of pcre2_pattern_info_32	PCRE2_GLUE(a,b)
declaration of pcre2_pattern_info_32	PCRE2_SUFFIX(a)
declaration of pcre2_pattern_info_32	pcre2_pattern_info
declaration of pcre2_code_copy_with_tables_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_copy_with_tables_32	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_code_copy_with_tables_32	PCRE2_JOIN(a,b)
declaration of pcre2_code_copy_with_tables_32	PCRE2_GLUE(a,b)
declaration of pcre2_code_copy_with_tables_32	PCRE2_SUFFIX(a)
declaration of pcre2_code_copy_with_tables_32	pcre2_code_copy_with_tables
declaration of pcre2_code_copy_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_copy_32	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_code_copy_32	PCRE2_JOIN(a,b)
declaration of pcre2_code_copy_32	PCRE2_GLUE(a,b)
declaration of pcre2_code_copy_32	PCRE2_SUFFIX(a)
declaration of pcre2_code_copy_32	pcre2_code_copy
declaration of pcre2_code_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_free_32	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_code_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_code_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_code_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_code_free_32	pcre2_code_free
declaration of pcre2_compile_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_32	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_compile_32	PCRE2_JOIN(a,b)
declaration of pcre2_compile_32	PCRE2_GLUE(a,b)
declaration of pcre2_compile_32	PCRE2_SUFFIX(a)
declaration of pcre2_compile_32	pcre2_compile
declaration of pcre2_set_recursion_memory_management_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_recursion_memory_management_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_recursion_memory_management_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_recursion_memory_management_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_recursion_memory_management_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_recursion_memory_management_32	pcre2_set_recursion_memory_management
declaration of pcre2_set_recursion_limit_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_recursion_limit_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_recursion_limit_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_recursion_limit_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_recursion_limit_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_recursion_limit_32	pcre2_set_recursion_limit
declaration of pcre2_set_offset_limit_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_offset_limit_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_offset_limit_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_offset_limit_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_offset_limit_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_offset_limit_32	pcre2_set_offset_limit
declaration of pcre2_set_match_limit_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_match_limit_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_match_limit_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_match_limit_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_match_limit_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_match_limit_32	pcre2_set_match_limit
declaration of pcre2_set_heap_limit_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_heap_limit_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_heap_limit_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_heap_limit_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_heap_limit_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_heap_limit_32	pcre2_set_heap_limit
declaration of pcre2_set_depth_limit_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_depth_limit_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_depth_limit_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_depth_limit_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_depth_limit_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_depth_limit_32	pcre2_set_depth_limit
declaration of pcre2_set_callout_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_callout_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_callout_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_callout_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_callout_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_callout_32	pcre2_set_callout
declaration of pcre2_match_context_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_free_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_match_context_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_free_32	pcre2_match_context_free
declaration of pcre2_match_context_create_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_create_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_match_context_create_32	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_create_32	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_create_32	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_create_32	pcre2_match_context_create
declaration of pcre2_match_context_copy_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_copy_32	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_match_context_copy_32	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_copy_32	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_copy_32	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_copy_32	pcre2_match_context_copy
declaration of pcre2_converted_pattern_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_converted_pattern_free_32	PCRE2_CONVERT_FUNCTIONS
declaration of pcre2_converted_pattern_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_converted_pattern_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_converted_pattern_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_converted_pattern_free_32	pcre2_converted_pattern_free
declaration of pcre2_pattern_convert_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_pattern_convert_32	PCRE2_CONVERT_FUNCTIONS
declaration of pcre2_pattern_convert_32	PCRE2_JOIN(a,b)
declaration of pcre2_pattern_convert_32	PCRE2_GLUE(a,b)
declaration of pcre2_pattern_convert_32	PCRE2_SUFFIX(a)
declaration of pcre2_pattern_convert_32	pcre2_pattern_convert
declaration of pcre2_set_glob_separator_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_glob_separator_32	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_set_glob_separator_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_glob_separator_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_glob_separator_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_glob_separator_32	pcre2_set_glob_separator
declaration of pcre2_set_glob_escape_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_glob_escape_32	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_set_glob_escape_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_glob_escape_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_glob_escape_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_glob_escape_32	pcre2_set_glob_escape
declaration of pcre2_convert_context_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_free_32	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_convert_context_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_free_32	pcre2_convert_context_free
declaration of pcre2_convert_context_create_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_create_32	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_convert_context_create_32	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_create_32	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_create_32	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_create_32	pcre2_convert_context_create
declaration of pcre2_convert_context_copy_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_copy_32	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_convert_context_copy_32	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_copy_32	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_copy_32	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_copy_32	pcre2_convert_context_copy
declaration of pcre2_set_compile_recursion_guard_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_compile_recursion_guard_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_compile_recursion_guard_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_compile_recursion_guard_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_compile_recursion_guard_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_compile_recursion_guard_32	pcre2_set_compile_recursion_guard
declaration of pcre2_set_parens_nest_limit_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_parens_nest_limit_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_parens_nest_limit_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_parens_nest_limit_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_parens_nest_limit_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_parens_nest_limit_32	pcre2_set_parens_nest_limit
declaration of pcre2_set_newline_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_newline_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_newline_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_newline_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_newline_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_newline_32	pcre2_set_newline
declaration of pcre2_set_max_pattern_length_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_max_pattern_length_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_max_pattern_length_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_max_pattern_length_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_max_pattern_length_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_max_pattern_length_32	pcre2_set_max_pattern_length
declaration of pcre2_set_compile_extra_options_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_compile_extra_options_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_compile_extra_options_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_compile_extra_options_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_compile_extra_options_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_compile_extra_options_32	pcre2_set_compile_extra_options
declaration of pcre2_set_character_tables_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_character_tables_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_character_tables_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_character_tables_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_character_tables_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_character_tables_32	pcre2_set_character_tables
declaration of pcre2_set_bsr_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_bsr_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_bsr_32	PCRE2_JOIN(a,b)
declaration of pcre2_set_bsr_32	PCRE2_GLUE(a,b)
declaration of pcre2_set_bsr_32	PCRE2_SUFFIX(a)
declaration of pcre2_set_bsr_32	pcre2_set_bsr
declaration of pcre2_compile_context_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_free_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_compile_context_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_free_32	pcre2_compile_context_free
declaration of pcre2_compile_context_create_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_create_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_compile_context_create_32	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_create_32	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_create_32	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_create_32	pcre2_compile_context_create
declaration of pcre2_compile_context_copy_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_copy_32	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_compile_context_copy_32	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_copy_32	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_copy_32	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_copy_32	pcre2_compile_context_copy
declaration of pcre2_general_context_free_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_free_32	PCRE2_GENERAL_CONTEXT_FUNCTIONS
declaration of pcre2_general_context_free_32	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_free_32	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_free_32	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_free_32	pcre2_general_context_free
declaration of pcre2_general_context_create_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_create_32	PCRE2_GENERAL_CONTEXT_FUNCTIONS
declaration of pcre2_general_context_create_32	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_create_32	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_create_32	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_create_32	pcre2_general_context_create
declaration of pcre2_general_context_copy_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_copy_32	PCRE2_GENERAL_CONTEXT_FUNCTIONS
declaration of pcre2_general_context_copy_32	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_copy_32	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_copy_32	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_copy_32	pcre2_general_context_copy
declaration of pcre2_config_32	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_config_32	PCRE2_GENERAL_INFO_FUNCTIONS
declaration of pcre2_config_32	PCRE2_JOIN(a,b)
declaration of pcre2_config_32	PCRE2_GLUE(a,b)
declaration of pcre2_config_32	PCRE2_SUFFIX(a)
declaration of pcre2_config_32	pcre2_config
declaration of pcre2_maketables_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_maketables_16	PCRE2_OTHER_FUNCTIONS
declaration of pcre2_maketables_16	PCRE2_JOIN(a,b)
declaration of pcre2_maketables_16	PCRE2_GLUE(a,b)
declaration of pcre2_maketables_16	PCRE2_SUFFIX(a)
declaration of pcre2_maketables_16	pcre2_maketables
declaration of pcre2_get_error_message_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_error_message_16	PCRE2_OTHER_FUNCTIONS
declaration of pcre2_get_error_message_16	PCRE2_JOIN(a,b)
declaration of pcre2_get_error_message_16	PCRE2_GLUE(a,b)
declaration of pcre2_get_error_message_16	PCRE2_SUFFIX(a)
declaration of pcre2_get_error_message_16	pcre2_get_error_message
declaration of pcre2_jit_stack_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_free_16	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_stack_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_free_16	pcre2_jit_stack_free
declaration of pcre2_jit_stack_assign_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_assign_16	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_stack_assign_16	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_assign_16	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_assign_16	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_assign_16	pcre2_jit_stack_assign
declaration of pcre2_jit_stack_create_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_create_16	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_stack_create_16	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_create_16	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_create_16	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_create_16	pcre2_jit_stack_create
declaration of pcre2_jit_free_unused_memory_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_free_unused_memory_16	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_free_unused_memory_16	PCRE2_JOIN(a,b)
declaration of pcre2_jit_free_unused_memory_16	PCRE2_GLUE(a,b)
declaration of pcre2_jit_free_unused_memory_16	PCRE2_SUFFIX(a)
declaration of pcre2_jit_free_unused_memory_16	pcre2_jit_free_unused_memory
declaration of pcre2_jit_match_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_match_16	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_match_16	PCRE2_JOIN(a,b)
declaration of pcre2_jit_match_16	PCRE2_GLUE(a,b)
declaration of pcre2_jit_match_16	PCRE2_SUFFIX(a)
declaration of pcre2_jit_match_16	pcre2_jit_match
declaration of pcre2_jit_compile_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_compile_16	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_compile_16	PCRE2_JOIN(a,b)
declaration of pcre2_jit_compile_16	PCRE2_GLUE(a,b)
declaration of pcre2_jit_compile_16	PCRE2_SUFFIX(a)
declaration of pcre2_jit_compile_16	pcre2_jit_compile
declaration of pcre2_substitute_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substitute_16	PCRE2_SUBSTITUTE_FUNCTION
declaration of pcre2_substitute_16	PCRE2_JOIN(a,b)
declaration of pcre2_substitute_16	PCRE2_GLUE(a,b)
declaration of pcre2_substitute_16	PCRE2_SUFFIX(a)
declaration of pcre2_substitute_16	pcre2_substitute
declaration of pcre2_serialize_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_free_16	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_free_16	pcre2_serialize_free
declaration of pcre2_serialize_get_number_of_codes_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_get_number_of_codes_16	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_get_number_of_codes_16	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_get_number_of_codes_16	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_get_number_of_codes_16	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_get_number_of_codes_16	pcre2_serialize_get_number_of_codes
declaration of pcre2_serialize_decode_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_decode_16	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_decode_16	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_decode_16	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_decode_16	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_decode_16	pcre2_serialize_decode
declaration of pcre2_serialize_encode_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_encode_16	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_encode_16	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_encode_16	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_encode_16	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_encode_16	pcre2_serialize_encode
declaration of pcre2_substring_list_get_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_list_get_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_list_get_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_list_get_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_list_get_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_list_get_16	pcre2_substring_list_get
declaration of pcre2_substring_list_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_list_free_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_list_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_list_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_list_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_list_free_16	pcre2_substring_list_free
declaration of pcre2_substring_number_from_name_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_number_from_name_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_number_from_name_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_number_from_name_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_number_from_name_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_number_from_name_16	pcre2_substring_number_from_name
declaration of pcre2_substring_nametable_scan_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_nametable_scan_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_nametable_scan_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_nametable_scan_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_nametable_scan_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_nametable_scan_16	pcre2_substring_nametable_scan
declaration of pcre2_substring_length_bynumber_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_length_bynumber_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_length_bynumber_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_length_bynumber_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_length_bynumber_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_length_bynumber_16	pcre2_substring_length_bynumber
declaration of pcre2_substring_length_byname_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_length_byname_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_length_byname_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_length_byname_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_length_byname_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_length_byname_16	pcre2_substring_length_byname
declaration of pcre2_substring_get_bynumber_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_get_bynumber_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_get_bynumber_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_get_bynumber_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_get_bynumber_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_get_bynumber_16	pcre2_substring_get_bynumber
declaration of pcre2_substring_get_byname_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_get_byname_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_get_byname_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_get_byname_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_get_byname_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_get_byname_16	pcre2_substring_get_byname
declaration of pcre2_substring_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_free_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_free_16	pcre2_substring_free
declaration of pcre2_substring_copy_bynumber_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_copy_bynumber_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_copy_bynumber_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_copy_bynumber_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_copy_bynumber_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_copy_bynumber_16	pcre2_substring_copy_bynumber
declaration of pcre2_substring_copy_byname_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_copy_byname_16	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_copy_byname_16	PCRE2_JOIN(a,b)
declaration of pcre2_substring_copy_byname_16	PCRE2_GLUE(a,b)
declaration of pcre2_substring_copy_byname_16	PCRE2_SUFFIX(a)
declaration of pcre2_substring_copy_byname_16	pcre2_substring_copy_byname
declaration of pcre2_get_startchar_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_startchar_16	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_startchar_16	PCRE2_JOIN(a,b)
declaration of pcre2_get_startchar_16	PCRE2_GLUE(a,b)
declaration of pcre2_get_startchar_16	PCRE2_SUFFIX(a)
declaration of pcre2_get_startchar_16	pcre2_get_startchar
declaration of pcre2_get_ovector_pointer_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_ovector_pointer_16	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_ovector_pointer_16	PCRE2_JOIN(a,b)
declaration of pcre2_get_ovector_pointer_16	PCRE2_GLUE(a,b)
declaration of pcre2_get_ovector_pointer_16	PCRE2_SUFFIX(a)
declaration of pcre2_get_ovector_pointer_16	pcre2_get_ovector_pointer
declaration of pcre2_get_ovector_count_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_ovector_count_16	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_ovector_count_16	PCRE2_JOIN(a,b)
declaration of pcre2_get_ovector_count_16	PCRE2_GLUE(a,b)
declaration of pcre2_get_ovector_count_16	PCRE2_SUFFIX(a)
declaration of pcre2_get_ovector_count_16	pcre2_get_ovector_count
declaration of pcre2_get_mark_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_mark_16	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_mark_16	PCRE2_JOIN(a,b)
declaration of pcre2_get_mark_16	PCRE2_GLUE(a,b)
declaration of pcre2_get_mark_16	PCRE2_SUFFIX(a)
declaration of pcre2_get_mark_16	pcre2_get_mark
declaration of pcre2_match_data_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_free_16	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_data_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_free_16	pcre2_match_data_free
declaration of pcre2_match_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_16	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_16	PCRE2_JOIN(a,b)
declaration of pcre2_match_16	PCRE2_GLUE(a,b)
declaration of pcre2_match_16	PCRE2_SUFFIX(a)
declaration of pcre2_match_16	pcre2_match
declaration of pcre2_dfa_match_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_dfa_match_16	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_dfa_match_16	PCRE2_JOIN(a,b)
declaration of pcre2_dfa_match_16	PCRE2_GLUE(a,b)
declaration of pcre2_dfa_match_16	PCRE2_SUFFIX(a)
declaration of pcre2_dfa_match_16	pcre2_dfa_match
declaration of pcre2_match_data_create_from_pattern_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_create_from_pattern_16	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_data_create_from_pattern_16	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_create_from_pattern_16	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_create_from_pattern_16	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_create_from_pattern_16	pcre2_match_data_create_from_pattern
declaration of pcre2_match_data_create_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_create_16	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_data_create_16	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_create_16	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_create_16	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_create_16	pcre2_match_data_create
declaration of pcre2_callout_enumerate_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_callout_enumerate_16	PCRE2_PATTERN_INFO_FUNCTIONS
declaration of pcre2_callout_enumerate_16	PCRE2_JOIN(a,b)
declaration of pcre2_callout_enumerate_16	PCRE2_GLUE(a,b)
declaration of pcre2_callout_enumerate_16	PCRE2_SUFFIX(a)
declaration of pcre2_callout_enumerate_16	pcre2_callout_enumerate
declaration of pcre2_pattern_info_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_pattern_info_16	PCRE2_PATTERN_INFO_FUNCTIONS
declaration of pcre2_pattern_info_16	PCRE2_JOIN(a,b)
declaration of pcre2_pattern_info_16	PCRE2_GLUE(a,b)
declaration of pcre2_pattern_info_16	PCRE2_SUFFIX(a)
declaration of pcre2_pattern_info_16	pcre2_pattern_info
declaration of pcre2_code_copy_with_tables_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_copy_with_tables_16	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_code_copy_with_tables_16	PCRE2_JOIN(a,b)
declaration of pcre2_code_copy_with_tables_16	PCRE2_GLUE(a,b)
declaration of pcre2_code_copy_with_tables_16	PCRE2_SUFFIX(a)
declaration of pcre2_code_copy_with_tables_16	pcre2_code_copy_with_tables
declaration of pcre2_code_copy_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_copy_16	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_code_copy_16	PCRE2_JOIN(a,b)
declaration of pcre2_code_copy_16	PCRE2_GLUE(a,b)
declaration of pcre2_code_copy_16	PCRE2_SUFFIX(a)
declaration of pcre2_code_copy_16	pcre2_code_copy
declaration of pcre2_code_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_free_16	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_code_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_code_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_code_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_code_free_16	pcre2_code_free
declaration of pcre2_compile_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_16	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_compile_16	PCRE2_JOIN(a,b)
declaration of pcre2_compile_16	PCRE2_GLUE(a,b)
declaration of pcre2_compile_16	PCRE2_SUFFIX(a)
declaration of pcre2_compile_16	pcre2_compile
declaration of pcre2_set_recursion_memory_management_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_recursion_memory_management_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_recursion_memory_management_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_recursion_memory_management_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_recursion_memory_management_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_recursion_memory_management_16	pcre2_set_recursion_memory_management
declaration of pcre2_set_recursion_limit_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_recursion_limit_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_recursion_limit_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_recursion_limit_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_recursion_limit_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_recursion_limit_16	pcre2_set_recursion_limit
declaration of pcre2_set_offset_limit_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_offset_limit_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_offset_limit_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_offset_limit_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_offset_limit_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_offset_limit_16	pcre2_set_offset_limit
declaration of pcre2_set_match_limit_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_match_limit_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_match_limit_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_match_limit_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_match_limit_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_match_limit_16	pcre2_set_match_limit
declaration of pcre2_set_heap_limit_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_heap_limit_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_heap_limit_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_heap_limit_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_heap_limit_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_heap_limit_16	pcre2_set_heap_limit
declaration of pcre2_set_depth_limit_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_depth_limit_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_depth_limit_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_depth_limit_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_depth_limit_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_depth_limit_16	pcre2_set_depth_limit
declaration of pcre2_set_callout_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_callout_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_callout_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_callout_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_callout_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_callout_16	pcre2_set_callout
declaration of pcre2_match_context_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_free_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_match_context_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_free_16	pcre2_match_context_free
declaration of pcre2_match_context_create_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_create_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_match_context_create_16	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_create_16	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_create_16	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_create_16	pcre2_match_context_create
declaration of pcre2_match_context_copy_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_copy_16	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_match_context_copy_16	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_copy_16	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_copy_16	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_copy_16	pcre2_match_context_copy
declaration of pcre2_converted_pattern_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_converted_pattern_free_16	PCRE2_CONVERT_FUNCTIONS
declaration of pcre2_converted_pattern_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_converted_pattern_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_converted_pattern_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_converted_pattern_free_16	pcre2_converted_pattern_free
declaration of pcre2_pattern_convert_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_pattern_convert_16	PCRE2_CONVERT_FUNCTIONS
declaration of pcre2_pattern_convert_16	PCRE2_JOIN(a,b)
declaration of pcre2_pattern_convert_16	PCRE2_GLUE(a,b)
declaration of pcre2_pattern_convert_16	PCRE2_SUFFIX(a)
declaration of pcre2_pattern_convert_16	pcre2_pattern_convert
declaration of pcre2_set_glob_separator_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_glob_separator_16	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_set_glob_separator_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_glob_separator_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_glob_separator_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_glob_separator_16	pcre2_set_glob_separator
declaration of pcre2_set_glob_escape_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_glob_escape_16	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_set_glob_escape_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_glob_escape_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_glob_escape_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_glob_escape_16	pcre2_set_glob_escape
declaration of pcre2_convert_context_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_free_16	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_convert_context_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_free_16	pcre2_convert_context_free
declaration of pcre2_convert_context_create_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_create_16	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_convert_context_create_16	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_create_16	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_create_16	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_create_16	pcre2_convert_context_create
declaration of pcre2_convert_context_copy_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_copy_16	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_convert_context_copy_16	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_copy_16	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_copy_16	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_copy_16	pcre2_convert_context_copy
declaration of pcre2_set_compile_recursion_guard_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_compile_recursion_guard_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_compile_recursion_guard_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_compile_recursion_guard_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_compile_recursion_guard_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_compile_recursion_guard_16	pcre2_set_compile_recursion_guard
declaration of pcre2_set_parens_nest_limit_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_parens_nest_limit_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_parens_nest_limit_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_parens_nest_limit_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_parens_nest_limit_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_parens_nest_limit_16	pcre2_set_parens_nest_limit
declaration of pcre2_set_newline_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_newline_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_newline_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_newline_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_newline_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_newline_16	pcre2_set_newline
declaration of pcre2_set_max_pattern_length_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_max_pattern_length_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_max_pattern_length_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_max_pattern_length_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_max_pattern_length_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_max_pattern_length_16	pcre2_set_max_pattern_length
declaration of pcre2_set_compile_extra_options_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_compile_extra_options_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_compile_extra_options_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_compile_extra_options_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_compile_extra_options_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_compile_extra_options_16	pcre2_set_compile_extra_options
declaration of pcre2_set_character_tables_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_character_tables_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_character_tables_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_character_tables_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_character_tables_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_character_tables_16	pcre2_set_character_tables
declaration of pcre2_set_bsr_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_bsr_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_bsr_16	PCRE2_JOIN(a,b)
declaration of pcre2_set_bsr_16	PCRE2_GLUE(a,b)
declaration of pcre2_set_bsr_16	PCRE2_SUFFIX(a)
declaration of pcre2_set_bsr_16	pcre2_set_bsr
declaration of pcre2_compile_context_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_free_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_compile_context_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_free_16	pcre2_compile_context_free
declaration of pcre2_compile_context_create_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_create_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_compile_context_create_16	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_create_16	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_create_16	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_create_16	pcre2_compile_context_create
declaration of pcre2_compile_context_copy_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_copy_16	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_compile_context_copy_16	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_copy_16	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_copy_16	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_copy_16	pcre2_compile_context_copy
declaration of pcre2_general_context_free_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_free_16	PCRE2_GENERAL_CONTEXT_FUNCTIONS
declaration of pcre2_general_context_free_16	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_free_16	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_free_16	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_free_16	pcre2_general_context_free
declaration of pcre2_general_context_create_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_create_16	PCRE2_GENERAL_CONTEXT_FUNCTIONS
declaration of pcre2_general_context_create_16	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_create_16	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_create_16	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_create_16	pcre2_general_context_create
declaration of pcre2_general_context_copy_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_copy_16	PCRE2_GENERAL_CONTEXT_FUNCTIONS
declaration of pcre2_general_context_copy_16	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_copy_16	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_copy_16	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_copy_16	pcre2_general_context_copy
declaration of pcre2_config_16	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_config_16	PCRE2_GENERAL_INFO_FUNCTIONS
declaration of pcre2_config_16	PCRE2_JOIN(a,b)
declaration of pcre2_config_16	PCRE2_GLUE(a,b)
declaration of pcre2_config_16	PCRE2_SUFFIX(a)
declaration of pcre2_config_16	pcre2_config
declaration of pcre2_maketables_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_maketables_8	PCRE2_OTHER_FUNCTIONS
declaration of pcre2_maketables_8	PCRE2_JOIN(a,b)
declaration of pcre2_maketables_8	PCRE2_GLUE(a,b)
declaration of pcre2_maketables_8	PCRE2_SUFFIX(a)
declaration of pcre2_maketables_8	pcre2_maketables
declaration of pcre2_get_error_message_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_error_message_8	PCRE2_OTHER_FUNCTIONS
declaration of pcre2_get_error_message_8	PCRE2_JOIN(a,b)
declaration of pcre2_get_error_message_8	PCRE2_GLUE(a,b)
declaration of pcre2_get_error_message_8	PCRE2_SUFFIX(a)
declaration of pcre2_get_error_message_8	pcre2_get_error_message
declaration of pcre2_jit_stack_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_free_8	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_stack_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_free_8	pcre2_jit_stack_free
declaration of pcre2_jit_stack_assign_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_assign_8	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_stack_assign_8	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_assign_8	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_assign_8	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_assign_8	pcre2_jit_stack_assign
declaration of pcre2_jit_stack_create_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_stack_create_8	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_stack_create_8	PCRE2_JOIN(a,b)
declaration of pcre2_jit_stack_create_8	PCRE2_GLUE(a,b)
declaration of pcre2_jit_stack_create_8	PCRE2_SUFFIX(a)
declaration of pcre2_jit_stack_create_8	pcre2_jit_stack_create
declaration of pcre2_jit_free_unused_memory_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_free_unused_memory_8	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_free_unused_memory_8	PCRE2_JOIN(a,b)
declaration of pcre2_jit_free_unused_memory_8	PCRE2_GLUE(a,b)
declaration of pcre2_jit_free_unused_memory_8	PCRE2_SUFFIX(a)
declaration of pcre2_jit_free_unused_memory_8	pcre2_jit_free_unused_memory
declaration of pcre2_jit_match_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_match_8	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_match_8	PCRE2_JOIN(a,b)
declaration of pcre2_jit_match_8	PCRE2_GLUE(a,b)
declaration of pcre2_jit_match_8	PCRE2_SUFFIX(a)
declaration of pcre2_jit_match_8	pcre2_jit_match
declaration of pcre2_jit_compile_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_jit_compile_8	PCRE2_JIT_FUNCTIONS
declaration of pcre2_jit_compile_8	PCRE2_JOIN(a,b)
declaration of pcre2_jit_compile_8	PCRE2_GLUE(a,b)
declaration of pcre2_jit_compile_8	PCRE2_SUFFIX(a)
declaration of pcre2_jit_compile_8	pcre2_jit_compile
declaration of pcre2_substitute_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substitute_8	PCRE2_SUBSTITUTE_FUNCTION
declaration of pcre2_substitute_8	PCRE2_JOIN(a,b)
declaration of pcre2_substitute_8	PCRE2_GLUE(a,b)
declaration of pcre2_substitute_8	PCRE2_SUFFIX(a)
declaration of pcre2_substitute_8	pcre2_substitute
declaration of pcre2_serialize_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_free_8	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_free_8	pcre2_serialize_free
declaration of pcre2_serialize_get_number_of_codes_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_get_number_of_codes_8	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_get_number_of_codes_8	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_get_number_of_codes_8	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_get_number_of_codes_8	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_get_number_of_codes_8	pcre2_serialize_get_number_of_codes
declaration of pcre2_serialize_decode_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_decode_8	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_decode_8	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_decode_8	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_decode_8	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_decode_8	pcre2_serialize_decode
declaration of pcre2_serialize_encode_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_serialize_encode_8	PCRE2_SERIALIZE_FUNCTIONS
declaration of pcre2_serialize_encode_8	PCRE2_JOIN(a,b)
declaration of pcre2_serialize_encode_8	PCRE2_GLUE(a,b)
declaration of pcre2_serialize_encode_8	PCRE2_SUFFIX(a)
declaration of pcre2_serialize_encode_8	pcre2_serialize_encode
declaration of pcre2_substring_list_get_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_list_get_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_list_get_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_list_get_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_list_get_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_list_get_8	pcre2_substring_list_get
declaration of pcre2_substring_list_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_list_free_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_list_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_list_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_list_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_list_free_8	pcre2_substring_list_free
declaration of pcre2_substring_number_from_name_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_number_from_name_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_number_from_name_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_number_from_name_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_number_from_name_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_number_from_name_8	pcre2_substring_number_from_name
declaration of pcre2_substring_nametable_scan_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_nametable_scan_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_nametable_scan_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_nametable_scan_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_nametable_scan_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_nametable_scan_8	pcre2_substring_nametable_scan
declaration of pcre2_substring_length_bynumber_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_length_bynumber_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_length_bynumber_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_length_bynumber_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_length_bynumber_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_length_bynumber_8	pcre2_substring_length_bynumber
declaration of pcre2_substring_length_byname_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_length_byname_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_length_byname_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_length_byname_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_length_byname_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_length_byname_8	pcre2_substring_length_byname
declaration of pcre2_substring_get_bynumber_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_get_bynumber_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_get_bynumber_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_get_bynumber_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_get_bynumber_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_get_bynumber_8	pcre2_substring_get_bynumber
declaration of pcre2_substring_get_byname_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_get_byname_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_get_byname_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_get_byname_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_get_byname_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_get_byname_8	pcre2_substring_get_byname
declaration of pcre2_substring_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_free_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_free_8	pcre2_substring_free
declaration of pcre2_substring_copy_bynumber_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_copy_bynumber_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_copy_bynumber_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_copy_bynumber_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_copy_bynumber_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_copy_bynumber_8	pcre2_substring_copy_bynumber
declaration of pcre2_substring_copy_byname_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_substring_copy_byname_8	PCRE2_SUBSTRING_FUNCTIONS
declaration of pcre2_substring_copy_byname_8	PCRE2_JOIN(a,b)
declaration of pcre2_substring_copy_byname_8	PCRE2_GLUE(a,b)
declaration of pcre2_substring_copy_byname_8	PCRE2_SUFFIX(a)
declaration of pcre2_substring_copy_byname_8	pcre2_substring_copy_byname
declaration of pcre2_get_startchar_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_startchar_8	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_startchar_8	PCRE2_JOIN(a,b)
declaration of pcre2_get_startchar_8	PCRE2_GLUE(a,b)
declaration of pcre2_get_startchar_8	PCRE2_SUFFIX(a)
declaration of pcre2_get_startchar_8	pcre2_get_startchar
declaration of pcre2_get_ovector_pointer_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_ovector_pointer_8	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_ovector_pointer_8	PCRE2_JOIN(a,b)
declaration of pcre2_get_ovector_pointer_8	PCRE2_GLUE(a,b)
declaration of pcre2_get_ovector_pointer_8	PCRE2_SUFFIX(a)
declaration of pcre2_get_ovector_pointer_8	pcre2_get_ovector_pointer
declaration of pcre2_get_ovector_count_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_ovector_count_8	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_ovector_count_8	PCRE2_JOIN(a,b)
declaration of pcre2_get_ovector_count_8	PCRE2_GLUE(a,b)
declaration of pcre2_get_ovector_count_8	PCRE2_SUFFIX(a)
declaration of pcre2_get_ovector_count_8	pcre2_get_ovector_count
declaration of pcre2_get_mark_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_get_mark_8	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_get_mark_8	PCRE2_JOIN(a,b)
declaration of pcre2_get_mark_8	PCRE2_GLUE(a,b)
declaration of pcre2_get_mark_8	PCRE2_SUFFIX(a)
declaration of pcre2_get_mark_8	pcre2_get_mark
declaration of pcre2_match_data_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_free_8	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_data_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_free_8	pcre2_match_data_free
declaration of pcre2_match_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_8	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_8	PCRE2_JOIN(a,b)
declaration of pcre2_match_8	PCRE2_GLUE(a,b)
declaration of pcre2_match_8	PCRE2_SUFFIX(a)
declaration of pcre2_match_8	pcre2_match
declaration of pcre2_dfa_match_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_dfa_match_8	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_dfa_match_8	PCRE2_JOIN(a,b)
declaration of pcre2_dfa_match_8	PCRE2_GLUE(a,b)
declaration of pcre2_dfa_match_8	PCRE2_SUFFIX(a)
declaration of pcre2_dfa_match_8	pcre2_dfa_match
declaration of pcre2_match_data_create_from_pattern_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_create_from_pattern_8	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_data_create_from_pattern_8	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_create_from_pattern_8	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_create_from_pattern_8	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_create_from_pattern_8	pcre2_match_data_create_from_pattern
declaration of pcre2_match_data_create_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_data_create_8	PCRE2_MATCH_FUNCTIONS
declaration of pcre2_match_data_create_8	PCRE2_JOIN(a,b)
declaration of pcre2_match_data_create_8	PCRE2_GLUE(a,b)
declaration of pcre2_match_data_create_8	PCRE2_SUFFIX(a)
declaration of pcre2_match_data_create_8	pcre2_match_data_create
declaration of pcre2_callout_enumerate_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_callout_enumerate_8	PCRE2_PATTERN_INFO_FUNCTIONS
declaration of pcre2_callout_enumerate_8	PCRE2_JOIN(a,b)
declaration of pcre2_callout_enumerate_8	PCRE2_GLUE(a,b)
declaration of pcre2_callout_enumerate_8	PCRE2_SUFFIX(a)
declaration of pcre2_callout_enumerate_8	pcre2_callout_enumerate
declaration of pcre2_pattern_info_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_pattern_info_8	PCRE2_PATTERN_INFO_FUNCTIONS
declaration of pcre2_pattern_info_8	PCRE2_JOIN(a,b)
declaration of pcre2_pattern_info_8	PCRE2_GLUE(a,b)
declaration of pcre2_pattern_info_8	PCRE2_SUFFIX(a)
declaration of pcre2_pattern_info_8	pcre2_pattern_info
declaration of pcre2_code_copy_with_tables_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_copy_with_tables_8	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_code_copy_with_tables_8	PCRE2_JOIN(a,b)
declaration of pcre2_code_copy_with_tables_8	PCRE2_GLUE(a,b)
declaration of pcre2_code_copy_with_tables_8	PCRE2_SUFFIX(a)
declaration of pcre2_code_copy_with_tables_8	pcre2_code_copy_with_tables
declaration of pcre2_code_copy_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_copy_8	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_code_copy_8	PCRE2_JOIN(a,b)
declaration of pcre2_code_copy_8	PCRE2_GLUE(a,b)
declaration of pcre2_code_copy_8	PCRE2_SUFFIX(a)
declaration of pcre2_code_copy_8	pcre2_code_copy
declaration of pcre2_code_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_code_free_8	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_code_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_code_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_code_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_code_free_8	pcre2_code_free
declaration of pcre2_compile_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_8	PCRE2_COMPILE_FUNCTIONS
declaration of pcre2_compile_8	PCRE2_JOIN(a,b)
declaration of pcre2_compile_8	PCRE2_GLUE(a,b)
declaration of pcre2_compile_8	PCRE2_SUFFIX(a)
declaration of pcre2_compile_8	pcre2_compile
declaration of pcre2_set_recursion_memory_management_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_recursion_memory_management_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_recursion_memory_management_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_recursion_memory_management_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_recursion_memory_management_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_recursion_memory_management_8	pcre2_set_recursion_memory_management
declaration of pcre2_set_recursion_limit_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_recursion_limit_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_recursion_limit_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_recursion_limit_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_recursion_limit_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_recursion_limit_8	pcre2_set_recursion_limit
declaration of pcre2_set_offset_limit_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_offset_limit_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_offset_limit_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_offset_limit_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_offset_limit_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_offset_limit_8	pcre2_set_offset_limit
declaration of pcre2_set_match_limit_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_match_limit_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_match_limit_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_match_limit_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_match_limit_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_match_limit_8	pcre2_set_match_limit
declaration of pcre2_set_heap_limit_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_heap_limit_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_heap_limit_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_heap_limit_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_heap_limit_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_heap_limit_8	pcre2_set_heap_limit
declaration of pcre2_set_depth_limit_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_depth_limit_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_depth_limit_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_depth_limit_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_depth_limit_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_depth_limit_8	pcre2_set_depth_limit
declaration of pcre2_set_callout_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_callout_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_set_callout_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_callout_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_callout_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_callout_8	pcre2_set_callout
declaration of pcre2_match_context_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_free_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_match_context_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_free_8	pcre2_match_context_free
declaration of pcre2_match_context_create_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_create_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_match_context_create_8	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_create_8	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_create_8	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_create_8	pcre2_match_context_create
declaration of pcre2_match_context_copy_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_match_context_copy_8	PCRE2_MATCH_CONTEXT_FUNCTIONS
declaration of pcre2_match_context_copy_8	PCRE2_JOIN(a,b)
declaration of pcre2_match_context_copy_8	PCRE2_GLUE(a,b)
declaration of pcre2_match_context_copy_8	PCRE2_SUFFIX(a)
declaration of pcre2_match_context_copy_8	pcre2_match_context_copy
declaration of pcre2_converted_pattern_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_converted_pattern_free_8	PCRE2_CONVERT_FUNCTIONS
declaration of pcre2_converted_pattern_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_converted_pattern_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_converted_pattern_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_converted_pattern_free_8	pcre2_converted_pattern_free
declaration of pcre2_pattern_convert_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_pattern_convert_8	PCRE2_CONVERT_FUNCTIONS
declaration of pcre2_pattern_convert_8	PCRE2_JOIN(a,b)
declaration of pcre2_pattern_convert_8	PCRE2_GLUE(a,b)
declaration of pcre2_pattern_convert_8	PCRE2_SUFFIX(a)
declaration of pcre2_pattern_convert_8	pcre2_pattern_convert
declaration of pcre2_set_glob_separator_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_glob_separator_8	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_set_glob_separator_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_glob_separator_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_glob_separator_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_glob_separator_8	pcre2_set_glob_separator
declaration of pcre2_set_glob_escape_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_glob_escape_8	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_set_glob_escape_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_glob_escape_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_glob_escape_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_glob_escape_8	pcre2_set_glob_escape
declaration of pcre2_convert_context_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_free_8	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_convert_context_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_free_8	pcre2_convert_context_free
declaration of pcre2_convert_context_create_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_create_8	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_convert_context_create_8	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_create_8	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_create_8	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_create_8	pcre2_convert_context_create
declaration of pcre2_convert_context_copy_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_convert_context_copy_8	PCRE2_CONVERT_CONTEXT_FUNCTIONS
declaration of pcre2_convert_context_copy_8	PCRE2_JOIN(a,b)
declaration of pcre2_convert_context_copy_8	PCRE2_GLUE(a,b)
declaration of pcre2_convert_context_copy_8	PCRE2_SUFFIX(a)
declaration of pcre2_convert_context_copy_8	pcre2_convert_context_copy
declaration of pcre2_set_compile_recursion_guard_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_compile_recursion_guard_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_compile_recursion_guard_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_compile_recursion_guard_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_compile_recursion_guard_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_compile_recursion_guard_8	pcre2_set_compile_recursion_guard
declaration of pcre2_set_parens_nest_limit_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_parens_nest_limit_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_parens_nest_limit_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_parens_nest_limit_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_parens_nest_limit_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_parens_nest_limit_8	pcre2_set_parens_nest_limit
declaration of pcre2_set_newline_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_newline_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_newline_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_newline_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_newline_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_newline_8	pcre2_set_newline
declaration of pcre2_set_max_pattern_length_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_max_pattern_length_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_max_pattern_length_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_max_pattern_length_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_max_pattern_length_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_max_pattern_length_8	pcre2_set_max_pattern_length
declaration of pcre2_set_compile_extra_options_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_compile_extra_options_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_compile_extra_options_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_compile_extra_options_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_compile_extra_options_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_compile_extra_options_8	pcre2_set_compile_extra_options
declaration of pcre2_set_character_tables_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_character_tables_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_character_tables_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_character_tables_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_character_tables_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_character_tables_8	pcre2_set_character_tables
declaration of pcre2_set_bsr_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_set_bsr_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_set_bsr_8	PCRE2_JOIN(a,b)
declaration of pcre2_set_bsr_8	PCRE2_GLUE(a,b)
declaration of pcre2_set_bsr_8	PCRE2_SUFFIX(a)
declaration of pcre2_set_bsr_8	pcre2_set_bsr
declaration of pcre2_compile_context_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_free_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_compile_context_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_free_8	pcre2_compile_context_free
declaration of pcre2_compile_context_create_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_create_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_compile_context_create_8	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_create_8	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_create_8	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_create_8	pcre2_compile_context_create
declaration of pcre2_compile_context_copy_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_compile_context_copy_8	PCRE2_COMPILE_CONTEXT_FUNCTIONS
declaration of pcre2_compile_context_copy_8	PCRE2_JOIN(a,b)
declaration of pcre2_compile_context_copy_8	PCRE2_GLUE(a,b)
declaration of pcre2_compile_context_copy_8	PCRE2_SUFFIX(a)
declaration of pcre2_compile_context_copy_8	pcre2_compile_context_copy
declaration of pcre2_general_context_free_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_free_8	PCRE2_GENERAL_CONTEXT_FUNCTIONS
declaration of pcre2_general_context_free_8	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_free_8	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_free_8	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_free_8	pcre2_general_context_free
declaration of pcre2_general_context_create_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_create_8	PCRE2_GENERAL_CONTEXT_FUNCTIONS
declaration of pcre2_general_context_create_8	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_create_8	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_create_8	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_create_8	pcre2_general_context_create
declaration of pcre2_general_context_copy_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_general_context_copy_8	PCRE2_GENERAL_CONTEXT_FUNCTIONS
declaration of pcre2_general_context_copy_8	PCRE2_JOIN(a,b)
declaration of pcre2_general_context_copy_8	PCRE2_GLUE(a,b)
declaration of pcre2_general_context_copy_8	PCRE2_SUFFIX(a)
declaration of pcre2_general_context_copy_8	pcre2_general_context_copy
declaration of pcre2_config_8	PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS
declaration of pcre2_config_8	PCRE2_GENERAL_INFO_FUNCTIONS
declaration of pcre2_config_8	PCRE2_JOIN(a,b)
declaration of pcre2_config_8	PCRE2_GLUE(a,b)
declaration of pcre2_config_8	PCRE2_SUFFIX(a)
declaration of pcre2_config_8	pcre2_config
64976	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_BASE
64976	EXPAND_RESERVED_END
64976	WILDCARD_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_END
static_cast<wchar_t>...	WILDCARD_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
(int)...	EXPAND_RESERVED_END
(int)...	WILDCARD_RESERVED_BASE
16	EXPAND_RESERVED_END
16	WILDCARD_RESERVED_BASE
... + ...	EXPAND_RESERVED_END
... + ...	WILDCARD_RESERVED_BASE
(...)	EXPAND_RESERVED_END
(...)	WILDCARD_RESERVED_BASE
call to string_args_from_stdin	assert(expr)
streams_	assert(expr)
(reference dereference)	assert(expr)
(reference to)	assert(expr)
should not be reading from stdin	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"string_args_from_stdin(streams_) && ""should not be reading from stdin"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_string.cpp	assert(expr)
array to pointer conversion	assert(expr)
84	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool <unnamed>::arg_iterator_t::get_arg_stdin()	__ASSERT_FUNCTION
bool <unnamed>::arg_iterator_t::get_arg_stdin()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
128	STRING_CHUNK_SIZE
128	STRING_CHUNK_SIZE
(size_t)...	STRING_CHUNK_SIZE
call to c_str	BUILTIN_ERR_MISSING_SUBCMD
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_MISSING_SUBCMD
call to wgettext	_(wstr)
"%ls: Expected a subcommand to follow the command
"	BUILTIN_ERR_MISSING_SUBCMD
array to pointer conversion	BUILTIN_ERR_MISSING_SUBCMD
(reference dereference)	BUILTIN_ERR_MISSING_SUBCMD
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_INVALID_SUBCMD
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_INVALID_SUBCMD
call to wgettext	_(wstr)
"%ls: Subcommand '%ls' is not valid
"	BUILTIN_ERR_INVALID_SUBCMD
array to pointer conversion	BUILTIN_ERR_INVALID_SUBCMD
(reference dereference)	BUILTIN_ERR_INVALID_SUBCMD
(reference dereference)	_(wstr)
begin	assert(expr)
end	assert(expr)
... <= ...	assert(expr)
end	assert(expr)
call to size	assert(expr)
arg	assert(expr)
... <= ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
begin <= end && end <= arg->size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_string.cpp	assert(expr)
array to pointer conversion	assert(expr)
1393	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int string_trim(parser_t &, io_streams_t &, int, wchar_t **)	assert(expr)
int string_trim(parser_t &, io_streams_t &, int, wchar_t **)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
--end and --length are mutually exclusive	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
opts	assert(expr)
start	assert(expr)
9223372036854775807	assert(expr)
9223372036854775807	LONG_MIN
- ...	assert(expr)
- ...	LONG_MIN
1	assert(expr)
1	LONG_MIN
... - ...	assert(expr)
... - ...	LONG_MIN
(...)	assert(expr)
(...)	LONG_MIN
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
opts.start != LONG_MIN	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_string.cpp	assert(expr)
array to pointer conversion	assert(expr)
1329	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int string_sub(parser_t &, io_streams_t &, int, wchar_t **)	assert(expr)
int string_sub(parser_t &, io_streams_t &, int, wchar_t **)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
opts	assert(expr)
end	assert(expr)
9223372036854775807	assert(expr)
9223372036854775807	LONG_MIN
- ...	assert(expr)
- ...	LONG_MIN
1	assert(expr)
1	LONG_MIN
... - ...	assert(expr)
... - ...	LONG_MIN
(...)	assert(expr)
(...)	LONG_MIN
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
opts.end != LONG_MIN	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_string.cpp	assert(expr)
array to pointer conversion	assert(expr)
1345	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
9223372036854775807	LONG_MAX
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
--allow-empty is only valid with --fields	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_COMBO2
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_COMBO2
call to wgettext	_(wstr)
"%ls: Invalid combination of options,
%ls
"	BUILTIN_ERR_COMBO2
array to pointer conversion	BUILTIN_ERR_COMBO2
(reference dereference)	BUILTIN_ERR_COMBO2
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
--entire and --index are mutually exclusive	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to pcre2_get_error_message_32	PCRE2_JOIN(a,b)
call to pcre2_get_error_message_32	PCRE2_GLUE(a,b)
call to pcre2_get_error_message_32	PCRE2_SUFFIX(a)
call to pcre2_get_error_message_32	pcre2_get_error_message
call to __fish_assert	DIE(msg)
should never reach this statement	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_string.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
622	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
should never reach this statement	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_string.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
597	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_string.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
540	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	BUILTIN_ERR_ARG_COUNT0
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_ARG_COUNT0
call to wgettext	_(wstr)
"%ls: Expected an argument
"	BUILTIN_ERR_ARG_COUNT0
array to pointer conversion	BUILTIN_ERR_ARG_COUNT0
(reference dereference)	BUILTIN_ERR_ARG_COUNT0
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_MIN_ARG_COUNT1
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_MIN_ARG_COUNT1
call to wgettext	_(wstr)
"%ls: Expected at least %d args, got %d
"	BUILTIN_ERR_MIN_ARG_COUNT1
array to pointer conversion	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	BUILTIN_ERR_MIN_ARG_COUNT1
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to wgettext	_(wstr)
"%ls: Too many arguments
"	BUILTIN_ERR_TOO_MANY_ARGUMENTS
array to pointer conversion	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	_(wstr)
9223372036854775807	LONG_MIN
9223372036854775807	LONG_MAX
- ...	LONG_MIN
1	LONG_MIN
... - ...	LONG_MIN
(...)	LONG_MIN
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid start value '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid count value '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid max value '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
9223372036854775807	LONG_MIN
9223372036854775807	LONG_MAX
- ...	LONG_MIN
1	LONG_MIN
... - ...	LONG_MIN
(...)	LONG_MIN
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid length value '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid range value for field '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid range value for field '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid fields value '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
9223372036854775807	LONG_MIN
9223372036854775807	LONG_MAX
- ...	LONG_MIN
1	LONG_MIN
... - ...	LONG_MIN
(...)	LONG_MIN
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid end value '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	BUILTIN_ERR_NOT_NUMBER
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_NOT_NUMBER
call to wgettext	_(wstr)
"%ls: Argument '%ls' is not a valid integer
"	BUILTIN_ERR_NOT_NUMBER
array to pointer conversion	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	BUILTIN_ERR_NOT_NUMBER
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid escape style '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	BUILTIN_ERR_UNKNOWN
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_UNKNOWN
call to wgettext	_(wstr)
"%ls: Unknown option '%ls'
"	BUILTIN_ERR_UNKNOWN
array to pointer conversion	BUILTIN_ERR_UNKNOWN
(reference dereference)	BUILTIN_ERR_UNKNOWN
(reference dereference)	_(wstr)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
4096	PCRE2_SUBSTITUTE_OVERFLOW_LENGTH
512	PCRE2_SUBSTITUTE_EXTENDED
256	PCRE2_SUBSTITUTE_GLOBAL
output	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
output	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_string.cpp	assert(expr)
array to pointer conversion	assert(expr)
1064	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool regex_replacer_t::replace_matches(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
bool regex_replacer_t::replace_matches(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to pcre2_substitute_32	pcre2_substitute
call to pcre2_substitute_32	PCRE2_SUFFIX(a)
call to pcre2_substitute_32	PCRE2_GLUE(a,b)
call to pcre2_substitute_32	PCRE2_JOIN(a,b)
48	PCRE2_ERROR_NOMEMORY
- ...	PCRE2_ERROR_NOMEMORY
(...)	PCRE2_ERROR_NOMEMORY
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Regular expression substitute error: %ls
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to pcre2_match_32	pcre2_match
call to pcre2_match_32	PCRE2_SUFFIX(a)
call to pcre2_match_32	PCRE2_GLUE(a,b)
call to pcre2_match_32	PCRE2_JOIN(a,b)
call to pcre2_get_ovector_pointer_32	pcre2_get_ovector_pointer
call to pcre2_get_ovector_pointer_32	PCRE2_SUFFIX(a)
call to pcre2_get_ovector_pointer_32	PCRE2_GLUE(a,b)
call to pcre2_get_ovector_pointer_32	PCRE2_JOIN(a,b)
8	PCRE2_NOTEMPTY_ATSTART
2147483648	PCRE2_ANCHORED
call to pcre2_match_32	pcre2_match
call to pcre2_match_32	PCRE2_SUFFIX(a)
call to pcre2_match_32	PCRE2_GLUE(a,b)
call to pcre2_match_32	PCRE2_JOIN(a,b)
1	PCRE2_ERROR_NOMATCH
- ...	PCRE2_ERROR_NOMATCH
(...)	PCRE2_ERROR_NOMATCH
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Regular expression match error: %ls
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Regular expression internal error
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to pcre2_get_ovector_pointer_32	pcre2_get_ovector_pointer
call to pcre2_get_ovector_pointer_32	PCRE2_SUFFIX(a)
call to pcre2_get_ovector_pointer_32	PCRE2_GLUE(a,b)
call to pcre2_get_ovector_pointer_32	PCRE2_JOIN(a,b)
0	PCRE2_UNSET
(size_t)...	PCRE2_UNSET
~ ...	PCRE2_UNSET
(...)	PCRE2_UNSET
0	PCRE2_UNSET
(size_t)...	PCRE2_UNSET
~ ...	PCRE2_UNSET
(...)	PCRE2_UNSET
call to pcre2_match_data_free_32	PCRE2_JOIN(a,b)
call to pcre2_match_data_free_32	PCRE2_GLUE(a,b)
call to pcre2_match_data_free_32	PCRE2_SUFFIX(a)
call to pcre2_match_data_free_32	pcre2_match_data_free
call to pcre2_code_free_32	PCRE2_JOIN(a,b)
call to pcre2_code_free_32	PCRE2_GLUE(a,b)
call to pcre2_code_free_32	PCRE2_SUFFIX(a)
call to pcre2_code_free_32	pcre2_code_free
call to pcre2_compile_32	pcre2_compile
call to pcre2_compile_32	PCRE2_SUFFIX(a)
call to pcre2_compile_32	PCRE2_GLUE(a,b)
call to pcre2_compile_32	PCRE2_JOIN(a,b)
8	PCRE2_CASELESS
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Regular expression compile error: %ls
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to pcre2_match_data_create_from_pattern_32	pcre2_match_data_create_from_pattern
call to pcre2_match_data_create_from_pattern_32	PCRE2_SUFFIX(a)
call to pcre2_match_data_create_from_pattern_32	PCRE2_GLUE(a,b)
call to pcre2_match_data_create_from_pattern_32	PCRE2_JOIN(a,b)
match	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
match	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_string.cpp	assert(expr)
array to pointer conversion	assert(expr)
783	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
compiled_regex_t::compiled_regex_t(const wchar_t *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool, io_streams_t &)	__ASSERT_FUNCTION
compiled_regex_t::compiled_regex_t(const wchar_t *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool, io_streams_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	no_argument
1	required_argument
1	required_argument
0	no_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
1	required_argument
0	no_argument
1	required_argument
0	no_argument
1	__try
0	__catch(X)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = unsigned long]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = unsigned long]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
basic_string::_M_construct null not valid	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
Unknown literal	_GLIBCXX_MOVE(__val)
this	_GLIBCXX_MOVE(__val)
_M_impl	_GLIBCXX_MOVE(__val)
_M_finish	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
buf	S_ISBLK(mode)
st_mode	S_ISBLK(mode)
(...)	S_ISBLK(mode)
(...)	S_ISBLK(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISBLK(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISBLK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISBLK(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISBLK(mode)
(...)	__S_ISTYPE(mode,mask)
24576	S_ISBLK(mode)
24576	__S_IFBLK
(...)	S_ISBLK(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISBLK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISBLK(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISBLK(mode)
(...)	__S_ISTYPE(mode,mask)
buf	S_ISCHR(mode)
st_mode	S_ISCHR(mode)
(...)	S_ISCHR(mode)
(...)	S_ISCHR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISCHR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISCHR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISCHR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISCHR(mode)
(...)	__S_ISTYPE(mode,mask)
8192	S_ISCHR(mode)
8192	__S_IFCHR
(...)	S_ISCHR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISCHR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISCHR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISCHR(mode)
(...)	__S_ISTYPE(mode,mask)
buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
buf	S_ISREG(mode)
st_mode	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISREG(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISREG(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
32768	S_ISREG(mode)
32768	__S_IFREG
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISREG(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
1024	S_ISGID
1024	__S_ISGID
(unsigned int)...	S_ISGID
(unsigned int)...	__S_ISGID
buf	S_ISLNK(mode)
st_mode	S_ISLNK(mode)
(...)	S_ISLNK(mode)
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISLNK(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISLNK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISLNK(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
40960	S_ISLNK(mode)
40960	__S_IFLNK
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISLNK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISLNK(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
512	S_ISVTX
512	__S_ISVTX
(unsigned int)...	S_ISVTX
(unsigned int)...	__S_ISVTX
buf	S_ISFIFO(mode)
st_mode	S_ISFIFO(mode)
(...)	S_ISFIFO(mode)
(...)	S_ISFIFO(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISFIFO(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISFIFO(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISFIFO(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISFIFO(mode)
(...)	__S_ISTYPE(mode,mask)
4096	S_ISFIFO(mode)
4096	__S_IFIFO
(...)	S_ISFIFO(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISFIFO(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISFIFO(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISFIFO(mode)
(...)	__S_ISTYPE(mode,mask)
buf	S_ISSOCK(mode)
st_mode	S_ISSOCK(mode)
(...)	S_ISSOCK(mode)
(...)	S_ISSOCK(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISSOCK(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISSOCK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISSOCK(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISSOCK(mode)
(...)	__S_ISTYPE(mode,mask)
49152	S_ISSOCK(mode)
49152	__S_IFSOCK
(...)	S_ISSOCK(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISSOCK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISSOCK(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISSOCK(mode)
(...)	__S_ISTYPE(mode,mask)
4	R_OK
2048	S_ISUID
2048	__S_ISUID
(unsigned int)...	S_ISUID
(unsigned int)...	__S_ISUID
2	W_OK
1	X_OK
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
Integer %lld in '%ls' followed by non-digit	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to basic_string	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Not a number	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
(reference to)	_(wstr)
call to basic_string	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Number is infinite	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
(reference to)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to empty	assert(expr)
subjects	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!subjects.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
618	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool <unnamed>::test_expressions::combining_expression::evaluate(std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &)	assert(expr)
bool <unnamed>::test_expressions::combining_expression::evaluate(std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
combiners	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... + ...	assert(expr)
call to size	assert(expr)
subjects	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
combiners.size() + 1 == subjects.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
619	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
subjects	assert(expr)
call to size	assert(expr)
combiners	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... + ...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
subjects.size() == combiners.size() + 1	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
273	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
<unnamed>::test_expressions::combining_expression::combining_expression(<unnamed>::test_expressions::token_t, <unnamed>::test_expressions::range_t, std::vector<std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>>, std::allocator<std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>>>>, std::vector<<unnamed>::test_expressions::token_t, std::allocator<<unnamed>::test_expressions::token_t>>)	__ASSERT_FUNCTION
<unnamed>::test_expressions::combining_expression::combining_expression(<unnamed>::test_expressions::token_t, <unnamed>::test_expressions::range_t, std::vector<std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>>, std::allocator<std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>>>>, std::vector<<unnamed>::test_expressions::token_t, std::allocator<<unnamed>::test_expressions::token_t>>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to get	assert(expr)
subject	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
subject.get()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
608	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool <unnamed>::test_expressions::unary_operator::evaluate(std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &)	assert(expr)
bool <unnamed>::test_expressions::unary_operator::evaluate(std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
args	assert(expr)
(reference dereference)	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
args.size() > 1	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
550	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
static std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::parse_args(const std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, wchar_t *)	__ASSERT_FUNCTION
static std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::parse_args(const std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, wchar_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator->	assert(expr)
result	assert(expr)
(const unique_ptr<expression, default_delete<expression>>)...	assert(expr)
range	assert(expr)
end	assert(expr)
(unsigned long)...	assert(expr)
call to size	assert(expr)
args	assert(expr)
(reference dereference)	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
result->range.end <= args.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
584	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
close_index	assert(expr)
end	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
close_index <= end	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
447	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::parse_parenthentical(unsigned int, unsigned int)	__ASSERT_FUNCTION
std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::parse_parenthentical(unsigned int, unsigned int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
end	assert(expr)
start	assert(expr)
... - ...	assert(expr)
4	assert(expr)
(unsigned int)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
end - start == 4	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
501	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::parse_4_arg_expression(unsigned int, unsigned int)	__ASSERT_FUNCTION
std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::parse_4_arg_expression(unsigned int, unsigned int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
end	assert(expr)
start	assert(expr)
... - ...	assert(expr)
3	assert(expr)
(unsigned int)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
end - start == 3	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
476	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::parse_3_arg_expression(unsigned int, unsigned int)	__ASSERT_FUNCTION
std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::parse_3_arg_expression(unsigned int, unsigned int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
argc should not be zero	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_test.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
527	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
fmt	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
fmt != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
292	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void <unnamed>::test_expressions::test_parser::add_error(unsigned int, const wchar_t *, ...)	__ASSERT_FUNCTION
void <unnamed>::test_expressions::test_parser::add_error(unsigned int, const wchar_t *, ...)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
fmt	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
fmt != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
303	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::error(unsigned int, const wchar_t *, ...)	__ASSERT_FUNCTION
std::unique_ptr<<unnamed>::test_expressions::expression, std::default_delete<<unnamed>::test_expressions::expression>> <unnamed>::test_expressions::test_parser::error(unsigned int, const wchar_t *, ...)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
2147483647	INT_MAX
(long long)...	INT_MAX
2147483647	INT_MIN
2147483647	INT_MAX
- ...	INT_MIN
1	INT_MIN
... - ...	INT_MIN
(...)	INT_MIN
(long long)...	INT_MIN
0.0	assert(expr)
delta	assert(expr)
... <= ...	assert(expr)
delta	assert(expr)
1.0	assert(expr)
... < ...	assert(expr)
... && ...	assert(expr)
Invalid delta	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"0.0 <= delta && delta < 1.0 && ""Invalid delta"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/builtin_test.cpp	assert(expr)
array to pointer conversion	assert(expr)
93	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
<unnamed>::test_expressions::number_t::number_t(long long, double)	__ASSERT_FUNCTION
<unnamed>::test_expressions::number_t::number_t(long long, double)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
this	_GLIBCXX_MOVE(__val)
(_Vector_base<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>> *)...	_GLIBCXX_MOVE(__val)
_M_impl	_GLIBCXX_MOVE(__val)
(_Vector_impl_data)...	_GLIBCXX_MOVE(__val)
_M_finish	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__x	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
RLIMIT_FSIZE	RLIMIT_FSIZE
(int)...	RLIMIT_FSIZE
RLIMIT_CORE	RLIMIT_CORE
(int)...	RLIMIT_CORE
RLIMIT_DATA	RLIMIT_DATA
(int)...	RLIMIT_DATA
RLIMIT_FSIZE	RLIMIT_FSIZE
(int)...	RLIMIT_FSIZE
__RLIMIT_MEMLOCK	RLIMIT_MEMLOCK
(int)...	RLIMIT_MEMLOCK
__RLIMIT_RSS	RLIMIT_RSS
(int)...	RLIMIT_RSS
RLIMIT_NOFILE	RLIMIT_NOFILE
(int)...	RLIMIT_NOFILE
RLIMIT_STACK	RLIMIT_STACK
(int)...	RLIMIT_STACK
RLIMIT_CPU	RLIMIT_CPU
(int)...	RLIMIT_CPU
__RLIMIT_NPROC	RLIMIT_NPROC
(int)...	RLIMIT_NPROC
RLIMIT_AS	RLIMIT_AS
(int)...	RLIMIT_AS
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_ulimit.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
255	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_TOO_MANY_ARGUMENTS
call to wgettext	_(wstr)
"%ls: Too many arguments
"	BUILTIN_ERR_TOO_MANY_ARGUMENTS
array to pointer conversion	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	BUILTIN_ERR_TOO_MANY_ARGUMENTS
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: New limit cannot be an empty string
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
1	RLIM_INFINITY
- ...	RLIM_INFINITY
(__rlim_t)...	RLIM_INFINITY
(...)	RLIM_INFINITY
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid limit '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	RLIM_INFINITY
- ...	RLIM_INFINITY
(__rlim_t)...	RLIM_INFINITY
(...)	RLIM_INFINITY
1	RLIM_INFINITY
- ...	RLIM_INFINITY
(__rlim_t)...	RLIM_INFINITY
(...)	RLIM_INFINITY
1	RLIM_INFINITY
- ...	RLIM_INFINITY
(__rlim_t)...	RLIM_INFINITY
(...)	RLIM_INFINITY
1	RLIM_INFINITY
- ...	RLIM_INFINITY
(__rlim_t)...	RLIM_INFINITY
(...)	RLIM_INFINITY
call to __errno_location	errno
* ...	errno
(...)	errno
1	EPERM
RLIMIT_CPU	RLIMIT_CPU
(int)...	RLIMIT_CPU
1	RLIM_INFINITY
- ...	RLIM_INFINITY
(__rlim_t)...	RLIM_INFINITY
(...)	RLIM_INFINITY
1	RLIM_INFINITY
- ...	RLIM_INFINITY
(__rlim_t)...	RLIM_INFINITY
(...)	RLIM_INFINITY
RLIMIT_CORE	RLIMIT_CORE
(int)...	RLIMIT_CORE
RLIMIT_DATA	RLIMIT_DATA
(int)...	RLIMIT_DATA
RLIMIT_FSIZE	RLIMIT_FSIZE
(int)...	RLIMIT_FSIZE
__RLIMIT_MEMLOCK	RLIMIT_MEMLOCK
(int)...	RLIMIT_MEMLOCK
__RLIMIT_RSS	RLIMIT_RSS
(int)...	RLIMIT_RSS
RLIMIT_NOFILE	RLIMIT_NOFILE
(int)...	RLIMIT_NOFILE
RLIMIT_STACK	RLIMIT_STACK
(int)...	RLIMIT_STACK
RLIMIT_CPU	RLIMIT_CPU
(int)...	RLIMIT_CPU
__RLIMIT_NPROC	RLIMIT_NPROC
(int)...	RLIMIT_NPROC
RLIMIT_AS	RLIMIT_AS
(int)...	RLIMIT_AS
128	__SI_MAX_SIZE
128	__SI_PAD_SIZE
(unsigned long)...	__SI_MAX_SIZE
(unsigned long)...	__SI_PAD_SIZE
sizeof(int)	__SI_PAD_SIZE
... / ...	__SI_PAD_SIZE
(...)	__SI_PAD_SIZE
4	__SI_PAD_SIZE
(unsigned long)...	__SI_PAD_SIZE
... - ...	__SI_PAD_SIZE
(...)	__SI_PAD_SIZE
64	__SIGEV_MAX_SIZE
64	__SIGEV_PAD_SIZE
(unsigned long)...	__SIGEV_MAX_SIZE
(unsigned long)...	__SIGEV_PAD_SIZE
sizeof(int)	__SIGEV_PAD_SIZE
... / ...	__SIGEV_PAD_SIZE
(...)	__SIGEV_PAD_SIZE
4	__SIGEV_PAD_SIZE
(unsigned long)...	__SIGEV_PAD_SIZE
... - ...	__SIGEV_PAD_SIZE
(...)	__SIGEV_PAD_SIZE
23	__NGREG
(unsigned long)...	__NGREG
4	__SIZEOF_PTHREAD_BARRIERATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIERATTR_T
32	__SIZEOF_PTHREAD_BARRIER_T
(unsigned long)...	__SIZEOF_PTHREAD_BARRIER_T
8	__SIZEOF_PTHREAD_RWLOCKATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCKATTR_T
56	__SIZEOF_PTHREAD_RWLOCK_T
(unsigned long)...	__SIZEOF_PTHREAD_RWLOCK_T
4	__SIZEOF_PTHREAD_CONDATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_CONDATTR_T
4	__SIZEOF_PTHREAD_MUTEXATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEXATTR_T
56	__SIZEOF_PTHREAD_ATTR_T
(unsigned long)...	__SIZEOF_PTHREAD_ATTR_T
48	__SIZEOF_PTHREAD_COND_T
(unsigned long)...	__SIZEOF_PTHREAD_COND_T
40	__SIZEOF_PTHREAD_MUTEX_T
(unsigned long)...	__SIZEOF_PTHREAD_MUTEX_T
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
call to normal_exited	assert(expr)
Process is not normal exited	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"normal_exited() && ""Process is not normal exited"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.h	assert(expr)
array to pointer conversion	assert(expr)
105	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int proc_status_t::exit_code() const	__ASSERT_FUNCTION
int proc_status_t::exit_code() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
status_	WEXITSTATUS(status)
(...)	WEXITSTATUS(status)
(...)	__WEXITSTATUS(status)
65280	WEXITSTATUS(status)
65280	__WEXITSTATUS(status)
... & ...	WEXITSTATUS(status)
... & ...	__WEXITSTATUS(status)
(...)	WEXITSTATUS(status)
(...)	__WEXITSTATUS(status)
8	WEXITSTATUS(status)
8	__WEXITSTATUS(status)
... >> ...	WEXITSTATUS(status)
... >> ...	__WEXITSTATUS(status)
(...)	WEXITSTATUS(status)
(...)	__WEXITSTATUS(status)
call to signal_exited	assert(expr)
Process is not signal exited	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"signal_exited() && ""Process is not signal exited"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.h	assert(expr)
array to pointer conversion	assert(expr)
99	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int proc_status_t::signal_code() const	__ASSERT_FUNCTION
int proc_status_t::signal_code() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
status_	WTERMSIG(status)
(...)	WTERMSIG(status)
(...)	__WTERMSIG(status)
127	WTERMSIG(status)
127	__WTERMSIG(status)
... & ...	WTERMSIG(status)
... & ...	__WTERMSIG(status)
(...)	WTERMSIG(status)
(...)	__WTERMSIG(status)
status_	WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
127	WIFSIGNALED(status)
127	__WIFSIGNALED(status)
... & ...	WIFSIGNALED(status)
... & ...	__WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
1	WIFSIGNALED(status)
1	__WIFSIGNALED(status)
... + ...	WIFSIGNALED(status)
... + ...	__WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
(signed char)...	WIFSIGNALED(status)
(signed char)...	__WIFSIGNALED(status)
(int)...	WIFSIGNALED(status)
(int)...	__WIFSIGNALED(status)
1	WIFSIGNALED(status)
1	__WIFSIGNALED(status)
... >> ...	WIFSIGNALED(status)
... >> ...	__WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
0	WIFSIGNALED(status)
0	__WIFSIGNALED(status)
... > ...	WIFSIGNALED(status)
... > ...	__WIFSIGNALED(status)
(...)	WIFSIGNALED(status)
(...)	__WIFSIGNALED(status)
status_	WIFEXITED(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
(...)	__WTERMSIG(status)
127	WIFEXITED(status)
127	__WIFEXITED(status)
127	__WTERMSIG(status)
... & ...	WIFEXITED(status)
... & ...	__WIFEXITED(status)
... & ...	__WTERMSIG(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
(...)	__WTERMSIG(status)
0	WIFEXITED(status)
0	__WIFEXITED(status)
... == ...	WIFEXITED(status)
... == ...	__WIFEXITED(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
status_	WIFCONTINUED(status)
(...)	WIFCONTINUED(status)
(...)	__WIFCONTINUED(status)
65535	WIFCONTINUED(status)
65535	__WIFCONTINUED(status)
65535	__W_CONTINUED
... == ...	WIFCONTINUED(status)
... == ...	__WIFCONTINUED(status)
(...)	WIFCONTINUED(status)
(...)	__WIFCONTINUED(status)
status_	WIFSTOPPED(status)
(...)	WIFSTOPPED(status)
(...)	__WIFSTOPPED(status)
255	WIFSTOPPED(status)
255	__WIFSTOPPED(status)
... & ...	WIFSTOPPED(status)
... & ...	__WIFSTOPPED(status)
(...)	WIFSTOPPED(status)
(...)	__WIFSTOPPED(status)
127	WIFSTOPPED(status)
127	__WIFSTOPPED(status)
... == ...	WIFSTOPPED(status)
... == ...	__WIFSTOPPED(status)
(...)	WIFSTOPPED(status)
(...)	__WIFSTOPPED(status)
zerocode	WIFEXITED(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
(...)	__WTERMSIG(status)
127	WIFEXITED(status)
127	__WIFEXITED(status)
127	__WTERMSIG(status)
... & ...	WIFEXITED(status)
... & ...	__WIFEXITED(status)
... & ...	__WTERMSIG(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
(...)	__WTERMSIG(status)
0	WIFEXITED(status)
0	__WIFEXITED(status)
... == ...	WIFEXITED(status)
... == ...	__WIFEXITED(status)
(...)	WIFEXITED(status)
(...)	__WIFEXITED(status)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
builtin_wait	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to __fish_assert	DIE(msg)
unexpected retval from wgetopt_long	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/builtin_wait.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
207	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: '%ls' is not a valid process id
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Could not find a job with process id '%d'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Could not find child processes with the name '%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	no_argument
0	no_argument
2	SIGINT
2	SIGINT
1	__try
0	__catch(X)
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
type	assert(e)
type_rgb	assert(e)
(int)...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
type == type_rgb	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/color.cpp	assert(e)
array to pointer conversion	assert(e)
334	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
type	assert(e)
type_rgb	assert(e)
(int)...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
type == type_rgb	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/color.cpp	assert(e)
array to pointer conversion	assert(e)
329	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
type	assert(e)
type_named	assert(e)
(int)...	assert(e)
... == ...	assert(e)
type	assert(e)
type_rgb	assert(e)
(int)...	assert(e)
... == ...	assert(e)
... || ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
type == type_named || type == type_rgb	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/color.cpp	assert(e)
array to pointer conversion	assert(e)
340	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to __fish_assert	DIE(msg)
unknown color type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/color.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
386	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
32	NCCS
(unsigned long)...	NCCS
__ISwupper	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwupper	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwlower	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalpha	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwxdigit	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwspace	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwprint	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwgraph	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwblank	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwcntrl	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwpunct	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
8	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
16	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
24	_ISwbit(bit)
... < ...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
8	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
1	_ISwbit(bit)
__ISwalnum	_ISwbit(bit)
... << ...	_ISwbit(bit)
(...)	_ISwbit(bit)
24	_ISwbit(bit)
... >> ...	_ISwbit(bit)
(...)	_ISwbit(bit)
(int)...	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
... ? ... : ...	_ISwbit(bit)
(...)	_ISwbit(bit)
65	_UTSNAME_LENGTH
65	_UTSNAME_DOMAIN_LENGTH
(unsigned long)...	_UTSNAME_LENGTH
(unsigned long)...	_UTSNAME_DOMAIN_LENGTH
65	_UTSNAME_LENGTH
65	_UTSNAME_MACHINE_LENGTH
(unsigned long)...	_UTSNAME_LENGTH
(unsigned long)...	_UTSNAME_MACHINE_LENGTH
65	_UTSNAME_LENGTH
65	_UTSNAME_VERSION_LENGTH
(unsigned long)...	_UTSNAME_LENGTH
(unsigned long)...	_UTSNAME_VERSION_LENGTH
65	_UTSNAME_LENGTH
65	_UTSNAME_RELEASE_LENGTH
(unsigned long)...	_UTSNAME_LENGTH
(unsigned long)...	_UTSNAME_RELEASE_LENGTH
65	_UTSNAME_LENGTH
65	_UTSNAME_NODENAME_LENGTH
(unsigned long)...	_UTSNAME_LENGTH
(unsigned long)...	_UTSNAME_NODENAME_LENGTH
65	_UTSNAME_LENGTH
65	_UTSNAME_SYSNAME_LENGTH
(unsigned long)...	_UTSNAME_LENGTH
(unsigned long)...	_UTSNAME_SYSNAME_LENGTH
Unknown literal	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
_M_pred	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
4294967295	WEOF
(...)	WEOF
64976	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
operator()	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
65	_UTSNAME_LENGTH
65	_UTSNAME_RELEASE_LENGTH
(unsigned long)...	_UTSNAME_LENGTH
(unsigned long)...	_UTSNAME_RELEASE_LENGTH
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
This version of WSL has known bugs that prevent fish from working.Please upgrade to Windows 10 1809 (17763) or higher to use fish!	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
/tmp	P_tmpdir
array to pointer conversion	P_tmpdir
4096	PATH_MAX
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%s:%zu: failed assertion: %s: errno %d (%s)	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
file	FLOGF(wht,__VA_ARGS__...)
line	FLOGF(wht,__VA_ARGS__...)
msg	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
call to strerror	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%s:%zu: failed assertion: %s	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
file	FLOGF(wht,__VA_ARGS__...)
line	FLOGF(wht,__VA_ARGS__...)
msg	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
1	O_WRONLY
call to __errno_location	errno
* ...	errno
(...)	errno
0	STDIN_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
0	STDIN_FILENO
1	STDOUT_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
1	STDOUT_FILENO
2	STDERR_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
2	STDERR_FILENO
64976	RESERVED_CHAR_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
(int)...	RESERVED_CHAR_BASE
65008	RESERVED_CHAR_END
static_cast<wchar_t>...	RESERVED_CHAR_END
(int)...	RESERVED_CHAR_END
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_END
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_END
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_END
(int)...	ENCODE_DIRECT_BASE
256	ENCODE_DIRECT_END
... + ...	ENCODE_DIRECT_END
(...)	ENCODE_DIRECT_END
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%s is not locked when it should be in '%s'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
who	FLOGF(wht,__VA_ARGS__...)
caller	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Break on debug_thread_error to debug.	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%s called on the main thread (may block!).	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
who	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Break on debug_thread_error to debug.	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%s called in a forked child.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
who	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Break on debug_thread_error to debug.	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%s called off of main thread.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
who	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Break on debug_thread_error to debug.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
22	SIGTTOU
0	SIG_DFL
(__sighandler_t)...	SIG_DFL
(...)	SIG_DFL
0	STDIN_FILENO
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
save_term_foreground_process_group	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	STDIN_FILENO
tid	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... == ...	assert(expr)
main thread should have thread ID 1	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"tid == 1 && ""main thread should have thread ID 1"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1964	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void set_main_thread()	__ASSERT_FUNCTION
void set_main_thread()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
fd	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
Invalid fd	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"fd >= 0 && ""Invalid fd"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1943	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void exec_close(int)	__ASSERT_FUNCTION
void exec_close(int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
call to gettimeofday	assert_with_errno(e)
tv	assert_with_errno(e)
& ...	assert_with_errno(e)
0	assert_with_errno(e)
(timezone *)...	assert_with_errno(e)
1	assert_with_errno(e)
- ...	assert_with_errno(e)
... != ...	assert_with_errno(e)
(...)	assert_with_errno(e)
0	assert_with_errno(e)
(void)...	assert_with_errno(e)
(...)	assert_with_errno(e)
call to __fish_assert	assert_with_errno(e)
gettimeofday(&tv, nullptr) != -1	assert_with_errno(e)
array to pointer conversion	assert_with_errno(e)
/opt/src/src/common.cpp	assert_with_errno(e)
array to pointer conversion	assert_with_errno(e)
1929	assert_with_errno(e)
(size_t)...	assert_with_errno(e)
call to __errno_location	errno
call to __errno_location	assert_with_errno(e)
* ...	errno
* ...	assert_with_errno(e)
(...)	errno
(...)	assert_with_errno(e)
... ? ... : ...	assert_with_errno(e)
call to c_str	_(wstr)
call to wgettext	_(wstr)
empty	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOG(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOG(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOG(wht,__VA_ARGS__...)
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to c_str	FLOG(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOG(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
This is a bug. Break on 'bugreport' to debug.	FLOG(wht,__VA_ARGS__...)
array to pointer conversion	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	_(wstr)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOG(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOG(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOG(wht,__VA_ARGS__...)
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to c_str	FLOG(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOG(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
If you can reproduce it, please report: 	FLOG(wht,__VA_ARGS__...)
array to pointer conversion	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	_(wstr)
https://github.com/fish-shell/fish-shell/issues	FLOG(wht,__VA_ARGS__...)
https://github.com/fish-shell/fish-shell/issues	PACKAGE_BUGREPORT
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	PACKAGE_BUGREPORT
46	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
call to size	assert(expr)
match_against	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
string	assert(expr)
(reference dereference)	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
match_against.size() >= string.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1779	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
string_fuzzy_match_t string_fuzzy_match_string(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, fuzzy_match_type_t)	assert(expr)
string_fuzzy_match_t string_fuzzy_match_string(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, fuzzy_match_type_t)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
match_against	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
string	assert(expr)
(reference dereference)	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
match_against.size() >= string.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1787	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
match_against	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
string	assert(expr)
(reference dereference)	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
match_against.size() >= string.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1793	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
match_against	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
string	assert(expr)
(reference dereference)	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
match_against.size() >= string.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1800	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
match_against	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
string	assert(expr)
(reference dereference)	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
match_against.size() >= string.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1806	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
seq_idx	assert(expr)
call to size	assert(expr)
seq	assert(expr)
(reference dereference)	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
seq_idx <= seq.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1761	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool subsequence_in_string(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
bool subsequence_in_string(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
str	assert(expr)
0	assert(expr)
(wcstring *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
str != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1676	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool unescape_string_in_place(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, unsigned int)	__ASSERT_FUNCTION
bool unescape_string_in_place(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, unsigned int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator*	assert(expr)
escape_chars	assert(expr)
(reference dereference)	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
*escape_chars > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1454	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool unescape_string_internal(const wchar_t *, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, unsigned int)	assert(expr)
bool unescape_string_internal(const wchar_t *, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, unsigned int)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
%self	PROCESS_EXPAND_SELF_STR
array to pointer conversion	PROCESS_EXPAND_SELF_STR
5	PROCESS_EXPAND_SELF_STR_LEN
call to empty	assert(expr)
result	assert(expr)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!result.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1484	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
input	assert(expr)
0	assert(expr)
access to array	assert(expr)
(int)...	assert(expr)
92	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
Not an escape	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"input[0] == L'\\' && ""Not an escape"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1244	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
maybe_t<unsigned long> read_unquoted_escape(const wchar_t *, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, bool, bool)	__ASSERT_FUNCTION
maybe_t<unsigned long> read_unquoted_escape(const wchar_t *, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, bool, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
in_pos	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
in_pos > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1258	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
127	ASCII_MAX
(wchar_t)...	ASCII_MAX
65535	UCS2_MAX
(wchar_t)...	UCS2_MAX
2147483647	WCHAR_MAX
2147483647	__WCHAR_MAX
(wchar_t)...	WCHAR_MAX
(wchar_t)...	__WCHAR_MAX
127	ASCII_MAX
(wchar_t)...	ASCII_MAX
255	BYTE_MAX
(wchar_t)...	BYTE_MAX
in_pos	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
in_pos > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1313	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
case ...:	TEST(x)
HOME_DIRECTORY	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
HOME_DIRECTORY	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
VARIABLE_EXPAND	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
VARIABLE_EXPAND	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
VARIABLE_EXPAND_SINGLE	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
VARIABLE_EXPAND_SINGLE	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
BRACE_BEGIN	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
BRACE_BEGIN	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
BRACE_END	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
BRACE_END	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
BRACE_SEP	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
BRACE_SEP	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
BRACE_SPACE	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
BRACE_SPACE	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
INTERNAL_SEPARATOR	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
INTERNAL_SEPARATOR	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
VARIABLE_EXPAND_EMPTY	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
VARIABLE_EXPAND_EMPTY	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
EXPAND_SENTINEL	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
EXPAND_SENTINEL	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
ANY_CHAR	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
ANY_CHAR	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
ANY_STRING	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
ANY_STRING	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
ANY_STRING_RECURSIVE	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
ANY_STRING_RECURSIVE	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
case ...:	TEST(x)
ANY_SENTINEL	TEST(x)
(int)...	TEST(x)
ExprStmt	TEST(x)
call to append_format	TEST(x)
result	TEST(x)
(reference to)	TEST(x)
<%s>	TEST(x)
array to pointer conversion	TEST(x)
ANY_SENTINEL	TEST(x)
array to pointer conversion	TEST(x)
break;	TEST(x)
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
idx	assert(expr)
size	assert(expr)
... <= ...	assert(expr)
Buffer overflowed	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"idx <= size && ""Buffer overflowed"""	assert(expr)
/opt/src/src/common.cpp	assert(expr)
728	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to write	ignore_result(x)
2	ignore_result(x)
2	STDERR_FILENO
cursor	ignore_result(x)
(const void *)...	ignore_result(x)
end	ignore_result(x)
cursor	ignore_result(x)
... - ...	ignore_result(x)
(size_t)...	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
param_idx	assert(expr)
sizeof(<expr>)	assert(expr)
params	assert(expr)
sizeof(<expr>)	assert(expr)
params	assert(expr)
array to pointer conversion	assert(expr)
* ...	assert(expr)
... / ...	assert(expr)
... < ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
param_idx < sizeof params / sizeof *params	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
687	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void debug_safe(int, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *)	assert(expr)
void debug_safe(int, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *, const char *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to write	ignore_result(x)
2	ignore_result(x)
2	STDERR_FILENO
format	ignore_result(x)
(const void *)...	ignore_result(x)
call to strlen	ignore_result(x)
format	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to write	ignore_result(x)
2	ignore_result(x)
2	STDERR_FILENO
"
"	ignore_result(x)
array to pointer conversion	ignore_result(x)
(const void *)...	ignore_result(x)
1	ignore_result(x)
(size_t)...	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
msg	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
msg	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
call to __errno_location	errno
* ...	errno
(...)	errno
stderr	stderr
stderr	stderr
(ignore)	TESTS_PROGRAM_NAME
array to pointer conversion	TESTS_PROGRAM_NAME
call to __errno_location	errno
* ...	errno
(...)	errno
11	EAGAIN
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
call to __errno_location	errno
* ...	errno
(...)	errno
11	EAGAIN
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
call to __errno_location	errno
* ...	errno
(...)	errno
11	EAGAIN
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
format	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
call to __errno_location	errno
* ...	errno
(...)	errno
buff	assert(expr)
0	assert(expr)
(wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
buff != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
482	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void append_formatv(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const wchar_t *, __va_list_tag *)	assert(expr)
void append_formatv(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const wchar_t *, __va_list_tag *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
va	va_copy(d,s)
array to pointer conversion	va_copy(d,s)
va_orig	va_copy(d,s)
__builtin_va_copy	va_copy(d,s)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
call to __errno_location	errno
* ...	errno
(...)	errno
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
format	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
16	MB_LEN_MAX
in	assert(expr)
(bool)...	assert(expr)
out	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
in and out must not be null	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"in && out && ""in and out must not be null"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
404	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
char *wcs2str_internal(const wchar_t *, char *)	__ASSERT_FUNCTION
char *wcs2str_internal(const wchar_t *, char *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
call to __ctype_get_mb_cur_max	MB_CUR_MAX
(...)	MB_CUR_MAX
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
char_encoding	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
char_encoding	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Wide character U+%4X has no narrow representation	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
in	FLOGF(wht,__VA_ARGS__...)
in_pos	FLOGF(wht,__VA_ARGS__...)
access to array	FLOGF(wht,__VA_ARGS__...)
(int)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
16	MB_LEN_MAX
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
call to __ctype_get_mb_cur_max	MB_CUR_MAX
(...)	MB_CUR_MAX
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
char_encoding	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
char_encoding	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Wide character U+%4X has no narrow representation	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
wc	FLOGF(wht,__VA_ARGS__...)
(int)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
6	MAX_UTF8_BYTES
(unsigned long)...	MAX_UTF8_BYTES
result	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
result	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
346	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
char *wcs2str(const wchar_t *, unsigned long)	assert(expr)
char *wcs2str(const wchar_t *, unsigned long)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
6	MAX_UTF8_BYTES
(unsigned long)...	MAX_UTF8_BYTES
out	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
out	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
353	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
in	assert(expr)
0	assert(expr)
(const char *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
in != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
249	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> str2wcs_internal(const char *, unsigned long)	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> str2wcs_internal(const char *, unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __ctype_get_mb_cur_max	MB_CUR_MAX
(...)	MB_CUR_MAX
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
idx	assert(expr)
size	assert(expr)
... <= ...	assert(expr)
Buffer overflowed	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"idx <= size && ""Buffer overflowed"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
728	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void format_safe_impl(CharT *, unsigned long, unsigned long long) [with CharT = char]	__ASSERT_FUNCTION
void format_safe_impl(CharT *, unsigned long, unsigned long long) [with CharT = char]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
idx	assert(expr)
size	assert(expr)
... <= ...	assert(expr)
Buffer overflowed	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"idx <= size && ""Buffer overflowed"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/common.cpp	assert(expr)
array to pointer conversion	assert(expr)
728	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void format_safe_impl(CharT *, unsigned long, unsigned long long) [with CharT = wchar_t]	__ASSERT_FUNCTION
void format_safe_impl(CharT *, unsigned long, unsigned long long) [with CharT = wchar_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = wchar_t]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = wchar_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = wchar_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = wchar_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
_M_pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
basic_string::at: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	__try
Unknown literal	_GLIBCXX_MOVE(__val)
__seed	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__prev	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__prev	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
0	__catch(X)
1	__try
0	__catch(X)
Unknown literal	_GLIBCXX_MOVE(__val)
__p	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
(_ValueType)...	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
... + ...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
... + ...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE(__val)
__t	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__p	_GLIBCXX_MOVE(__val)
__n	_GLIBCXX_MOVE(__val)
... + ...	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
(_ValueType)...	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... + ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... + ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE(__val)
__t	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__first2	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__first1	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(_Pointer)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(_Pointer)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer_end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__buffer_end	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE(__val)
__last1	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
++ ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE(__val)
__last2	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__first2	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__first1	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
bitset::test	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
bitset::reset	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
amt	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
cmd was not being autoloaded	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"amt > 0 && ""cmd was not being autoloaded"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/autoload.h	assert(expr)
array to pointer conversion	assert(expr)
78	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void autoload_t::mark_autoload_finished(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
void autoload_t::mark_autoload_finished(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
64976	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
operator()	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	assert(expr)
this->type() is unknown!	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"false && ""this->type() is unknown!"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
893	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
lambda [](std::function<void ()> &&)->auto::operator()(std::function<void ()> &&)->auto	assert(expr)
lambda [](std::function<void ()> &&)->auto::operator()(std::function<void ()> &&)->auto	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmdsubst_begin	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
cmdsubst_end	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
... && ...	assert(expr)
cmdsubst_end	assert(expr)
cmdsubst_begin	assert(expr)
... >= ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsubst_begin != nullptr && cmdsubst_end != nullptr && cmdsubst_end >= cmdsubst_begin	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
1662	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::vector<completion_t, std::allocator<completion_t>> complete(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, enum_set_t<completion_request_t>, const operation_context_t &)	__ASSERT_FUNCTION
std::vector<completion_t, std::allocator<completion_t>> complete(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, enum_set_t<completion_request_t>, const operation_context_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
e	assert(expr)
type	assert(expr)
(int)...	assert(expr)
option_type_short	assert(expr)
(int)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
e->type != option_type_short	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
808	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const wchar_t *param_match2(const complete_entry_opt *, const wchar_t *)	__ASSERT_FUNCTION
const wchar_t *param_match2(const complete_entry_opt *, const wchar_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmd	assert(expr)
(bool)...	assert(expr)
Null command	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"cmd && ""Null command"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
450	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void complete_add(const wchar_t *, bool, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, complete_option_type_t, completion_mode_t, const wchar_t *, const wchar_t *, const wchar_t *, int)	__ASSERT_FUNCTION
void complete_add(const wchar_t *, bool, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, complete_option_type_t, completion_mode_t, const wchar_t *, const wchar_t *, const wchar_t *, int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
option	assert(expr)
(reference dereference)	assert(expr)
(int)...	assert(expr)
option_type	assert(expr)
(int)...	assert(expr)
option_type_args_only	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
(...)	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
option.empty() == (option_type == option_type_args_only)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
452	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	TOK_ACCEPT_UNFINISHED
(tok_flags_t)...	TOK_ACCEPT_UNFINISHED
call to operator bool	assert(expr)
cmd_tok	assert(expr)
(const maybe_t<tok_t>)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmd_tok	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
1612	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
lambda [](const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long)->auto::operator()(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long)->auto	assert(expr)
lambda [](const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long)->auto::operator()(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long)->auto	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
tok	assert(expr)
(reference dereference)	assert(expr)
type	assert(expr)
string	assert(expr)
... == ...	assert(expr)
tok	assert(expr)
(reference dereference)	assert(expr)
type	assert(expr)
redirect	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
tok.type == token_type_t::string || tok.type == token_type_t::redirect	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
1500	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void completer_t::perform()	assert(expr)
void completer_t::perform()	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmd_tok	assert(expr)
(reference dereference)	assert(expr)
offset	assert(expr)
call to max	assert(expr)
(unsigned long)...	assert(expr)
... < ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmd_tok.offset < std::numeric_limits<uint32_t>::max()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
1630	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmd_tok	assert(expr)
(reference dereference)	assert(expr)
length	assert(expr)
call to max	assert(expr)
(unsigned long)...	assert(expr)
... < ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmd_tok.length < std::numeric_limits<uint32_t>::max()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
1631	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
condition_test	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to c_str	COMPLETE_VAR_DESC_VAL
call to c_str	_(wstr)
call to wgettext	COMPLETE_VAR_DESC_VAL
call to wgettext	_(wstr)
Variable: %ls	COMPLETE_VAR_DESC_VAL
array to pointer conversion	COMPLETE_VAR_DESC_VAL
(reference dereference)	COMPLETE_VAR_DESC_VAL
(reference dereference)	_(wstr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
complete_cmd_desc	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to empty	assert(expr)
val	assert(expr)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	assert(expr)
! ...	assert(expr)
tab index should not have been at the end.	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!val.empty() && ""tab index should not have been at the end."""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
634	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void completer_t::complete_cmd_desc(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
void completer_t::complete_cmd_desc(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
ignore	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
complete	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
complete	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Error while expanding string '%ls'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
sep_string	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
complete	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
complete	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Error while expanding string '%ls'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
str	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
complete	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
complete	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Skipping completions for non-existent head	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
call to c_str	COMPLETE_USER_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_USER_DESC
call to wgettext	_(wstr)
Home for %ls	COMPLETE_USER_DESC
array to pointer conversion	COMPLETE_USER_DESC
(reference dereference)	COMPLETE_USER_DESC
(reference dereference)	_(wstr)
call to c_str	COMPLETE_USER_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_USER_DESC
call to wgettext	_(wstr)
Home for %ls	COMPLETE_USER_DESC
array to pointer conversion	COMPLETE_USER_DESC
(reference dereference)	COMPLETE_USER_DESC
(reference dereference)	_(wstr)
call to operator!=	assert(expr)
iter	assert(expr)
(const _Self)...	assert(expr)
(reference to)	assert(expr)
call to end	assert(expr)
(reference dereference)	assert(expr)
(const _Self)...	assert(expr)
(reference to)	assert(expr)
Abbreviation not found	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"iter != abbrs.end() && ""Abbreviation not found"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/complete.cpp	assert(expr)
array to pointer conversion	assert(expr)
723	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
lambda [](const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)->auto::operator()(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)->auto	assert(expr)
lambda [](const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)->auto::operator()(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)->auto	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	ABBR_DESC
call to c_str	_(wstr)
call to wgettext	ABBR_DESC
call to wgettext	_(wstr)
Abbreviation: %ls	ABBR_DESC
array to pointer conversion	ABBR_DESC
(reference dereference)	ABBR_DESC
(reference dereference)	_(wstr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
ignored	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
unreachable	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/complete.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
119	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
8	_GLIBCXX_BITSET_BITS_PER_ULL
8	_GLIBCXX_BITSET_BITS_PER_ULL
... * ...	_GLIBCXX_BITSET_BITS_PER_ULL
(...)	_GLIBCXX_BITSET_BITS_PER_ULL
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_ULL
basic_string::at: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__x	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const __normal_iterator<tok_t *, vector<tok_t, allocator<tok_t>>>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
bitset::reset	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
%s: __position (which is %zu) >= _Nb (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
bitset::set	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
bitset::test	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
1	__try
0	__catch(X)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last1	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
++ ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__last2	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first2	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__first1	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer_end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__middle	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__buffer	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__buffer_end	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last1	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
++ ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__last2	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first2	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__first1	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__seed	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__prev	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__prev	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__p	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__t	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator-	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__p	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
__n	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(difference_type)...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator-	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__t	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first2	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first1	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__first2	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__first1	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first2	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first1	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__first2	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__first1	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last2	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__result	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(long)...	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<reference_wrapper<const completion_entry_t> *, vector<reference_wrapper<const completion_entry_t>, allocator<reference_wrapper<const completion_entry_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
Unknown literal	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
Unknown literal	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
call to expression	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to expression	ASSERT_IS_MAIN_THREAD()
value_	assert(expr)
0	assert(expr)
... == ...	assert(expr)
Latch variable initialized multiple times	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"value_ == nullptr && ""Latch variable initialized multiple times"""	assert(expr)
/opt/src/src/global_safety.h	assert(expr)
73	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
value	assert(expr)
0	assert(expr)
... != ...	assert(expr)
Latch variable initialized with null	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"value != nullptr && ""Latch variable initialized with null"""	assert(expr)
/opt/src/src/global_safety.h	assert(expr)
74	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
4	R_OK
2	W_OK
1	X_OK
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Runtime path not available.	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Try deleting the directory %s and restarting fish.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
tmpdir	FLOGF(wht,__VA_ARGS__...)
(const basic_string<char, char_traits<char>, allocator<char>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
256	S_IRWXU
256	__S_IREAD
128	S_IRWXU
128	__S_IWRITE
... | ...	S_IRWXU
64	S_IRWXU
64	__S_IEXEC
... | ...	S_IRWXU
(...)	S_IRWXU
(__mode_t)...	S_IRWXU
call to __errno_location	errno
* ...	errno
(...)	errno
17	EEXIST
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
statpath	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
256	S_IRWXG
256	S_IRWXU
256	__S_IREAD
128	S_IRWXG
128	S_IRWXU
128	__S_IWRITE
... | ...	S_IRWXG
... | ...	S_IRWXU
64	S_IRWXG
64	S_IRWXU
64	__S_IEXEC
... | ...	S_IRWXG
... | ...	S_IRWXU
(...)	S_IRWXG
(...)	S_IRWXU
3	S_IRWXG
... >> ...	S_IRWXG
(...)	S_IRWXG
256	S_IRWXO
256	S_IRWXG
256	S_IRWXU
256	__S_IREAD
128	S_IRWXO
128	S_IRWXG
128	S_IRWXU
128	__S_IWRITE
... | ...	S_IRWXO
... | ...	S_IRWXG
... | ...	S_IRWXU
64	S_IRWXO
64	S_IRWXG
64	S_IRWXU
64	__S_IEXEC
... | ...	S_IRWXO
... | ...	S_IRWXG
... | ...	S_IRWXU
(...)	S_IRWXO
(...)	S_IRWXG
(...)	S_IRWXU
3	S_IRWXO
3	S_IRWXG
... >> ...	S_IRWXO
... >> ...	S_IRWXG
(...)	S_IRWXO
(...)	S_IRWXG
3	S_IRWXO
... >> ...	S_IRWXO
(...)	S_IRWXO
13	EACCES
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to basic_string	FISH_DATADIR_VAR
__fish_data_dir	FISH_DATADIR_VAR
array to pointer conversion	FISH_DATADIR_VAR
(reference to)	FISH_DATADIR_VAR
call to basic_string	FISH_SYSCONFDIR_VAR
__fish_sysconf_dir	FISH_SYSCONFDIR_VAR
array to pointer conversion	FISH_SYSCONFDIR_VAR
(reference to)	FISH_SYSCONFDIR_VAR
call to basic_string	FISH_HELPDIR_VAR
__fish_help_dir	FISH_HELPDIR_VAR
array to pointer conversion	FISH_HELPDIR_VAR
(reference to)	FISH_HELPDIR_VAR
call to basic_string	FISH_BIN_DIR
__fish_bin_dir	FISH_BIN_DIR
array to pointer conversion	FISH_BIN_DIR
(reference to)	FISH_BIN_DIR
call to basic_string	FISH_CONFIG_DIR
__fish_config_dir	FISH_CONFIG_DIR
array to pointer conversion	FISH_CONFIG_DIR
(reference to)	FISH_CONFIG_DIR
call to basic_string	FISH_USER_DATA_DIR
__fish_user_data_dir	FISH_USER_DATA_DIR
array to pointer conversion	FISH_USER_DATA_DIR
(reference to)	FISH_USER_DATA_DIR
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to basic_string	FISH_BIND_MODE_VAR
fish_bind_mode	FISH_BIND_MODE_VAR
array to pointer conversion	FISH_BIND_MODE_VAR
(reference to)	FISH_BIND_MODE_VAR
call to basic_string	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
_CS_PATH	_CS_PATH
(int)...	_CS_PATH
_CS_PATH	_CS_PATH
(int)...	_CS_PATH
1	STDOUT_FILENO
stdout	stdout
stdout	stdout
2	_IONBF
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
flags	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
key	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
mode	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
universal_barrier	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to c_str	FLOG(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOG(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not determine current working directory. Is your locale set correctly?	FLOG(wht,__VA_ARGS__...)
array to pointer conversion	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	_(wstr)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
call to operator!=	assert(expr)
iter	assert(expr)
(const _Node_iterator_base<pair<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, env_var_t>, true>)...	assert(expr)
(reference to)	assert(expr)
call to end	assert(expr)
call to operator->	assert(expr)
node	assert(expr)
(__shared_ptr<env_node_t, _S_atomic>)...	assert(expr)
(__shared_ptr_access<env_node_t, _S_atomic, false, false>)...	assert(expr)
(const __shared_ptr_access<env_node_t, _S_atomic, false, false>)...	assert(expr)
env	assert(expr)
(const _Node_iterator_base<pair<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, env_var_t>, true>)...	assert(expr)
(reference to)	assert(expr)
Node should contain key	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"iter != node->env.end() && ""Node should contain key"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env.cpp	assert(expr)
array to pointer conversion	assert(expr)
946	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
const env_var_t *env_stack_impl_t::find_variable(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &) const	assert(expr)
const env_var_t *env_stack_impl_t::find_variable(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &) const	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
set_universal	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to size	assert(expr)
val	assert(expr)
(reference dereference)	assert(expr)
(const vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>)...	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... == ...	assert(expr)
Should have exactly one element in PWD	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"val.size() == 1 && ""Should have exactly one element in PWD"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env.cpp	assert(expr)
array to pointer conversion	assert(expr)
1051	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
maybe_t<int> env_stack_impl_t::try_set_electric(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const <unnamed>::query_t &, std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &)	assert(expr)
maybe_t<int> env_stack_impl_t::try_set_electric(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const <unnamed>::query_t &, std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
shadowed_locals_	assert(expr)
! ...	assert(expr)
Attempt to pop last local scope	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!shadowed_locals_.empty() && ""Attempt to pop last local scope"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env.cpp	assert(expr)
array to pointer conversion	assert(expr)
979	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
std::shared_ptr<<unnamed>::env_node_t> env_stack_impl_t::pop()	assert(expr)
std::shared_ptr<<unnamed>::env_node_t> env_stack_impl_t::pop()	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
locals_	assert(expr)
Attempt to pop first local scope	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"locals_ && ""Attempt to pop first local scope"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env.cpp	assert(expr)
array to pointer conversion	assert(expr)
983	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Unknown scope	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/env.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1196	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to operator!=	assert(expr)
locals_	assert(expr)
globals_	assert(expr)
Locals should not be globals	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"locals_ != globals_ && ""Locals should not be globals"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env.cpp	assert(expr)
array to pointer conversion	assert(expr)
1147	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
mod_result_t env_stack_impl_t::set(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned int, std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>>)	assert(expr)
mod_result_t env_stack_impl_t::set(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned int, std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>>)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Unknown scope	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/env.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1150	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to operator bool	assert(expr)
node	assert(expr)
(const __shared_ptr<env_node_t, _S_atomic>)...	assert(expr)
Should always resolve some scope	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"node && ""Should always resolve some scope"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env.cpp	assert(expr)
array to pointer conversion	assert(expr)
1166	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
env_export	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOG(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOG(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOG(wht,__VA_ARGS__...)
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
env_export	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
create_export_array() recalc	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
call to operator bool	assert(expr)
var	assert(expr)
(const maybe_t<env_var_t>)...	assert(expr)
Variable should be present in uvars	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"var && ""Variable should be present in uvars"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env.cpp	assert(expr)
array to pointer conversion	assert(expr)
635	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
std::shared_ptr<const null_terminated_array_t<char>> env_scoped_impl_t::create_export_array() const	assert(expr)
std::shared_ptr<const null_terminated_array_t<char>> env_scoped_impl_t::create_export_array() const	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
unrecognized computed var name	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/env.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
717	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD_TRAMPOLINE(x)
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD()
__FUNCTION__	ASSERT_IS_NOT_FORKED_CHILD()
export_array	ASSERT_IS_NOT_FORKED_CHILD()
declaration of __FUNCTION__	ASSERT_IS_NOT_FORKED_CHILD()
__FUNCTION__	ASSERT_IS_NOT_FORKED_CHILD()
array to pointer conversion	ASSERT_IS_NOT_FORKED_CHILD()
call to operator bool	assert(expr)
locals_	assert(expr)
call to operator bool	assert(expr)
globals_	assert(expr)
... && ...	assert(expr)
Nodes cannot be null	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"locals_ && globals_ && ""Nodes cannot be null"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env.cpp	assert(expr)
array to pointer conversion	assert(expr)
512	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
env_scoped_impl_t::env_scoped_impl_t(std::shared_ptr<<unnamed>::env_node_t>, std::shared_ptr<<unnamed>::env_node_t>)	__ASSERT_FUNCTION
env_scoped_impl_t::env_scoped_impl_t(std::shared_ptr<<unnamed>::env_node_t>, std::shared_ptr<<unnamed>::env_node_t>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
vector::reserve	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<basic_string<char, char_traits<char>, allocator<char>>, allocator<basic_string<char, char_traits<char>, allocator<char>>>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_start	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<basic_string<char, char_traits<char>, allocator<char>>, allocator<basic_string<char, char_traits<char>, allocator<char>>>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_finish	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
operator=	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
value_	assert(expr)
0	assert(expr)
(env_universal_t *)...	assert(expr)
... == ...	assert(expr)
Latch variable initialized multiple times	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"value_ == nullptr && ""Latch variable initialized multiple times"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/global_safety.h	assert(expr)
array to pointer conversion	assert(expr)
73	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void latch_t<T>::operator=(std::unique_ptr<T, std::default_delete<T>>) [with T = env_universal_t]	__ASSERT_FUNCTION
void latch_t<T>::operator=(std::unique_ptr<T, std::default_delete<T>>) [with T = env_universal_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator!=	assert(expr)
value	assert(expr)
(const unique_ptr<env_universal_t, default_delete<env_universal_t>>)...	assert(expr)
(reference to)	assert(expr)
0	assert(expr)
Latch variable initialized with null	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"value != nullptr && ""Latch variable initialized with null"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/global_safety.h	assert(expr)
array to pointer conversion	assert(expr)
74	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__x	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__x	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = bool]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = bool]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = bool]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = bool]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	STDOUT_FILENO
type	assert(expr)
charc	assert(expr)
... != ...	assert(expr)
type	assert(expr)
readline	assert(expr)
... != ...	assert(expr)
... && ...	assert(expr)
Cannot create a char event with this constructor	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"type != char_event_type_t::charc && type != char_event_type_t::readline && ""Cannot create a char event with this constructor"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input_common.h	assert(expr)
array to pointer conversion	assert(expr)
164	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
char_event_t::char_event_t(char_event_type_t)	__ASSERT_FUNCTION
char_event_t::char_event_t(char_event_type_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
type	assert(expr)
readline	assert(expr)
... == ...	assert(expr)
Not a readline type	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"type == char_event_type_t::readline && ""Not a readline type"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input_common.h	assert(expr)
array to pointer conversion	assert(expr)
151	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
readline_cmd_t char_event_t::get_readline() const	__ASSERT_FUNCTION
readline_cmd_t char_event_t::get_readline() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
type	assert(expr)
charc	assert(expr)
... == ...	assert(expr)
Not a char type	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"type == char_event_type_t::charc && ""Not a char type"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input_common.h	assert(expr)
array to pointer conversion	assert(expr)
146	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
wchar_t char_event_t::get_char() const	__ASSERT_FUNCTION
wchar_t char_event_t::get_char() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
idx	assert(expr)
call to size	assert(expr)
line_datas	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
idx <= line_datas.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/screen.h	assert(expr)
array to pointer conversion	assert(expr)
113	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
line_t &screen_data_t::insert_line_at_index(unsigned long)	__ASSERT_FUNCTION
line_t &screen_data_t::insert_line_at_index(unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
5	LC_MESSAGES
5	__LC_MESSAGES
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
locale var %s missing or empty	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
name	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
locale var %s='%s'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
name	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
value	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
6	LC_ALL
6	__LC_ALL
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
init_locale() setlocale(): '%s'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
locale	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
5	LC_MESSAGES
5	__LC_MESSAGES
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
old LC_MESSAGES locale: '%s'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
old_msg_locale	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_locale	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
new LC_MESSAGES locale: '%s'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
new_msg_locale	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
curses var %s missing or empty	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
name	FLOGF(wht,__VA_ARGS__...)
(const basic_string<char, char_traits<char>, allocator<char>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
curses var %s='%s'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
name	FLOGF(wht,__VA_ARGS__...)
(const basic_string<char, char_traits<char>, allocator<char>>)...	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
value	FLOGF(wht,__VA_ARGS__...)
(const basic_string<char, char_traits<char>, allocator<char>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
1	STDOUT_FILENO
1	ERR
- ...	ERR
(...)	ERR
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not set up terminal.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
TERM environment variable not set.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
TERM environment variable set to '%ls'.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to as_string	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
term	FLOGF(wht,__VA_ARGS__...)
(const env_var_t *)...	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Check that this terminal type is supported on this system.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
ansi	DEFAULT_TERM1
array to pointer conversion	DEFAULT_TERM1
dumb	DEFAULT_TERM2
array to pointer conversion	DEFAULT_TERM2
4096	PATH_MAX
0	STDIN_FILENO
4096	PATH_MAX
(size_t)...	PATH_MAX
ansi	DEFAULT_TERM1
array to pointer conversion	DEFAULT_TERM1
dumb	DEFAULT_TERM2
array to pointer conversion	DEFAULT_TERM2
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Using fallback terminal type '%s'.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
term	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
1	STDOUT_FILENO
0	OK
(...)	OK
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not set up terminal using the fallback terminal type '%s'.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
term	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
256 color support determined by '$fish_term256'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
256 color support enabled for TERM=%ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
term	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
256 color support enabled for TERM=%ls on Terminal.app	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
term	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	debug(level,__VA_ARGS__...)
(bool)...	debug(level,__VA_ARGS__...)
if (...) ... 	debug(level,__VA_ARGS__...)
call to should_debug	debug(level,__VA_ARGS__...)
2	debug(level,__VA_ARGS__...)
(...)	debug(level,__VA_ARGS__...)
ExprStmt	debug(level,__VA_ARGS__...)
call to debug_impl	debug(level,__VA_ARGS__...)
2	debug(level,__VA_ARGS__...)
(...)	debug(level,__VA_ARGS__...)
256 color support enabled for TERM=%ls	debug(level,__VA_ARGS__...)
array to pointer conversion	debug(level,__VA_ARGS__...)
call to c_str	debug(level,__VA_ARGS__...)
term	debug(level,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	debug(level,__VA_ARGS__...)
{ ... }	debug(level,__VA_ARGS__...)
cur_term	max_colors
cur_term	CUR
(...)	max_colors
(...)	CUR
(TERMTYPE *)...	max_colors
(TERMTYPE *)...	CUR
(...)	max_colors
(...)	CUR
Numbers	max_colors
13	max_colors
access to array	max_colors
(int)...	max_colors
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
256 color support: %d colors per terminfo entry for %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
cur_term	FLOGF(wht,__VA_ARGS__...)
cur_term	max_colors
cur_term	CUR
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	max_colors
(...)	CUR
(TERMTYPE *)...	FLOGF(wht,__VA_ARGS__...)
(TERMTYPE *)...	max_colors
(TERMTYPE *)...	CUR
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	max_colors
(...)	CUR
Numbers	FLOGF(wht,__VA_ARGS__...)
Numbers	max_colors
13	FLOGF(wht,__VA_ARGS__...)
13	max_colors
access to array	FLOGF(wht,__VA_ARGS__...)
access to array	max_colors
(int)...	FLOGF(wht,__VA_ARGS__...)
(int)...	max_colors
call to c_str	FLOGF(wht,__VA_ARGS__...)
term	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
'fish_term24bit' preference: 24-bit color %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
support_term24bit	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
disabled	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
... ? ... : ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Ignoring fish_read_limit since it is not valid	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
vars	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
vars	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
env_dispatch_var_change	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
'fish_emoji_width' preference: %d, overwriting default	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
g_fish_emoji_width	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
default emoji width: 2 for %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
term	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
default emoji width: 1	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
term_support	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
default emoji width: %d	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
g_guessed_fish_emoji_width	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_dispatch	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
env_dispatch	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
handle_timezone() current timezone var: |%ls| => |%ls|	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
env_var_name	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
var	FLOGF(wht,__VA_ARGS__...)
! ...	FLOGF(wht,__VA_ARGS__...)
MISSING	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to as_string	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
var	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
... ? ... : ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to observes_var	assert(expr)
name	assert(expr)
(const wcstring)...	assert(expr)
(reference to)	assert(expr)
! ...	assert(expr)
Already observing that variable	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!observes_var(name) && ""Already observing that variable"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_dispatch.cpp	assert(expr)
array to pointer conversion	assert(expr)
94	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void var_dispatch_table_t::add(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::function<void (env_stack_t &)>)	__ASSERT_FUNCTION
void var_dispatch_table_t::add(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::function<void (env_stack_t &)>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to observes_var	assert(expr)
name	assert(expr)
(const wcstring)...	assert(expr)
(reference to)	assert(expr)
! ...	assert(expr)
Already observing that variable	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!observes_var(name) && ""Already observing that variable"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_dispatch.cpp	assert(expr)
array to pointer conversion	assert(expr)
87	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void var_dispatch_table_t::add(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::function<void (const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, env_stack_t &)>)	__ASSERT_FUNCTION
void var_dispatch_table_t::add(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::function<void (const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, env_stack_t &)>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
operator=	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
value_	assert(expr)
0	assert(expr)
(const var_dispatch_table_t *)...	assert(expr)
... == ...	assert(expr)
Latch variable initialized multiple times	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"value_ == nullptr && ""Latch variable initialized multiple times"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/global_safety.h	assert(expr)
array to pointer conversion	assert(expr)
73	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void latch_t<T>::operator=(std::unique_ptr<T, std::default_delete<T>>) [with T = const var_dispatch_table_t]	__ASSERT_FUNCTION
void latch_t<T>::operator=(std::unique_ptr<T, std::default_delete<T>>) [with T = const var_dispatch_table_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator!=	assert(expr)
value	assert(expr)
(const unique_ptr<const var_dispatch_table_t, default_delete<const var_dispatch_table_t>>)...	assert(expr)
(reference to)	assert(expr)
0	assert(expr)
Latch variable initialized with null	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"value != nullptr && ""Latch variable initialized with null"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/global_safety.h	assert(expr)
array to pointer conversion	assert(expr)
74	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<highlighted_char_t *, vector<highlighted_char_t, allocator<highlighted_char_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
this	_GLIBCXX_MOVE(__val)
(_Vector_base<line_t, allocator<line_t>> *)...	_GLIBCXX_MOVE(__val)
_M_impl	_GLIBCXX_MOVE(__val)
(_Vector_impl_data)...	_GLIBCXX_MOVE(__val)
_M_finish	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<line_t *, vector<line_t, allocator<line_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<line_t, allocator<line_t>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<line_t, allocator<line_t>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<line_t *, vector<line_t, allocator<line_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1024	__FD_SETSIZE
(unsigned long)...	__FD_SETSIZE
definition of __cmsg_nxthdr	__NTH(fct)
__cmsg	CMSG_ALIGN(len)
cmsg_len	CMSG_ALIGN(len)
(...)	CMSG_ALIGN(len)
sizeof(size_t)	CMSG_ALIGN(len)
... + ...	CMSG_ALIGN(len)
1	CMSG_ALIGN(len)
(unsigned long)...	CMSG_ALIGN(len)
... - ...	CMSG_ALIGN(len)
(...)	CMSG_ALIGN(len)
sizeof(size_t)	CMSG_ALIGN(len)
1	CMSG_ALIGN(len)
(unsigned long)...	CMSG_ALIGN(len)
... - ...	CMSG_ALIGN(len)
(...)	CMSG_ALIGN(len)
~ ...	CMSG_ALIGN(len)
(size_t)...	CMSG_ALIGN(len)
... & ...	CMSG_ALIGN(len)
(...)	CMSG_ALIGN(len)
__cmsg	CMSG_ALIGN(len)
cmsg_len	CMSG_ALIGN(len)
(...)	CMSG_ALIGN(len)
sizeof(size_t)	CMSG_ALIGN(len)
... + ...	CMSG_ALIGN(len)
1	CMSG_ALIGN(len)
(unsigned long)...	CMSG_ALIGN(len)
... - ...	CMSG_ALIGN(len)
(...)	CMSG_ALIGN(len)
sizeof(size_t)	CMSG_ALIGN(len)
1	CMSG_ALIGN(len)
(unsigned long)...	CMSG_ALIGN(len)
... - ...	CMSG_ALIGN(len)
(...)	CMSG_ALIGN(len)
~ ...	CMSG_ALIGN(len)
(size_t)...	CMSG_ALIGN(len)
... & ...	CMSG_ALIGN(len)
(...)	CMSG_ALIGN(len)
MSG_DONTROUTE	MSG_DONTROUTE
128	_SS_SIZE
128	_SS_PADSIZE
(unsigned long)...	_SS_SIZE
(unsigned long)...	_SS_PADSIZE
sizeof(unsigned short)	_SS_PADSIZE
sizeof(unsigned short)	__SOCKADDR_COMMON_SIZE
(...)	_SS_PADSIZE
(...)	__SOCKADDR_COMMON_SIZE
... - ...	_SS_PADSIZE
sizeof(unsigned long)	_SS_PADSIZE
... - ...	_SS_PADSIZE
(...)	_SS_PADSIZE
definition of ss_family	__SOCKADDR_COMMON(sa_prefix)
definition of sa_family	__SOCKADDR_COMMON(sa_prefix)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
call to __builtin_object_size	__bos0(ptr)
__buf	__bos0(ptr)
(const void *)...	__bos0(ptr)
0	__bos0(ptr)
declaration of __recvfrom_chk_warn	__REDIRECT(name,proto,alias)
declaration of __recvfrom_alias	__REDIRECT(name,proto,alias)
declaration of __recv_chk_warn	__REDIRECT(name,proto,alias)
declaration of __recv_alias	__REDIRECT(name,proto,alias)
definition of sin6_family	__SOCKADDR_COMMON(sa_prefix)
sizeof(unsigned short)	__SOCKADDR_COMMON_SIZE
(...)	__SOCKADDR_COMMON_SIZE
definition of sin_family	__SOCKADDR_COMMON(sa_prefix)
16	IF_NAMESIZE
16	IFNAMSIZ
(unsigned long)...	IF_NAMESIZE
(unsigned long)...	IFNAMSIZ
16	IF_NAMESIZE
16	IFNAMSIZ
(unsigned long)...	IF_NAMESIZE
(unsigned long)...	IFNAMSIZ
16	IF_NAMESIZE
16	IFNAMSIZ
(unsigned long)...	IF_NAMESIZE
(unsigned long)...	IFNAMSIZ
6	MAC_ADDRESS_MAX_LEN
6	MAC_ADDRESS_MAX_LEN
255	HOSTNAME_LEN
6	MAC_ADDRESS_MAX_LEN
(unsigned long)...	MAC_ADDRESS_MAX_LEN
2	AF_INET
2	PF_INET
SOCK_STREAM	SOCK_STREAM
(int)...	SOCK_STREAM
ifr_ifrn	ifr_name
16	IF_NAMESIZE
16	IFNAMSIZ
(unsigned long)...	IF_NAMESIZE
(unsigned long)...	IFNAMSIZ
ifrn_name	ifr_name
ifr_ifrn	ifr_name
ifrn_name	ifr_name
ifr_ifrn	ifr_name
ifrn_name	ifr_name
ifr_ifrn	ifr_name
ifrn_name	ifr_name
35111	SIOCGIFHWADDR
(unsigned long)...	SIOCGIFHWADDR
ifr_ifru	ifr_hwaddr
ifru_hwaddr	ifr_hwaddr
6	MAC_ADDRESS_MAX_LEN
(size_t)...	MAC_ADDRESS_MAX_LEN
2	LOCK_EX
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Locking the universal var file took too long (%.3f seconds).	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
duration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
storage	assert(expr)
0	assert(expr)
(string *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
storage != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
177	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool append_file_entry(unsigned char, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)	__ASSERT_FUNCTION
bool append_file_entry(unsigned char, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
result	assert(expr)
0	assert(expr)
(string *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
result != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
178	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Illegal variable name: '%ls'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
key_in	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Could not convert %ls to narrow character string	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
key_in	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Could not convert %ls to narrow character string	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
val_in	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
127	ASCII_MAX
call to fish_iswalnum	iswalnum
"# This file contains fish universal variable definitions.
"	SAVE_MSG
array to pointer conversion	SAVE_MSG
3.0	UVARS_VERSION_3_0
array to pointer conversion	UVARS_VERSION_3_0
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log sync	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
uvar_file	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
uvar_file	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
No universal variable path available	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log no modifications	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log performing full sync	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log open_and_acquire_lock() failed	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to valid	assert(expr)
vars_fd	assert(expr)
(const autoclose_fd_t)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
vars_fd.valid()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
711	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool env_universal_t::sync(std::vector<callback_data_t, std::allocator<callback_data_t>> &)	assert(expr)
bool env_universal_t::sync(std::vector<callback_data_t, std::allocator<callback_data_t>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
2	ENOENT
ok_to_save	assert(expr)
It's not OK to save	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ok_to_save && ""It's not OK to save"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
724	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool env_universal_t::save(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
bool env_universal_t::save(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log open_temporary_file() failed	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to valid	assert(expr)
private_fd	assert(expr)
(const autoclose_fd_t)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
private_fd.valid()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
736	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log write_to_fd() failed	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log fchown() failed	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log fchmod() failed	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
1	UTIME_OMIT
30	UTIME_OMIT
... << ...	UTIME_OMIT
(...)	UTIME_OMIT
2	UTIME_OMIT
... - ...	UTIME_OMIT
(...)	UTIME_OMIT
0	CLOCK_REALTIME
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log move_new_vars_file_into_place() failed	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Unable to parse universal variable message: '%ls'	FLOGF(wht,__VA_ARGS__...)
Unable to parse universal variable message: '%ls'	PARSE_ERR
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	PARSE_ERR
msg	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Unable to parse universal variable message: '%ls'	FLOGF(wht,__VA_ARGS__...)
Unable to parse universal variable message: '%ls'	PARSE_ERR
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	PARSE_ERR
msg	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Unable to parse universal variable message: '%ls'	FLOGF(wht,__VA_ARGS__...)
Unable to parse universal variable message: '%ls'	PARSE_ERR
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	PARSE_ERR
msg	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Unable to parse universal variable message: '%ls'	FLOGF(wht,__VA_ARGS__...)
Unable to parse universal variable message: '%ls'	PARSE_ERR
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	PARSE_ERR
msg	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Unable to rename file from '%ls' to '%ls': %s	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
src	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
dst	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to assert_is_locked	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
& ...	ASSERT_IS_LOCKED(x)
reinterpret_cast<void *>...	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
write_to_fd	ASSERT_IS_LOCKED(x)
declaration of __FUNCTION__	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
fd	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
fd >= 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
467	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool env_universal_t::write_to_fd(int, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
bool env_universal_t::write_to_fd(int, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Unable to write to universal variables file '%ls': %s	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
path	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to string_suffixes_string	assert(expr)
/	assert(expr)
array to pointer conversion	assert(expr)
directory	assert(expr)
(reference dereference)	assert(expr)
(reference to)	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!string_suffixes_string(L""/"", directory)"	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
535	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
autoclose_fd_t env_universal_t::open_temporary_file(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *)	__ASSERT_FUNCTION
autoclose_fd_t env_universal_t::open_temporary_file(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Unable to open temporary file '%ls': %s	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
out_path	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *)...	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
2	O_RDWR
64	O_CREAT
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Unable to open universal variable file '%s': %s	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
path	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to valid	assert(expr)
fd	assert(expr)
(const autoclose_fd_t)...	assert(expr)
Should have a valid fd here	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"fd.valid() && ""Should have a valid fd here"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
619	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool env_universal_t::open_and_acquire_lock(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &, autoclose_fd_t *)	assert(expr)
bool env_universal_t::open_and_acquire_lock(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &, autoclose_fd_t *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_locked	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
& ...	ASSERT_IS_LOCKED(x)
reinterpret_cast<void *>...	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
remove_internal	ASSERT_IS_LOCKED(x)
declaration of __FUNCTION__	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
call to assert_is_locked	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
& ...	ASSERT_IS_LOCKED(x)
reinterpret_cast<void *>...	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
set_internal	ASSERT_IS_LOCKED(x)
declaration of __FUNCTION__	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
call to assert_is_locked	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
& ...	ASSERT_IS_LOCKED(x)
reinterpret_cast<void *>...	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
load_from_fd	ASSERT_IS_LOCKED(x)
declaration of __FUNCTION__	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
fd	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
fd >= 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
382	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void env_universal_t::load_from_fd(int, std::vector<callback_data_t, std::allocator<callback_data_t>> &)	__ASSERT_FUNCTION
void env_universal_t::load_from_fd(int, std::vector<callback_data_t, std::allocator<callback_data_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log sync elided based on fstat()	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to assert_is_locked	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
& ...	ASSERT_IS_LOCKED(x)
reinterpret_cast<void *>...	ASSERT_IS_LOCKED(x)
lock	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
load_from_path	ASSERT_IS_LOCKED(x)
declaration of __FUNCTION__	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log sync elided based on fast stat()	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	O_RDONLY
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
uvar_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
universal log reading from file	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
fd	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
should never reach this statement	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/env_universal_common.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1475	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to read	ignore_result(x)
this	ignore_result(x)
pipe_fd	ignore_result(x)
buff	ignore_result(x)
array to pointer conversion	ignore_result(x)
(void *)...	ignore_result(x)
amt_to_read	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
this	assert(expr)
readback_amount	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
this->readback_amount == 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/env_universal_common.cpp	assert(expr)
array to pointer conversion	assert(expr)
1408	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool universal_notifier_named_pipe_t::poll()	assert(expr)
bool universal_notifier_named_pipe_t::poll()	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
(bool)...	__FD_ZERO(fdsp)
(bool)...	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
definition of __d0	__FD_ZERO(fdsp)
definition of __d0	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
definition of __d1	__FD_ZERO(fdsp)
definition of __d1	FD_ZERO(fdsetp)
declaration	__FD_ZERO(fdsp)
declaration	FD_ZERO(fdsetp)
asm statement	__FD_ZERO(fdsp)
asm statement	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
sizeof(fd_set)	__FD_ZERO(fdsp)
sizeof(fd_set)	FD_ZERO(fdsetp)
sizeof(__fd_mask)	__FD_ZERO(fdsp)
sizeof(__fd_mask)	FD_ZERO(fdsetp)
... / ...	__FD_ZERO(fdsp)
... / ...	FD_ZERO(fdsetp)
fds	FD_ZERO(fdsetp)
& ...	FD_ZERO(fdsetp)
(...)	__FD_ZERO(fdsp)
(...)	FD_ZERO(fdsetp)
(...)	__FDS_BITS(set)
1024	__FD_SETSIZE
8	__NFDBITS
sizeof(__fd_mask)	__NFDBITS
(int)...	__NFDBITS
... * ...	__NFDBITS
(...)	__NFDBITS
fds_bits	__FD_ZERO(fdsp)
fds_bits	FD_ZERO(fdsetp)
fds_bits	__FDS_BITS(set)
array to pointer conversion	__FD_ZERO(fdsp)
array to pointer conversion	FD_ZERO(fdsetp)
array to pointer conversion	__FDS_BITS(set)
(...)	__FD_ZERO(fdsp)
(...)	FD_ZERO(fdsetp)
(...)	__FDS_BITS(set)
0	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
access to array	__FD_ZERO(fdsp)
access to array	FD_ZERO(fdsetp)
& ...	__FD_ZERO(fdsp)
& ...	FD_ZERO(fdsetp)
{ ... }	__FD_ZERO(fdsp)
{ ... }	FD_ZERO(fdsetp)
fds	FD_SET(fd,fdsetp)
& ...	FD_SET(fd,fdsetp)
(...)	__FDS_BITS(set)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
fds_bits	__FDS_BITS(set)
fds_bits	__FD_SET(d,set)
fds_bits	FD_SET(fd,fdsetp)
array to pointer conversion	__FDS_BITS(set)
array to pointer conversion	__FD_SET(d,set)
array to pointer conversion	FD_SET(fd,fdsetp)
(...)	__FDS_BITS(set)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(statement expression)	__FD_SET(d,set)
(statement expression)	FD_SET(fd,fdsetp)
(statement expression)	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
this	FD_SET(fd,fdsetp)
pipe_fd	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
definition of __d	__FD_SET(d,set)
definition of __d	FD_SET(fd,fdsetp)
definition of __d	__FD_ELT(d)
declaration	__FD_SET(d,set)
declaration	FD_SET(fd,fdsetp)
declaration	__FD_ELT(d)
ExprStmt	__FD_SET(d,set)
ExprStmt	FD_SET(fd,fdsetp)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	__FD_SET(d,set)
call to __builtin_constant_p	FD_SET(fd,fdsetp)
call to __builtin_constant_p	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
(bool)...	__FD_SET(d,set)
(bool)...	FD_SET(fd,fdsetp)
(bool)...	__FD_ELT(d)
0	__FD_SET(d,set)
0	FD_SET(fd,fdsetp)
0	__FD_ELT(d)
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
... <= ...	__FD_SET(d,set)
... <= ...	FD_SET(fd,fdsetp)
... <= ...	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
1024	__FD_SET(d,set)
1024	FD_SET(fd,fdsetp)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	__FD_SET(d,set)
... < ...	FD_SET(fd,fdsetp)
... < ...	__FD_ELT(d)
... && ...	__FD_SET(d,set)
... && ...	FD_SET(fd,fdsetp)
... && ...	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
8	__FD_SET(d,set)
8	FD_SET(fd,fdsetp)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	__FD_SET(d,set)
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	__FD_SET(d,set)
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	__FD_SET(d,set)
... / ...	FD_SET(fd,fdsetp)
... / ...	__FD_ELT(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
call to __fdelt_warn	__FD_SET(d,set)
call to __fdelt_warn	FD_SET(fd,fdsetp)
call to __fdelt_warn	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_ELT(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
call to __fdelt_chk	__FD_SET(d,set)
call to __fdelt_chk	FD_SET(fd,fdsetp)
call to __fdelt_chk	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_ELT(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
{ ... }	__FD_SET(d,set)
{ ... }	FD_SET(fd,fdsetp)
{ ... }	__FD_ELT(d)
access to array	__FD_SET(d,set)
access to array	FD_SET(fd,fdsetp)
1	__FD_SET(d,set)
1	FD_SET(fd,fdsetp)
1	__FD_MASK(d)
this	FD_SET(fd,fdsetp)
pipe_fd	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
8	__FD_SET(d,set)
8	FD_SET(fd,fdsetp)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	__FD_SET(d,set)
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	__FD_SET(d,set)
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	__FD_SET(d,set)
... % ...	FD_SET(fd,fdsetp)
... % ...	__FD_MASK(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
... << ...	__FD_SET(d,set)
... << ...	FD_SET(fd,fdsetp)
... << ...	__FD_MASK(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
(__fd_mask)...	__FD_SET(d,set)
(__fd_mask)...	FD_SET(fd,fdsetp)
(__fd_mask)...	__FD_MASK(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
... |= ...	__FD_SET(d,set)
... |= ...	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(void)...	__FD_SET(d,set)
(void)...	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
fds	FD_ISSET(fd,fdsetp)
& ...	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
fds_bits	FD_ISSET(fd,fdsetp)
fds_bits	__FD_ISSET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_ISSET(fd,fdsetp)
array to pointer conversion	__FD_ISSET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_ISSET(fd,fdsetp)
(statement expression)	__FD_ISSET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
this	FD_ISSET(fd,fdsetp)
pipe_fd	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_ISSET(fd,fdsetp)
definition of __d	__FD_ISSET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_ISSET(fd,fdsetp)
declaration	__FD_ISSET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_ISSET(fd,fdsetp)
ExprStmt	__FD_ISSET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_ISSET(fd,fdsetp)
call to __builtin_constant_p	__FD_ISSET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_ISSET(fd,fdsetp)
(bool)...	__FD_ISSET(d,set)
(bool)...	__FD_ELT(d)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
0	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_ISSET(fd,fdsetp)
... <= ...	__FD_ISSET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
1024	FD_ISSET(fd,fdsetp)
1024	__FD_ISSET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_ISSET(fd,fdsetp)
... < ...	__FD_ISSET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_ISSET(fd,fdsetp)
... && ...	__FD_ISSET(d,set)
... && ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_ISSET(fd,fdsetp)
... / ...	__FD_ISSET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_ISSET(fd,fdsetp)
call to __fdelt_warn	__FD_ISSET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_ISSET(fd,fdsetp)
call to __fdelt_chk	__FD_ISSET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_ISSET(fd,fdsetp)
{ ... }	__FD_ISSET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_ISSET(fd,fdsetp)
access to array	__FD_ISSET(d,set)
1	FD_ISSET(fd,fdsetp)
1	__FD_ISSET(d,set)
1	__FD_MASK(d)
this	FD_ISSET(fd,fdsetp)
pipe_fd	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_ISSET(fd,fdsetp)
... % ...	__FD_ISSET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_ISSET(fd,fdsetp)
... << ...	__FD_ISSET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_ISSET(fd,fdsetp)
(__fd_mask)...	__FD_ISSET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... & ...	FD_ISSET(fd,fdsetp)
... & ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
... != ...	FD_ISSET(fd,fdsetp)
... != ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
9223372036854775807	ULONG_MAX
9223372036854775807	LONG_MAX
(unsigned long)...	ULONG_MAX
(unsigned long)...	LONG_MAX
2	ULONG_MAX
... * ...	ULONG_MAX
1	ULONG_MAX
... + ...	ULONG_MAX
(...)	ULONG_MAX
9223372036854775807	ULONG_MAX
9223372036854775807	LONG_MAX
(unsigned long)...	ULONG_MAX
(unsigned long)...	LONG_MAX
2	ULONG_MAX
... * ...	ULONG_MAX
1	ULONG_MAX
... + ...	ULONG_MAX
(...)	ULONG_MAX
100000.0	NAMED_PIPE_FLASH_DURATION_USEC
(...)	NAMED_PIPE_FLASH_DURATION_USEC
(unsigned long)...	NAMED_PIPE_FLASH_DURATION_USEC
9223372036854775807	ULONG_MAX
9223372036854775807	LONG_MAX
(unsigned long)...	ULONG_MAX
(unsigned long)...	LONG_MAX
2	ULONG_MAX
... * ...	ULONG_MAX
1	ULONG_MAX
... + ...	ULONG_MAX
(...)	ULONG_MAX
call to __bswap_32	htonl(x)
call to getpid	htonl(x)
(__uint32_t)...	htonl(x)
(int)...	htonl(x)
call to __errno_location	errno
* ...	errno
(...)	errno
11	EWOULDBLOCK
11	EAGAIN
call to __errno_location	errno
* ...	errno
(...)	errno
11	EAGAIN
100000.0	NAMED_PIPE_FLASH_DURATION_USEC
(...)	NAMED_PIPE_FLASH_DURATION_USEC
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
fd	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
5	SUSTAINED_READABILITY_CLEANUP_DURATION_USEC
(double)...	SUSTAINED_READABILITY_CLEANUP_DURATION_USEC
1000000.0	SUSTAINED_READABILITY_CLEANUP_DURATION_USEC
... * ...	SUSTAINED_READABILITY_CLEANUP_DURATION_USEC
(...)	SUSTAINED_READABILITY_CLEANUP_DURATION_USEC
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to read	ignore_result(x)
this	ignore_result(x)
pipe_fd	ignore_result(x)
buff	ignore_result(x)
read_amt	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
call to __errno_location	errno
* ...	errno
(...)	errno
17	EEXIST
call to __errno_location	errno
* ...	errno
(...)	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unable to make a pipe for universal variables using '%ls': %s	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
errmsg	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
vars_path	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
2	O_RDWR
2048	O_NONBLOCK
call to __errno_location	errno
* ...	errno
(...)	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unable to open a pipe for universal variables using '%ls': %s	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
errmsg	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
vars_path	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __fish_assert	DIE(msg)
universal_notifier_shmem_poller_t cannot be used on this system	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/env_universal_common.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1191	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
universal_notifier_notifyd_t cannot be used on this system	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/env_universal_common.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1270	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(long)...	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>> *, vector<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>, allocator<pair<reference_wrapper<const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>, reference_wrapper<const env_var_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	STDOUT_FILENO
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
name	assert(expr)
(bool)...	assert(expr)
Null name	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"name && ""Null name"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/event.cpp	assert(expr)
array to pointer conversion	assert(expr)
429	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void event_fire_generic(parser_t &, const wchar_t *, const std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> *)	__ASSERT_FUNCTION
void event_fire_generic(parser_t &, const wchar_t *, const std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Unreachable	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/event.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
420	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to empty	assert(expr)
ld	assert(expr)
(reference dereference)	assert(expr)
blocked_events	assert(expr)
(const vector<shared_ptr<event_t>, allocator<shared_ptr<event_t>>>)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
ld.blocked_events.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/event.cpp	assert(expr)
array to pointer conversion	assert(expr)
296	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void event_fire_delayed(parser_t &)	__ASSERT_FUNCTION
void event_fire_delayed(parser_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
ld	assert(expr)
(reference dereference)	assert(expr)
is_event	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
is_event should not be negative	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ld.is_event >= 0 && ""is_event should not be negative"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/event.cpp	assert(expr)
array to pointer conversion	assert(expr)
241	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void event_fire_internal(parser_t &, const event_t &)	__ASSERT_FUNCTION
void event_fire_internal(parser_t &, const event_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
64	__SIGRTMAX
64	_NSIG
64	NSIG
1	_NSIG
1	NSIG
... + ...	_NSIG
... + ...	NSIG
(...)	_NSIG
(...)	NSIG
(unsigned long)...	_NSIG
(unsigned long)...	NSIG
call to c_str	_(wstr)
call to wgettext	_(wstr)
signal handler for %ls (%ls)	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
handler for variable '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
exit handler for process %d	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
exit handler for job %d, '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
exit handler for job with process group %d	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
Unreachable	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/event.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
167	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	_(wstr)
call to wgettext	_(wstr)
exit handler for command substitution caller	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
handler for generic event '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
Unreachable	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/event.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
178	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
Unknown event type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/event.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
181	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	EVENT_ANY_PID
call to __fish_assert	DIE(msg)
unexpected classv.type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/event.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
124	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
Unreachable	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/event.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
389	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
64	__SIGRTMAX
64	_NSIG
64	NSIG
1	_NSIG
1	NSIG
... + ...	_NSIG
... + ...	NSIG
(...)	_NSIG
(...)	NSIG
(size_t)...	_NSIG
(size_t)...	NSIG
65	_NSIG
65	NSIG
65	_NSIG
65	NSIG
bitset::set	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
bitset::test	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
65	_NSIG
65	NSIG
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
%s: __position (which is %zu) >= _Nb (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
8	_GLIBCXX_BITSET_BITS_PER_WORD
... * ...	_GLIBCXX_BITSET_BITS_PER_WORD
(...)	_GLIBCXX_BITSET_BITS_PER_WORD
(unsigned long)...	_GLIBCXX_BITSET_BITS_PER_WORD
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to shared_ptr	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to shared_ptr	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(long)...	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to shared_ptr	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<shared_ptr<event_handler_t> *, vector<shared_ptr<event_handler_t>, allocator<shared_ptr<event_handler_t>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
1	__try
0	__catch(X)
1	STDOUT_FILENO
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
exec_subshell_for_expand	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
exec_subshell_internal	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to is_explicitly_separated	assert(expr)
elem	assert(expr)
(reference dereference)	assert(expr)
! ...	assert(expr)
should not be explicitly separated	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!elem.is_explicitly_separated() && ""should not be explicitly separated"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
1020	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void populate_subshell_output(std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> *, const io_buffer_t &, bool)	assert(expr)
void populate_subshell_output(std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> *, const io_buffer_t &, bool)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
j	assert(expr)
(reference dereference)	assert(expr)
(const __shared_ptr<job_t, _S_atomic>)...	assert(expr)
null job_t passed to exec_job!	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"j && ""null job_t passed to exec_job!"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
893	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool exec_job(parser_t &, const std::shared_ptr<job_t> &, const io_chain_t &)	__ASSERT_FUNCTION
bool exec_job(parser_t &, const std::shared_ptr<job_t> &, const io_chain_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	STDIN_FILENO
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	PIPE_ERROR
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	PIPE_ERROR
call to wgettext	_(wstr)
An error occurred while setting up pipe	FLOGF(wht,__VA_ARGS__...)
An error occurred while setting up pipe	PIPE_ERROR
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	PIPE_ERROR
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	PIPE_ERROR
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to valid	assert(expr)
deferred_pipes	assert(expr)
write	assert(expr)
(const autoclose_fd_t)...	assert(expr)
Deferred process should always have a write pipe	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"deferred_pipes.write.valid() && ""Deferred process should always have a write pipe"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
984	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
exec_job_exec	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
exec_job_exec	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Executed job %d from command '%ls' with pgrp %d	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to job_id	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
j	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr<job_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const job_t *)...	FLOGF(wht,__VA_ARGS__...)
call to command_wcstr	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
j	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr<job_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const job_t *)...	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
call to get_pgid	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
j	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr<job_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const job_t *)...	FLOGF(wht,__VA_ARGS__...)
(const maybe_t<int>)...	FLOGF(wht,__VA_ARGS__...)
call to operator*	FLOGF(wht,__VA_ARGS__...)
call to get_pgid	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
j	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr<job_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const job_t *)...	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
2	FLOGF(wht,__VA_ARGS__...)
- ...	FLOGF(wht,__VA_ARGS__...)
... ? ... : ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to has_value	assert(expr)
pgid	assert(expr)
(const maybe_t<int>)...	assert(expr)
Background jobs should always have a pgroup	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"pgid.has_value() && ""Background jobs should always have a pgroup"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
997	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	STDIN_FILENO
0	STDIN_FILENO
(reference to)	STDIN_FILENO
call to __fish_assert	DIE(msg)
process_type_t::exec process found in pipeline, where it should never be. Aborting.	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/exec.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
838	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
p	assert(expr)
type	assert(expr)
function	assert(expr)
... == ...	assert(expr)
p	assert(expr)
type	assert(expr)
block_node	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Unexpected process type	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"(p->type == process_type_t::function || p->type == process_type_t::block_node) && ""Unexpected process type"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
621	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::function<proc_status_t (parser_t &)> get_performer_for_process(process_t *, job_t *, const io_chain_t &)	__ASSERT_FUNCTION
std::function<proc_status_t (parser_t &)> get_performer_for_process(process_t *, job_t *, const io_chain_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
source	assert(expr)
(reference dereference)	assert(expr)
(const __shared_ptr<const parsed_source_t, _S_atomic>)...	assert(expr)
node	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
Process is missing node info	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"source && node && ""Process is missing node info"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
628	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
p	assert(expr)
type	assert(expr)
function	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
p->type == process_type_t::function	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
633	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Unknown function '%ls'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to argv0	FLOGF(wht,__VA_ARGS__...)
p	FLOGF(wht,__VA_ARGS__...)
(const process_t *)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
p	assert(expr)
type	assert(expr)
external	assert(expr)
... == ...	assert(expr)
Process is not external	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"p->type == process_type_t::external && ""Process is not external"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
494	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool exec_external_command(parser_t &, const std::shared_ptr<job_t> &, process_t *, const io_chain_t &)	__ASSERT_FUNCTION
bool exec_external_command(parser_t &, const std::shared_ptr<job_t> &, process_t *, const io_chain_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	STDIN_FILENO
call to has_value	assert(expr)
pid	assert(expr)
(const maybe_t<int>)...	assert(expr)
call to operator*	assert(expr)
pid	assert(expr)
(reference dereference)	assert(expr)
0	assert(expr)
... > ...	assert(expr)
... && ...	assert(expr)
Should have either a valid pid, or an error	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"pid.has_value() && *pid > 0 && ""Should have either a valid pid, or an error"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
531	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
exec_fork	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
exec_fork	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Fork #%d, pid %d: spawn external command '%s' from '%ls'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to operator int	FLOGF(wht,__VA_ARGS__...)
s_fork_count	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<int>)...	FLOGF(wht,__VA_ARGS__...)
(int)...	FLOGF(wht,__VA_ARGS__...)
call to operator*	FLOGF(wht,__VA_ARGS__...)
pid	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
actual_cmd	FLOGF(wht,__VA_ARGS__...)
file	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
file	FLOGF(wht,__VA_ARGS__...)
<no file>	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
... ? ... : ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
p	assert(expr)
type	assert(expr)
builtin	assert(expr)
... == ...	assert(expr)
Process is not a builtin	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"p->type == process_type_t::builtin && ""Process is not a builtin"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
420	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool handle_builtin_output(parser_t &, const std::shared_ptr<job_t> &, process_t *, io_chain_t *, const io_streams_t &)	__ASSERT_FUNCTION
bool handle_builtin_output(parser_t &, const std::shared_ptr<job_t> &, process_t *, io_chain_t *, const io_streams_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
2	STDERR_FILENO
1	STDOUT_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
32	EPIPE
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Error while writing to stdout	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
2	STDERR_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
32	EPIPE
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Error while writing to stderr	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
!builtin_io_done and errno != EPIPE	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
stdout	stdout
stderr	stderr
p	assert(expr)
type	assert(expr)
builtin	assert(expr)
... == ...	assert(expr)
Process must be a builtin	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"p->type == process_type_t::builtin && ""Process must be a builtin"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
359	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool exec_internal_builtin_proc(parser_t &, process_t *, const io_pipe_t *, const io_chain_t &, io_streams_t &)	__ASSERT_FUNCTION
bool exec_internal_builtin_proc(parser_t &, process_t *, const io_pipe_t *, const io_chain_t &, io_streams_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	STDIN_FILENO
0	STDIN_FILENO
1	STDOUT_FILENO
2	STDERR_FILENO
call to is_internal	assert(expr)
call to operator->	assert(expr)
call to operator->	assert(expr)
job	assert(expr)
(reference dereference)	assert(expr)
(const __shared_ptr<job_t, _S_atomic>)...	assert(expr)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	assert(expr)
group	assert(expr)
(__shared_ptr<job_group_t, _S_atomic>)...	assert(expr)
(__shared_ptr_access<job_group_t, _S_atomic, false, false>)...	assert(expr)
(const __shared_ptr_access<job_group_t, _S_atomic, false, false>)...	assert(expr)
(const job_group_t *)...	assert(expr)
! ...	assert(expr)
Internal groups should never need to fork	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!job->group->is_internal() && ""Internal groups should never need to fork"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/exec.cpp	assert(expr)
array to pointer conversion	assert(expr)
312	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool fork_child_for_process(const std::shared_ptr<job_t> &, process_t *, const dup2_list_t &, const char *, const std::function<void ()> &)	__ASSERT_FUNCTION
bool fork_child_for_process(const std::shared_ptr<job_t> &, process_t *, const dup2_list_t &, const char *, const std::function<void ()> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Child process returned control to fork_child lambda!	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/exec.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
327	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
"Failed to fork %s!
"	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
fork_type	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
exec_fork	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
exec_fork	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Fork #%d, pid %d: %s for '%ls'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to operator int	FLOGF(wht,__VA_ARGS__...)
s_fork_count	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<int>)...	FLOGF(wht,__VA_ARGS__...)
(int)...	FLOGF(wht,__VA_ARGS__...)
pid	FLOGF(wht,__VA_ARGS__...)
fork_type	FLOGF(wht,__VA_ARGS__...)
call to argv0	FLOGF(wht,__VA_ARGS__...)
p	FLOGF(wht,__VA_ARGS__...)
(const process_t *)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
13	EACCES
2	SIGINT
3	SIGQUIT
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
exec_job_status	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
exec_job_status	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Set status of job %d (%ls) to %d using short circuit	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to job_id	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
j	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr<job_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const job_t *)...	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to preview	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
j	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr<job_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const job_t *)...	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
p	FLOGF(wht,__VA_ARGS__...)
status	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_internal_proc	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_internal_proc	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Created internal proc %llu to write output for proc '%ls'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to get_id	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
p	FLOGF(wht,__VA_ARGS__...)
internal_proc_	FLOGF(wht,__VA_ARGS__...)
(__shared_ptr<internal_proc_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(__shared_ptr_access<internal_proc_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<internal_proc_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const internal_proc_t *)...	FLOGF(wht,__VA_ARGS__...)
call to argv0	FLOGF(wht,__VA_ARGS__...)
p	FLOGF(wht,__VA_ARGS__...)
(const process_t *)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
1	STDOUT_FILENO
2	STDERR_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
launch_process_nofork	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD_TRAMPOLINE(x)
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD()
__FUNCTION__	ASSERT_IS_NOT_FORKED_CHILD()
array to pointer conversion	ASSERT_IS_NOT_FORKED_CHILD()
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
p	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
0	O_RDONLY
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
0	EXIT_SUCCESS
call to __errno_location	errno
* ...	errno
(...)	errno
32	EPIPE
call to __errno_location	errno
* ...	errno
(...)	errno
32	EPIPE
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = dup2_list_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = dup2_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = autoclose_pipes_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = autoclose_pipes_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = posix_spawnattr_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = posix_spawnattr_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = posix_spawn_file_actions_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = posix_spawn_file_actions_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
call to operator&	assert(expr)
flags	assert(expr)
(const enum_set_t<expand_flag>)...	assert(expr)
skip_cmdsubst	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ctx	assert(expr)
(reference dereference)	assert(expr)
parser	assert(expr)
(const __shared_ptr<parser_t, _S_atomic>)...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Must have a parser if not skipping command substitutions	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"((flags & expand_flag::skip_cmdsubst) || ctx.parser) && ""Must have a parser if not skipping command substitutions"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/expand.cpp	assert(expr)
array to pointer conversion	assert(expr)
1046	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
static expand_result_t <unnamed>::expander_t::expand_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::vector<completion_t, std::allocator<completion_t>> *, enum_set_t<expand_flag>, const operation_context_t &, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	__ASSERT_FUNCTION
static expand_result_t <unnamed>::expander_t::expand_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::vector<completion_t, std::allocator<completion_t>> *, enum_set_t<expand_flag>, const operation_context_t &, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ctx	assert(expr)
(reference dereference)	assert(expr)
parser	assert(expr)
(const __shared_ptr<parser_t, _S_atomic>)...	assert(expr)
Must have a parser to expand command substitutions	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ctx.parser && ""Must have a parser to expand command substitutions"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/expand.cpp	assert(expr)
array to pointer conversion	assert(expr)
905	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
expand_result_t <unnamed>::expander_t::stage_cmdsubst(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::vector<completion_t, std::allocator<completion_t>> *)	assert(expr)
expand_result_t <unnamed>::expander_t::stage_cmdsubst(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::vector<completion_t, std::allocator<completion_t>> *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator[]	assert(expr)
input	assert(expr)
(reference dereference)	assert(expr)
0	assert(expr)
(size_type)...	assert(expr)
(reference dereference)	assert(expr)
(int)...	assert(expr)
HOME_DIRECTORY	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
call to operator[]	assert(expr)
input	assert(expr)
(reference dereference)	assert(expr)
0	assert(expr)
(size_type)...	assert(expr)
(reference dereference)	assert(expr)
(int)...	assert(expr)
126	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
input[0] == HOME_DIRECTORY || input[0] == L'~'	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/expand.cpp	assert(expr)
array to pointer conversion	assert(expr)
702	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> get_home_directory_name(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long *)	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> get_home_directory_name(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ctx	assert(expr)
(reference dereference)	assert(expr)
parser	assert(expr)
(const __shared_ptr<parser_t, _S_atomic>)...	assert(expr)
Cannot expand without a parser	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ctx.parser && ""Cannot expand without a parser"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/expand.cpp	assert(expr)
array to pointer conversion	assert(expr)
598	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
expand_result_t expand_cmdsubst(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, const operation_context_t &, std::vector<completion_t, std::allocator<completion_t>> *, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	__ASSERT_FUNCTION
expand_result_t expand_cmdsubst(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, const operation_context_t &, std::vector<completion_t, std::allocator<completion_t>> *, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	SOURCE_LOCATION_UNKNOWN
- ...	SOURCE_LOCATION_UNKNOWN
static_cast<size_t>...	SOURCE_LOCATION_UNKNOWN
(...)	SOURCE_LOCATION_UNKNOWN
call to __fish_assert	DIE(msg)
unhandled parse_ret value	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/expand.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
618	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	_(wstr)
call to wgettext	_(wstr)
err	_(wstr)
(reference dereference)	_(wstr)
1	SOURCE_LOCATION_UNKNOWN
- ...	SOURCE_LOCATION_UNKNOWN
static_cast<size_t>...	SOURCE_LOCATION_UNKNOWN
(...)	SOURCE_LOCATION_UNKNOWN
call to c_str	_(wstr)
call to wgettext	_(wstr)
Mismatched braces	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
pos	assert(expr)
item_begin	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
pos >= item_begin	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/expand.cpp	assert(expr)
array to pointer conversion	assert(expr)
562	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
expand_result_t expand_braces(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &&, enum_set_t<expand_flag>, std::vector<completion_t, std::allocator<completion_t>> *, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	assert(expr)
expand_result_t expand_braces(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &&, enum_set_t<expand_flag>, std::vector<completion_t, std::allocator<completion_t>> *, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
last_idx	assert(expr)
insize	assert(expr)
... <= ...	assert(expr)
Invalid last_idx	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"last_idx <= insize && ""Invalid last_idx"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/expand.cpp	assert(expr)
array to pointer conversion	assert(expr)
293	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool expand_variables(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::vector<completion_t, std::allocator<completion_t>> *, unsigned long, const environment_t &, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	__ASSERT_FUNCTION
bool expand_variables(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::vector<completion_t, std::allocator<completion_t>> *, unsigned long, const environment_t &, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
var_name_stop	assert(expr)
var_name_start	assert(expr)
... >= ...	assert(expr)
Bogus variable name indexes	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"var_name_stop >= var_name_start && ""Bogus variable name indexes"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/expand.cpp	assert(expr)
array to pointer conversion	assert(expr)
327	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
var	assert(expr)
(const maybe_t<env_var_t>)...	assert(expr)
history	assert(expr)
(bool)...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Should have variable or history here	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"(var || history) && ""Should have variable or history here"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/expand.cpp	assert(expr)
array to pointer conversion	assert(expr)
407	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
~%	UNCLEAN_FIRST
array to pointer conversion	UNCLEAN_FIRST
"$*?\""'({})"	UNCLEAN
array to pointer conversion	UNCLEAN
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
bitset::test	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<wchar_t *, basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to completion_t	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to completion_t	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(long)...	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to completion_t	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<completion_t *, vector<completion_t, allocator<completion_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__INT_N(TYPE)
1	__INT_N(TYPE)
64	__SIGEV_MAX_SIZE
64	__SIGEV_PAD_SIZE
(unsigned long)...	__SIGEV_MAX_SIZE
(unsigned long)...	__SIGEV_PAD_SIZE
sizeof(int)	__SIGEV_PAD_SIZE
... / ...	__SIGEV_PAD_SIZE
(...)	__SIGEV_PAD_SIZE
4	__SIGEV_PAD_SIZE
(unsigned long)...	__SIGEV_PAD_SIZE
... - ...	__SIGEV_PAD_SIZE
(...)	__SIGEV_PAD_SIZE
width	assert(e)
0	assert(e)
... > ...	assert(e)
Unexpectedly nonpositive width	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"width > 0 && ""Unexpectedly nonpositive width"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/fallback.cpp	assert(e)
array to pointer conversion	assert(e)
279	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
524288	O_CLOEXEC
524288	__O_CLOEXEC
2	F_SETFD
1	FD_CLOEXEC
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
timeout_usec	assert(e)
0	assert(e)
(unsigned long)...	assert(e)
... > ...	assert(e)
Invalid timeout	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"timeout_usec > 0 && ""Invalid timeout"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/fd_monitor.h	assert(e)
array to pointer conversion	assert(e)
42	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
1	STDOUT_FILENO
fds	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
1024	__FD_SETSIZE
8	__NFDBITS
sizeof(__fd_mask)	__NFDBITS
(int)...	__NFDBITS
... * ...	__NFDBITS
(...)	__NFDBITS
fds_bits	FD_ISSET(fd,fdsetp)
fds_bits	__FD_ISSET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_ISSET(fd,fdsetp)
array to pointer conversion	__FD_ISSET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_ISSET(fd,fdsetp)
(statement expression)	__FD_ISSET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
call to fd	FD_ISSET(fd,fdsetp)
fd	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_ISSET(fd,fdsetp)
definition of __d	__FD_ISSET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_ISSET(fd,fdsetp)
declaration	__FD_ISSET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_ISSET(fd,fdsetp)
ExprStmt	__FD_ISSET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_ISSET(fd,fdsetp)
call to __builtin_constant_p	__FD_ISSET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_ISSET(fd,fdsetp)
(bool)...	__FD_ISSET(d,set)
(bool)...	__FD_ELT(d)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
0	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_ISSET(fd,fdsetp)
... <= ...	__FD_ISSET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
1024	FD_ISSET(fd,fdsetp)
1024	__FD_ISSET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_ISSET(fd,fdsetp)
... < ...	__FD_ISSET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_ISSET(fd,fdsetp)
... && ...	__FD_ISSET(d,set)
... && ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_ISSET(fd,fdsetp)
... / ...	__FD_ISSET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_ISSET(fd,fdsetp)
call to __fdelt_warn	__FD_ISSET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_ISSET(fd,fdsetp)
call to __fdelt_chk	__FD_ISSET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_ISSET(fd,fdsetp)
{ ... }	__FD_ISSET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_ISSET(fd,fdsetp)
access to array	__FD_ISSET(d,set)
1	FD_ISSET(fd,fdsetp)
1	__FD_ISSET(d,set)
1	__FD_MASK(d)
call to fd	FD_ISSET(fd,fdsetp)
fd	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_ISSET(fd,fdsetp)
... % ...	__FD_ISSET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_ISSET(fd,fdsetp)
... << ...	__FD_ISSET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_ISSET(fd,fdsetp)
(__fd_mask)...	__FD_ISSET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... & ...	FD_ISSET(fd,fdsetp)
... & ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
... != ...	FD_ISSET(fd,fdsetp)
... != ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
call to has_value	assert(expr)
last_time	assert(expr)
Should always have a last_time	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"last_time.has_value() && ""Should always have a last_time"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fd_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
97	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned long fd_monitor_item_t::usec_remaining(const std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>> &) const	__ASSERT_FUNCTION
unsigned long fd_monitor_item_t::usec_remaining(const std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>> &) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator>=	assert(expr)
now	assert(expr)
(reference dereference)	assert(expr)
(reference to)	assert(expr)
call to operator*	assert(expr)
last_time	assert(expr)
(reference dereference)	assert(expr)
(reference to)	assert(expr)
steady clock went backwards!	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"now >= *last_time && ""steady clock went backwards!"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fd_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
99	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD_TRAMPOLINE(x)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
operator()	ASSERT_IS_BACKGROUND_THREAD()
declaration of __FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
array to pointer conversion	ASSERT_IS_BACKGROUND_THREAD()
timed_out	assert(expr)
! ...	assert(expr)
Should not time out with kNoTimeout	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!timed_out && ""Should not time out with kNoTimeout"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fd_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
31	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
lambda [](const autoclose_fd_t &, bool)->auto::operator()(const autoclose_fd_t &, bool)->auto	__ASSERT_FUNCTION
lambda [](const autoclose_fd_t &, bool)->auto::operator()(const autoclose_fd_t &, bool)->auto	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
fd_monitor	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
fd_monitor	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Thread starting	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD_TRAMPOLINE(x)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
run_in_background	ASSERT_IS_BACKGROUND_THREAD()
declaration of __FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
array to pointer conversion	ASSERT_IS_BACKGROUND_THREAD()
0	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
(bool)...	FD_ZERO(fdsetp)
(bool)...	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
definition of __d0	FD_ZERO(fdsetp)
definition of __d0	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
definition of __d1	FD_ZERO(fdsetp)
definition of __d1	__FD_ZERO(fdsp)
declaration	FD_ZERO(fdsetp)
declaration	__FD_ZERO(fdsp)
asm statement	FD_ZERO(fdsetp)
asm statement	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
sizeof(fd_set)	FD_ZERO(fdsetp)
sizeof(fd_set)	__FD_ZERO(fdsp)
sizeof(__fd_mask)	FD_ZERO(fdsetp)
sizeof(__fd_mask)	__FD_ZERO(fdsp)
... / ...	FD_ZERO(fdsetp)
... / ...	__FD_ZERO(fdsp)
fds	FD_ZERO(fdsetp)
& ...	FD_ZERO(fdsetp)
(...)	FD_ZERO(fdsetp)
(...)	__FD_ZERO(fdsp)
(...)	__FDS_BITS(set)
fds_bits	FD_ZERO(fdsetp)
fds_bits	__FD_ZERO(fdsp)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_ZERO(fdsetp)
array to pointer conversion	__FD_ZERO(fdsp)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_ZERO(fdsetp)
(...)	__FD_ZERO(fdsp)
(...)	__FDS_BITS(set)
0	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
access to array	FD_ZERO(fdsetp)
access to array	__FD_ZERO(fdsp)
& ...	FD_ZERO(fdsetp)
& ...	__FD_ZERO(fdsp)
{ ... }	FD_ZERO(fdsetp)
{ ... }	__FD_ZERO(fdsp)
fds	FD_SET(fd,fdsetp)
& ...	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
fds_bits	FD_SET(fd,fdsetp)
fds_bits	__FD_SET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_SET(fd,fdsetp)
array to pointer conversion	__FD_SET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_SET(fd,fdsetp)
(statement expression)	__FD_SET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
call to fd	FD_SET(fd,fdsetp)
item	FD_SET(fd,fdsetp)
(reference dereference)	FD_SET(fd,fdsetp)
fd	FD_SET(fd,fdsetp)
(const autoclose_fd_t)...	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_SET(fd,fdsetp)
definition of __d	__FD_SET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_SET(fd,fdsetp)
declaration	__FD_SET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_SET(fd,fdsetp)
ExprStmt	__FD_SET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_SET(fd,fdsetp)
call to __builtin_constant_p	__FD_SET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_SET(fd,fdsetp)
(bool)...	__FD_SET(d,set)
(bool)...	__FD_ELT(d)
0	FD_SET(fd,fdsetp)
0	__FD_SET(d,set)
0	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_SET(fd,fdsetp)
... <= ...	__FD_SET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
1024	FD_SET(fd,fdsetp)
1024	__FD_SET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_SET(fd,fdsetp)
... < ...	__FD_SET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_SET(fd,fdsetp)
... && ...	__FD_SET(d,set)
... && ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_SET(fd,fdsetp)
... / ...	__FD_SET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_SET(fd,fdsetp)
call to __fdelt_warn	__FD_SET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_SET(fd,fdsetp)
call to __fdelt_chk	__FD_SET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_SET(fd,fdsetp)
{ ... }	__FD_SET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_SET(fd,fdsetp)
access to array	__FD_SET(d,set)
1	FD_SET(fd,fdsetp)
1	__FD_SET(d,set)
1	__FD_MASK(d)
call to fd	FD_SET(fd,fdsetp)
item	FD_SET(fd,fdsetp)
(reference dereference)	FD_SET(fd,fdsetp)
fd	FD_SET(fd,fdsetp)
(const autoclose_fd_t)...	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_SET(fd,fdsetp)
... % ...	__FD_SET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_SET(fd,fdsetp)
... << ...	__FD_SET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_SET(fd,fdsetp)
(__fd_mask)...	__FD_SET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... |= ...	FD_SET(fd,fdsetp)
... |= ...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(void)...	FD_SET(fd,fdsetp)
(void)...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
timeout_usec	assert(expr)
kNoTimeout	assert(expr)
... == ...	assert(expr)
Should not have a timeout on wait-lap	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"timeout_usec == fd_monitor_item_t::kNoTimeout && ""Should not have a timeout on wait-lap"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fd_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
141	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void fd_monitor_t::run_in_background()	assert(expr)
void fd_monitor_t::run_in_background()	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
call to operator->	assert(expr)
data	assert(expr)
running	assert(expr)
Thread should be running because we're that thread	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"data->running && ""Thread should be running because we're that thread"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fd_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
186	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
fd_monitor	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
fd_monitor	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Thread exiting	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
call to valid	assert(expr)
item	assert(expr)
(reference dereference)	assert(expr)
fd	assert(expr)
(const autoclose_fd_t)...	assert(expr)
Invalid fd	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"item.fd.valid() && ""Invalid fd"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fd_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
58	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void fd_monitor_t::add(fd_monitor_item_t &&)	__ASSERT_FUNCTION
void fd_monitor_t::add(fd_monitor_item_t &&)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
item	assert(expr)
(reference dereference)	assert(expr)
timeout_usec	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... != ...	assert(expr)
Invalid timeout	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"item.timeout_usec != 0 && ""Invalid timeout"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fd_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
59	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Unable to create a new pthread	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/fd_monitor.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
68	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
Unable to create pipes	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/fd_monitor.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
17	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
fd_monitor	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
fd_monitor	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Removing fd	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
fd	FLOG(wht,__VA_ARGS__...)
(const int)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<fd_monitor_item_t *, vector<fd_monitor_item_t, allocator<fd_monitor_item_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<fd_monitor_item_t *, vector<fd_monitor_item_t, allocator<fd_monitor_item_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	STDOUT_FILENO
6	LC_ALL
6	__LC_ALL
stderr	stderr
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Can not use the no-execute mode when running an interactive session	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	STDIN_FILENO
0	O_RDONLY
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
"Error while reading file %ls
"	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ld	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
current_filename	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
ld	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
current_filename	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Standard input	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
... ? ... : ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
stderr	stderr
1	EXIT_FAILURE
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to c_str	_(wstr)
call to wgettext	_(wstr)
cat	_(wstr)
description	_(wstr)
(reference dereference)	_(wstr)
stdout	stdout
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%s, version %s
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
fish	PACKAGE_NAME
array to pointer conversion	PACKAGE_NAME
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
Invalid value '%s' for debug-stack-frames flag	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	STDIN_FILENO
1	required_argument
1	required_argument
1	required_argument
1	required_argument
1	required_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
4	R_OK
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
not sourcing %ls (not readable or does not exist)	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
escaped_pathname	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
sourcing %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
escaped_pathname	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
exec_path: '%s', argv[0]: '%s'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
exec_path	FLOGF(wht,__VA_ARGS__...)
(const basic_string<char, char_traits<char>, allocator<char>>)...	FLOGF(wht,__VA_ARGS__...)
argv0	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
"Running out of build directory, using paths relative to CMAKE_SOURCE_DIR:
 %s"	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
/opt/src	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
'fish' not in a 'bin/', trying paths relative to source tree	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Using compiled in paths:	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
config	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
"determine_config_directory_paths() results:
paths.data: %ls
paths.sysconf: %ls
paths.doc: %ls
paths.bin: %ls"	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
paths	FLOGF(wht,__VA_ARGS__...)
data	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
paths	FLOGF(wht,__VA_ARGS__...)
sysconf	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
paths	FLOGF(wht,__VA_ARGS__...)
doc	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
paths	FLOGF(wht,__VA_ARGS__...)
bin	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
4096	PATH_MAX
RUSAGE_SELF	RUSAGE_SELF
(__rusage_who_t)...	RUSAGE_SELF
1	__try
0	__catch(X)
1	__try
0	__catch(X)
64976	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
idx	assert(expr)
call to size	assert(expr)
text	assert(expr)
(reference dereference)	assert(expr)
... <= ...	assert(expr)
Out of bounds	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"idx <= text.size() && ""Out of bounds"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fish_indent.cpp	assert(expr)
array to pointer conversion	assert(expr)
93	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned long <unnamed>::count_preceding_backslashes(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long)	__ASSERT_FUNCTION
unsigned long <unnamed>::count_preceding_backslashes(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
6	LC_ALL
6	__LC_ALL
1	required_argument
1	required_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
0	no_argument
stdout	stdout
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls, version %s
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
Invalid value '%s' for debug-level flag	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
Invalid value '%s' for debug-stack-frames flag	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Expected file path to read/write for -w:

 $ %ls -w foo.fish
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stdin	stdin
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Opening ""%s"" failed: %s
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
stdout	stdout
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Opening ""%s"" failed: %s
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __fish_assert	DIE(msg)
pygments_csv should have been handled above	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/fish_indent.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1002	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
stdout	stdout
call to size	assert(expr)
colors	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
text	assert(expr)
(reference dereference)	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
colors.size() == text.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fish_indent.cpp	assert(expr)
array to pointer conversion	assert(expr)
775	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> html_colorize(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::vector<highlight_spec_t, std::allocator<highlight_spec_t>> &)	__ASSERT_FUNCTION
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> html_colorize(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::vector<highlight_spec_t, std::allocator<highlight_spec_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
fish_color_normal	P(x)
array to pointer conversion	P(x)
fish_color_error	P(x)
array to pointer conversion	P(x)
fish_color_command	P(x)
array to pointer conversion	P(x)
fish_color_statement_terminator	P(x)
array to pointer conversion	P(x)
fish_color_param	P(x)
array to pointer conversion	P(x)
fish_color_comment	P(x)
array to pointer conversion	P(x)
fish_color_match	P(x)
array to pointer conversion	P(x)
fish_color_search_match	P(x)
array to pointer conversion	P(x)
fish_color_operator	P(x)
array to pointer conversion	P(x)
fish_color_escape	P(x)
array to pointer conversion	P(x)
fish_color_quote	P(x)
array to pointer conversion	P(x)
fish_color_redirection	P(x)
array to pointer conversion	P(x)
fish_color_autosuggestion	P(x)
array to pointer conversion	P(x)
fish_color_selection	P(x)
array to pointer conversion	P(x)
fish_color_other	P(x)
array to pointer conversion	P(x)
stderr	stderr
call to size	assert(expr)
colors	assert(expr)
(const vector<highlight_spec_t, allocator<highlight_spec_t>>)...	assert(expr)
len	assert(expr)
... == ...	assert(expr)
Colors and src should have same size	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"colors.size() == len && ""Colors and src should have same size"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fish_indent.cpp	assert(expr)
array to pointer conversion	assert(expr)
667	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> make_pygments_csv(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> make_pygments_csv(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
case ...:	TEST_ROLE(x)
normal	TEST_ROLE(x)
return ...	TEST_ROLE(x)
normal	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
error	TEST_ROLE(x)
return ...	TEST_ROLE(x)
error	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
command	TEST_ROLE(x)
return ...	TEST_ROLE(x)
command	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
statement_terminator	TEST_ROLE(x)
return ...	TEST_ROLE(x)
statement_terminator	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
param	TEST_ROLE(x)
return ...	TEST_ROLE(x)
param	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
comment	TEST_ROLE(x)
return ...	TEST_ROLE(x)
comment	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
match	TEST_ROLE(x)
return ...	TEST_ROLE(x)
match	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
search_match	TEST_ROLE(x)
return ...	TEST_ROLE(x)
search_match	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
operat	TEST_ROLE(x)
return ...	TEST_ROLE(x)
operat	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
escape	TEST_ROLE(x)
return ...	TEST_ROLE(x)
escape	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
quote	TEST_ROLE(x)
return ...	TEST_ROLE(x)
quote	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
redirection	TEST_ROLE(x)
return ...	TEST_ROLE(x)
redirection	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
autosuggestion	TEST_ROLE(x)
return ...	TEST_ROLE(x)
autosuggestion	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
selection	TEST_ROLE(x)
return ...	TEST_ROLE(x)
selection	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_progress	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_progress	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_background	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_background	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_prefix	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_prefix	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_completion	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_completion	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_description	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_description	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_secondary_background	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_secondary_background	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_secondary_prefix	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_secondary_prefix	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_secondary_completion	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_secondary_completion	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_secondary_description	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_secondary_description	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_selected_background	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_selected_background	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_selected_prefix	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_selected_prefix	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_selected_completion	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_selected_completion	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
case ...:	TEST_ROLE(x)
pager_selected_description	TEST_ROLE(x)
return ...	TEST_ROLE(x)
pager_selected_description	TEST_ROLE(x)
array to pointer conversion	TEST_ROLE(x)
call to __fish_assert	DIE(msg)
UNKNOWN ROLE	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/fish_indent.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
652	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
4294967295	WEOF
(...)	WEOF
call to __errno_location	errno
* ...	errno
(...)	errno
84	EILSEQ
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%s (byte=%X)	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to strerror	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
ch	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
r	assert(expr)
start	assert(expr)
(unsigned long)...	assert(expr)
call to size	assert(expr)
source	assert(expr)
(reference dereference)	assert(expr)
... <= ...	assert(expr)
source out of bounds	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"r.start <= source.size() && ""source out of bounds"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fish_indent.cpp	assert(expr)
array to pointer conversion	assert(expr)
472	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void <unnamed>::pretty_printer_t::emit_gap_text_before(source_range_t, unsigned int)	__ASSERT_FUNCTION
void <unnamed>::pretty_printer_t::emit_gap_text_before(source_range_t, unsigned int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to is_sorted	assert(expr)
call to begin	assert(expr)
errs	assert(expr)
(reference dereference)	assert(expr)
call to end	assert(expr)
errs	assert(expr)
(reference dereference)	assert(expr)
range_is_before	assert(expr)
Error ranges should be sorted	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"std::is_sorted(errs.begin(), errs.end(), range_is_before) && ""Error ranges should be sorted"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fish_indent.cpp	assert(expr)
array to pointer conversion	assert(expr)
466	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool <unnamed>::pretty_printer_t::range_contained_error(source_range_t) const	__ASSERT_FUNCTION
bool <unnamed>::pretty_printer_t::range_contained_error(source_range_t) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
2	TOK_SHOW_COMMENTS
4	TOK_SHOW_BLANK_LINES
stderr	stderr
call to __fish_assert	DIE(msg)
Gap text should only have comments and newlines	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/fish_indent.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
440	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
4	SPACES_PER_INDENT
prev	assert(expr)
(const token_base_t *)...	assert(expr)
(const leaf_t<token_base> *)...	assert(expr)
range	assert(expr)
start	assert(expr)
call to operator->	assert(expr)
job	assert(expr)
(reference dereference)	assert(expr)
decorator	assert(expr)
(keyword_base_t *)...	assert(expr)
(leaf_t<keyword_base> *)...	assert(expr)
range	assert(expr)
start	assert(expr)
... <= ...	assert(expr)
Ranges out of order	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"prev->range.start <= job.decorator->range.start && ""Ranges out of order"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fish_indent.cpp	assert(expr)
array to pointer conversion	assert(expr)
341	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
std::vector<unsigned int, std::allocator<unsigned int>> <unnamed>::pretty_printer_t::compute_preferred_semi_locations() const	assert(expr)
std::vector<unsigned int, std::allocator<unsigned int>> <unnamed>::pretty_printer_t::compute_preferred_semi_locations() const	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to is_sorted	assert(expr)
call to begin	assert(expr)
tok_ranges	assert(expr)
call to end	assert(expr)
tok_ranges	assert(expr)
range_compare	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
std::is_sorted(tok_ranges.begin(), tok_ranges.end(), range_compare)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fish_indent.cpp	assert(expr)
array to pointer conversion	assert(expr)
269	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::vector<source_range_t, std::allocator<source_range_t>> <unnamed>::pretty_printer_t::compute_gaps() const	__ASSERT_FUNCTION
std::vector<source_range_t, std::allocator<source_range_t>> <unnamed>::pretty_printer_t::compute_gaps() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
tok_range	assert(expr)
start	assert(expr)
prev_end	assert(expr)
... >= ...	assert(expr)
Token range should not overlap or be out of order	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"tok_range.start >= prev_end && ""Token range should not overlap or be out of order"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fish_indent.cpp	assert(expr)
array to pointer conversion	assert(expr)
276	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
indents	assert(expr)
call to size	assert(expr)
source	assert(expr)
(reference dereference)	assert(expr)
... == ...	assert(expr)
indents and source should be same length	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"indents.size() == source.size() && ""indents and source should be same length"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fish_indent.cpp	assert(expr)
array to pointer conversion	assert(expr)
120	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
<unnamed>::pretty_printer_t::pretty_printer_t(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool)	__ASSERT_FUNCTION
<unnamed>::pretty_printer_t::pretty_printer_t(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
n	assert(e)
(bool)...	assert(e)
Node should not be null	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"n && ""Node should not be null"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
845	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
call to operator bool	assert(e)
contents	assert(e)
Null pointer	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
149	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_begin	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_for	FIELDS(__VA_ARGS__...)
var_name	FIELDS(__VA_ARGS__...)
kw_in	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
conjunction	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
decorator	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
continuations	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_while	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_function	FIELDS(__VA_ARGS__...)
first_arg	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
header	FIELDS(__VA_ARGS__...)
jobs	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_if	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
elseif_clauses	FIELDS(__VA_ARGS__...)
else_clause	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_case	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_switch	FIELDS(__VA_ARGS__...)
argument	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
cases	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
opt_decoration	FIELDS(__VA_ARGS__...)
command	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
pipe	FIELDS(__VA_ARGS__...)
newlines	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
continuation	FIELDS(__VA_ARGS__...)
bg	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<wchar_t *, basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
_M_pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<argument_t, redirection_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<not_statement_t, block_statement_t, if_statement_t, switch_statement_t, decorated_statement_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<for_header_t, while_header_t, function_header_t, begin_header_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
0	STDIN_FILENO
stderr	stderr
1	EXIT_FAILURE
0	no_argument
0	no_argument
0	no_argument
stdout	stdout
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls, version %s
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stderr	stderr
0	STDIN_FILENO
0	TCSANOW
stderr	stderr
stderr	stderr
stderr	stderr
32	NCCS
(unsigned long)...	NCCS
0	VINTR
4	VEOF
stderr	stderr
stderr	stderr
0	VINTR
stderr	stderr
stderr	stderr
stderr	stderr
stderr	stderr
stdout	stdout
stderr	stderr
stdout	stdout
stdout	stdout
stdout	stdout
0	VINTR
0	VINTR
stderr	stderr
0	VINTR
4	VEOF
4	VEOF
stderr	stderr
4	VEOF
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
stderr	stderr
stderr	stderr
1	EXIT_FAILURE
2	SIG_SETMASK
1	EXIT_FAILURE
stderr	stderr
stderr	stderr
stderr	stderr
1	F_GETFD
stdout	stdout
stdout	stdout
stdout	stdout
stdout	stdout
stdout	stdout
stderr	stderr
2	SIGINT
stderr	stderr
0	STDIN_FILENO
stderr	stderr
1	STDOUT_FILENO
1	EXIT_FAILURE
stderr	stderr
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... + ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
... + ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
... + ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(long)...	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
... + ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
... + ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
64976	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
stderr	stderr
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
stderr	stderr
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(long)...	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<const category_t **, vector<const category_t *, allocator<const category_t *>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __builtin_object_size	__bos(ptr)
__resolved	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
call to __builtin_object_size	__bos(ptr)
__resolved	__bos(ptr)
(const void *)...	__bos(ptr)
2	__bos(ptr)
2	__USE_FORTIFY_LEVEL
1	__bos(ptr)
... > ...	__bos(ptr)
(int)...	__bos(ptr)
1	STDOUT_FILENO
call to operator bool	assert(expr)
source_range	assert(expr)
(const maybe_t<source_range_t>)...	assert(expr)
Function has no source range	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"source_range && ""Function has no source range"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/function.cpp	assert(expr)
array to pointer conversion	assert(expr)
314	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int function_get_definition_lineno(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
int function_get_definition_lineno(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
func_start	assert(expr)
(unsigned long)...	assert(expr)
call to size	assert(expr)
source	assert(expr)
(reference dereference)	assert(expr)
... <= ...	assert(expr)
function start out of bounds	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"func_start <= source.size() && ""function start out of bounds"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/function.cpp	assert(expr)
array to pointer conversion	assert(expr)
317	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
function_set_desc	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to c_str	_(wstr)
call to wgettext	_(wstr)
call to c_str	_(wstr)
func	_(wstr)
description	_(wstr)
(reference dereference)	_(wstr)
body_start	assert(expr)
body_end	assert(expr)
... <= ...	assert(expr)
end keyword should come after header	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"body_start <= body_end && ""end keyword should come after header"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/function.cpp	assert(expr)
array to pointer conversion	assert(expr)
234	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool function_get_definition(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
bool function_get_definition(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
function_load	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
function_exists	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
function_add	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
ins	assert(expr)
second	assert(expr)
Function should not already be present in the table	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ins.second && ""Function should not already be present in the table"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/function.cpp	assert(expr)
array to pointer conversion	assert(expr)
171	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void function_add(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::shared_ptr<const function_properties_t>, const wchar_t *)	__ASSERT_FUNCTION
void function_add(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::shared_ptr<const function_properties_t>, const wchar_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
try_autoload	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to operator bool	assert(expr)
contents	assert(expr)
Null pointer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"contents && ""Null pointer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
121	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const ast::node_t *ast::union_ptr_t<Nodes...>::get() const [with Nodes = ast::for_header_t; Nodes = ast::while_header_t; Nodes = ast::function_header_t; Nodes = ast::begin_header_t]	__ASSERT_FUNCTION
const ast::node_t *ast::union_ptr_t<Nodes...>::get() const [with Nodes = ast::for_header_t; Nodes = ast::while_header_t; Nodes = ast::function_header_t; Nodes = ast::begin_header_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
f	assert(e)
(int)...	assert(e)
0	assert(e)
... >= ...	assert(e)
f	assert(e)
(int)...	assert(e)
flag_count	assert(e)
(int)...	assert(e)
... < ...	assert(e)
... && ...	assert(e)
Invalid flag	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"f >= 0 && f < flag_count && ""Invalid flag"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/future_feature_flags.h	assert(e)
array to pointer conversion	assert(e)
36	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
f	assert(e)
(int)...	assert(e)
0	assert(e)
... >= ...	assert(e)
f	assert(e)
(int)...	assert(e)
flag_count	assert(e)
(int)...	assert(e)
... < ...	assert(e)
... && ...	assert(e)
Invalid flag	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"f >= 0 && f < flag_count && ""Invalid flag"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/future_feature_flags.h	assert(e)
array to pointer conversion	assert(e)
30	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
name	assert(e)
(bool)...	assert(e)
null flag name	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"name && ""null flag name"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/future_feature_flags.cpp	assert(e)
array to pointer conversion	assert(e)
23	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
1	__try
0	__catch(X)
start	assert(e)
length	assert(e)
... + ...	assert(e)
start	assert(e)
... >= ...	assert(e)
Overflow	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"start + length >= start && ""Overflow"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/parse_constants.h	assert(e)
array to pointer conversion	assert(e)
21	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
fd	assert(e)
0	assert(e)
... >= ...	assert(e)
Invalid fd in add_close	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"fd >= 0 && ""Invalid fd in add_close"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/redirection.h	assert(e)
array to pointer conversion	assert(e)
76	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
src	assert(e)
0	assert(e)
... >= ...	assert(e)
target	assert(e)
0	assert(e)
... >= ...	assert(e)
... && ...	assert(e)
Invalid fd in add_dup2	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"src >= 0 && target >= 0 && ""Invalid fd in add_dup2"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/redirection.h	assert(e)
array to pointer conversion	assert(e)
68	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
contents	assert(e)
Null pointer	assert(e)
... && ...	assert(e)
(...)	assert(e)
(bool)...	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
154	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
1	STDOUT_FILENO
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
ctx	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to size	assert(expr)
buff	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
color	assert(expr)
(reference dereference)	assert(expr)
(const vector<highlight_spec_t, allocator<highlight_spec_t>>)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
buff.size() == color.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
1416	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void highlight_universal(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::vector<highlight_spec_t, std::allocator<highlight_spec_t>> &, unsigned long, const operation_context_t &)	__ASSERT_FUNCTION
void highlight_universal(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::vector<highlight_spec_t, std::allocator<highlight_spec_t>> &, unsigned long, const operation_context_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
buffstr	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
color	assert(expr)
(reference dereference)	assert(expr)
(const vector<highlight_spec_t, allocator<highlight_spec_t>>)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
buffstr.size() == color.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
1331	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void highlight_universal_internal(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::vector<highlight_spec_t, std::allocator<highlight_spec_t>> &, unsigned long)	__ASSERT_FUNCTION
void highlight_universal_internal(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::vector<highlight_spec_t, std::allocator<highlight_spec_t>> &, unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to size	assert(expr)
colors	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
text	assert(expr)
(reference dereference)	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
colors.size() == text.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
1298	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> colorize(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::vector<highlight_spec_t, std::allocator<highlight_spec_t>> &)	__ASSERT_FUNCTION
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> colorize(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::vector<highlight_spec_t, std::allocator<highlight_spec_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator==	assert(expr)
base_color	assert(expr)
(const highlight_spec_t)...	assert(expr)
call to highlight_spec_t	assert(expr)
param	assert(expr)
(reference to)	assert(expr)
call to operator==	assert(expr)
base_color	assert(expr)
(const highlight_spec_t)...	assert(expr)
call to highlight_spec_t	assert(expr)
command	assert(expr)
(reference to)	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Unexpected base color	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"(base_color == highlight_role_t::param || base_color == highlight_role_t::command) && ""Unexpected base color"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
532	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void color_string_internal(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, highlight_spec_t, __gnu_cxx::__normal_iterator<highlight_spec_t *, std::vector<highlight_spec_t, std::allocator<highlight_spec_t>>>)	__ASSERT_FUNCTION
void color_string_internal(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, highlight_spec_t, __gnu_cxx::__normal_iterator<highlight_spec_t *, std::vector<highlight_spec_t, std::allocator<highlight_spec_t>>>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
%self	PROCESS_EXPAND_SELF_STR
array to pointer conversion	PROCESS_EXPAND_SELF_STR
%self	PROCESS_EXPAND_SELF_STR
array to pointer conversion	PROCESS_EXPAND_SELF_STR
127	ASCII_MAX
(wchar_t)...	ASCII_MAX
65535	UCS2_MAX
(wchar_t)...	UCS2_MAX
2147483647	WCHAR_MAX
2147483647	__WCHAR_MAX
(wchar_t)...	WCHAR_MAX
(wchar_t)...	__WCHAR_MAX
255	BYTE_MAX
(wchar_t)...	BYTE_MAX
in_pos	assert(expr)
backslash_pos	assert(expr)
... >= ...	assert(expr)
in_pos	assert(expr)
buff_len	assert(expr)
... <= ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
in_pos >= backslash_pos && in_pos <= buff_len	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
619	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
fill_end	assert(expr)
backslash_pos	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
fill_end >= backslash_pos	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
629	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
in_pos	assert(expr)
buff_len	assert(expr)
... < ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
in_pos < buff_len	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
641	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
in_len	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
in_len > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
476	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned long color_variable(const wchar_t *, unsigned long, __gnu_cxx::__normal_iterator<highlight_spec_t *, std::vector<highlight_spec_t, std::allocator<highlight_spec_t>>>)	__ASSERT_FUNCTION
unsigned long color_variable(const wchar_t *, unsigned long, __gnu_cxx::__normal_iterator<highlight_spec_t *, std::vector<highlight_spec_t, std::allocator<highlight_spec_t>>>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
in	assert(expr)
0	assert(expr)
access to array	assert(expr)
(int)...	assert(expr)
36	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
in[0] == L'$'	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
477	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
slice_end_idx	assert(expr)
slice_begin_idx	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
slice_end_idx > slice_begin_idx	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
506	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
located	assert(expr)
0	assert(expr)
... < ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
located < 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
514	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD_TRAMPOLINE(x)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
autosuggest_validate_from_history	ASSERT_IS_BACKGROUND_THREAD()
declaration of __FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
array to pointer conversion	ASSERT_IS_BACKGROUND_THREAD()
64976	EXPAND_RESERVED_BASE
64976	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_END
64976	EXPAND_RESERVED_BASE
64976	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_END
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_END
(int)...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
16	EXPAND_RESERVED_END
... + ...	EXPAND_RESERVED_END
(...)	EXPAND_RESERVED_END
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD_TRAMPOLINE(x)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
is_potential_path	ASSERT_IS_BACKGROUND_THREAD()
declaration of __FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
array to pointer conversion	ASSERT_IS_BACKGROUND_THREAD()
buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
path	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
fd	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
case_sensitivity_cache	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
invalid highlight role	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/highlight.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
161	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
invalid highlight role	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/highlight.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
99	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD()
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD_TRAMPOLINE(x)
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
highlight	ASSERT_IS_BACKGROUND_THREAD()
declaration of __FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
array to pointer conversion	ASSERT_IS_BACKGROUND_THREAD()
call to has_value	assert(expr)
oper	assert(expr)
(const maybe_t<pipe_or_redir_t>)...	assert(expr)
Should have successfully parsed a pipe_or_redir_t since it was in our ast	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"oper.has_value() && ""Should have successfully parsed a pipe_or_redir_t since it was in our ast"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
1093	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void highlighter_t::visit(const ast::redirection_t &)	__ASSERT_FUNCTION
void highlighter_t::visit(const ast::redirection_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
4	R_OK
buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
call to __errno_location	errno
* ...	errno
(...)	errno
buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
2	W_OK
2	ENOENT
2	W_OK
r	assert(expr)
start	assert(expr)
r	assert(expr)
length	assert(expr)
... + ...	assert(expr)
r	assert(expr)
start	assert(expr)
... >= ...	assert(expr)
Overflow	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"r.start + r.length >= r.start && ""Overflow"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
839	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> highlighter_t::get_source(source_range_t) const	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> highlighter_t::get_source(source_range_t) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
r	assert(expr)
start	assert(expr)
r	assert(expr)
length	assert(expr)
... + ...	assert(expr)
(unsigned long)...	assert(expr)
call to size	assert(expr)
this	assert(expr)
buff	assert(expr)
(reference dereference)	assert(expr)
... <= ...	assert(expr)
Out of range	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"r.start + r.length <= this->buff.size() && ""Out of range"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
840	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
range	assert(expr)
start	assert(expr)
range	assert(expr)
length	assert(expr)
... + ...	assert(expr)
(unsigned long)...	assert(expr)
call to size	assert(expr)
this	assert(expr)
color_array	assert(expr)
(const vector<highlight_spec_t, allocator<highlight_spec_t>>)...	assert(expr)
... <= ...	assert(expr)
Range out of bounds	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"range.start + range.length <= this->color_array.size() && ""Range out of bounds"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
849	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void highlighter_t::color_range(source_range_t, highlight_spec_t)	__ASSERT_FUNCTION
void highlighter_t::color_range(source_range_t, highlight_spec_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	CURSOR_POSITION_INVALID
- ...	CURSOR_POSITION_INVALID
static_cast<size_t>...	CURSOR_POSITION_INVALID
cmdsub_end	assert(expr)
cmdsub_start	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsub_end > cmdsub_start	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
883	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void highlighter_t::color_as_argument(const ast::node_t &)	assert(expr)
void highlighter_t::color_as_argument(const ast::node_t &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmdsub_end	assert(expr)
cmdsub_start	assert(expr)
... - ...	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... - ...	assert(expr)
call to size	assert(expr)
cmdsub_contents	assert(expr)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsub_end - cmdsub_start - 1 == cmdsub_contents.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
884	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmdsub_start	assert(expr)
call to size	assert(expr)
arg_str	assert(expr)
... < ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsub_start < arg_str.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
893	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	CURSOR_POSITION_INVALID
- ...	CURSOR_POSITION_INVALID
static_cast<size_t>...	CURSOR_POSITION_INVALID
call to size	assert(expr)
subcolors	assert(expr)
(reference dereference)	assert(expr)
call to size	assert(expr)
cmdsub_contents	assert(expr)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
subcolors.size() == cmdsub_contents.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/highlight.cpp	assert(expr)
array to pointer conversion	assert(expr)
913	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(e)
contents	assert(e)
Null pointer	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
154	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
oper	FIELDS(__VA_ARGS__...)
target	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_for	FIELDS(__VA_ARGS__...)
var_name	FIELDS(__VA_ARGS__...)
kw_in	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_while	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_function	FIELDS(__VA_ARGS__...)
first_arg	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_begin	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
header	FIELDS(__VA_ARGS__...)
jobs	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_if	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
elseif_clauses	FIELDS(__VA_ARGS__...)
else_clause	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_case	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_switch	FIELDS(__VA_ARGS__...)
argument	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
cases	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
opt_decoration	FIELDS(__VA_ARGS__...)
command	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
pipe	FIELDS(__VA_ARGS__...)
newlines	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
continuation	FIELDS(__VA_ARGS__...)
bg	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
conjunction	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
decorator	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
continuations	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<keyword_base> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<token_base> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<maybe_newlines> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<argument> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<argument_list, argument_t> *)...	ELEMLIST(x,y)
(list_t<argument_list, argument_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<argument_or_redirection_list, argument_or_redirection_t> *)...	ELEMLIST(x,y)
(list_t<argument_or_redirection_list, argument_or_redirection_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<variable_assignment> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<variable_assignment_list, variable_assignment_t> *)...	ELEMLIST(x,y)
(list_t<variable_assignment_list, variable_assignment_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_list, job_conjunction_t> *)...	ELEMLIST(x,y)
(list_t<job_list, job_conjunction_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_conjunction_continuation_list, job_conjunction_continuation_t> *)...	ELEMLIST(x,y)
(list_t<job_conjunction_continuation_list, job_conjunction_continuation_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_continuation_list, job_continuation_t> *)...	ELEMLIST(x,y)
(list_t<job_continuation_list, job_continuation_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<andor_job_list, andor_job_t> *)...	ELEMLIST(x,y)
(list_t<andor_job_list, andor_job_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<elseif_clause_list, elseif_clause_t> *)...	ELEMLIST(x,y)
(list_t<elseif_clause_list, elseif_clause_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<case_item_list, case_item_t> *)...	ELEMLIST(x,y)
(list_t<case_item_list, case_item_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to operator bool	assert(e)
contents	assert(e)
Null pointer	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
121	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = highlight_role_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = highlight_role_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = pipe_or_redir_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = pipe_or_redir_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<not_statement_t, block_statement_t, if_statement_t, switch_statement_t, decorated_statement_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<for_header_t, while_header_t, function_header_t, begin_header_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
ptr	assert(e)
(reference dereference)	assert(e)
(const union_ptr_t<argument_t, redirection_t>)...	assert(e)
Should not have null ptr	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"ptr && ""Should not have null ptr"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
885	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
n	assert(e)
(bool)...	assert(e)
Node should not be null	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"n && ""Node should not be null"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
845	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<maybe_newlines>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<argument_list, argument_t>)...	ELEMLIST(x,y)
(const list_t<argument_list, argument_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<argument_or_redirection>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	ELEMLIST(x,y)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<variable_assignment_list, variable_assignment_t>)...	ELEMLIST(x,y)
(const list_t<variable_assignment_list, variable_assignment_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_conjunction>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_list, job_conjunction_t>)...	ELEMLIST(x,y)
(const list_t<job_list, job_conjunction_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_conjunction_continuation>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	ELEMLIST(x,y)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_continuation>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_continuation_list, job_continuation_t>)...	ELEMLIST(x,y)
(const list_t<job_continuation_list, job_continuation_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<andor_job>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<andor_job_list, andor_job_t>)...	ELEMLIST(x,y)
(const list_t<andor_job_list, andor_job_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<not_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<block_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<for_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<while_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<function_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<begin_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<if_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<if_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<elseif_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<elseif_clause_list, elseif_clause_t>)...	ELEMLIST(x,y)
(const list_t<elseif_clause_list, elseif_clause_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<else_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<switch_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<case_item>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<case_item_list, case_item_t>)...	ELEMLIST(x,y)
(const list_t<case_item_list, case_item_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<freestanding_argument_list>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
1	__try
0	__catch(X)
definition of isblank	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISblank	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of toupper	__NTH(fct)
definition of tolower	__NTH(fct)
definition of isxdigit	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISxdigit	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of isupper	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISupper	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of isspace	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISspace	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of ispunct	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISpunct	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of isprint	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISprint	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of islower	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISlower	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of isgraph	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISgraph	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of isdigit	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISdigit	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of iscntrl	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_IScntrl	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of isalpha	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISalpha	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
definition of isalnum	__isctype_f(type)
return ...	__isctype_f(type)
call to __ctype_b_loc	__isctype_f(type)
* ...	__isctype_f(type)
(...)	__isctype_f(type)
__c	__isctype_f(type)
(...)	__isctype_f(type)
(int)...	__isctype_f(type)
access to array	__isctype_f(type)
(int)...	__isctype_f(type)
_ISalnum	__isctype_f(type)
(unsigned short)...	__isctype_f(type)
(int)...	__isctype_f(type)
... & ...	__isctype_f(type)
{ ... }	__isctype_f(type)
0	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
0	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
0	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
1	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
1	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
2	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
2	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
2	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
3	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
3	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
3	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
4	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
4	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
4	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
5	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
5	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
5	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
6	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
6	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
6	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
7	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
7	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
7	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
8	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
8	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
9	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
9	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
9	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
10	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
10	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
10	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
11	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... < ...	_ISbit(bit)
1	_ISbit(bit)
11	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
1	_ISbit(bit)
11	_ISbit(bit)
(...)	_ISbit(bit)
... << ...	_ISbit(bit)
(...)	_ISbit(bit)
8	_ISbit(bit)
... >> ...	_ISbit(bit)
(...)	_ISbit(bit)
... ? ... : ...	_ISbit(bit)
(...)	_ISbit(bit)
deque::_M_range_check: __n (which is %zu)>= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to begin	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__next	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__next	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
offset	assert(expr)
length_	assert(expr)
... <= ...	assert(expr)
Invalid offset	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"offset <= length_ && ""Invalid offset"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/history_file.h	assert(expr)
array to pointer conversion	assert(expr)
48	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const char *history_file_contents_t::address_at(unsigned long) const	__ASSERT_FUNCTION
const char *history_file_contents_t::address_at(unsigned long) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
left_len	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
right_len	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
left_len > 0 && right_len > 0	assert(expr)
/opt/src/src/lru.h	assert(expr)
121	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Locking the history file took too long (%.3f seconds).	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
duration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
8	LOCK_UN
8	LOCK_UN
call to __errno_location	errno
* ...	errno
(...)	errno
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
profile_history	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
profile_history	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%s: %.0f ms	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
what	FLOGF(wht,__VA_ARGS__...)
end	FLOGF(wht,__VA_ARGS__...)
start	FLOGF(wht,__VA_ARGS__...)
... - ...	FLOGF(wht,__VA_ARGS__...)
(...)	FLOGF(wht,__VA_ARGS__...)
1000	FLOGF(wht,__VA_ARGS__...)
(double)...	FLOGF(wht,__VA_ARGS__...)
... * ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD_TRAMPOLINE(x)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
all_paths_are_valid	ASSERT_IS_BACKGROUND_THREAD()
declaration of __FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
array to pointer conversion	ASSERT_IS_BACKGROUND_THREAD()
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD_TRAMPOLINE(x)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
valid_paths	ASSERT_IS_BACKGROUND_THREAD()
declaration of __FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
array to pointer conversion	ASSERT_IS_BACKGROUND_THREAD()
fish	DFLT_FISH_HISTORY_SESSION_ID
array to pointer conversion	DFLT_FISH_HISTORY_SESSION_ID
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
History session ID '%ls' is not a valid variable name. Falling back to `%ls`.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
session_id	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
result	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to operator bool	assert(expr)
current_item_	assert(expr)
No current item	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"current_item_ && ""No current item"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/history.cpp	assert(expr)
array to pointer conversion	assert(expr)
637	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const history_item_t &history_search_t::current_item() const	__ASSERT_FUNCTION
const history_item_t &history_search_t::current_item() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
idx	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
idx > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/history.cpp	assert(expr)
array to pointer conversion	assert(expr)
512	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
history_item_t history_impl_t::item_at_index(unsigned long)	__ASSERT_FUNCTION
history_item_t history_impl_t::item_at_index(unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	O_RDONLY
1	O_WRONLY
64	O_CREAT
8192	BUFSIZ
8192	BUFSIZ
(size_t)...	BUFSIZ
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Error when writing history file	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
disable_automatic_save_counter	assert(expr)
0	assert(expr)
(unsigned int)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
disable_automatic_save_counter > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/history.cpp	assert(expr)
array to pointer conversion	assert(expr)
1014	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void history_impl_t::enable_automatic_saving()	__ASSERT_FUNCTION
void history_impl_t::enable_automatic_saving()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
disable_automatic_save_counter	assert(expr)
0	assert(expr)
(unsigned int)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
disable_automatic_save_counter != 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/history.cpp	assert(expr)
array to pointer conversion	assert(expr)
1010	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void history_impl_t::disable_automatic_saving()	__ASSERT_FUNCTION
void history_impl_t::disable_automatic_saving()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
first_unwritten_new_item_index	assert(expr)
call to size	assert(expr)
new_items	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
first_unwritten_new_item_index <= new_items.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/history.cpp	assert(expr)
array to pointer conversion	assert(expr)
458	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void history_impl_t::remove(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
void history_impl_t::remove(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
fish	DFLT_FISH_HISTORY_SESSION_ID
array to pointer conversion	DFLT_FISH_HISTORY_SESSION_ID
countdown_to_vacuum	assert(expr)
0	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
countdown_to_vacuum > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/history.cpp	assert(expr)
array to pointer conversion	assert(expr)
421	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void history_impl_t::save_unless_disabled()	__ASSERT_FUNCTION
void history_impl_t::save_unless_disabled()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Appending failed	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Saving %lu items via appending	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to size	FLOGF(wht,__VA_ARGS__...)
new_items	FLOGF(wht,__VA_ARGS__...)
first_unwritten_new_item_index	FLOGF(wht,__VA_ARGS__...)
... - ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(expr)
deleted_items	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
deleted_items.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/history.cpp	assert(expr)
array to pointer conversion	assert(expr)
851	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool history_impl_t::save_internal_via_appending()	__ASSERT_FUNCTION
bool history_impl_t::save_internal_via_appending()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	O_WRONLY
1024	O_APPEND
2	LOCK_EX
64	HISTORY_OUTPUT_BUFFER_SIZE
1024	HISTORY_OUTPUT_BUFFER_SIZE
... * ...	HISTORY_OUTPUT_BUFFER_SIZE
(...)	HISTORY_OUTPUT_BUFFER_SIZE
(size_t)...	HISTORY_OUTPUT_BUFFER_SIZE
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Saving %lu items via rewrite	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to size	FLOGF(wht,__VA_ARGS__...)
new_items	FLOGF(wht,__VA_ARGS__...)
first_unwritten_new_item_index	FLOGF(wht,__VA_ARGS__...)
... - ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	O_RDONLY
64	O_CREAT
0	O_RDONLY
2	LOCK_EX
0	SEEK_SET
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Error %d when truncating temporary history file	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Error %d when changing ownership of history file	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Error %d when changing mode of history file	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Error %d when renaming history file	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
dst_fd	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
dst_fd >= 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/history.cpp	assert(expr)
array to pointer conversion	assert(expr)
677	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool history_impl_t::rewrite_to_temporary_file(int, int) const	__ASSERT_FUNCTION
bool history_impl_t::rewrite_to_temporary_file(int, int) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1024	HISTORY_SAVE_MAX
256	HISTORY_SAVE_MAX
... * ...	HISTORY_SAVE_MAX
(...)	HISTORY_SAVE_MAX
(size_t)...	HISTORY_SAVE_MAX
64	HISTORY_OUTPUT_BUFFER_SIZE
1024	HISTORY_OUTPUT_BUFFER_SIZE
... * ...	HISTORY_OUTPUT_BUFFER_SIZE
(...)	HISTORY_OUTPUT_BUFFER_SIZE
64	HISTORY_OUTPUT_BUFFER_SIZE
1024	HISTORY_OUTPUT_BUFFER_SIZE
... * ...	HISTORY_OUTPUT_BUFFER_SIZE
(...)	HISTORY_OUTPUT_BUFFER_SIZE
(size_t)...	HISTORY_OUTPUT_BUFFER_SIZE
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history_file	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Error %d when writing to temporary history file	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
err	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	O_RDONLY
1	LOCK_SH
8	LOCK_UN
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
history	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Loaded %lu old items	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to size	FLOGF(wht,__VA_ARGS__...)
old_item_offsets	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __fish_assert	DIE(msg)
unexpected history_search_type_t value	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/history.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
227	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
node	assert(expr)
(lru_link_t *)...	assert(expr)
mouth	assert(expr)
& ...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
node != &mouth	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/lru.h	assert(expr)
array to pointer conversion	assert(expr)
63	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void lru_cache_t<Derived, Contents>::promote_node(lru_cache_t<Derived, Contents>::lru_node_t *) [with Derived = history_lru_cache_t; Contents = history_item_t]	__ASSERT_FUNCTION
void lru_cache_t<Derived, Contents>::promote_node(lru_cache_t<Derived, Contents>::lru_node_t *) [with Derived = history_lru_cache_t; Contents = history_item_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
mouth	assert(expr)
prev	assert(expr)
mouth	assert(expr)
& ...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
mouth.prev != &mouth	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/lru.h	assert(expr)
array to pointer conversion	assert(expr)
103	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void lru_cache_t<Derived, Contents>::evict_last_node() [with Derived = history_lru_cache_t; Contents = history_item_t]	__ASSERT_FUNCTION
void lru_cache_t<Derived, Contents>::evict_last_node() [with Derived = history_lru_cache_t; Contents = history_item_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
deque::_M_range_check: __n (which is %zu)>= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
deque::_M_range_check: __n (which is %zu)>= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to begin	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__next	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__next	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
left_len	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
right_len	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
left_len > 0 && right_len > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/lru.h	assert(expr)
array to pointer conversion	assert(expr)
121	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
static lru_cache_t<Derived, Contents>::lru_link_t *lru_cache_t<Derived, Contents>::merge(lru_cache_t<Derived, Contents>::lru_link_t *, unsigned long, lru_cache_t<Derived, Contents>::lru_link_t *, unsigned long, const F &) [with F = lambda [](const history_item_t &, const history_item_t &)->bool; Derived = history_lru_cache_t; Contents = history_item_t]	__ASSERT_FUNCTION
static lru_cache_t<Derived, Contents>::lru_link_t *lru_cache_t<Derived, Contents>::merge(lru_cache_t<Derived, Contents>::lru_link_t *, unsigned long, lru_cache_t<Derived, Contents>::lru_link_t *, unsigned long, const F &) [with F = lambda [](const history_item_t &, const history_item_t &)->bool; Derived = history_lru_cache_t; Contents = history_item_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = history_item_t]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = history_item_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
node	assert(expr)
(lru_link_t *)...	assert(expr)
mouth	assert(expr)
& ...	assert(expr)
... != ...	assert(expr)
node	assert(expr)
0	assert(expr)
(lru_node_t *)...	assert(expr)
... != ...	assert(expr)
... && ...	assert(expr)
node	assert(expr)
key	assert(expr)
0	assert(expr)
(const wcstring *)...	assert(expr)
... != ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
node != &mouth && node != nullptr && node->key != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/lru.h	assert(expr)
array to pointer conversion	assert(expr)
79	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void lru_cache_t<Derived, Contents>::evict_node(lru_cache_t<Derived, Contents>::lru_node_t *) [with Derived = history_lru_cache_t; Contents = history_item_t]	__ASSERT_FUNCTION
void lru_cache_t<Derived, Contents>::evict_node(lru_cache_t<Derived, Contents>::lru_node_t *) [with Derived = history_lru_cache_t; Contents = history_item_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator!=	assert(expr)
iter	assert(expr)
(const _Self)...	assert(expr)
(reference to)	assert(expr)
call to end	assert(expr)
this	assert(expr)
node_map	assert(expr)
(const _Self)...	assert(expr)
(reference to)	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
iter != this->node_map.end()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/lru.h	assert(expr)
array to pointer conversion	assert(expr)
82	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = history_item_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = history_item_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
key	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
value	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to __ctype_get_mb_cur_max	MB_CUR_MAX
(...)	MB_CUR_MAX
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
cursor	assert(e)
len	assert(e)
... <= ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
cursor <= len	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/history_file.cpp	assert(e)
array to pointer conversion	assert(e)
184	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
mmap_start	assert(e)
(const void *)...	assert(e)
1	assert(e)
1	MAP_FAILED
- ...	assert(e)
- ...	MAP_FAILED
(void *)...	assert(e)
(void *)...	MAP_FAILED
(...)	assert(e)
(...)	MAP_FAILED
(const void *)...	assert(e)
(const void *)...	MAP_FAILED
... != ...	assert(e)
Invalid mmap address	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"mmap_start != MAP_FAILED && ""Invalid mmap address"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/history_file.cpp	assert(e)
array to pointer conversion	assert(e)
115	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
2	SEEK_END
18446744073709551615	SIZE_MAX
(...)	SIZE_MAX
0	SEEK_SET
1	PROT_READ
2	MAP_PRIVATE
1	MAP_FAILED
- ...	MAP_FAILED
(void *)...	MAP_FAILED
(...)	MAP_FAILED
1	PROT_READ
2	PROT_WRITE
2	MAP_PRIVATE
32	MAP_ANON
32	MAP_ANONYMOUS
1	MAP_FAILED
- ...	MAP_FAILED
(void *)...	MAP_FAILED
(...)	MAP_FAILED
basic_string::at: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = history_file_type_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = history_file_type_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
call to basic_string	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
(reference to)	DEFAULT_BIND_MODE
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
64	__SIGRTMAX
64	_NSIG
1	_NSIG
... + ...	_NSIG
(...)	_NSIG
(unsigned long)...	_NSIG
call to operator bool	assert(expr)
s_input_initialized	assert(expr)
(const relaxed_atomic_t<bool>)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
s_input_initialized	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input.cpp	assert(expr)
array to pointer conversion	assert(expr)
751	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> input_terminfo_get_names(bool)	__ASSERT_FUNCTION
std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> input_terminfo_get_names(bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
s_input_initialized	assert(expr)
(const relaxed_atomic_t<bool>)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
s_input_initialized	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input.cpp	assert(expr)
array to pointer conversion	assert(expr)
738	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool input_terminfo_get_name(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *)	__ASSERT_FUNCTION
bool input_terminfo_get_name(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
input_terminfo_get_sequence	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to operator bool	assert(expr)
s_input_initialized	assert(expr)
(const relaxed_atomic_t<bool>)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
s_input_initialized	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input.cpp	assert(expr)
array to pointer conversion	assert(expr)
720	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool input_terminfo_get_sequence(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *)	__ASSERT_FUNCTION
bool input_terminfo_get_sequence(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
84	EILSEQ
call to __errno_location	errno
* ...	errno
(...)	errno
2	ENOENT
curses_initialized	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
curses_initialized	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input.cpp	assert(expr)
array to pointer conversion	assert(expr)
620	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::vector<terminfo_mapping_t, std::allocator<terminfo_mapping_t>> create_input_terminfo()	__ASSERT_FUNCTION
std::vector<terminfo_mapping_t, std::allocator<terminfo_mapping_t>> create_input_terminfo()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
init_input	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
32	NCCS
(unsigned long)...	NCCS
0	VINTR
call to empty	assert(expr)
bm	assert(expr)
(reference dereference)	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!bm.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input.cpp	assert(expr)
array to pointer conversion	assert(expr)
194	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void input_set_bind_mode(parser_t &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
void input_set_bind_mode(parser_t &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to basic_string	FISH_BIND_MODE_VAR
fish_bind_mode	FISH_BIND_MODE_VAR
array to pointer conversion	FISH_BIND_MODE_VAR
(reference to)	FISH_BIND_MODE_VAR
call to basic_string	FISH_BIND_MODE_VAR
fish_bind_mode	FISH_BIND_MODE_VAR
array to pointer conversion	FISH_BIND_MODE_VAR
(reference to)	FISH_BIND_MODE_VAR
call to basic_string	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
call to empty	assert(expr)
input_function_args_	assert(expr)
! ...	assert(expr)
function_pop_arg underflow	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!input_function_args_.empty() && ""function_pop_arg underflow"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input.cpp	assert(expr)
array to pointer conversion	assert(expr)
324	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
wchar_t inputter_t::function_pop_arg()	__ASSERT_FUNCTION
wchar_t inputter_t::function_pop_arg()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
str	assert(expr)
(reference dereference)	assert(expr)
! ...	assert(expr)
zero-length input string passed to mapping_is_match!	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!str.empty() && ""zero-length input string passed to mapping_is_match!"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input.cpp	assert(expr)
array to pointer conversion	assert(expr)
415	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool inputter_t::mapping_is_match(const input_mapping_t &)	__ASSERT_FUNCTION
bool inputter_t::mapping_is_match(const input_mapping_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
reader	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
reader	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
no generic found, ignoring char...	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
commands	assert(expr)
(bool)...	assert(expr)
mode	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
sets_mode	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
Null parameter	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"commands && mode && sets_mode && ""Null parameter"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/input.cpp	assert(expr)
array to pointer conversion	assert(expr)
234	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void input_mapping_set_t::add(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, const wchar_t *const *, unsigned long, const wchar_t *, const wchar_t *, bool)	__ASSERT_FUNCTION
void input_mapping_set_t::add(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, const wchar_t *const *, unsigned long, const wchar_t *, const wchar_t *, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
call to basic_string	DEFAULT_BIND_MODE
default	DEFAULT_BIND_MODE
array to pointer conversion	DEFAULT_BIND_MODE
(reference to)	DEFAULT_BIND_MODE
vector::reserve	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<input_mapping_name_t, allocator<input_mapping_name_t>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_start	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<input_mapping_name_t, allocator<input_mapping_name_t>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_finish	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
operator=	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
value_	assert(expr)
0	assert(expr)
(vector<terminfo_mapping_t, allocator<terminfo_mapping_t>> *)...	assert(expr)
... == ...	assert(expr)
Latch variable initialized multiple times	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"value_ == nullptr && ""Latch variable initialized multiple times"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/global_safety.h	assert(expr)
array to pointer conversion	assert(expr)
73	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void latch_t<T>::operator=(std::unique_ptr<T, std::default_delete<T>>) [with T = std::vector<terminfo_mapping_t, std::allocator<terminfo_mapping_t>>]	__ASSERT_FUNCTION
void latch_t<T>::operator=(std::unique_ptr<T, std::default_delete<T>>) [with T = std::vector<terminfo_mapping_t, std::allocator<terminfo_mapping_t>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator!=	assert(expr)
value	assert(expr)
(const unique_ptr<vector<terminfo_mapping_t, allocator<terminfo_mapping_t>>, default_delete<vector<terminfo_mapping_t, allocator<terminfo_mapping_t>>>>)...	assert(expr)
(reference to)	assert(expr)
0	assert(expr)
Latch variable initialized with null	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"value != nullptr && ""Latch variable initialized with null"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/global_safety.h	assert(expr)
array to pointer conversion	assert(expr)
74	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = input_mapping_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = input_mapping_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
this	_GLIBCXX_MOVE(__val)
(_Vector_base<input_mapping_t, allocator<input_mapping_t>> *)...	_GLIBCXX_MOVE(__val)
_M_impl	_GLIBCXX_MOVE(__val)
(_Vector_impl_data)...	_GLIBCXX_MOVE(__val)
_M_finish	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<input_mapping_t, allocator<input_mapping_t>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<input_mapping_t, allocator<input_mapping_t>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to input_mapping_t	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to input_mapping_t	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(long)...	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to input_mapping_t	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<input_mapping_t *, vector<input_mapping_t, allocator<input_mapping_t>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1024	__FD_SETSIZE
8	__NFDBITS
sizeof(__fd_mask)	__NFDBITS
(int)...	__NFDBITS
... * ...	__NFDBITS
(...)	__NFDBITS
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
30	WAIT_ON_ESCAPE_DEFAULT
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
stderr	stderr
0	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
(bool)...	FD_ZERO(fdsetp)
(bool)...	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
definition of __d0	FD_ZERO(fdsetp)
definition of __d0	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
definition of __d1	FD_ZERO(fdsetp)
definition of __d1	__FD_ZERO(fdsp)
declaration	FD_ZERO(fdsetp)
declaration	__FD_ZERO(fdsp)
asm statement	FD_ZERO(fdsetp)
asm statement	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
sizeof(fd_set)	FD_ZERO(fdsetp)
sizeof(fd_set)	__FD_ZERO(fdsp)
sizeof(__fd_mask)	FD_ZERO(fdsetp)
sizeof(__fd_mask)	__FD_ZERO(fdsp)
... / ...	FD_ZERO(fdsetp)
... / ...	__FD_ZERO(fdsp)
fds	FD_ZERO(fdsetp)
& ...	FD_ZERO(fdsetp)
(...)	FD_ZERO(fdsetp)
(...)	__FD_ZERO(fdsp)
(...)	__FDS_BITS(set)
1024	__FD_SETSIZE
8	__NFDBITS
sizeof(__fd_mask)	__NFDBITS
(int)...	__NFDBITS
... * ...	__NFDBITS
(...)	__NFDBITS
fds_bits	FD_ZERO(fdsetp)
fds_bits	__FD_ZERO(fdsp)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_ZERO(fdsetp)
array to pointer conversion	__FD_ZERO(fdsp)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_ZERO(fdsetp)
(...)	__FD_ZERO(fdsp)
(...)	__FDS_BITS(set)
0	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
access to array	FD_ZERO(fdsetp)
access to array	__FD_ZERO(fdsp)
& ...	FD_ZERO(fdsetp)
& ...	__FD_ZERO(fdsp)
{ ... }	FD_ZERO(fdsetp)
{ ... }	__FD_ZERO(fdsp)
fds	FD_SET(fd,fdsetp)
& ...	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
fds_bits	FD_SET(fd,fdsetp)
fds_bits	__FD_SET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_SET(fd,fdsetp)
array to pointer conversion	__FD_SET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_SET(fd,fdsetp)
(statement expression)	__FD_SET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
0	FD_SET(fd,fdsetp)
0	STDIN_FILENO
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_SET(fd,fdsetp)
definition of __d	__FD_SET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_SET(fd,fdsetp)
declaration	__FD_SET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_SET(fd,fdsetp)
ExprStmt	__FD_SET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_SET(fd,fdsetp)
call to __builtin_constant_p	__FD_SET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_SET(fd,fdsetp)
(bool)...	__FD_SET(d,set)
(bool)...	__FD_ELT(d)
0	FD_SET(fd,fdsetp)
0	__FD_SET(d,set)
0	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_SET(fd,fdsetp)
... <= ...	__FD_SET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
1024	FD_SET(fd,fdsetp)
1024	__FD_SET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_SET(fd,fdsetp)
... < ...	__FD_SET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_SET(fd,fdsetp)
... && ...	__FD_SET(d,set)
... && ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_SET(fd,fdsetp)
... / ...	__FD_SET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_SET(fd,fdsetp)
call to __fdelt_warn	__FD_SET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_SET(fd,fdsetp)
call to __fdelt_chk	__FD_SET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_SET(fd,fdsetp)
{ ... }	__FD_SET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_SET(fd,fdsetp)
access to array	__FD_SET(d,set)
1	FD_SET(fd,fdsetp)
1	__FD_SET(d,set)
1	__FD_MASK(d)
0	FD_SET(fd,fdsetp)
0	STDIN_FILENO
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_SET(fd,fdsetp)
... % ...	__FD_SET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_SET(fd,fdsetp)
... << ...	__FD_SET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_SET(fd,fdsetp)
(__fd_mask)...	__FD_SET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... |= ...	FD_SET(fd,fdsetp)
... |= ...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(void)...	FD_SET(fd,fdsetp)
(void)...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
readch	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to __ctype_get_mb_cur_max	MB_CUR_MAX
(...)	MB_CUR_MAX
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
reader	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
reader	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Illegal input	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
(bool)...	FD_ZERO(fdsetp)
(bool)...	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
definition of __d0	FD_ZERO(fdsetp)
definition of __d0	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
definition of __d1	FD_ZERO(fdsetp)
definition of __d1	__FD_ZERO(fdsp)
declaration	FD_ZERO(fdsetp)
declaration	__FD_ZERO(fdsp)
asm statement	FD_ZERO(fdsetp)
asm statement	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
sizeof(fd_set)	FD_ZERO(fdsetp)
sizeof(fd_set)	__FD_ZERO(fdsp)
sizeof(__fd_mask)	FD_ZERO(fdsetp)
sizeof(__fd_mask)	__FD_ZERO(fdsp)
... / ...	FD_ZERO(fdsetp)
... / ...	__FD_ZERO(fdsp)
fdset	FD_ZERO(fdsetp)
& ...	FD_ZERO(fdsetp)
(...)	FD_ZERO(fdsetp)
(...)	__FD_ZERO(fdsp)
(...)	__FDS_BITS(set)
fds_bits	FD_ZERO(fdsetp)
fds_bits	__FD_ZERO(fdsp)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_ZERO(fdsetp)
array to pointer conversion	__FD_ZERO(fdsp)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_ZERO(fdsetp)
(...)	__FD_ZERO(fdsp)
(...)	__FDS_BITS(set)
0	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
access to array	FD_ZERO(fdsetp)
access to array	__FD_ZERO(fdsp)
& ...	FD_ZERO(fdsetp)
& ...	__FD_ZERO(fdsp)
{ ... }	FD_ZERO(fdsetp)
{ ... }	__FD_ZERO(fdsp)
fdset	FD_SET(fd,fdsetp)
& ...	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
fds_bits	FD_SET(fd,fdsetp)
fds_bits	__FD_SET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_SET(fd,fdsetp)
array to pointer conversion	__FD_SET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_SET(fd,fdsetp)
(statement expression)	__FD_SET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
0	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_SET(fd,fdsetp)
definition of __d	__FD_SET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_SET(fd,fdsetp)
declaration	__FD_SET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_SET(fd,fdsetp)
ExprStmt	__FD_SET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_SET(fd,fdsetp)
call to __builtin_constant_p	__FD_SET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_SET(fd,fdsetp)
(bool)...	__FD_SET(d,set)
(bool)...	__FD_ELT(d)
0	FD_SET(fd,fdsetp)
0	__FD_SET(d,set)
0	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_SET(fd,fdsetp)
... <= ...	__FD_SET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
1024	FD_SET(fd,fdsetp)
1024	__FD_SET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_SET(fd,fdsetp)
... < ...	__FD_SET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_SET(fd,fdsetp)
... && ...	__FD_SET(d,set)
... && ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_SET(fd,fdsetp)
... / ...	__FD_SET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_SET(fd,fdsetp)
call to __fdelt_warn	__FD_SET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_SET(fd,fdsetp)
call to __fdelt_chk	__FD_SET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_SET(fd,fdsetp)
{ ... }	__FD_SET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_SET(fd,fdsetp)
access to array	__FD_SET(d,set)
1	FD_SET(fd,fdsetp)
1	__FD_SET(d,set)
1	__FD_MASK(d)
0	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_SET(fd,fdsetp)
... % ...	__FD_SET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_SET(fd,fdsetp)
... << ...	__FD_SET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_SET(fd,fdsetp)
(__fd_mask)...	__FD_SET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... |= ...	FD_SET(fd,fdsetp)
... |= ...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(void)...	FD_SET(fd,fdsetp)
(void)...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
fdset	FD_SET(fd,fdsetp)
& ...	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
fds_bits	FD_SET(fd,fdsetp)
fds_bits	__FD_SET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_SET(fd,fdsetp)
array to pointer conversion	__FD_SET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_SET(fd,fdsetp)
(statement expression)	__FD_SET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
ioport	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_SET(fd,fdsetp)
definition of __d	__FD_SET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_SET(fd,fdsetp)
declaration	__FD_SET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_SET(fd,fdsetp)
ExprStmt	__FD_SET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_SET(fd,fdsetp)
call to __builtin_constant_p	__FD_SET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_SET(fd,fdsetp)
(bool)...	__FD_SET(d,set)
(bool)...	__FD_ELT(d)
0	FD_SET(fd,fdsetp)
0	__FD_SET(d,set)
0	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_SET(fd,fdsetp)
... <= ...	__FD_SET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
1024	FD_SET(fd,fdsetp)
1024	__FD_SET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_SET(fd,fdsetp)
... < ...	__FD_SET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_SET(fd,fdsetp)
... && ...	__FD_SET(d,set)
... && ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_SET(fd,fdsetp)
... / ...	__FD_SET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_SET(fd,fdsetp)
call to __fdelt_warn	__FD_SET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_SET(fd,fdsetp)
call to __fdelt_chk	__FD_SET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_SET(fd,fdsetp)
{ ... }	__FD_SET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_SET(fd,fdsetp)
access to array	__FD_SET(d,set)
1	FD_SET(fd,fdsetp)
1	__FD_SET(d,set)
1	__FD_MASK(d)
ioport	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_SET(fd,fdsetp)
... % ...	__FD_SET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_SET(fd,fdsetp)
... << ...	__FD_SET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_SET(fd,fdsetp)
(__fd_mask)...	__FD_SET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... |= ...	FD_SET(fd,fdsetp)
... |= ...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(void)...	FD_SET(fd,fdsetp)
(void)...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
fdset	FD_SET(fd,fdsetp)
& ...	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
fds_bits	FD_SET(fd,fdsetp)
fds_bits	__FD_SET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_SET(fd,fdsetp)
array to pointer conversion	__FD_SET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_SET(fd,fdsetp)
(statement expression)	__FD_SET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
notifier_fd	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_SET(fd,fdsetp)
definition of __d	__FD_SET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_SET(fd,fdsetp)
declaration	__FD_SET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_SET(fd,fdsetp)
ExprStmt	__FD_SET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_SET(fd,fdsetp)
call to __builtin_constant_p	__FD_SET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_SET(fd,fdsetp)
(bool)...	__FD_SET(d,set)
(bool)...	__FD_ELT(d)
0	FD_SET(fd,fdsetp)
0	__FD_SET(d,set)
0	__FD_ELT(d)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_SET(fd,fdsetp)
... <= ...	__FD_SET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
1024	FD_SET(fd,fdsetp)
1024	__FD_SET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_SET(fd,fdsetp)
... < ...	__FD_SET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_SET(fd,fdsetp)
... && ...	__FD_SET(d,set)
... && ...	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_SET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_SET(fd,fdsetp)
... / ...	__FD_SET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_SET(fd,fdsetp)
call to __fdelt_warn	__FD_SET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_SET(fd,fdsetp)
call to __fdelt_chk	__FD_SET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_SET(fd,fdsetp)
__d	__FD_SET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_SET(fd,fdsetp)
{ ... }	__FD_SET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_SET(fd,fdsetp)
access to array	__FD_SET(d,set)
1	FD_SET(fd,fdsetp)
1	__FD_SET(d,set)
1	__FD_MASK(d)
notifier_fd	FD_SET(fd,fdsetp)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
8	FD_SET(fd,fdsetp)
8	__FD_SET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_SET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_SET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_SET(fd,fdsetp)
... % ...	__FD_SET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_SET(fd,fdsetp)
... << ...	__FD_SET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_SET(fd,fdsetp)
(__fd_mask)...	__FD_SET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	__FD_MASK(d)
... |= ...	FD_SET(fd,fdsetp)
... |= ...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(void)...	FD_SET(fd,fdsetp)
(void)...	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
call to __errno_location	errno
* ...	errno
(...)	errno
11	EAGAIN
fdset	FD_ISSET(fd,fdsetp)
& ...	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
fds_bits	FD_ISSET(fd,fdsetp)
fds_bits	__FD_ISSET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_ISSET(fd,fdsetp)
array to pointer conversion	__FD_ISSET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_ISSET(fd,fdsetp)
(statement expression)	__FD_ISSET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
notifier_fd	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_ISSET(fd,fdsetp)
definition of __d	__FD_ISSET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_ISSET(fd,fdsetp)
declaration	__FD_ISSET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_ISSET(fd,fdsetp)
ExprStmt	__FD_ISSET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_ISSET(fd,fdsetp)
call to __builtin_constant_p	__FD_ISSET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_ISSET(fd,fdsetp)
(bool)...	__FD_ISSET(d,set)
(bool)...	__FD_ELT(d)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
0	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_ISSET(fd,fdsetp)
... <= ...	__FD_ISSET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
1024	FD_ISSET(fd,fdsetp)
1024	__FD_ISSET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_ISSET(fd,fdsetp)
... < ...	__FD_ISSET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_ISSET(fd,fdsetp)
... && ...	__FD_ISSET(d,set)
... && ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_ISSET(fd,fdsetp)
... / ...	__FD_ISSET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_ISSET(fd,fdsetp)
call to __fdelt_warn	__FD_ISSET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_ISSET(fd,fdsetp)
call to __fdelt_chk	__FD_ISSET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_ISSET(fd,fdsetp)
{ ... }	__FD_ISSET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_ISSET(fd,fdsetp)
access to array	__FD_ISSET(d,set)
1	FD_ISSET(fd,fdsetp)
1	__FD_ISSET(d,set)
1	__FD_MASK(d)
notifier_fd	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_ISSET(fd,fdsetp)
... % ...	__FD_ISSET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_ISSET(fd,fdsetp)
... << ...	__FD_ISSET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_ISSET(fd,fdsetp)
(__fd_mask)...	__FD_ISSET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... & ...	FD_ISSET(fd,fdsetp)
... & ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
... != ...	FD_ISSET(fd,fdsetp)
... != ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
fdset	FD_ISSET(fd,fdsetp)
& ...	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
fds_bits	FD_ISSET(fd,fdsetp)
fds_bits	__FD_ISSET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_ISSET(fd,fdsetp)
array to pointer conversion	__FD_ISSET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_ISSET(fd,fdsetp)
(statement expression)	__FD_ISSET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
0	FD_ISSET(fd,fdsetp)
0	STDIN_FILENO
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_ISSET(fd,fdsetp)
definition of __d	__FD_ISSET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_ISSET(fd,fdsetp)
declaration	__FD_ISSET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_ISSET(fd,fdsetp)
ExprStmt	__FD_ISSET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_ISSET(fd,fdsetp)
call to __builtin_constant_p	__FD_ISSET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_ISSET(fd,fdsetp)
(bool)...	__FD_ISSET(d,set)
(bool)...	__FD_ELT(d)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
0	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_ISSET(fd,fdsetp)
... <= ...	__FD_ISSET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
1024	FD_ISSET(fd,fdsetp)
1024	__FD_ISSET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_ISSET(fd,fdsetp)
... < ...	__FD_ISSET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_ISSET(fd,fdsetp)
... && ...	__FD_ISSET(d,set)
... && ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_ISSET(fd,fdsetp)
... / ...	__FD_ISSET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_ISSET(fd,fdsetp)
call to __fdelt_warn	__FD_ISSET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_ISSET(fd,fdsetp)
call to __fdelt_chk	__FD_ISSET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_ISSET(fd,fdsetp)
{ ... }	__FD_ISSET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_ISSET(fd,fdsetp)
access to array	__FD_ISSET(d,set)
1	FD_ISSET(fd,fdsetp)
1	__FD_ISSET(d,set)
1	__FD_MASK(d)
0	FD_ISSET(fd,fdsetp)
0	STDIN_FILENO
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_ISSET(fd,fdsetp)
... % ...	__FD_ISSET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_ISSET(fd,fdsetp)
... << ...	__FD_ISSET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_ISSET(fd,fdsetp)
(__fd_mask)...	__FD_ISSET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... & ...	FD_ISSET(fd,fdsetp)
... & ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
... != ...	FD_ISSET(fd,fdsetp)
... != ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
fdset	FD_ISSET(fd,fdsetp)
& ...	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
fds_bits	FD_ISSET(fd,fdsetp)
fds_bits	__FD_ISSET(d,set)
fds_bits	__FDS_BITS(set)
array to pointer conversion	FD_ISSET(fd,fdsetp)
array to pointer conversion	__FD_ISSET(d,set)
array to pointer conversion	__FDS_BITS(set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FDS_BITS(set)
(statement expression)	FD_ISSET(fd,fdsetp)
(statement expression)	__FD_ISSET(d,set)
(statement expression)	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
ioport	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
definition of __d	FD_ISSET(fd,fdsetp)
definition of __d	__FD_ISSET(d,set)
definition of __d	__FD_ELT(d)
declaration	FD_ISSET(fd,fdsetp)
declaration	__FD_ISSET(d,set)
declaration	__FD_ELT(d)
ExprStmt	FD_ISSET(fd,fdsetp)
ExprStmt	__FD_ISSET(d,set)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	FD_ISSET(fd,fdsetp)
call to __builtin_constant_p	__FD_ISSET(d,set)
call to __builtin_constant_p	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
(bool)...	FD_ISSET(fd,fdsetp)
(bool)...	__FD_ISSET(d,set)
(bool)...	__FD_ELT(d)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
0	__FD_ELT(d)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... <= ...	FD_ISSET(fd,fdsetp)
... <= ...	__FD_ISSET(d,set)
... <= ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
1024	FD_ISSET(fd,fdsetp)
1024	__FD_ISSET(d,set)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	FD_ISSET(fd,fdsetp)
... < ...	__FD_ISSET(d,set)
... < ...	__FD_ELT(d)
... && ...	FD_ISSET(fd,fdsetp)
... && ...	__FD_ISSET(d,set)
... && ...	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	FD_ISSET(fd,fdsetp)
... / ...	__FD_ISSET(d,set)
... / ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_warn	FD_ISSET(fd,fdsetp)
call to __fdelt_warn	__FD_ISSET(d,set)
call to __fdelt_warn	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
call to __fdelt_chk	FD_ISSET(fd,fdsetp)
call to __fdelt_chk	__FD_ISSET(d,set)
call to __fdelt_chk	__FD_ELT(d)
__d	FD_ISSET(fd,fdsetp)
__d	__FD_ISSET(d,set)
__d	__FD_ELT(d)
... ? ... : ...	FD_ISSET(fd,fdsetp)
... ? ... : ...	__FD_ISSET(d,set)
... ? ... : ...	__FD_ELT(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_ELT(d)
{ ... }	FD_ISSET(fd,fdsetp)
{ ... }	__FD_ISSET(d,set)
{ ... }	__FD_ELT(d)
access to array	FD_ISSET(fd,fdsetp)
access to array	__FD_ISSET(d,set)
1	FD_ISSET(fd,fdsetp)
1	__FD_ISSET(d,set)
1	__FD_MASK(d)
ioport	FD_ISSET(fd,fdsetp)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
8	FD_ISSET(fd,fdsetp)
8	__FD_ISSET(d,set)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	FD_ISSET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ISSET(d,set)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	FD_ISSET(fd,fdsetp)
(int)...	__FD_ISSET(d,set)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	FD_ISSET(fd,fdsetp)
... * ...	__FD_ISSET(d,set)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	FD_ISSET(fd,fdsetp)
... % ...	__FD_ISSET(d,set)
... % ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... << ...	FD_ISSET(fd,fdsetp)
... << ...	__FD_ISSET(d,set)
... << ...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
(__fd_mask)...	FD_ISSET(fd,fdsetp)
(__fd_mask)...	__FD_ISSET(d,set)
(__fd_mask)...	__FD_MASK(d)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
(...)	__FD_MASK(d)
... & ...	FD_ISSET(fd,fdsetp)
... & ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
0	FD_ISSET(fd,fdsetp)
0	__FD_ISSET(d,set)
(long)...	FD_ISSET(fd,fdsetp)
(long)...	__FD_ISSET(d,set)
... != ...	FD_ISSET(fd,fdsetp)
... != ...	__FD_ISSET(d,set)
(...)	FD_ISSET(fd,fdsetp)
(...)	__FD_ISSET(d,set)
30	WAIT_ON_ESCAPE_DEFAULT
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = char_event_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = char_event_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
this	_GLIBCXX_MOVE(__val)
(_Vector_base<const wchar_t *, allocator<const wchar_t *>> *)...	_GLIBCXX_MOVE(__val)
_M_impl	_GLIBCXX_MOVE(__val)
(_Vector_impl_data)...	_GLIBCXX_MOVE(__val)
_M_finish	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<const wchar_t **, vector<const wchar_t *, allocator<const wchar_t *>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<const wchar_t *, allocator<const wchar_t *>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<const wchar_t *, allocator<const wchar_t *>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	STDOUT_FILENO
timeout_usec	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
Invalid timeout	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"timeout_usec > 0 && ""Invalid timeout"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/fd_monitor.h	assert(expr)
array to pointer conversion	assert(expr)
42	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
fd_monitor_item_t::fd_monitor_item_t(autoclose_fd_t, std::function<void (autoclose_fd_t &, bool)>, unsigned long)	__ASSERT_FUNCTION
fd_monitor_item_t::fd_monitor_item_t(autoclose_fd_t, std::function<void (autoclose_fd_t &, bool)>, unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	PIPE_ERROR
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	PIPE_ERROR
call to wgettext	_(wstr)
An error occurred while setting up pipe	FLOGF(wht,__VA_ARGS__...)
An error occurred while setting up pipe	PIPE_ERROR
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	PIPE_ERROR
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	PIPE_ERROR
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
tmp_fd	assert(expr)
call to fd	assert(expr)
fd	assert(expr)
(const autoclose_fd_t)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
tmp_fd != fd.fd()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
310	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
autoclose_fd_t move_fd_to_unused(autoclose_fd_t, const fd_set_t &)	__ASSERT_FUNCTION
autoclose_fd_t move_fd_to_unused(autoclose_fd_t, const fd_set_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
stderr	stderr
stderr	stderr
stderr	stderr
stderr	stderr
stderr	stderr
call to has_value	assert(expr)
target_fd	assert(expr)
(const maybe_t<int>)...	assert(expr)
fd redirection should have been validated already	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"target_fd.has_value() && ""fd redirection should have been validated already"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
239	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool io_chain_t::append_from_specs(const std::vector<redirection_spec_t, std::allocator<redirection_spec_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
bool io_chain_t::append_from_specs(const std::vector<redirection_spec_t, std::allocator<redirection_spec_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
438	OPEN_MASK
(mode_t)...	OPEN_MASK
128	O_EXCL
call to __errno_location	errno
* ...	errno
(...)	errno
17	EEXIST
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	NOCLOB_ERROR
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	NOCLOB_ERROR
call to wgettext	_(wstr)
The file '%ls' already exists	FLOGF(wht,__VA_ARGS__...)
The file '%ls' already exists	NOCLOB_ERROR
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	NOCLOB_ERROR
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	NOCLOB_ERROR
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
spec	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
target	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	FILE_ERROR
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	FILE_ERROR
call to wgettext	_(wstr)
An error occurred while redirecting file '%ls'	FLOGF(wht,__VA_ARGS__...)
An error occurred while redirecting file '%ls'	FILE_ERROR
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FILE_ERROR
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FILE_ERROR
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
spec	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
target	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to operator bool	should_flog(wht)
g_instance	should_flog(wht)
warning	should_flog(wht)
enabled	should_flog(wht)
(...)	should_flog(wht)
(const relaxed_atomic_t<bool>)...	should_flog(wht)
chain	assert(expr)
(reference dereference)	assert(expr)
& ...	assert(expr)
this	assert(expr)
(const io_chain_t *)...	assert(expr)
... != ...	assert(expr)
Cannot append self to self	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"&chain != this && ""Cannot append self to self"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
225	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void io_chain_t::append(const io_chain_t &)	__ASSERT_FUNCTION
void io_chain_t::append(const io_chain_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to get	assert(expr)
element	assert(expr)
(__shared_ptr<const io_data_t, _S_atomic>)...	assert(expr)
(const __shared_ptr<const io_data_t, _S_atomic>)...	assert(expr)
0	assert(expr)
(element_type *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
element.get() != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
220	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void io_chain_t::push_back(std::shared_ptr<const io_data_t>)	__ASSERT_FUNCTION
void io_chain_t::push_back(std::shared_ptr<const io_data_t>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
stderr	stderr
stderr	stderr
stderr	stderr
call to operator bool	assert(expr)
filler	assert(expr)
(reference dereference)	assert(expr)
(const __shared_ptr<io_bufferfill_t, _S_atomic>)...	assert(expr)
Null pointer in finish	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filler && ""Null pointer in finish"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
197	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
static std::shared_ptr<io_buffer_t> io_bufferfill_t::finish(std::shared_ptr<io_bufferfill_t> &&)	__ASSERT_FUNCTION
static std::shared_ptr<io_buffer_t> io_bufferfill_t::finish(std::shared_ptr<io_bufferfill_t> &&)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
target	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
Invalid target fd	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"target >= 0 && ""Invalid target fd"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
171	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
static std::shared_ptr<io_bufferfill_t> io_bufferfill_t::create(const fd_set_t &, unsigned long, int)	__ASSERT_FUNCTION
static std::shared_ptr<io_bufferfill_t> io_bufferfill_t::create(const fd_set_t &, unsigned long, int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	PIPE_ERROR
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	PIPE_ERROR
call to wgettext	_(wstr)
An error occurred while setting up pipe	FLOGF(wht,__VA_ARGS__...)
An error occurred while setting up pipe	PIPE_ERROR
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	PIPE_ERROR
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	PIPE_ERROR
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
stderr	stderr
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD_TRAMPOLINE(x)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
operator()	ASSERT_IS_BACKGROUND_THREAD()
declaration of __FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
array to pointer conversion	ASSERT_IS_BACKGROUND_THREAD()
call to __errno_location	errno
* ...	errno
(...)	errno
11	EAGAIN
call to fillthread_running	assert(expr)
! ...	assert(expr)
io_buffer_t destroyed with outstanding fillthread	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!fillthread_running() && ""io_buffer_t destroyed with outstanding fillthread"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
205	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
io_buffer_t::~io_buffer_t()	__ASSERT_FUNCTION
io_buffer_t::~io_buffer_t()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
complete_background_fillthread	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to fillthread_running	assert(expr)
Should have a fillthread	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"fillthread_running() && ""Should have a fillthread"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
160	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void io_buffer_t::complete_background_fillthread()	__ASSERT_FUNCTION
void io_buffer_t::complete_background_fillthread()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
begin_filling	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to fillthread_running	assert(expr)
! ...	assert(expr)
Already have a fillthread	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!fillthread_running() && ""Already have a fillthread"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
93	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void io_buffer_t::begin_filling(autoclose_fd_t)	__ASSERT_FUNCTION
void io_buffer_t::begin_filling(autoclose_fd_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
fd	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
Invalid fd	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"fd >= 0 && ""Invalid fd"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/io.cpp	assert(expr)
array to pointer conversion	assert(expr)
73	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
long io_buffer_t::read_once(int)	__ASSERT_FUNCTION
long io_buffer_t::read_once(int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_locked	ASSERT_IS_LOCKED(x)
append_lock_	ASSERT_IS_LOCKED(x)
& ...	ASSERT_IS_LOCKED(x)
reinterpret_cast<void *>...	ASSERT_IS_LOCKED(x)
append_lock_	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
read_once	ASSERT_IS_LOCKED(x)
declaration of __FUNCTION__	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
call to __errno_location	errno
* ...	errno
(...)	errno
11	EAGAIN
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const __normal_iterator<shared_ptr<const io_data_t> *, vector<shared_ptr<const io_data_t>, allocator<shared_ptr<const io_data_t>>>>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<shared_ptr<const io_data_t> *, vector<shared_ptr<const io_data_t>, allocator<shared_ptr<const io_data_t>>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<signed long, std::ratio<1L, 1000000000L>>>]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
basic_string::_M_construct null not valid	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to pipe	assert_with_errno(e)
pipes	assert_with_errno(e)
array to pointer conversion	assert_with_errno(e)
1	assert_with_errno(e)
- ...	assert_with_errno(e)
... != ...	assert_with_errno(e)
(...)	assert_with_errno(e)
0	assert_with_errno(e)
(void)...	assert_with_errno(e)
(...)	assert_with_errno(e)
call to __fish_assert	assert_with_errno(e)
pipe(pipes) != -1	assert_with_errno(e)
array to pointer conversion	assert_with_errno(e)
/opt/src/src/iothread.cpp	assert_with_errno(e)
array to pointer conversion	assert_with_errno(e)
156	assert_with_errno(e)
(size_t)...	assert_with_errno(e)
call to __errno_location	errno
call to __errno_location	assert_with_errno(e)
* ...	errno
* ...	assert_with_errno(e)
(...)	errno
(...)	assert_with_errno(e)
... ? ... : ...	assert_with_errno(e)
0	DIE_ON_FAILURE(e)
(bool)...	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
call to pthread_sigmask	DIE_ON_FAILURE(e)
0	DIE_ON_FAILURE(e)
0	SIG_BLOCK
new_set	DIE_ON_FAILURE(e)
& ...	DIE_ON_FAILURE(e)
(const __sigset_t *)...	DIE_ON_FAILURE(e)
saved_set	DIE_ON_FAILURE(e)
& ...	DIE_ON_FAILURE(e)
definition of status	DIE_ON_FAILURE(e)
declaration	DIE_ON_FAILURE(e)
if (...) ... 	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
0	DIE_ON_FAILURE(e)
... != ...	DIE_ON_FAILURE(e)
ExprStmt	DIE_ON_FAILURE(e)
call to __fish_assert	DIE_ON_FAILURE(e)
pthread_sigmask(SIG_BLOCK, &new_set, &saved_set)	DIE_ON_FAILURE(e)
array to pointer conversion	DIE_ON_FAILURE(e)
/opt/src/src/iothread.cpp	DIE_ON_FAILURE(e)
array to pointer conversion	DIE_ON_FAILURE(e)
445	DIE_ON_FAILURE(e)
(size_t)...	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
{ ... }	DIE_ON_FAILURE(e)
{ ... }	DIE_ON_FAILURE(e)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
pthread %p spawned	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
thread	FLOGF(wht,__VA_ARGS__...)
(intptr_t)...	FLOGF(wht,__VA_ARGS__...)
(void *)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	DIE_ON_FAILURE(e)
(bool)...	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
call to pthread_detach	DIE_ON_FAILURE(e)
thread	DIE_ON_FAILURE(e)
definition of status	DIE_ON_FAILURE(e)
declaration	DIE_ON_FAILURE(e)
if (...) ... 	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
0	DIE_ON_FAILURE(e)
... != ...	DIE_ON_FAILURE(e)
ExprStmt	DIE_ON_FAILURE(e)
call to __fish_assert	DIE_ON_FAILURE(e)
pthread_detach(thread)	DIE_ON_FAILURE(e)
array to pointer conversion	DIE_ON_FAILURE(e)
/opt/src/src/iothread.cpp	DIE_ON_FAILURE(e)
array to pointer conversion	DIE_ON_FAILURE(e)
455	DIE_ON_FAILURE(e)
(size_t)...	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
{ ... }	DIE_ON_FAILURE(e)
{ ... }	DIE_ON_FAILURE(e)
0	DIE_ON_FAILURE(e)
(bool)...	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
call to pthread_sigmask	DIE_ON_FAILURE(e)
2	DIE_ON_FAILURE(e)
2	SIG_SETMASK
saved_set	DIE_ON_FAILURE(e)
& ...	DIE_ON_FAILURE(e)
(const __sigset_t *)...	DIE_ON_FAILURE(e)
0	DIE_ON_FAILURE(e)
(__sigset_t *)...	DIE_ON_FAILURE(e)
definition of status	DIE_ON_FAILURE(e)
declaration	DIE_ON_FAILURE(e)
if (...) ... 	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
0	DIE_ON_FAILURE(e)
... != ...	DIE_ON_FAILURE(e)
ExprStmt	DIE_ON_FAILURE(e)
call to __fish_assert	DIE_ON_FAILURE(e)
pthread_sigmask(SIG_SETMASK, &saved_set, nullptr)	DIE_ON_FAILURE(e)
array to pointer conversion	DIE_ON_FAILURE(e)
/opt/src/src/iothread.cpp	DIE_ON_FAILURE(e)
array to pointer conversion	DIE_ON_FAILURE(e)
460	DIE_ON_FAILURE(e)
(size_t)...	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
{ ... }	DIE_ON_FAILURE(e)
{ ... }	DIE_ON_FAILURE(e)
99	IO_SERVICE_MAIN_THREAD_REQUEST_QUEUE
(char)...	IO_SERVICE_MAIN_THREAD_REQUEST_QUEUE
call to write_loop	assert_with_errno(e)
notify_fd	assert_with_errno(e)
wakeup_byte	assert_with_errno(e)
& ...	assert_with_errno(e)
sizeof(<expr>)	assert_with_errno(e)
wakeup_byte	assert_with_errno(e)
1	assert_with_errno(e)
- ...	assert_with_errno(e)
(long)...	assert_with_errno(e)
... != ...	assert_with_errno(e)
(...)	assert_with_errno(e)
0	assert_with_errno(e)
(void)...	assert_with_errno(e)
(...)	assert_with_errno(e)
call to __fish_assert	assert_with_errno(e)
write_loop(notify_fd, &wakeup_byte, sizeof wakeup_byte) != -1	assert_with_errno(e)
array to pointer conversion	assert_with_errno(e)
/opt/src/src/iothread.cpp	assert_with_errno(e)
array to pointer conversion	assert_with_errno(e)
425	assert_with_errno(e)
(size_t)...	assert_with_errno(e)
call to __errno_location	errno
call to __errno_location	assert_with_errno(e)
* ...	errno
* ...	assert_with_errno(e)
(...)	errno
(...)	assert_with_errno(e)
... ? ... : ...	assert_with_errno(e)
call to operator bool	assert(expr)
req	assert(expr)
done	assert(expr)
(const relaxed_atomic_t<bool>)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
req.done	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/iothread.cpp	assert(expr)
array to pointer conversion	assert(expr)
436	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void iothread_perform_on_main(std::function<void ()> &&)	__ASSERT_FUNCTION
void iothread_perform_on_main(std::function<void ()> &&)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
iothread_service_main_thread_requests	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
iothread_drain_all	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD_TRAMPOLINE(x)
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD()
__FUNCTION__	ASSERT_IS_NOT_FORKED_CHILD()
array to pointer conversion	ASSERT_IS_NOT_FORKED_CHILD()
call to operator->	assert(expr)
data	assert(expr)
drain	assert(expr)
! ...	assert(expr)
Should not be draining already	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!data->drain && ""Should not be draining already"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/iothread.cpp	assert(expr)
array to pointer conversion	assert(expr)
328	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int iothread_drain_all()	__ASSERT_FUNCTION
int iothread_drain_all()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator->	assert(expr)
data	assert(expr)
total_threads	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... == ...	assert(expr)
Should be no threads	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"data->total_threads == 0 && ""Should be no threads"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/iothread.cpp	assert(expr)
array to pointer conversion	assert(expr)
350	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator->	assert(expr)
data	assert(expr)
drain	assert(expr)
Should be draining	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"data->drain && ""Should be draining"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/iothread.cpp	assert(expr)
array to pointer conversion	assert(expr)
351	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Drained %d thread(s) in %.02f msec	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
thread_count	FLOGF(wht,__VA_ARGS__...)
1000	FLOGF(wht,__VA_ARGS__...)
(double)...	FLOGF(wht,__VA_ARGS__...)
after	FLOGF(wht,__VA_ARGS__...)
now	FLOGF(wht,__VA_ARGS__...)
... - ...	FLOGF(wht,__VA_ARGS__...)
(...)	FLOGF(wht,__VA_ARGS__...)
... * ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
(bool)...	__FD_ZERO(fdsp)
(bool)...	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
definition of __d0	__FD_ZERO(fdsp)
definition of __d0	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
definition of __d1	__FD_ZERO(fdsp)
definition of __d1	FD_ZERO(fdsetp)
declaration	__FD_ZERO(fdsp)
declaration	FD_ZERO(fdsetp)
asm statement	__FD_ZERO(fdsp)
asm statement	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
sizeof(fd_set)	__FD_ZERO(fdsp)
sizeof(fd_set)	FD_ZERO(fdsetp)
sizeof(__fd_mask)	__FD_ZERO(fdsp)
sizeof(__fd_mask)	FD_ZERO(fdsetp)
... / ...	__FD_ZERO(fdsp)
... / ...	FD_ZERO(fdsetp)
fds	FD_ZERO(fdsetp)
& ...	FD_ZERO(fdsetp)
(...)	__FD_ZERO(fdsp)
(...)	FD_ZERO(fdsetp)
(...)	__FDS_BITS(set)
1024	__FD_SETSIZE
8	__NFDBITS
sizeof(__fd_mask)	__NFDBITS
(int)...	__NFDBITS
... * ...	__NFDBITS
(...)	__NFDBITS
fds_bits	__FD_ZERO(fdsp)
fds_bits	FD_ZERO(fdsetp)
fds_bits	__FDS_BITS(set)
array to pointer conversion	__FD_ZERO(fdsp)
array to pointer conversion	FD_ZERO(fdsetp)
array to pointer conversion	__FDS_BITS(set)
(...)	__FD_ZERO(fdsp)
(...)	FD_ZERO(fdsetp)
(...)	__FDS_BITS(set)
0	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
access to array	__FD_ZERO(fdsp)
access to array	FD_ZERO(fdsetp)
& ...	__FD_ZERO(fdsp)
& ...	FD_ZERO(fdsetp)
{ ... }	__FD_ZERO(fdsp)
{ ... }	FD_ZERO(fdsetp)
fds	FD_SET(fd,fdsetp)
& ...	FD_SET(fd,fdsetp)
(...)	__FDS_BITS(set)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
fds_bits	__FDS_BITS(set)
fds_bits	__FD_SET(d,set)
fds_bits	FD_SET(fd,fdsetp)
array to pointer conversion	__FDS_BITS(set)
array to pointer conversion	__FD_SET(d,set)
array to pointer conversion	FD_SET(fd,fdsetp)
(...)	__FDS_BITS(set)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(statement expression)	__FD_SET(d,set)
(statement expression)	FD_SET(fd,fdsetp)
(statement expression)	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
fd	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
definition of __d	__FD_SET(d,set)
definition of __d	FD_SET(fd,fdsetp)
definition of __d	__FD_ELT(d)
declaration	__FD_SET(d,set)
declaration	FD_SET(fd,fdsetp)
declaration	__FD_ELT(d)
ExprStmt	__FD_SET(d,set)
ExprStmt	FD_SET(fd,fdsetp)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	__FD_SET(d,set)
call to __builtin_constant_p	FD_SET(fd,fdsetp)
call to __builtin_constant_p	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
(bool)...	__FD_SET(d,set)
(bool)...	FD_SET(fd,fdsetp)
(bool)...	__FD_ELT(d)
0	__FD_SET(d,set)
0	FD_SET(fd,fdsetp)
0	__FD_ELT(d)
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
... <= ...	__FD_SET(d,set)
... <= ...	FD_SET(fd,fdsetp)
... <= ...	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
1024	__FD_SET(d,set)
1024	FD_SET(fd,fdsetp)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	__FD_SET(d,set)
... < ...	FD_SET(fd,fdsetp)
... < ...	__FD_ELT(d)
... && ...	__FD_SET(d,set)
... && ...	FD_SET(fd,fdsetp)
... && ...	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
8	__FD_SET(d,set)
8	FD_SET(fd,fdsetp)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	__FD_SET(d,set)
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	__FD_SET(d,set)
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	__FD_SET(d,set)
... / ...	FD_SET(fd,fdsetp)
... / ...	__FD_ELT(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
call to __fdelt_warn	__FD_SET(d,set)
call to __fdelt_warn	FD_SET(fd,fdsetp)
call to __fdelt_warn	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_ELT(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
call to __fdelt_chk	__FD_SET(d,set)
call to __fdelt_chk	FD_SET(fd,fdsetp)
call to __fdelt_chk	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_ELT(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
{ ... }	__FD_SET(d,set)
{ ... }	FD_SET(fd,fdsetp)
{ ... }	__FD_ELT(d)
access to array	__FD_SET(d,set)
access to array	FD_SET(fd,fdsetp)
1	__FD_SET(d,set)
1	FD_SET(fd,fdsetp)
1	__FD_MASK(d)
fd	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
8	__FD_SET(d,set)
8	FD_SET(fd,fdsetp)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	__FD_SET(d,set)
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	__FD_SET(d,set)
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	__FD_SET(d,set)
... % ...	FD_SET(fd,fdsetp)
... % ...	__FD_MASK(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
... << ...	__FD_SET(d,set)
... << ...	FD_SET(fd,fdsetp)
... << ...	__FD_MASK(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
(__fd_mask)...	__FD_SET(d,set)
(__fd_mask)...	FD_SET(fd,fdsetp)
(__fd_mask)...	__FD_MASK(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
... |= ...	__FD_SET(d,set)
... |= ...	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(void)...	__FD_SET(d,set)
(void)...	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
iothread_service_completion	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
iothread_perform_impl	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD_TRAMPOLINE(x)
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD()
__FUNCTION__	ASSERT_IS_NOT_FORKED_CHILD()
array to pointer conversion	ASSERT_IS_NOT_FORKED_CHILD()
100	IO_SERVICE_RESULT_QUEUE
(char)...	IO_SERVICE_RESULT_QUEUE
call to write_loop	assert_with_errno(e)
notify_fd	assert_with_errno(e)
wakeup_byte	assert_with_errno(e)
& ...	assert_with_errno(e)
sizeof(<expr>)	assert_with_errno(e)
wakeup_byte	assert_with_errno(e)
1	assert_with_errno(e)
- ...	assert_with_errno(e)
(long)...	assert_with_errno(e)
... != ...	assert_with_errno(e)
(...)	assert_with_errno(e)
0	assert_with_errno(e)
(void)...	assert_with_errno(e)
(...)	assert_with_errno(e)
call to __fish_assert	assert_with_errno(e)
write_loop(notify_fd, &wakeup_byte, sizeof wakeup_byte) != -1	assert_with_errno(e)
array to pointer conversion	assert_with_errno(e)
/opt/src/src/iothread.cpp	assert_with_errno(e)
array to pointer conversion	assert_with_errno(e)
203	assert_with_errno(e)
(size_t)...	assert_with_errno(e)
call to __errno_location	errno
call to __errno_location	assert_with_errno(e)
* ...	errno
* ...	assert_with_errno(e)
(...)	errno
(...)	assert_with_errno(e)
... ? ... : ...	assert_with_errno(e)
pool	assert(expr)
(bool)...	assert(expr)
No thread pool given	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"pool && ""No thread pool given"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/iothread.cpp	assert(expr)
array to pointer conversion	assert(expr)
227	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
static void *thread_pool_t::run_trampoline(void *)	__ASSERT_FUNCTION
static void *thread_pool_t::run_trampoline(void *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
500	IO_WAIT_FOR_WORK_DURATION_MS
(reference to)	IO_WAIT_FOR_WORK_DURATION_MS
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
pthread %p got work	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to this_thread	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
pthread %p exiting	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to this_thread	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to operator bool	assert(expr)
func	assert(expr)
(reference dereference)	assert(expr)
(const function<..(..)>)...	assert(expr)
Missing function	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"func && ""Missing function"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/iothread.cpp	assert(expr)
array to pointer conversion	assert(expr)
237	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int thread_pool_t::perform(std::function<void ()> &&, std::function<void ()> &&, bool)	__ASSERT_FUNCTION
int thread_pool_t::perform(std::function<void ()> &&, std::function<void ()> &&, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
enqueuing work item (count is %lu)	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to size	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
data	FLOGF(wht,__VA_ARGS__...)
request_queue	FLOGF(wht,__VA_ARGS__...)
(const queue<work_request_t, deque<work_request_t, allocator<work_request_t>>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
notifying a thread	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to this_thread	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
iothread	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
pthread spawned	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
active_token	assert(expr)
(bool)...	assert(expr)
Something should be active	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"active_token && ""Something should be active"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/iothread.cpp	assert(expr)
array to pointer conversion	assert(expr)
574	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned long debounce_t::perform_impl(std::function<void ()>, std::function<void ()>)	__ASSERT_FUNCTION
unsigned long debounce_t::perform_impl(std::function<void ()>, std::function<void ()>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
token	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
Invalid token	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"token > 0 && ""Invalid token"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/iothread.cpp	assert(expr)
array to pointer conversion	assert(expr)
526	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool debounce_t::impl_t::run_next(unsigned long)	__ASSERT_FUNCTION
bool debounce_t::impl_t::run_next(unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
req	assert(expr)
(const maybe_t<work_request_t>)...	assert(expr)
call to operator bool	assert(expr)
call to operator->	assert(expr)
req	assert(expr)
handler	assert(expr)
(const function<..(..)>)...	assert(expr)
... && ...	assert(expr)
Request should have value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"req && req->handler && ""Request should have value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/iothread.cpp	assert(expr)
array to pointer conversion	assert(expr)
544	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1024	IO_MAX_THREADS
(size_t)...	IO_MAX_THREADS
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
33	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T maybe_detail::maybe_impl_t<T>::acquire() [with T = work_request_t]	__ASSERT_FUNCTION
T maybe_detail::maybe_impl_t<T>::acquire() [with T = work_request_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = work_request_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = work_request_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
kill_yank_rotate	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
kill_remove	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
kill_add	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
pointers	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
base	assert(e)
... - ...	assert(e)
pointers_allocation_len	assert(e)
static_cast<ptrdiff_t>...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
reinterpret_cast<unsigned char *>(pointers) - base == static_cast<std::ptrdiff_t>(pointers_allocation_len)	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/null_terminated_array.cpp	assert(e)
array to pointer conversion	assert(e)
44	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
strings	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
pointers	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
... - ...	assert(e)
strings_allocation_len	assert(e)
static_cast<ptrdiff_t>...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
reinterpret_cast<unsigned char *>(strings) - reinterpret_cast<unsigned char *>(pointers) == static_cast<std::ptrdiff_t>(strings_allocation_len)	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/null_terminated_array.cpp	assert(e)
array to pointer conversion	assert(e)
47	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
strings	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
base	assert(e)
... - ...	assert(e)
pointers_allocation_len	assert(e)
strings_allocation_len	assert(e)
... + ...	assert(e)
static_cast<ptrdiff_t>...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
reinterpret_cast<unsigned char *>(strings) - base == static_cast<std::ptrdiff_t>(pointers_allocation_len + strings_allocation_len)	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/null_terminated_array.cpp	assert(e)
array to pointer conversion	assert(e)
49	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
pointers	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
base	assert(e)
... - ...	assert(e)
pointers_allocation_len	assert(e)
static_cast<ptrdiff_t>...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
reinterpret_cast<unsigned char *>(pointers) - base == static_cast<std::ptrdiff_t>(pointers_allocation_len)	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/null_terminated_array.cpp	assert(e)
array to pointer conversion	assert(e)
44	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
strings	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
pointers	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
... - ...	assert(e)
strings_allocation_len	assert(e)
static_cast<ptrdiff_t>...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
reinterpret_cast<unsigned char *>(strings) - reinterpret_cast<unsigned char *>(pointers) == static_cast<std::ptrdiff_t>(strings_allocation_len)	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/null_terminated_array.cpp	assert(e)
array to pointer conversion	assert(e)
47	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
strings	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
base	assert(e)
... - ...	assert(e)
pointers_allocation_len	assert(e)
strings_allocation_len	assert(e)
... + ...	assert(e)
static_cast<ptrdiff_t>...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
reinterpret_cast<unsigned char *>(strings) - base == static_cast<std::ptrdiff_t>(pointers_allocation_len + strings_allocation_len)	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/null_terminated_array.cpp	assert(e)
array to pointer conversion	assert(e)
49	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
pointers	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
base	assert(e)
... - ...	assert(e)
pointers_allocation_len	assert(e)
static_cast<ptrdiff_t>...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
reinterpret_cast<unsigned char *>(pointers) - base == static_cast<std::ptrdiff_t>(pointers_allocation_len)	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/null_terminated_array.cpp	assert(e)
array to pointer conversion	assert(e)
44	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
strings	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
pointers	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
... - ...	assert(e)
strings_allocation_len	assert(e)
static_cast<ptrdiff_t>...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
reinterpret_cast<unsigned char *>(strings) - reinterpret_cast<unsigned char *>(pointers) == static_cast<std::ptrdiff_t>(strings_allocation_len)	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/null_terminated_array.cpp	assert(e)
array to pointer conversion	assert(e)
47	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
strings	assert(e)
reinterpret_cast<unsigned char *>...	assert(e)
base	assert(e)
... - ...	assert(e)
pointers_allocation_len	assert(e)
strings_allocation_len	assert(e)
... + ...	assert(e)
static_cast<ptrdiff_t>...	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
reinterpret_cast<unsigned char *>(strings) - base == static_cast<std::ptrdiff_t>(pointers_allocation_len + strings_allocation_len)	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/null_terminated_array.cpp	assert(e)
array to pointer conversion	assert(e)
49	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Tried to use terminfo string %s on line %ld of %s, which is undefined in terminal of type ""%ls"". Please report this error to %s"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
fmt	FLOG(wht,__VA_ARGS__...)
(const wchar_t *const)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
mbs_name	FLOG(wht,__VA_ARGS__...)
(const char *const)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
line	FLOG(wht,__VA_ARGS__...)
(const long)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
file	FLOG(wht,__VA_ARGS__...)
(const char *const)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
term	FLOG(wht,__VA_ARGS__...)
(const maybe_t<env_var_t>)...	FLOG(wht,__VA_ARGS__...)
call to c_str	FLOG(wht,__VA_ARGS__...)
call to as_string	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
term	FLOG(wht,__VA_ARGS__...)
(const env_var_t *)...	FLOG(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOG(wht,__VA_ARGS__...)
	FLOG(wht,__VA_ARGS__...)
array to pointer conversion	FLOG(wht,__VA_ARGS__...)
... ? ... : ...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
https://github.com/fish-shell/fish-shell/issues	FLOG(wht,__VA_ARGS__...)
https://github.com/fish-shell/fish-shell/issues	PACKAGE_BUGREPORT
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	PACKAGE_BUGREPORT
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
call to assert_is_locked	ASSERT_IS_LOCKED(x)
s_tputs_receiver_lock	ASSERT_IS_LOCKED(x)
& ...	ASSERT_IS_LOCKED(x)
reinterpret_cast<void *>...	ASSERT_IS_LOCKED(x)
s_tputs_receiver_lock	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
tputs_writer	ASSERT_IS_LOCKED(x)
declaration of __FUNCTION__	ASSERT_IS_LOCKED(x)
__FUNCTION__	ASSERT_IS_LOCKED(x)
array to pointer conversion	ASSERT_IS_LOCKED(x)
s_tputs_receiver	assert(expr)
(bool)...	assert(expr)
null s_tputs_receiver	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"s_tputs_receiver && ""null s_tputs_receiver"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/output.cpp	assert(expr)
array to pointer conversion	assert(expr)
354	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int tputs_writer(int)	__ASSERT_FUNCTION
int tputs_writer(int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cur_term	set_a_background
cur_term	CUR
(...)	set_a_background
(...)	CUR
(TERMTYPE *)...	set_a_background
(TERMTYPE *)...	CUR
(...)	set_a_background
(...)	CUR
Strings	set_a_background
360	set_a_background
access to array	set_a_background
(bool)...	set_a_background
cur_term	set_a_background
cur_term	CUR
(...)	set_a_background
(...)	CUR
(TERMTYPE *)...	set_a_background
(TERMTYPE *)...	CUR
(...)	set_a_background
(...)	CUR
Strings	set_a_background
360	set_a_background
access to array	set_a_background
cur_term	set_a_background
cur_term	CUR
(...)	set_a_background
(...)	CUR
(TERMTYPE *)...	set_a_background
(TERMTYPE *)...	CUR
(...)	set_a_background
(...)	CUR
Strings	set_a_background
360	set_a_background
access to array	set_a_background
(const char *)...	set_a_background
cur_term	set_background
cur_term	CUR
(...)	set_background
(...)	CUR
(TERMTYPE *)...	set_background
(TERMTYPE *)...	CUR
(...)	set_background
(...)	CUR
Strings	set_background
303	set_background
access to array	set_background
(bool)...	set_background
cur_term	set_background
cur_term	CUR
(...)	set_background
(...)	CUR
(TERMTYPE *)...	set_background
(TERMTYPE *)...	CUR
(...)	set_background
(...)	CUR
Strings	set_background
303	set_background
access to array	set_background
cur_term	set_background
cur_term	CUR
(...)	set_background
(...)	CUR
(TERMTYPE *)...	set_background
(TERMTYPE *)...	CUR
(...)	set_background
(...)	CUR
Strings	set_background
303	set_background
access to array	set_background
(const char *)...	set_background
cur_term	set_a_foreground
cur_term	CUR
(...)	set_a_foreground
(...)	CUR
(TERMTYPE *)...	set_a_foreground
(TERMTYPE *)...	CUR
(...)	set_a_foreground
(...)	CUR
Strings	set_a_foreground
359	set_a_foreground
access to array	set_a_foreground
(bool)...	set_a_foreground
cur_term	set_a_foreground
cur_term	CUR
(...)	set_a_foreground
(...)	CUR
(TERMTYPE *)...	set_a_foreground
(TERMTYPE *)...	CUR
(...)	set_a_foreground
(...)	CUR
Strings	set_a_foreground
359	set_a_foreground
access to array	set_a_foreground
cur_term	set_a_foreground
cur_term	CUR
(...)	set_a_foreground
(...)	CUR
(TERMTYPE *)...	set_a_foreground
(TERMTYPE *)...	CUR
(...)	set_a_foreground
(...)	CUR
Strings	set_a_foreground
359	set_a_foreground
access to array	set_a_foreground
(const char *)...	set_a_foreground
cur_term	set_foreground
cur_term	CUR
(...)	set_foreground
(...)	CUR
(TERMTYPE *)...	set_foreground
(TERMTYPE *)...	CUR
(...)	set_foreground
(...)	CUR
Strings	set_foreground
302	set_foreground
access to array	set_foreground
(bool)...	set_foreground
cur_term	set_foreground
cur_term	CUR
(...)	set_foreground
(...)	CUR
(TERMTYPE *)...	set_foreground
(TERMTYPE *)...	CUR
(...)	set_foreground
(...)	CUR
Strings	set_foreground
302	set_foreground
access to array	set_foreground
cur_term	set_foreground
cur_term	CUR
(...)	set_foreground
(...)	CUR
(TERMTYPE *)...	set_foreground
(TERMTYPE *)...	CUR
(...)	set_foreground
(...)	CUR
Strings	set_foreground
302	set_foreground
access to array	set_foreground
(const char *)...	set_foreground
call to writembs_check	writembs(outp,mbs)
outp	writembs(outp,mbs)
(reference dereference)	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
call to tparm	writembs(outp,mbs)
todo	writembs(outp,mbs)
const_cast<char *>...	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
idx	writembs(outp,mbs)
(int)...	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
tparm(const_cast<char *>(todo), idx)	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/output.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
58	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
cur_term	max_colors
cur_term	CUR
(...)	max_colors
(...)	CUR
(TERMTYPE *)...	max_colors
(TERMTYPE *)...	CUR
(...)	max_colors
(...)	CUR
Numbers	max_colors
13	max_colors
access to array	max_colors
(int)...	max_colors
cur_term	max_colors
cur_term	CUR
(...)	max_colors
(...)	CUR
(TERMTYPE *)...	max_colors
(TERMTYPE *)...	CUR
(...)	max_colors
(...)	CUR
Numbers	max_colors
13	max_colors
access to array	max_colors
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
stdoutput	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
1	STDOUT_FILENO
str	assert(expr)
(bool)...	assert(expr)
Empty input string	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"str && ""Empty input string"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/output.cpp	assert(expr)
array to pointer conversion	assert(expr)
403	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void outputter_t::writestr(const wchar_t *)	__ASSERT_FUNCTION
void outputter_t::writestr(const wchar_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __ctype_get_mb_cur_max	MB_CUR_MAX
(...)	MB_CUR_MAX
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
output_invalid	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
output_invalid	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Tried to print invalid wide character string	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
16	MB_LEN_MAX
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(unsigned int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(int)...	ENCODE_DIRECT_BASE
62976	ENCODE_DIRECT_BASE
static_cast<wchar_t>...	ENCODE_DIRECT_BASE
(unsigned int)...	ENCODE_DIRECT_BASE
call to __ctype_get_mb_cur_max	MB_CUR_MAX
(...)	MB_CUR_MAX
cur_term	exit_attribute_mode
cur_term	CUR
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	exit_attribute_mode
(...)	CUR
Strings	exit_attribute_mode
39	exit_attribute_mode
access to array	exit_attribute_mode
(bool)...	exit_attribute_mode
call to writembs_check	writembs(outp,mbs)
this	writembs(outp,mbs)
* ...	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
cur_term	writembs(outp,mbs)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	writembs(outp,mbs)
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
Strings	writembs(outp,mbs)
Strings	exit_attribute_mode
39	writembs(outp,mbs)
39	exit_attribute_mode
access to array	writembs(outp,mbs)
access to array	exit_attribute_mode
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
exit_attribute_mode	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/output.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
191	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
call to writembs_check	writembs(outp,mbs)
this	writembs(outp,mbs)
* ...	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
cur_term	writembs(outp,mbs)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	writembs(outp,mbs)
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
Strings	writembs(outp,mbs)
Strings	exit_attribute_mode
39	writembs(outp,mbs)
39	exit_attribute_mode
access to array	writembs(outp,mbs)
access to array	exit_attribute_mode
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
exit_attribute_mode	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/output.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
197	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
call to writembs_check	writembs(outp,mbs)
this	writembs(outp,mbs)
* ...	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
cur_term	writembs(outp,mbs)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	writembs(outp,mbs)
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
Strings	writembs(outp,mbs)
Strings	exit_attribute_mode
39	writembs(outp,mbs)
39	exit_attribute_mode
access to array	writembs(outp,mbs)
access to array	exit_attribute_mode
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
exit_attribute_mode	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/output.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
209	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
call to writembs_check	writembs(outp,mbs)
this	writembs(outp,mbs)
* ...	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
cur_term	writembs(outp,mbs)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	writembs(outp,mbs)
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
Strings	writembs(outp,mbs)
Strings	exit_attribute_mode
39	writembs(outp,mbs)
39	exit_attribute_mode
access to array	writembs(outp,mbs)
access to array	exit_attribute_mode
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
exit_attribute_mode	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/output.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
221	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
cur_term	enter_bold_mode
cur_term	CUR
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	enter_bold_mode
(...)	CUR
Strings	enter_bold_mode
27	enter_bold_mode
access to array	enter_bold_mode
(bool)...	enter_bold_mode
cur_term	enter_bold_mode
cur_term	CUR
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	enter_bold_mode
(...)	CUR
Strings	enter_bold_mode
27	enter_bold_mode
access to array	enter_bold_mode
call to writembs_check	writembs_nofail(outp,mbs)
this	writembs_nofail(outp,mbs)
* ...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_bold_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_bold_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_bold_mode
27	writembs_nofail(outp,mbs)
27	enter_bold_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_bold_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_bold_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/output.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
246	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
call to writembs_check	writembs(outp,mbs)
this	writembs(outp,mbs)
* ...	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
cur_term	writembs(outp,mbs)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	writembs(outp,mbs)
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
Strings	writembs(outp,mbs)
Strings	exit_attribute_mode
39	writembs(outp,mbs)
39	exit_attribute_mode
access to array	writembs(outp,mbs)
access to array	exit_attribute_mode
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
exit_attribute_mode	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/output.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
250	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
call to writembs_check	writembs(outp,mbs)
this	writembs(outp,mbs)
* ...	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
cur_term	writembs(outp,mbs)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	writembs(outp,mbs)
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
Strings	writembs(outp,mbs)
Strings	exit_attribute_mode
39	writembs(outp,mbs)
39	exit_attribute_mode
access to array	writembs(outp,mbs)
access to array	exit_attribute_mode
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
exit_attribute_mode	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/output.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
266	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
call to writembs_check	writembs(outp,mbs)
this	writembs(outp,mbs)
* ...	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
cur_term	writembs(outp,mbs)
cur_term	exit_attribute_mode
cur_term	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	writembs(outp,mbs)
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	writembs(outp,mbs)
(...)	exit_attribute_mode
(...)	CUR
Strings	writembs(outp,mbs)
Strings	exit_attribute_mode
39	writembs(outp,mbs)
39	exit_attribute_mode
access to array	writembs(outp,mbs)
access to array	exit_attribute_mode
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
exit_attribute_mode	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/output.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
285	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
cur_term	enter_bold_mode
cur_term	CUR
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	enter_bold_mode
(...)	CUR
Strings	enter_bold_mode
27	enter_bold_mode
access to array	enter_bold_mode
(bool)...	enter_bold_mode
cur_term	enter_bold_mode
cur_term	CUR
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	enter_bold_mode
(...)	CUR
Strings	enter_bold_mode
27	enter_bold_mode
access to array	enter_bold_mode
call to writembs_check	writembs_nofail(outp,mbs)
this	writembs_nofail(outp,mbs)
* ...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
call to tparm	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_bold_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_bold_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_bold_mode
27	writembs_nofail(outp,mbs)
27	enter_bold_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_bold_mode
const_cast<char *>...	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
tparm(const_cast<char *>(enter_bold_mode))	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/output.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
305	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
call to writembs_check	writembs_nofail(outp,mbs)
this	writembs_nofail(outp,mbs)
* ...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	exit_underline_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	exit_underline_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	exit_underline_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	exit_underline_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	exit_underline_mode
44	writembs_nofail(outp,mbs)
44	exit_underline_mode
access to array	writembs_nofail(outp,mbs)
access to array	exit_underline_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
exit_underline_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/output.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
310	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
call to writembs_check	writembs_nofail(outp,mbs)
this	writembs_nofail(outp,mbs)
* ...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_underline_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_underline_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_underline_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_underline_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_underline_mode
36	writembs_nofail(outp,mbs)
36	enter_underline_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_underline_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_underline_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/output.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
314	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_italics_mode
cur_term	CUR
(...)	enter_italics_mode
(...)	CUR
(TERMTYPE *)...	enter_italics_mode
(TERMTYPE *)...	CUR
(...)	enter_italics_mode
(...)	CUR
Strings	enter_italics_mode
311	enter_italics_mode
access to array	enter_italics_mode
(bool)...	enter_italics_mode
cur_term	enter_italics_mode
cur_term	CUR
(...)	enter_italics_mode
(...)	CUR
(TERMTYPE *)...	enter_italics_mode
(TERMTYPE *)...	CUR
(...)	enter_italics_mode
(...)	CUR
Strings	enter_italics_mode
311	enter_italics_mode
access to array	enter_italics_mode
call to writembs_check	writembs_nofail(outp,mbs)
this	writembs_nofail(outp,mbs)
* ...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	exit_italics_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	exit_italics_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	exit_italics_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	exit_italics_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	exit_italics_mode
321	writembs_nofail(outp,mbs)
321	exit_italics_mode
access to array	writembs_nofail(outp,mbs)
access to array	exit_italics_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
exit_italics_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/output.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
319	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_italics_mode
cur_term	CUR
(...)	enter_italics_mode
(...)	CUR
(TERMTYPE *)...	enter_italics_mode
(TERMTYPE *)...	CUR
(...)	enter_italics_mode
(...)	CUR
Strings	enter_italics_mode
311	enter_italics_mode
access to array	enter_italics_mode
(bool)...	enter_italics_mode
cur_term	enter_italics_mode
cur_term	CUR
(...)	enter_italics_mode
(...)	CUR
(TERMTYPE *)...	enter_italics_mode
(TERMTYPE *)...	CUR
(...)	enter_italics_mode
(...)	CUR
Strings	enter_italics_mode
311	enter_italics_mode
access to array	enter_italics_mode
call to writembs_check	writembs_nofail(outp,mbs)
this	writembs_nofail(outp,mbs)
* ...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_italics_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_italics_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_italics_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_italics_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_italics_mode
311	writembs_nofail(outp,mbs)
311	enter_italics_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_italics_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_italics_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/output.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
324	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_dim_mode
cur_term	CUR
(...)	enter_dim_mode
(...)	CUR
(TERMTYPE *)...	enter_dim_mode
(TERMTYPE *)...	CUR
(...)	enter_dim_mode
(...)	CUR
Strings	enter_dim_mode
30	enter_dim_mode
access to array	enter_dim_mode
(bool)...	enter_dim_mode
cur_term	enter_dim_mode
cur_term	CUR
(...)	enter_dim_mode
(...)	CUR
(TERMTYPE *)...	enter_dim_mode
(TERMTYPE *)...	CUR
(...)	enter_dim_mode
(...)	CUR
Strings	enter_dim_mode
30	enter_dim_mode
access to array	enter_dim_mode
call to writembs_check	writembs_nofail(outp,mbs)
this	writembs_nofail(outp,mbs)
* ...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_dim_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_dim_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_dim_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_dim_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_dim_mode
30	writembs_nofail(outp,mbs)
30	enter_dim_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_dim_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_dim_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/output.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
329	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_reverse_mode
cur_term	CUR
(...)	enter_reverse_mode
(...)	CUR
(TERMTYPE *)...	enter_reverse_mode
(TERMTYPE *)...	CUR
(...)	enter_reverse_mode
(...)	CUR
Strings	enter_reverse_mode
34	enter_reverse_mode
access to array	enter_reverse_mode
(bool)...	enter_reverse_mode
cur_term	enter_reverse_mode
cur_term	CUR
(...)	enter_reverse_mode
(...)	CUR
(TERMTYPE *)...	enter_reverse_mode
(TERMTYPE *)...	CUR
(...)	enter_reverse_mode
(...)	CUR
Strings	enter_reverse_mode
34	enter_reverse_mode
access to array	enter_reverse_mode
call to writembs_check	writembs_nofail(outp,mbs)
this	writembs_nofail(outp,mbs)
* ...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_reverse_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_reverse_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_reverse_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_reverse_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_reverse_mode
34	writembs_nofail(outp,mbs)
34	enter_reverse_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_reverse_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_reverse_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/output.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
336	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
cur_term	enter_standout_mode
cur_term	CUR
(...)	enter_standout_mode
(...)	CUR
(TERMTYPE *)...	enter_standout_mode
(TERMTYPE *)...	CUR
(...)	enter_standout_mode
(...)	CUR
Strings	enter_standout_mode
35	enter_standout_mode
access to array	enter_standout_mode
(bool)...	enter_standout_mode
cur_term	enter_standout_mode
cur_term	CUR
(...)	enter_standout_mode
(...)	CUR
(TERMTYPE *)...	enter_standout_mode
(TERMTYPE *)...	CUR
(...)	enter_standout_mode
(...)	CUR
Strings	enter_standout_mode
35	enter_standout_mode
access to array	enter_standout_mode
call to writembs_check	writembs_nofail(outp,mbs)
this	writembs_nofail(outp,mbs)
* ...	writembs_nofail(outp,mbs)
(...)	writembs_nofail(outp,mbs)
(reference to)	writembs_nofail(outp,mbs)
cur_term	writembs_nofail(outp,mbs)
cur_term	enter_standout_mode
cur_term	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_standout_mode
(...)	CUR
(TERMTYPE *)...	writembs_nofail(outp,mbs)
(TERMTYPE *)...	enter_standout_mode
(TERMTYPE *)...	CUR
(...)	writembs_nofail(outp,mbs)
(...)	enter_standout_mode
(...)	CUR
Strings	writembs_nofail(outp,mbs)
Strings	enter_standout_mode
35	writembs_nofail(outp,mbs)
35	enter_standout_mode
access to array	writembs_nofail(outp,mbs)
access to array	enter_standout_mode
(...)	writembs_nofail(outp,mbs)
(const char *)...	writembs_nofail(outp,mbs)
enter_standout_mode	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
0	writembs_nofail(outp,mbs)
/opt/src/src/output.cpp	writembs_nofail(outp,mbs)
array to pointer conversion	writembs_nofail(outp,mbs)
339	writembs_nofail(outp,mbs)
(long)...	writembs_nofail(outp,mbs)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
__init	_GLIBCXX_MOVE_IF_20(_E)
remaining	assert(expr)
width_c	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
remaining >= width_c	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
100	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
unsigned long print_max(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, highlight_spec_t, unsigned long, bool, line_t *)	assert(expr)
unsigned long print_max(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, highlight_spec_t, unsigned long, bool, line_t *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
remaining	assert(expr)
max	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
remaining <= max	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
105	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
denom	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
denom > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
64	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned long divide_round_up(unsigned long, unsigned long)	__ASSERT_FUNCTION
unsigned long divide_round_up(unsigned long, unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
unreachable	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/pager.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
58	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
call to c_str	SEARCH_FIELD_PROMPT
call to c_str	_(wstr)
call to wgettext	SEARCH_FIELD_PROMPT
call to wgettext	_(wstr)
search: 	SEARCH_FIELD_PROMPT
array to pointer conversion	SEARCH_FIELD_PROMPT
(reference dereference)	SEARCH_FIELD_PROMPT
(reference dereference)	_(wstr)
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
6	PAGER_MAX_COLS
(size_t)...	PAGER_MAX_COLS
min_cols_required_for_rows	assert(expr)
cols	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
min_cols_required_for_rows <= cols	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
560	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
page_rendering_t pager_t::render() const	assert(expr)
page_rendering_t pager_t::render() const	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
call to __fish_assert	DIE(msg)
unknown non-cardinal direction	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/pager.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
653	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
unknown cardinal direction	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/pager.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
734	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
column	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
row	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
rendering	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
comp_width	assert(expr)
width	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
comp_width <= width	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
137	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
line_t pager_t::completion_print_item(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const pager_t::comp_t *, unsigned long, unsigned long, unsigned long, bool, bool, page_rendering_t *) const	assert(expr)
line_t pager_t::completion_print_item(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const pager_t::comp_t *, unsigned long, unsigned long, unsigned long, bool, bool, page_rendering_t *) const	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to basic_string	PAGER_SPACER_STRING
  	PAGER_SPACER_STRING
array to pointer conversion	PAGER_SPACER_STRING
(reference to)	PAGER_SPACER_STRING
desc_remaining	assert(expr)
2	assert(expr)
(unsigned long)...	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
desc_remaining >= 2	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
185	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
row_stop	assert(expr)
row_start	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
row_stop >= row_start	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
211	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void pager_t::completion_print(unsigned long, const unsigned long *, unsigned long, unsigned long, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::vector<pager_t::comp_t, std::allocator<pager_t::comp_t>> &, page_rendering_t *) const	__ASSERT_FUNCTION
void pager_t::completion_print(unsigned long, const unsigned long *, unsigned long, unsigned long, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::vector<pager_t::comp_t, std::allocator<pager_t::comp_t>> &, page_rendering_t *) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
  	PAGER_SPACER_STRING
array to pointer conversion	PAGER_SPACER_STRING
cols	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cols > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
406	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool pager_t::completion_try_print(unsigned long, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::vector<pager_t::comp_t, std::allocator<pager_t::comp_t>> &, page_rendering_t *, unsigned long) const	__ASSERT_FUNCTION
bool pager_t::completion_try_print(unsigned long, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::vector<pager_t::comp_t, std::allocator<pager_t::comp_t>> &, page_rendering_t *, unsigned long) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
6	PAGER_MAX_COLS
6	PAGER_MAX_COLS
16	PAGER_MIN_WIDTH
(unsigned long)...	PAGER_MIN_WIDTH
4	PAGER_MIN_HEIGHT
(unsigned long)...	PAGER_MIN_HEIGHT
4	PAGER_UNDISCLOSED_MAX_ROWS
2	PAGER_SPACER_STRING_WIDTH
(unsigned long)...	PAGER_SPACER_STRING_WIDTH
row_count	assert(expr)
term_height	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
row_count > term_height	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
475	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
start_row	assert(expr)
last_starting_row	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
start_row <= last_starting_row	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
479	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
stop_row	assert(expr)
start_row	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
stop_row >= start_row	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
482	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
stop_row	assert(expr)
row_count	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
stop_row <= row_count	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
483	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
stop_row	assert(expr)
start_row	assert(expr)
... - ...	assert(expr)
term_height	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
stop_row - start_row <= term_height	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
484	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
rendering	assert(expr)
remaining_to_disclose	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
rendering->remaining_to_disclose != 1	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
491	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%lsand %lu more rows	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
rows %lu to %lu of %lu	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
(no matches)	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
12	PAGER_SEARCH_FIELD_WIDTH
(unsigned long)...	PAGER_SEARCH_FIELD_WIDTH
12	PAGER_SEARCH_FIELD_WIDTH
(unsigned long)...	PAGER_SEARCH_FIELD_WIDTH
call to basic_string	SEARCH_FIELD_PROMPT
call to basic_string	_(wstr)
call to c_str	SEARCH_FIELD_PROMPT
call to c_str	_(wstr)
call to wgettext	SEARCH_FIELD_PROMPT
call to wgettext	_(wstr)
search: 	SEARCH_FIELD_PROMPT
array to pointer conversion	SEARCH_FIELD_PROMPT
(reference dereference)	SEARCH_FIELD_PROMPT
(reference dereference)	_(wstr)
(reference to)	SEARCH_FIELD_PROMPT
(reference to)	_(wstr)
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
result	assert(expr)
1	assert(expr)
1	PAGER_SELECTION_NONE
- ...	assert(expr)
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	assert(expr)
static_cast<size_t>...	PAGER_SELECTION_NONE
... == ...	assert(expr)
result	assert(expr)
call to size	assert(expr)
completion_infos	assert(expr)
... < ...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
result == PAGER_SELECTION_NONE || result < completion_infos.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/pager.cpp	assert(expr)
array to pointer conversion	assert(expr)
795	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned long pager_t::visual_selected_completion_index(unsigned long, unsigned long) const	__ASSERT_FUNCTION
unsigned long pager_t::visual_selected_completion_index(unsigned long, unsigned long) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
__init	_GLIBCXX_MOVE_IF_20(_E)
(unsigned long)...	_GLIBCXX_MOVE_IF_20(_E)
1	__try
0	__catch(X)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const __normal_iterator<comp_t *, vector<comp_t, allocator<comp_t>>>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to valid	assert(e)
pipe_fd_	assert(e)
Pipe is not valid	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"pipe_fd_.valid() && ""Pipe is not valid"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/io.h	assert(e)
array to pointer conversion	assert(e)
248	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
1	STDOUT_FILENO
call to valid	assert(e)
write_fd_	assert(e)
fd is not valid	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"write_fd_.valid() && ""fd is not valid"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/io.h	assert(e)
array to pointer conversion	assert(e)
274	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to fillthread_running	assert(e)
! ...	assert(e)
Cannot access buffer during background fill	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"!fillthread_running() && ""Cannot access buffer during background fill"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/io.h	assert(e)
array to pointer conversion	assert(e)
337	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
fd	assert(e)
0	assert(e)
... >= ...	assert(e)
Invalid fd	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"fd >= 0 && ""Invalid fd"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/io.h	assert(e)
array to pointer conversion	assert(e)
39	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
fd	assert(e)
0	assert(e)
... >= ...	assert(e)
Invalid fd	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"fd >= 0 && ""Invalid fd"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/io.h	assert(e)
array to pointer conversion	assert(e)
31	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
2	STDERR_FILENO
call to specific_statement_type_is_redirectable_block	assert(expr)
node	assert(expr)
(reference dereference)	assert(expr)
(reference to)	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
specific_statement_type_is_redirectable_block(node)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
61	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> profiling_cmd_name_for_redirectable_block(const ast::node_t &, const parsed_source_t &)	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> profiling_cmd_name_for_redirectable_block(const ast::node_t &, const parsed_source_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to has_value	assert(expr)
source_range	assert(expr)
(const maybe_t<source_range_t>)...	assert(expr)
No source range for block	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"source_range.has_value() && ""No source range for block"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
64	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Unexpected block header type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
88	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
Not a redirectable block type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
101	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
src_end	assert(expr)
call to operator->	assert(expr)
source_range	assert(expr)
start	assert(expr)
(unsigned long)...	assert(expr)
... >= ...	assert(expr)
Invalid source end	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"src_end >= source_range->start && ""Invalid source end"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
105	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
associated_block	assert(expr)
(bool)...	assert(expr)
Null block	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"associated_block && ""Null block"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1474	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
end_execution_reason_t parse_execution_context_t::eval_node(const ast::job_list_t &, const block_t *)	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::eval_node(const ast::job_list_t &, const block_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	INFINITE_FUNC_RECURSION_ERR_MSG
call to c_str	_(wstr)
call to wgettext	INFINITE_FUNC_RECURSION_ERR_MSG
call to wgettext	_(wstr)
The function '%ls' calls itself immediately, which would result in an infinite loop.	INFINITE_FUNC_RECURSION_ERR_MSG
array to pointer conversion	INFINITE_FUNC_RECURSION_ERR_MSG
(reference dereference)	INFINITE_FUNC_RECURSION_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	CALL_STACK_LIMIT_EXCEEDED_ERR_MSG
call to c_str	_(wstr)
call to wgettext	CALL_STACK_LIMIT_EXCEEDED_ERR_MSG
call to wgettext	_(wstr)
The function call stack limit has been exceeded. Do you have an accidental infinite loop?	CALL_STACK_LIMIT_EXCEEDED_ERR_MSG
array to pointer conversion	CALL_STACK_LIMIT_EXCEEDED_ERR_MSG
(reference dereference)	CALL_STACK_LIMIT_EXCEEDED_ERR_MSG
(reference dereference)	_(wstr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Unexpected node %ls found in %s	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to describe	FLOGF(wht,__VA_ARGS__...)
statement	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const branch_t<statement>)...	FLOGF(wht,__VA_ARGS__...)
(const node_t)...	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
__FUNCTION__	FLOGF(wht,__VA_ARGS__...)
eval_node	FLOGF(wht,__VA_ARGS__...)
declaration of __FUNCTION__	FLOGF(wht,__VA_ARGS__...)
__FUNCTION__	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
offset	assert(expr)
call to size	assert(expr)
call to operator->	assert(expr)
pstree	assert(expr)
src	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
offset <= pstree->src.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1509	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int parse_execution_context_t::line_offset_of_character_at_offset(unsigned long)	__ASSERT_FUNCTION
int parse_execution_context_t::line_offset_of_character_at_offset(unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
associated_block	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to c_str	ERROR_TIME_BACKGROUND
call to c_str	_(wstr)
call to wgettext	ERROR_TIME_BACKGROUND
call to wgettext	_(wstr)
'time' is not supported for background jobs. Consider using 'command time'.	ERROR_TIME_BACKGROUND
array to pointer conversion	ERROR_TIME_BACKGROUND
(reference dereference)	ERROR_TIME_BACKGROUND
(reference dereference)	_(wstr)
call to has_value	assert(expr)
parsed_pipe	assert(expr)
(const maybe_t<pipe_or_redir_t>)...	assert(expr)
call to operator->	assert(expr)
parsed_pipe	assert(expr)
is_pipe	assert(expr)
... && ...	assert(expr)
Failed to parse valid pipe	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"parsed_pipe.has_value() && parsed_pipe->is_pipe && ""Failed to parse valid pipe"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1159	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::populate_job_from_job_node(job_t *, const ast::job_t &, const block_t *)	assert(expr)
end_execution_reason_t parse_execution_context_t::populate_job_from_job_node(job_t *, const ast::job_t &, const block_t *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	ILLEGAL_FD_ERR_MSG
call to c_str	_(wstr)
call to wgettext	ILLEGAL_FD_ERR_MSG
call to wgettext	_(wstr)
Illegal file descriptor in redirection '%ls'	ILLEGAL_FD_ERR_MSG
array to pointer conversion	ILLEGAL_FD_ERR_MSG
(reference dereference)	ILLEGAL_FD_ERR_MSG
(reference dereference)	_(wstr)
call to empty	assert(expr)
processes	assert(expr)
(const vector<unique_ptr<process_t, default_delete<process_t>>, allocator<unique_ptr<process_t, default_delete<process_t>>>>)...	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!processes.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1186	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Unexpected job conjunction type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1393	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
Unexpected keyword	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1422	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	STDIN_FILENO
call to specific_statement_type_is_redirectable_block	assert(expr)
specific_statement	assert(expr)
* ...	assert(expr)
(reference to)	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
specific_statement_type_is_redirectable_block(*specific_statement)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1249	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::run_1_job(const ast::job_t &, const block_t *)	assert(expr)
end_execution_reason_t parse_execution_context_t::run_1_job(const ast::job_t &, const block_t *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	PARSER_DIE()
(bool)...	PARSER_DIE()
do (...) ...	PARSER_DIE()
0	PARSER_DIE()
0	FLOG(wht,__VA_ARGS__...)
(bool)...	PARSER_DIE()
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	PARSER_DIE()
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	PARSER_DIE()
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	PARSER_DIE()
g_instance	FLOG(wht,__VA_ARGS__...)
error	PARSER_DIE()
enabled	PARSER_DIE()
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	PARSER_DIE()
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	PARSER_DIE()
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	PARSER_DIE()
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	PARSER_DIE()
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	PARSER_DIE()
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	PARSER_DIE()
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	PARSER_DIE()
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	PARSER_DIE()
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	PARSER_DIE()
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	PARSER_DIE()
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	PARSER_DIE()
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	PARSER_DIE()
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	PARSER_DIE()
g_instance	FLOG(wht,__VA_ARGS__...)
error	PARSER_DIE()
(const category_t)...	PARSER_DIE()
(reference to)	PARSER_DIE()
Parser dying!	PARSER_DIE()
(reference to)	PARSER_DIE()
ExprStmt	PARSER_DIE()
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	PARSER_DIE()
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	PARSER_DIE()
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	PARSER_DIE()
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	PARSER_DIE()
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	PARSER_DIE()
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	PARSER_DIE()
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	PARSER_DIE()
{ ... }	FLOG(wht,__VA_ARGS__...)
ExprStmt	PARSER_DIE()
call to exit_without_destructors	PARSER_DIE()
1	PARSER_DIE()
- ...	PARSER_DIE()
{ ... }	PARSER_DIE()
call to operator bool	assert(expr)
call to operator->	assert(expr)
job	assert(expr)
(__shared_ptr<job_t, _S_atomic>)...	assert(expr)
(__shared_ptr_access<job_t, _S_atomic, false, false>)...	assert(expr)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	assert(expr)
group	assert(expr)
(const __shared_ptr<job_group_t, _S_atomic>)...	assert(expr)
Should have a job group	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"job->group && ""Should have a job group"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1328	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Invalid redirection: %ls	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Invalid redirection target: %ls	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to operator bool	assert(expr)
oper	assert(expr)
(const maybe_t<pipe_or_redir_t>)...	assert(expr)
call to is_valid	assert(expr)
call to operator->	assert(expr)
oper	assert(expr)
(const pipe_or_redir_t *)...	assert(expr)
... && ...	assert(expr)
expected to have a valid redirection	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"oper && oper->is_valid() && ""expected to have a valid redirection"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
966	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::determine_redirections(const ast::argument_or_redirection_list_t &, std::vector<redirection_spec_t, std::allocator<redirection_spec_t>> *)	assert(expr)
end_execution_reason_t parse_execution_context_t::determine_redirections(const ast::argument_or_redirection_list_t &, std::vector<redirection_spec_t, std::allocator<redirection_spec_t>> *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Requested redirection to '%ls', which is not a valid file descriptor	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to has_source	assert(expr)
arg_node	assert(expr)
(const leaf_t<argument> *)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
arg_node->has_source()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
890	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::expand_arguments_from_nodes(const std::vector<const ast::argument_t *, std::allocator<const ast::argument_t *>> &, std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> *, parse_execution_context_t::globspec_t)	assert(expr)
end_execution_reason_t parse_execution_context_t::expand_arguments_from_nodes(const std::vector<const ast::argument_t *, std::allocator<const ast::argument_t *>> &, std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> *, parse_execution_context_t::globspec_t)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	WILDCARD_ERR_MSG
call to c_str	_(wstr)
call to wgettext	WILDCARD_ERR_MSG
call to wgettext	_(wstr)
No matches for wildcard '%ls'. See `help expand`.	WILDCARD_ERR_MSG
array to pointer conversion	WILDCARD_ERR_MSG
(reference dereference)	WILDCARD_ERR_MSG
(reference dereference)	_(wstr)
call to __fish_assert	DIE(msg)
unexpected expand_string() return value	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
921	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	EXIT_SUCCESS
0	EXIT_SUCCESS
call to c_str	WILDCARD_ERR_MSG
call to c_str	_(wstr)
call to wgettext	WILDCARD_ERR_MSG
call to wgettext	_(wstr)
No matches for wildcard '%ls'. See `help expand`.	WILDCARD_ERR_MSG
array to pointer conversion	WILDCARD_ERR_MSG
(reference dereference)	WILDCARD_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"switch: Expected at most one argument, got %lu
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to size	assert(expr)
switch_values_expanded	assert(expr)
(const vector<completion_t, allocator<completion_t>>)...	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... <= ...	assert(expr)
Should have at most one expansion	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"switch_values_expanded.size() <= 1 && ""Should have at most one expansion"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
524	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
end_execution_reason_t parse_execution_context_t::run_switch_statement(const ast::switch_statement_t &)	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::run_switch_statement(const ast::switch_statement_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
result	assert(expr)
ok	assert(expr)
... == ...	assert(expr)
Expected success	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"result == end_execution_reason_t::ok && ""Expected success"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
566	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	EXIT_SUCCESS
call to c_str	FAILED_EXPANSION_VARIABLE_NAME_ERR_MSG
call to c_str	_(wstr)
call to wgettext	FAILED_EXPANSION_VARIABLE_NAME_ERR_MSG
call to wgettext	_(wstr)
Unable to expand variable name '%ls'	FAILED_EXPANSION_VARIABLE_NAME_ERR_MSG
array to pointer conversion	FAILED_EXPANSION_VARIABLE_NAME_ERR_MSG
(reference dereference)	FAILED_EXPANSION_VARIABLE_NAME_ERR_MSG
(reference dereference)	_(wstr)
retval	assert(expr)
ENV_OK	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
retval == ENV_OK	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
451	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
end_execution_reason_t parse_execution_context_t::run_for_statement(const ast::for_header_t &, const ast::job_list_t &)	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::run_for_statement(const ast::for_header_t &, const ast::job_list_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	BUILTIN_ERR_VARNAME
call to c_str	_(wstr)
call to wgettext	BUILTIN_ERR_VARNAME
call to wgettext	_(wstr)
"%ls: Variable name '%ls' is not valid. See `help identifiers`.
"	BUILTIN_ERR_VARNAME
array to pointer conversion	BUILTIN_ERR_VARNAME
(reference dereference)	BUILTIN_ERR_VARNAME
(reference dereference)	_(wstr)
retval	assert(expr)
ENV_OK	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
for loop variable should have been successfully set	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"retval == ENV_OK && ""for loop variable should have been successfully set"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
469	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
"Unexpected block header: %ls
"	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to describe	FLOGF(wht,__VA_ARGS__...)
bh	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	PARSER_DIE()
(bool)...	PARSER_DIE()
do (...) ...	PARSER_DIE()
0	PARSER_DIE()
0	FLOG(wht,__VA_ARGS__...)
(bool)...	PARSER_DIE()
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	PARSER_DIE()
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	PARSER_DIE()
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	PARSER_DIE()
g_instance	FLOG(wht,__VA_ARGS__...)
error	PARSER_DIE()
enabled	PARSER_DIE()
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	PARSER_DIE()
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	PARSER_DIE()
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	PARSER_DIE()
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	PARSER_DIE()
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	PARSER_DIE()
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	PARSER_DIE()
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	PARSER_DIE()
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	PARSER_DIE()
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	PARSER_DIE()
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	PARSER_DIE()
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	PARSER_DIE()
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	PARSER_DIE()
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	PARSER_DIE()
g_instance	FLOG(wht,__VA_ARGS__...)
error	PARSER_DIE()
(const category_t)...	PARSER_DIE()
(reference to)	PARSER_DIE()
Parser dying!	PARSER_DIE()
(reference to)	PARSER_DIE()
ExprStmt	PARSER_DIE()
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	PARSER_DIE()
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	PARSER_DIE()
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	PARSER_DIE()
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	PARSER_DIE()
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	PARSER_DIE()
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	PARSER_DIE()
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	PARSER_DIE()
{ ... }	FLOG(wht,__VA_ARGS__...)
ExprStmt	PARSER_DIE()
call to exit_without_destructors	PARSER_DIE()
1	PARSER_DIE()
- ...	PARSER_DIE()
{ ... }	PARSER_DIE()
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
job	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
Unexpected block node type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1029	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
args_or_redirs	assert(expr)
(bool)...	assert(expr)
Should have args_or_redirs	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"args_or_redirs && ""Should have args_or_redirs"""	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
1031	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
job	assert(expr)
0	assert(expr)
(job_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
job != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
786	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
end_execution_reason_t parse_execution_context_t::populate_plain_process(job_t *, process_t *, const ast::decorated_statement_t &)	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::populate_plain_process(job_t *, process_t *, const ast::decorated_statement_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
proc	assert(expr)
0	assert(expr)
(process_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
proc != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
787	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
cmd	assert(expr)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	assert(expr)
! ...	assert(expr)
expand_command should not produce an empty command	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!cmd.empty() && ""expand_command should not produce an empty command"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
801	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to c_str	ERROR_TIME_BACKGROUND
call to c_str	_(wstr)
call to wgettext	ERROR_TIME_BACKGROUND
call to wgettext	_(wstr)
'time' is not supported for background jobs. Consider using 'command time'.	ERROR_TIME_BACKGROUND
array to pointer conversion	ERROR_TIME_BACKGROUND
(reference dereference)	ERROR_TIME_BACKGROUND
(reference dereference)	_(wstr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
'%ls' not handled by new parser yet.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to describe	FLOGF(wht,__VA_ARGS__...)
specific_statement	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	PARSER_DIE()
(bool)...	PARSER_DIE()
do (...) ...	PARSER_DIE()
0	PARSER_DIE()
0	FLOG(wht,__VA_ARGS__...)
(bool)...	PARSER_DIE()
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	PARSER_DIE()
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	PARSER_DIE()
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	PARSER_DIE()
g_instance	FLOG(wht,__VA_ARGS__...)
error	PARSER_DIE()
enabled	PARSER_DIE()
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	PARSER_DIE()
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	PARSER_DIE()
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	PARSER_DIE()
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	PARSER_DIE()
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	PARSER_DIE()
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	PARSER_DIE()
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	PARSER_DIE()
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	PARSER_DIE()
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	PARSER_DIE()
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	PARSER_DIE()
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	PARSER_DIE()
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	PARSER_DIE()
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	PARSER_DIE()
g_instance	FLOG(wht,__VA_ARGS__...)
error	PARSER_DIE()
(const category_t)...	PARSER_DIE()
(reference to)	PARSER_DIE()
Parser dying!	PARSER_DIE()
(reference to)	PARSER_DIE()
ExprStmt	PARSER_DIE()
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	PARSER_DIE()
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	PARSER_DIE()
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	PARSER_DIE()
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	PARSER_DIE()
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	PARSER_DIE()
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	PARSER_DIE()
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	PARSER_DIE()
{ ... }	FLOG(wht,__VA_ARGS__...)
ExprStmt	PARSER_DIE()
call to exit_without_destructors	PARSER_DIE()
1	PARSER_DIE()
- ...	PARSER_DIE()
{ ... }	PARSER_DIE()
call to operator bool	assert(expr)
equals_pos	assert(expr)
(const maybe_t<unsigned long>)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
equals_pos	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1052	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::apply_variable_assignments(process_t *, const ast::variable_assignment_list_t &, const block_t **)	assert(expr)
end_execution_reason_t parse_execution_context_t::apply_variable_assignments(process_t *, const ast::variable_assignment_list_t &, const block_t **)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
unexpected expand_string() return value	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1073	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	assert(expr)
(bool)...	assert(expr)
Unexpected child block type	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"0 && ""Unexpected child block type"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
275	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool parse_execution_context_t::job_is_simple_block(const ast::job_t &) const	assert(expr)
bool parse_execution_context_t::job_is_simple_block(const ast::job_t &) const	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	WILDCARD_ERR_MSG
call to c_str	_(wstr)
call to wgettext	WILDCARD_ERR_MSG
call to wgettext	_(wstr)
No matches for wildcard '%ls'. See `help expand`.	WILDCARD_ERR_MSG
array to pointer conversion	WILDCARD_ERR_MSG
(reference dereference)	WILDCARD_ERR_MSG
(reference dereference)	_(wstr)
call to operator==	assert(expr)
expand_err	assert(expr)
(const expand_result_t)...	assert(expr)
ok	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
expand_err == expand_result_t::ok	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
772	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
end_execution_reason_t parse_execution_context_t::expand_command(const ast::decorated_statement_t &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> *) const	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::expand_command(const ast::decorated_statement_t &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, std::vector<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, std::allocator<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>>> *) const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
The expanded command was empty.	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
2	ENOENT
call to c_str	_(wstr)
call to wgettext	_(wstr)
The file '%ls' is not executable by this user	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Error reported but no error text found.	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
stderr	stderr
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
call to operator bool	assert(e)
contents	assert(e)
Null pointer	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
149	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to operator bool	assert(e)
contents	assert(e)
Null pointer	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"contents && ""Null pointer"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/ast.h	assert(e)
array to pointer conversion	assert(e)
149	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
job	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
Unexpected block node type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1029	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
args_or_redirs	assert(expr)
(bool)...	assert(expr)
Should have args_or_redirs	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"args_or_redirs && ""Should have args_or_redirs"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1031	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
end_execution_reason_t parse_execution_context_t::populate_block_process(job_t *, process_t *, const ast::statement_t &, const Type &) [with Type = ast::block_statement_t]	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::populate_block_process(job_t *, process_t *, const ast::statement_t &, const Type &) [with Type = ast::block_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
job	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
Unexpected block node type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1029	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
args_or_redirs	assert(expr)
(bool)...	assert(expr)
Should have args_or_redirs	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"args_or_redirs && ""Should have args_or_redirs"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1031	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
end_execution_reason_t parse_execution_context_t::populate_block_process(job_t *, process_t *, const ast::statement_t &, const Type &) [with Type = ast::if_statement_t]	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::populate_block_process(job_t *, process_t *, const ast::statement_t &, const Type &) [with Type = ast::if_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
job	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
call to __fish_assert	DIE(msg)
Unexpected block node type	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_execution.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
1029	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
args_or_redirs	assert(expr)
(bool)...	assert(expr)
Should have args_or_redirs	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"args_or_redirs && ""Should have args_or_redirs"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_execution.cpp	assert(expr)
array to pointer conversion	assert(expr)
1031	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
end_execution_reason_t parse_execution_context_t::populate_block_process(job_t *, process_t *, const ast::statement_t &, const Type &) [with Type = ast::switch_statement_t]	__ASSERT_FUNCTION
end_execution_reason_t parse_execution_context_t::populate_block_process(job_t *, process_t *, const ast::statement_t &, const Type &) [with Type = ast::switch_statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to begin	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__next	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__next	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = end_execution_reason_t]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = end_execution_reason_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
this	_GLIBCXX_MOVE(__val)
(_Vector_base<const argument_t *, allocator<const argument_t *>> *)...	_GLIBCXX_MOVE(__val)
_M_impl	_GLIBCXX_MOVE(__val)
(_Vector_impl_data)...	_GLIBCXX_MOVE(__val)
_M_finish	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
* ...	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<const argument_t **, vector<const argument_t *, allocator<const argument_t *>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<const argument_t *, allocator<const argument_t *>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
2	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
this	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_base<const argument_t *, allocator<const argument_t *>> *)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_impl	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(_Vector_impl_data)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
_M_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = end_execution_reason_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = end_execution_reason_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	STDOUT_FILENO
errors	assert(expr)
0	assert(expr)
(parse_error_list_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
errors != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_tree.cpp	assert(expr)
array to pointer conversion	assert(expr)
137	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void parse_error_offset_source_start(std::vector<parse_error_t, std::allocator<parse_error_t>> *, unsigned long)	__ASSERT_FUNCTION
void parse_error_offset_source_start(std::vector<parse_error_t, std::allocator<parse_error_t>> *, unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	SOURCE_LOCATION_UNKNOWN
- ...	SOURCE_LOCATION_UNKNOWN
static_cast<size_t>...	SOURCE_LOCATION_UNKNOWN
(...)	SOURCE_LOCATION_UNKNOWN
call to c_str	EXEC_ERR_MSG
call to c_str	_(wstr)
call to wgettext	EXEC_ERR_MSG
call to wgettext	_(wstr)
The '%ls' command can not be used in a pipeline	EXEC_ERR_MSG
array to pointer conversion	EXEC_ERR_MSG
(reference dereference)	EXEC_ERR_MSG
(reference dereference)	_(wstr)
call to operator bool	assert(expr)
equals_pos	assert(expr)
(const maybe_t<unsigned long>)...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
equals_pos	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_tree.cpp	assert(expr)
array to pointer conversion	assert(expr)
58	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> parse_error_t::describe_with_prefix(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool, bool) const	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> parse_error_t::describe_with_prefix(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, bool, bool) const	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	ERROR_BAD_COMMAND_ASSIGN_ERR_MSG
call to c_str	_(wstr)
call to wgettext	ERROR_BAD_COMMAND_ASSIGN_ERR_MSG
call to wgettext	_(wstr)
Unsupported use of '='. In fish, please use 'set %ls %ls'.	ERROR_BAD_COMMAND_ASSIGN_ERR_MSG
array to pointer conversion	ERROR_BAD_COMMAND_ASSIGN_ERR_MSG
(reference dereference)	ERROR_BAD_COMMAND_ASSIGN_ERR_MSG
(reference dereference)	_(wstr)
line_end	assert(expr)
line_start	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
line_end >= line_start	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_tree.cpp	assert(expr)
array to pointer conversion	assert(expr)
93	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
source_start	assert(expr)
line_start	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
source_start >= line_start	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_tree.cpp	assert(expr)
array to pointer conversion	assert(expr)
94	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
call to empty	assert(expr)
errors	assert(expr)
(reference dereference)	assert(expr)
! ...	assert(expr)
Expected an error	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!errors.empty() && ""Expected an error"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
1323	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
lambda [](const std::vector<parse_error_t, std::allocator<parse_error_t>> &)->auto::operator()(const std::vector<parse_error_t, std::allocator<parse_error_t>> &)->auto	__ASSERT_FUNCTION
lambda [](const std::vector<parse_error_t, std::allocator<parse_error_t>> &)->auto::operator()(const std::vector<parse_error_t, std::allocator<parse_error_t>> &)->auto	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
has_unclosed_quote_or_subshell	assert(expr)
! ...	assert(expr)
allow_incomplete	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!has_unclosed_quote_or_subshell || allow_incomplete	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
1303	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned int parse_util_detect_errors(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::vector<parse_error_t, std::allocator<parse_error_t>> *, bool)	__ASSERT_FUNCTION
unsigned int parse_util_detect_errors(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::vector<parse_error_t, std::allocator<parse_error_t>> *, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
call to c_str	_(wstr)
call to wgettext	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
call to wgettext	_(wstr)
Backgrounded commands can not be used as conditionals	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
array to pointer conversion	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
(reference dereference)	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
(reference dereference)	_(wstr)
cursor	assert(expr)
(bool)...	assert(expr)
Reached root without finding a job	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"cursor && ""Reached root without finding a job"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
1077	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool detect_errors_in_decorated_statement(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const ast::decorated_statement_t &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	assert(expr)
bool detect_errors_in_decorated_statement(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const ast::decorated_statement_t &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
job	assert(expr)
(bool)...	assert(expr)
Should have found the job	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"job && ""Should have found the job"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
1080	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	EXEC_ERR_MSG
call to c_str	_(wstr)
call to wgettext	EXEC_ERR_MSG
call to wgettext	_(wstr)
The '%ls' command can not be used in a pipeline	EXEC_ERR_MSG
array to pointer conversion	EXEC_ERR_MSG
(reference dereference)	EXEC_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	EXEC_ERR_MSG
call to c_str	_(wstr)
call to wgettext	EXEC_ERR_MSG
call to wgettext	_(wstr)
The '%ls' command can not be used in a pipeline	EXEC_ERR_MSG
array to pointer conversion	EXEC_ERR_MSG
(reference dereference)	EXEC_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	EXEC_ERR_MSG
call to c_str	_(wstr)
call to wgettext	EXEC_ERR_MSG
call to wgettext	_(wstr)
The '%ls' command can not be used in a pipeline	EXEC_ERR_MSG
array to pointer conversion	EXEC_ERR_MSG
(reference dereference)	EXEC_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	INVALID_RETURN_ERR_MSG
call to c_str	_(wstr)
call to wgettext	INVALID_RETURN_ERR_MSG
call to wgettext	_(wstr)
'return' outside of function definition	INVALID_RETURN_ERR_MSG
array to pointer conversion	INVALID_RETURN_ERR_MSG
(reference dereference)	INVALID_RETURN_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	INVALID_BREAK_ERR_MSG
call to c_str	_(wstr)
call to wgettext	INVALID_BREAK_ERR_MSG
call to wgettext	_(wstr)
'break' while not inside of loop	INVALID_BREAK_ERR_MSG
array to pointer conversion	INVALID_BREAK_ERR_MSG
(reference dereference)	INVALID_BREAK_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	INVALID_CONTINUE_ERR_MSG
call to c_str	_(wstr)
call to wgettext	INVALID_CONTINUE_ERR_MSG
call to wgettext	_(wstr)
'continue' while not inside of loop	INVALID_CONTINUE_ERR_MSG
array to pointer conversion	INVALID_CONTINUE_ERR_MSG
(reference dereference)	INVALID_CONTINUE_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	UNKNOWN_BUILTIN_ERR_MSG
call to c_str	_(wstr)
call to wgettext	UNKNOWN_BUILTIN_ERR_MSG
call to wgettext	_(wstr)
Unknown builtin '%ls'	UNKNOWN_BUILTIN_ERR_MSG
array to pointer conversion	UNKNOWN_BUILTIN_ERR_MSG
(reference dereference)	UNKNOWN_BUILTIN_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
call to c_str	_(wstr)
call to wgettext	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
call to wgettext	_(wstr)
Backgrounded commands can not be used as conditionals	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
array to pointer conversion	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
(reference dereference)	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
(reference dereference)	_(wstr)
call to c_str	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
call to c_str	_(wstr)
call to wgettext	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
call to wgettext	_(wstr)
Backgrounded commands can not be used as conditionals	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
array to pointer conversion	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
(reference dereference)	BACKGROUND_IN_CONDITIONAL_ERROR_MSG
(reference dereference)	_(wstr)
index	assert(expr)
call to count	assert(expr)
jlist	assert(expr)
(const list_t<job_list, job_conjunction_t> *)...	assert(expr)
... < ...	assert(expr)
Should have found the job in the list	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"index < jlist->count() && ""Should have found the job in the list"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
1036	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool detect_errors_in_backgrounded_job(const ast::job_t &, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	assert(expr)
bool detect_errors_in_backgrounded_job(const ast::job_t &, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
deco	assert(expr)
kw	assert(expr)
kw_and	assert(expr)
... == ...	assert(expr)
deco	assert(expr)
kw	assert(expr)
kw_or	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Unexpected decorator keyword	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"(deco->kw == parse_keyword_t::kw_and || deco->kw == parse_keyword_t::kw_or) && ""Unexpected decorator keyword"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
1043	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	BOOL_AFTER_BACKGROUND_ERROR_MSG
call to c_str	_(wstr)
call to wgettext	BOOL_AFTER_BACKGROUND_ERROR_MSG
call to wgettext	_(wstr)
The '%ls' command can not be used immediately after a backgrounded job	BOOL_AFTER_BACKGROUND_ERROR_MSG
array to pointer conversion	BOOL_AFTER_BACKGROUND_ERROR_MSG
(reference dereference)	BOOL_AFTER_BACKGROUND_ERROR_MSG
(reference dereference)	_(wstr)
paren_begin	assert(expr)
paren_end	assert(expr)
... < ...	assert(expr)
Parens out of order?	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"paren_begin < paren_end && ""Parens out of order?"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
943	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
unsigned int parse_util_detect_errors_in_argument(const ast::argument_t &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	assert(expr)
unsigned int parse_util_detect_errors_in_argument(const ast::argument_t &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
unexpected parse_util_locate_cmdsubst() return value	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/parse_util.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
968	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to c_str	ERROR_BAD_VAR_SUBCOMMAND1
call to c_str	_(wstr)
call to wgettext	ERROR_BAD_VAR_SUBCOMMAND1
call to wgettext	_(wstr)
$(...) is not supported. In fish, please use '(%ls)'.	ERROR_BAD_VAR_SUBCOMMAND1
array to pointer conversion	ERROR_BAD_VAR_SUBCOMMAND1
(reference dereference)	ERROR_BAD_VAR_SUBCOMMAND1
(reference dereference)	_(wstr)
errors	assert(expr)
0	assert(expr)
(parse_error_list_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
errors != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
792	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void parse_util_expand_variable_error(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long, unsigned long, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	__ASSERT_FUNCTION
void parse_util_expand_variable_error(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long, unsigned long, std::vector<parse_error_t, std::allocator<parse_error_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
dollar_pos	assert(expr)
call to size	assert(expr)
token	assert(expr)
(reference dereference)	assert(expr)
... < ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
dollar_pos < token.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
793	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	ERROR_BRACKETED_VARIABLE_QUOTED1
call to c_str	_(wstr)
call to wgettext	ERROR_BRACKETED_VARIABLE_QUOTED1
call to wgettext	_(wstr)
"Variables cannot be bracketed. In fish, please use ""$%ls""."	ERROR_BRACKETED_VARIABLE_QUOTED1
array to pointer conversion	ERROR_BRACKETED_VARIABLE_QUOTED1
(reference dereference)	ERROR_BRACKETED_VARIABLE_QUOTED1
(reference dereference)	_(wstr)
call to c_str	ERROR_BRACKETED_VARIABLE1
call to c_str	_(wstr)
call to wgettext	ERROR_BRACKETED_VARIABLE1
call to wgettext	_(wstr)
Variables cannot be bracketed. In fish, please use {$%ls}.	ERROR_BRACKETED_VARIABLE1
array to pointer conversion	ERROR_BRACKETED_VARIABLE1
(reference dereference)	ERROR_BRACKETED_VARIABLE1
(reference dereference)	_(wstr)
call to c_str	ERROR_BAD_VAR_CHAR1
call to c_str	_(wstr)
call to wgettext	ERROR_BAD_VAR_CHAR1
call to wgettext	_(wstr)
$%lc is not a valid variable in fish.	ERROR_BAD_VAR_CHAR1
array to pointer conversion	ERROR_BAD_VAR_CHAR1
(reference dereference)	ERROR_BAD_VAR_CHAR1
(reference dereference)	_(wstr)
call to c_str	ERROR_NO_VAR_NAME
call to c_str	_(wstr)
call to wgettext	ERROR_NO_VAR_NAME
call to wgettext	_(wstr)
Expected a variable name after this $.	ERROR_NO_VAR_NAME
array to pointer conversion	ERROR_NO_VAR_NAME
(reference dereference)	ERROR_NO_VAR_NAME
(reference dereference)	_(wstr)
call to c_str	ERROR_BAD_VAR_SUBCOMMAND1
call to c_str	_(wstr)
call to wgettext	ERROR_BAD_VAR_SUBCOMMAND1
call to wgettext	_(wstr)
$(...) is not supported. In fish, please use '(%ls)'.	ERROR_BAD_VAR_SUBCOMMAND1
array to pointer conversion	ERROR_BAD_VAR_SUBCOMMAND1
(reference dereference)	ERROR_BAD_VAR_SUBCOMMAND1
(reference dereference)	_(wstr)
call to c_str	ERROR_NO_VAR_NAME
call to c_str	_(wstr)
call to wgettext	ERROR_NO_VAR_NAME
call to wgettext	_(wstr)
Expected a variable name after this $.	ERROR_NO_VAR_NAME
array to pointer conversion	ERROR_NO_VAR_NAME
(reference dereference)	ERROR_NO_VAR_NAME
(reference dereference)	_(wstr)
call to size	assert(expr)
errors	assert(expr)
(const vector<parse_error_t, allocator<parse_error_t>> *)...	assert(expr)
start_error_count	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... + ...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
errors->size() == start_error_count + 1	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
874	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	ERROR_NOT_STATUS
call to c_str	_(wstr)
call to wgettext	ERROR_NOT_STATUS
call to wgettext	_(wstr)
$? is not the exit status. In fish, please use $status.	ERROR_NOT_STATUS
array to pointer conversion	ERROR_NOT_STATUS
(reference dereference)	ERROR_NOT_STATUS
(reference dereference)	_(wstr)
call to c_str	ERROR_NOT_ARGV_COUNT
call to c_str	_(wstr)
call to wgettext	ERROR_NOT_ARGV_COUNT
call to wgettext	_(wstr)
$# is not supported. In fish, please use 'count $argv'.	ERROR_NOT_ARGV_COUNT
array to pointer conversion	ERROR_NOT_ARGV_COUNT
(reference dereference)	ERROR_NOT_ARGV_COUNT
(reference dereference)	_(wstr)
call to c_str	ERROR_NOT_ARGV_AT
call to c_str	_(wstr)
call to wgettext	ERROR_NOT_ARGV_AT
call to wgettext	_(wstr)
$@ is not supported. In fish, please use $argv.	ERROR_NOT_ARGV_AT
array to pointer conversion	ERROR_NOT_ARGV_AT
(reference dereference)	ERROR_NOT_ARGV_AT
(reference dereference)	_(wstr)
call to c_str	ERROR_NOT_ARGV_STAR
call to c_str	_(wstr)
call to wgettext	ERROR_NOT_ARGV_STAR
call to wgettext	_(wstr)
$* is not supported. In fish, please use $argv.	ERROR_NOT_ARGV_STAR
array to pointer conversion	ERROR_NOT_ARGV_STAR
(reference dereference)	ERROR_NOT_ARGV_STAR
(reference dereference)	_(wstr)
call to c_str	ERROR_NOT_PID
call to c_str	_(wstr)
call to wgettext	ERROR_NOT_PID
call to wgettext	_(wstr)
$$ is not the pid. In fish, please use $fish_pid.	ERROR_NOT_PID
array to pointer conversion	ERROR_NOT_PID
(reference dereference)	ERROR_NOT_PID
(reference dereference)	_(wstr)
call to c_str	ERROR_BAD_VAR_CHAR1
call to c_str	_(wstr)
call to wgettext	ERROR_BAD_VAR_CHAR1
call to wgettext	_(wstr)
$%lc is not a valid variable in fish.	ERROR_BAD_VAR_CHAR1
array to pointer conversion	ERROR_BAD_VAR_CHAR1
(reference dereference)	ERROR_BAD_VAR_CHAR1
(reference dereference)	_(wstr)
va	va_start(v,l)
array to pointer conversion	va_start(v,l)
fmt	va_start(v,l)
__builtin_va_start	va_start(v,l)
va	va_end(v)
array to pointer conversion	va_end(v)
__builtin_va_end	va_end(v)
1	TOK_ACCEPT_UNFINISHED
(tok_flags_t)...	TOK_ACCEPT_UNFINISHED
buff	assert(expr)
(bool)...	assert(expr)
Null buffer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"buff && ""Null buffer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
356	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void parse_util_token_extent(const wchar_t *, unsigned long, const wchar_t **, const wchar_t **, const wchar_t **, const wchar_t **)	__ASSERT_FUNCTION
void parse_util_token_extent(const wchar_t *, unsigned long, const wchar_t **, const wchar_t **, const wchar_t **, const wchar_t **)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmdsubst_begin	assert(expr)
buff	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsubst_begin >= buff	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
376	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmdsubst_begin	assert(expr)
buff	assert(expr)
bufflen	assert(expr)
... + ...	assert(expr)
(...)	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsubst_begin <= (buff + bufflen)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
377	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmdsubst_end	assert(expr)
cmdsubst_begin	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsubst_end >= cmdsubst_begin	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
378	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmdsubst_end	assert(expr)
buff	assert(expr)
bufflen	assert(expr)
... + ...	assert(expr)
(...)	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsubst_end <= (buff + bufflen)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
379	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	TOK_ACCEPT_UNFINISHED
(tok_flags_t)...	TOK_ACCEPT_UNFINISHED
pa	assert(expr)
buff	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
pa >= buff	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
420	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
pa	assert(expr)
buff	assert(expr)
bufflen	assert(expr)
... + ...	assert(expr)
(...)	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
pa <= (buff + bufflen)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
421	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
pb	assert(expr)
pa	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
pb >= pa	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
422	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
pb	assert(expr)
buff	assert(expr)
bufflen	assert(expr)
... + ...	assert(expr)
(...)	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
pb <= (buff + bufflen)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
423	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
buff	assert(expr)
(bool)...	assert(expr)
Null buffer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"buff && ""Null buffer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
291	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void job_or_process_extent(bool, const wchar_t *, unsigned long, const wchar_t **, const wchar_t **, std::vector<tok_t, std::allocator<tok_t>> *)	__ASSERT_FUNCTION
void job_or_process_extent(bool, const wchar_t *, unsigned long, const wchar_t **, const wchar_t **, std::vector<tok_t, std::allocator<tok_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cursor_pos	assert(expr)
begin	assert(expr)
buff	assert(expr)
... - ...	assert(expr)
static_cast<size_t>...	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cursor_pos >= static_cast<size_t>(begin - buff)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
302	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	TOK_ACCEPT_UNFINISHED
(tok_flags_t)...	TOK_ACCEPT_UNFINISHED
buff	assert(expr)
(bool)...	assert(expr)
Null buffer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"buff && ""Null buffer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
242	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void parse_util_cmdsubst_extent(const wchar_t *, unsigned long, const wchar_t **, const wchar_t **)	__ASSERT_FUNCTION
void parse_util_cmdsubst_extent(const wchar_t *, unsigned long, const wchar_t **, const wchar_t **)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cursor_pos	assert(expr)
bufflen	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cursor_pos <= bufflen	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
246	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
end	assert(expr)
(const wchar_t *)...	assert(expr)
cursor	assert(expr)
... < ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
end < cursor	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
277	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
pos	assert(expr)
buff	assert(expr)
bufflen	assert(expr)
... + ...	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
pos <= buff + bufflen	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
279	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
bracket_range_begin	assert(expr)
0	assert(expr)
(wchar_t *)...	assert(expr)
... != ...	assert(expr)
bracket_range_begin	assert(expr)
(const wchar_t *)...	assert(expr)
valid_range_start	assert(expr)
... >= ...	assert(expr)
... && ...	assert(expr)
bracket_range_begin	assert(expr)
(const wchar_t *)...	assert(expr)
valid_range_end	assert(expr)
... <= ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
bracket_range_begin != nullptr && bracket_range_begin >= valid_range_start && bracket_range_begin <= valid_range_end	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
213	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int parse_util_locate_brackets_range(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long *, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, unsigned long *, unsigned long *, bool, wchar_t, wchar_t)	__ASSERT_FUNCTION
int parse_util_locate_brackets_range(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long *, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, unsigned long *, unsigned long *, bool, wchar_t, wchar_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
bracket_range_end	assert(expr)
0	assert(expr)
(wchar_t *)...	assert(expr)
... != ...	assert(expr)
bracket_range_end	assert(expr)
bracket_range_begin	assert(expr)
... > ...	assert(expr)
... && ...	assert(expr)
bracket_range_end	assert(expr)
(const wchar_t *)...	assert(expr)
valid_range_start	assert(expr)
... >= ...	assert(expr)
... && ...	assert(expr)
bracket_range_end	assert(expr)
(const wchar_t *)...	assert(expr)
valid_range_end	assert(expr)
... <= ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
bracket_range_end != nullptr && bracket_range_end > bracket_range_begin && bracket_range_end >= valid_range_start && bracket_range_end <= valid_range_end	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
215	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
in	assert(expr)
(bool)...	assert(expr)
null parameter	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"in && ""null parameter"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parse_util.cpp	assert(expr)
array to pointer conversion	assert(expr)
118	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int parse_util_locate_brackets_of_type(const wchar_t *, wchar_t **, wchar_t **, bool, wchar_t, wchar_t)	__ASSERT_FUNCTION
int parse_util_locate_brackets_of_type(const wchar_t *, wchar_t **, wchar_t **, bool, wchar_t, wchar_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
n	assert(expr)
(bool)...	assert(expr)
Node should not be null	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"n && ""Node should not be null"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
845	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void ast::node_visitation_t<NodeVisitor>::accept(const ast::node_t *) [with NodeVisitor = indent_visitor_t]	__ASSERT_FUNCTION
void ast::node_visitation_t<NodeVisitor>::accept(const ast::node_t *) [with NodeVisitor = indent_visitor_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<keyword_base>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<token_base>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<maybe_newlines>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<argument>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<argument_list, argument_t>)...	ELEMLIST(x,y)
(const list_t<argument_list, argument_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<redirection>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<argument_or_redirection>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	ELEMLIST(x,y)
(const list_t<argument_or_redirection_list, argument_or_redirection_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const leaf_t<variable_assignment>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<variable_assignment_list, variable_assignment_t>)...	ELEMLIST(x,y)
(const list_t<variable_assignment_list, variable_assignment_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_conjunction>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_list, job_conjunction_t>)...	ELEMLIST(x,y)
(const list_t<job_list, job_conjunction_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_conjunction_continuation>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	ELEMLIST(x,y)
(const list_t<job_conjunction_continuation_list, job_conjunction_continuation_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<job_continuation>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<job_continuation_list, job_continuation_t>)...	ELEMLIST(x,y)
(const list_t<job_continuation_list, job_continuation_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<andor_job>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<andor_job_list, andor_job_t>)...	ELEMLIST(x,y)
(const list_t<andor_job_list, andor_job_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<not_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<block_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<for_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<while_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<function_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<begin_header>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<if_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<if_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<elseif_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<elseif_clause_list, elseif_clause_t>)...	ELEMLIST(x,y)
(const list_t<elseif_clause_list, elseif_clause_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<else_clause>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<switch_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<case_item>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to visit	ELEMLIST(x,y)
call to visit	ELEM(T)
v_	ELEMLIST(x,y)
v_	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
n	ELEMLIST(x,y)
n	ELEM(T)
(...)	ELEMLIST(x,y)
(...)	ELEM(T)
* ...	ELEMLIST(x,y)
* ...	ELEM(T)
(const list_t<case_item_list, case_item_t>)...	ELEMLIST(x,y)
(const list_t<case_item_list, case_item_t>)...	ELEM(T)
(const node_t)...	ELEMLIST(x,y)
(const node_t)...	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<decorated_statement>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to visit	ELEM(T)
v_	ELEM(T)
(reference dereference)	ELEM(T)
call to as	ELEM(T)
n	ELEM(T)
(...)	ELEM(T)
* ...	ELEM(T)
(const branch_t<freestanding_argument_list>)...	ELEM(T)
(const node_t)...	ELEM(T)
(reference to)	ELEM(T)
break;	ELEM(T)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
oper	FIELDS(__VA_ARGS__...)
target	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<argument_or_redirection>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<not_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_for	FIELDS(__VA_ARGS__...)
var_name	FIELDS(__VA_ARGS__...)
kw_in	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<for_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
pipe	FIELDS(__VA_ARGS__...)
newlines	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
time	FIELDS(__VA_ARGS__...)
variables	FIELDS(__VA_ARGS__...)
statement	FIELDS(__VA_ARGS__...)
continuation	FIELDS(__VA_ARGS__...)
bg	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
conjunction	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction_continuation>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
decorator	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
continuations	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<job_conjunction>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
job	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<andor_job>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_while	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<while_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_function	FIELDS(__VA_ARGS__...)
first_arg	FIELDS(__VA_ARGS__...)
args	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<function_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_begin	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<begin_header>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
header	FIELDS(__VA_ARGS__...)
jobs	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<block_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_if	FIELDS(__VA_ARGS__...)
condition	FIELDS(__VA_ARGS__...)
andor_tail	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<elseif_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_else	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<else_clause>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
if_clause	FIELDS(__VA_ARGS__...)
elseif_clauses	FIELDS(__VA_ARGS__...)
else_clause	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<if_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_case	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
body	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<case_item>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
kw_switch	FIELDS(__VA_ARGS__...)
argument	FIELDS(__VA_ARGS__...)
semi_nl	FIELDS(__VA_ARGS__...)
cases	FIELDS(__VA_ARGS__...)
end	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<switch_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
opt_decoration	FIELDS(__VA_ARGS__...)
command	FIELDS(__VA_ARGS__...)
args_or_redirs	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<decorated_statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
contents	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<statement>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to will_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to accept_field_visitor	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
reversed	FIELDS(__VA_ARGS__...)
arguments	FIELDS(__VA_ARGS__...)
ExprStmt	FIELDS(__VA_ARGS__...)
call to did_visit_fields_of	FIELDS(__VA_ARGS__...)
visitor	FIELDS(__VA_ARGS__...)
(reference dereference)	FIELDS(__VA_ARGS__...)
this	FIELDS(__VA_ARGS__...)
* ...	FIELDS(__VA_ARGS__...)
(branch_t<freestanding_argument_list>)...	FIELDS(__VA_ARGS__...)
(node_t)...	FIELDS(__VA_ARGS__...)
(reference to)	FIELDS(__VA_ARGS__...)
return ...	FIELDS(__VA_ARGS__...)
{ ... }	FIELDS(__VA_ARGS__...)
case ...:	ELEM(T)
keyword_base	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<keyword_base> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
token_base	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<token_base> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
maybe_newlines	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<maybe_newlines> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<argument> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<argument_list, argument_t> *)...	ELEMLIST(x,y)
(list_t<argument_list, argument_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
redirection	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
argument_or_redirection	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
argument_or_redirection_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<argument_or_redirection_list, argument_or_redirection_t> *)...	ELEMLIST(x,y)
(list_t<argument_or_redirection_list, argument_or_redirection_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
variable_assignment	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
(leaf_t<variable_assignment> *)...	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
variable_assignment_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<variable_assignment_list, variable_assignment_t> *)...	ELEMLIST(x,y)
(list_t<variable_assignment_list, variable_assignment_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_list, job_conjunction_t> *)...	ELEMLIST(x,y)
(list_t<job_list, job_conjunction_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_conjunction_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_conjunction_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_conjunction_continuation_list, job_conjunction_continuation_t> *)...	ELEMLIST(x,y)
(list_t<job_conjunction_continuation_list, job_conjunction_continuation_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
job_continuation	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
job_continuation_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<job_continuation_list, job_continuation_t> *)...	ELEMLIST(x,y)
(list_t<job_continuation_list, job_continuation_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
andor_job	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
andor_job_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<andor_job_list, andor_job_t> *)...	ELEMLIST(x,y)
(list_t<andor_job_list, andor_job_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
not_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
block_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
for_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
while_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
function_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
begin_header	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
if_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
elseif_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
elseif_clause_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<elseif_clause_list, elseif_clause_t> *)...	ELEMLIST(x,y)
(list_t<elseif_clause_list, elseif_clause_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
else_clause	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
switch_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
case_item	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEMLIST(x,y)
case ...:	ELEM(T)
case_item_list	ELEMLIST(x,y)
ExprStmt	ELEMLIST(x,y)
ExprStmt	ELEM(T)
call to accept	ELEMLIST(x,y)
call to accept	ELEM(T)
call to as	ELEMLIST(x,y)
call to as	ELEM(T)
this	ELEMLIST(x,y)
this	ELEM(T)
(list_t<case_item_list, case_item_t> *)...	ELEMLIST(x,y)
(list_t<case_item_list, case_item_t> *)...	ELEM(T)
v	ELEMLIST(x,y)
v	ELEM(T)
(reference dereference)	ELEMLIST(x,y)
(reference dereference)	ELEM(T)
(reference to)	ELEMLIST(x,y)
(reference to)	ELEM(T)
reverse	ELEMLIST(x,y)
reverse	ELEM(T)
break;	ELEMLIST(x,y)
break;	ELEM(T)
case ...:	ELEM(T)
decorated_statement	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
case ...:	ELEM(T)
freestanding_argument_list	ELEM(T)
ExprStmt	ELEM(T)
call to accept	ELEM(T)
call to as	ELEM(T)
this	ELEM(T)
v	ELEM(T)
(reference dereference)	ELEM(T)
(reference to)	ELEM(T)
reverse	ELEM(T)
break;	ELEM(T)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const __normal_iterator<parse_error_t *, vector<parse_error_t, allocator<parse_error_t>>>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<parse_error_t *, vector<parse_error_t, allocator<parse_error_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
call to operator bool	assert(expr)
ptr	assert(expr)
(reference dereference)	assert(expr)
(const union_ptr_t<not_statement_t, block_statement_t, if_statement_t, switch_statement_t, decorated_statement_t>)...	assert(expr)
Should not have null ptr	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Should not have null ptr"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
885	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::not_statement_t; Types = ast::block_statement_t; Types = ast::if_statement_t; Types = ast::switch_statement_t; Types = ast::decorated_statement_t; NodeVisitor = indent_visitor_t]	__ASSERT_FUNCTION
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::not_statement_t; Types = ast::block_statement_t; Types = ast::if_statement_t; Types = ast::switch_statement_t; Types = ast::decorated_statement_t; NodeVisitor = indent_visitor_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
(reference dereference)	assert(expr)
(const union_ptr_t<for_header_t, while_header_t, function_header_t, begin_header_t>)...	assert(expr)
Should not have null ptr	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Should not have null ptr"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
885	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::for_header_t; Types = ast::while_header_t; Types = ast::function_header_t; Types = ast::begin_header_t; NodeVisitor = indent_visitor_t]	__ASSERT_FUNCTION
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::for_header_t; Types = ast::while_header_t; Types = ast::function_header_t; Types = ast::begin_header_t; NodeVisitor = indent_visitor_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator bool	assert(expr)
ptr	assert(expr)
(reference dereference)	assert(expr)
(const union_ptr_t<argument_t, redirection_t>)...	assert(expr)
Should not have null ptr	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"ptr && ""Should not have null ptr"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/ast.h	assert(expr)
array to pointer conversion	assert(expr)
885	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::argument_t; Types = ast::redirection_t; NodeVisitor = indent_visitor_t]	__ASSERT_FUNCTION
void ast::node_visitation_t<NodeVisitor>::visit_union_field(ast::union_ptr_t<Types...> &) [with Types = ast::argument_t; Types = ast::redirection_t; NodeVisitor = indent_visitor_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__pos	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<parse_error_t *, vector<parse_error_t, allocator<parse_error_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	STDOUT_FILENO
64976	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
call to c_str	_(wstr)
call to wgettext	_(wstr)
in function '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
 with arguments '%ls'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"in command substitution
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"from sourcing file %ls
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to operator bool	assert(expr)
b	assert(expr)
(reference dereference)	assert(expr)
event	assert(expr)
Should have an event	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"b.event && ""Should have an event"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
397	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void append_block_description_to_stack_trace(const parser_t &, const block_t &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
void append_block_description_to_stack_trace(const parser_t &, const block_t &, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"in event handler: %ls
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"	called on line %d of file %ls
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"	called during startup
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
128	FISH_MAX_STACK_DEPTH
128	FISH_MAX_STACK_DEPTH
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
current_filename	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not write profiling information to file '%s'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
path	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Time	Sum	Command
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
1	SOURCE_LOCATION_UNKNOWN
- ...	SOURCE_LOCATION_UNKNOWN
static_cast<size_t>...	SOURCE_LOCATION_UNKNOWN
(...)	SOURCE_LOCATION_UNKNOWN
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls (line %lu): 	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls: 	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to operator!=	assert(expr)
loc	assert(expr)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	assert(expr)
(reference to)	assert(expr)
call to end	assert(expr)
job_list	assert(expr)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	assert(expr)
(reference to)	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
loc != job_list.end()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
590	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void parser_t::job_promote(job_t *)	__ASSERT_FUNCTION
void parser_t::job_promote(job_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
'while' block	WHILE_BLOCK
array to pointer conversion	WHILE_BLOCK
'for' block	FOR_BLOCK
array to pointer conversion	FOR_BLOCK
'if' conditional block	IF_BLOCK
array to pointer conversion	IF_BLOCK
function invocation block	FUNCTION_CALL_BLOCK
array to pointer conversion	FUNCTION_CALL_BLOCK
function invocation block with no variable shadowing	FUNCTION_CALL_NO_SHADOW_BLOCK
array to pointer conversion	FUNCTION_CALL_NO_SHADOW_BLOCK
'switch' block	SWITCH_BLOCK
array to pointer conversion	SWITCH_BLOCK
command substitution block	SUBST_BLOCK
array to pointer conversion	SUBST_BLOCK
global root block	TOP_BLOCK
array to pointer conversion	TOP_BLOCK
'begin' unconditional block	BEGIN_BLOCK
array to pointer conversion	BEGIN_BLOCK
block created by the . builtin	SOURCE_BLOCK
array to pointer conversion	SOURCE_BLOCK
event handler block	EVENT_BLOCK
array to pointer conversion	EVENT_BLOCK
block created by breakpoint	BREAKPOINT_BLOCK
array to pointer conversion	BREAKPOINT_BLOCK
block created by variable assignment prefixing a command	VARIABLE_ASSIGNMENT_BLOCK
array to pointer conversion	VARIABLE_ASSIGNMENT_BLOCK
call to c_str	_(wstr)
call to wgettext	_(wstr)
unknown/invalid block	_(wstr)
unknown/invalid block	UNKNOWN_BLOCK
array to pointer conversion	_(wstr)
array to pointer conversion	UNKNOWN_BLOCK
(reference dereference)	_(wstr)
expected	assert(expr)
call to current_block	assert(expr)
this	assert(expr)
(const block_t *)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
expected == this->current_block()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
160	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void parser_t::pop_block(const block_t *)	__ASSERT_FUNCTION
void parser_t::pop_block(const block_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
block_list	assert(expr)
! ...	assert(expr)
empty block list	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!block_list.empty() && ""empty block list"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
161	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
%ls (line %d): 	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Startup	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Standard input	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
source_offset	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
source_offset >= 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
563	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> parser_t::current_line()	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> parser_t::current_line()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
block_type	assert(expr)
top	assert(expr)
... == ...	assert(expr)
block_type	assert(expr)
subst	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Invalid block type	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
Unknown literal	assert(expr)
"(block_type == block_type_t::top || block_type == block_type_t::subst) && ""Invalid block type"""	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
676	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
call to expression	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
block_type	assert(expr)
top	assert(expr)
... == ...	assert(expr)
block_type	assert(expr)
subst	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
block_type == block_type_t::top || block_type == block_type_t::subst	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
653	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
eval_res_t parser_t::eval(const std::shared_ptr<const parsed_source_t> &, const io_chain_t &, const std::shared_ptr<job_group_t> &, block_type_t)	__ASSERT_FUNCTION
eval_res_t parser_t::eval(const std::shared_ptr<const parsed_source_t> &, const io_chain_t &, const std::shared_ptr<job_group_t> &, block_type_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
stderr	stderr
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
principal_parser	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to get	assert(expr)
variables	assert(expr)
(bool)...	assert(expr)
Null variables in parser initializer	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"variables.get() && ""Null variables in parser initializer"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
85	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
parser_t::parser_t(std::shared_ptr<env_stack_t>)	__ASSERT_FUNCTION
parser_t::parser_t(std::shared_ptr<env_stack_t>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	O_RDONLY
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
is_function	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to operator!=	assert(expr)
job	assert(expr)
(const shared_ptr<job_t>)...	assert(expr)
(reference to)	assert(expr)
0	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
job != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
578	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void parser_t::job_add(std::shared_ptr<job_t>)	__ASSERT_FUNCTION
void parser_t::job_add(std::shared_ptr<job_t>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
call to operator->	assert(expr)
job	assert(expr)
(__shared_ptr<job_t, _S_atomic>)...	assert(expr)
(__shared_ptr_access<job_t, _S_atomic, false, false>)...	assert(expr)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	assert(expr)
processes	assert(expr)
(const vector<unique_ptr<process_t, default_delete<process_t>>, allocator<unique_ptr<process_t, default_delete<process_t>>>>)...	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!job->processes.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
579	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
type	assert(expr)
begin	assert(expr)
... == ...	assert(expr)
type	assert(expr)
top	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
type	assert(expr)
subst	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Invalid scope type	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"(type == block_type_t::begin || type == block_type_t::top || type == block_type_t::subst) && ""Invalid scope type"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
893	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
static block_t block_t::scope_block(block_type_t)	__ASSERT_FUNCTION
static block_t block_t::scope_block(block_type_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
block_type	assert(expr)
top	assert(expr)
... == ...	assert(expr)
block_type	assert(expr)
subst	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Invalid block type	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"(block_type == block_type_t::top || block_type == block_type_t::subst) && ""Invalid block type"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
676	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
eval_res_t parser_t::eval_node(const std::shared_ptr<const parsed_source_t> &, const T &, const io_chain_t &, const std::shared_ptr<job_group_t> &, block_type_t) [with T = ast::job_list_t]	__ASSERT_FUNCTION
eval_res_t parser_t::eval_node(const std::shared_ptr<const parsed_source_t> &, const T &, const io_chain_t &, const std::shared_ptr<job_group_t> &, block_type_t) [with T = ast::job_list_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
block_type	assert(expr)
top	assert(expr)
... == ...	assert(expr)
block_type	assert(expr)
subst	assert(expr)
... == ...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Invalid block type	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"(block_type == block_type_t::top || block_type == block_type_t::subst) && ""Invalid block type"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/parser.cpp	assert(expr)
array to pointer conversion	assert(expr)
676	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
eval_res_t parser_t::eval_node(const std::shared_ptr<const parsed_source_t> &, const T &, const io_chain_t &, const std::shared_ptr<job_group_t> &, block_type_t) [with T = ast::statement_t]	__ASSERT_FUNCTION
eval_res_t parser_t::eval_node(const std::shared_ptr<const parsed_source_t> &, const T &, const io_chain_t &, const std::shared_ptr<job_group_t> &, block_type_t) [with T = ast::statement_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__p	_GLIBCXX_MOVE(__val)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__t	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator-	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__p	_GLIBCXX_MOVE(__val)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE(__val)
__n	_GLIBCXX_MOVE(__val)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(difference_type)...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator-	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__p	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__t	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = event_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = event_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = event_t]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = event_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
64976	RESERVED_CHAR_BASE
64976	EXPAND_RESERVED_BASE
static_cast<wchar_t>...	RESERVED_CHAR_BASE
static_cast<wchar_t>...	EXPAND_RESERVED_BASE
(int)...	RESERVED_CHAR_BASE
(int)...	EXPAND_RESERVED_BASE
0	F_OK
0	F_OK
trailing	assert(expr)
len	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
trailing <= len	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/path.cpp	assert(expr)
array to pointer conversion	assert(expr)
403	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void path_make_canonical(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
void path_make_canonical(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to basic_string	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Your history will not be saved.	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
(reference to)	_(wstr)
call to basic_string	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Your personal settings will not be saved.	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
(reference to)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
11	EAGAIN
buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
call to __errno_location	errno
* ...	errno
(...)	errno
2	ENOENT
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOG(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOG(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOG(wht,__VA_ARGS__...)
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to c_str	FLOG(wht,__VA_ARGS__...)
custom_error_msg	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Unable to locate the %ls directory.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
which_dir	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Please set the %ls or HOME environment variable before starting fish.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
xdg_var	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Unable to locate %ls directory derived from $%ls: '%ls'.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
which_dir	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
env_var	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
path	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
The error was '%s'.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to strerror	FLOGF(wht,__VA_ARGS__...)
saved_errno	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning_path	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Please set $%ls to a directory where you have write access.	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
env_var	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to write	ignore_result(x)
2	ignore_result(x)
2	STDERR_FILENO
"
"	ignore_result(x)
array to pointer conversion	ignore_result(x)
(const void *)...	ignore_result(x)
1	ignore_result(x)
(size_t)...	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
call to empty	assert(expr)
wd	assert(expr)
(reference dereference)	assert(expr)
! ...	assert(expr)
call to back	assert(expr)
wd	assert(expr)
(reference dereference)	assert(expr)
(reference dereference)	assert(expr)
(int)...	assert(expr)
47	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!wd.empty() && wd.back() == L'/'	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/path.cpp	assert(expr)
array to pointer conversion	assert(expr)
162	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
maybe_t<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>> path_get_cdpath(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const environment_t &)	__ASSERT_FUNCTION
maybe_t<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>> path_get_cdpath(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const environment_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
20	ENOTDIR
call to __errno_location	errno
* ...	errno
(...)	errno
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
path	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
path	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
path_get_paths('%ls')	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
cmd	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
buff	S_ISREG(mode)
st_mode	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISREG(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISREG(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
32768	S_ISREG(mode)
32768	__S_IFREG
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISREG(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
1	X_OK
1	X_OK
call to __errno_location	errno
* ...	errno
(...)	errno
13	EACCES
buff	S_ISREG(mode)
st_mode	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISREG(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISREG(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
32768	S_ISREG(mode)
32768	__S_IFREG
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISREG(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
1	X_OK
buff	S_ISREG(mode)
st_mode	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISREG(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISREG(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
32768	S_ISREG(mode)
32768	__S_IFREG
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISREG(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
call to __errno_location	errno
* ...	errno
(...)	errno
13	EACCES
1	X_OK
call to __errno_location	errno
* ...	errno
(...)	errno
13	EACCES
buff	S_ISREG(mode)
st_mode	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISREG(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISREG(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
32768	S_ISREG(mode)
32768	__S_IFREG
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISREG(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
13	EACCES
call to __errno_location	errno
* ...	errno
(...)	errno
13	EACCES
36	ENAMETOOLONG
2	ENOENT
20	ENOTDIR
22	EINVAL
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	MISSING_COMMAND_ERR_MSG
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	MISSING_COMMAND_ERR_MSG
call to wgettext	_(wstr)
Error while searching for command '%ls'	FLOGF(wht,__VA_ARGS__...)
Error while searching for command '%ls'	MISSING_COMMAND_ERR_MSG
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	MISSING_COMMAND_ERR_MSG
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	MISSING_COMMAND_ERR_MSG
(reference dereference)	_(wstr)
call to c_str	FLOGF(wht,__VA_ARGS__...)
next_path	FLOGF(wht,__VA_ARGS__...)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
1	STDOUT_FILENO
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	O_RDONLY
7	E2BIG
_SC_ARG_MAX	_SC_ARG_MAX
(int)...	_SC_ARG_MAX
8	ENOEXEC
call to __errno_location	errno
* ...	errno
(...)	errno
2	ENOENT
1	X_OK
12	ENOMEM
call to __errno_location	errno
* ...	errno
(...)	errno
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
execute_fork	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	JOIN_THREADS_BEFORE_FORK
(bool)...	JOIN_THREADS_BEFORE_FORK
5	FORK_LAPS
call to __errno_location	errno
* ...	errno
(...)	errno
11	EAGAIN
1000000	FORK_SLEEP_TIME
(__syscall_slong_t)...	FORK_SLEEP_TIME
5	FORK_LAPS
Could not create child process - exiting	FORK_ERROR
array to pointer conversion	FORK_ERROR
0	FATAL_EXIT()
(bool)...	FATAL_EXIT()
exit_read_buff	FATAL_EXIT()
definition of exit_read_buff	FATAL_EXIT()
declaration	FATAL_EXIT()
ExprStmt	FATAL_EXIT()
call to show_stackframe	FATAL_EXIT()
69	FATAL_EXIT()
ExprStmt	FATAL_EXIT()
(statement expression)	ignore_result(x)
(statement expression)	FATAL_EXIT()
__x	ignore_result(x)
__x	FATAL_EXIT()
call to read	FATAL_EXIT()
0	FATAL_EXIT()
exit_read_buff	FATAL_EXIT()
& ...	FATAL_EXIT()
(void *)...	FATAL_EXIT()
1	FATAL_EXIT()
(size_t)...	FATAL_EXIT()
(...)	ignore_result(x)
(...)	FATAL_EXIT()
definition of __x	ignore_result(x)
definition of __x	FATAL_EXIT()
declaration	ignore_result(x)
declaration	FATAL_EXIT()
ExprStmt	ignore_result(x)
ExprStmt	FATAL_EXIT()
__x	ignore_result(x)
__x	FATAL_EXIT()
(void)...	ignore_result(x)
(void)...	FATAL_EXIT()
{ ... }	ignore_result(x)
{ ... }	FATAL_EXIT()
(...)	ignore_result(x)
(...)	FATAL_EXIT()
ExprStmt	FATAL_EXIT()
call to exit_without_destructors	FATAL_EXIT()
1	FATAL_EXIT()
{ ... }	FATAL_EXIT()
0	STDIN_FILENO
21	SIGTTIN
1	SIG_IGN
(__sighandler_t)...	SIG_IGN
(...)	SIG_IGN
22	SIGTTOU
1	SIG_IGN
(__sighandler_t)...	SIG_IGN
(...)	SIG_IGN
0	STDIN_FILENO
2	SIG_SETMASK
call to __errno_location	errno
* ...	errno
(...)	errno
13	EACCES
4	EINTR
1	EPERM
call to __errno_location	errno
* ...	errno
(...)	errno
1	EPERM
call to __errno_location	errno
* ...	errno
(...)	errno
call to needs_pgid_assignment	assert(expr)
call to operator->	assert(expr)
j	assert(expr)
group	assert(expr)
(const __shared_ptr<job_group_t, _S_atomic>)...	assert(expr)
(const __shared_ptr_access<job_group_t, _S_atomic, false, false>)...	assert(expr)
(const job_group_t *)...	assert(expr)
We should be expecting a pgid	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"j->group->needs_pgid_assignment() && ""We should be expecting a pgid"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/postfork.cpp	assert(expr)
array to pointer conversion	assert(expr)
229	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
posix_spawner_t::posix_spawner_t(const job_t *, const dup2_list_t &)	assert(expr)
posix_spawner_t::posix_spawner_t(const job_t *, const dup2_list_t &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
4	POSIX_SPAWN_SETSIGDEF
8	POSIX_SPAWN_SETSIGMASK
2	POSIX_SPAWN_SETPGROUP
1024	CMD_LEN
1024	CMD_LEN
(size_t)...	CMD_LEN
1024	CMD_LEN
"Could not show help message
"	HELP_ERR
array to pointer conversion	HELP_ERR
"Could not show help message
"	HELP_ERR
array to pointer conversion	HELP_ERR
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to begin	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
Unknown literal	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
8	CHAR_BIT
(unsigned long)...	CHAR_BIT
18	SIGCONT
1	SIGHUP
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
proc_wait_any	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
More than one job in foreground: job 1: '%ls' job 2: '%ls'	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to command_wcstr	FLOGF(wht,__VA_ARGS__...)
fg_job	FLOGF(wht,__VA_ARGS__...)
call to command_wcstr	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
j	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr<job_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const job_t *)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Process argument list	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Process name	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Job '%ls', process '%ls' has inconsistent state 'stopped'=%d	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to command_wcstr	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
j	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr<job_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const job_t *)...	FLOGF(wht,__VA_ARGS__...)
call to argv0	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
p	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const process_t *)...	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
p	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
stopped	FLOGF(wht,__VA_ARGS__...)
(int)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Job '%ls', process '%ls' has inconsistent state 'completed'=%d	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to command_wcstr	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
j	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr<job_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<job_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const job_t *)...	FLOGF(wht,__VA_ARGS__...)
call to argv0	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
p	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const process_t *)...	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
p	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
completed	FLOGF(wht,__VA_ARGS__...)
(int)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
proc_pgroup	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
proc_pgroup	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
terminal_return_from_job() returning early due to no process group	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
proc_pgroup	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOG(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOG(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOG(wht,__VA_ARGS__...)
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
proc_pgroup	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
fish reclaiming terminal after job pgid	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to operator*	FLOG(wht,__VA_ARGS__...)
pgid	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(const int)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	STDIN_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
25	ENOTTY
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not return shell to foreground	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	STDIN_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
25	ENOTTY
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not return shell to foreground	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	STDIN_FILENO
1	TCSADRAIN
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not return shell to foreground	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
proc_termowner	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
proc_termowner	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
terminal_give_to_job() returning early due to no process group	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	STDIN_FILENO
0	STDIN_FILENO
0	STDIN_FILENO
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_termowner	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_termowner	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
tcsetpgrp failed: %d	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
25	ENOTTY
9	EBADF
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_termowner	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_termowner	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Process group %d already has control of terminal	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
pgid	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
call to __errno_location	errno
* ...	errno
(...)	errno
1	EPERM
1	WNOHANG
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_termowner	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_termowner	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
"terminal_give_to_job(): EPERM.
"	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
pgid	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
25	ENOTTY
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not send job %d ('%ls') with pgid %d to foreground	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to get_id	FLOGF(wht,__VA_ARGS__...)
jg	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to get_command	FLOGF(wht,__VA_ARGS__...)
jg	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
pgid	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_termowner	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_termowner	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
"tcsetpgrp called but process group %d has terminated.
"	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
pgid	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	STDIN_FILENO
1	TCSADRAIN
0	O_RDONLY
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
job_reap	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
process_clean_after_marking	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
stdout	stdout
13	SIGPIPE
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
process_mark_finished_children	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_reap_internal	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_reap_internal	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Reaped internal process '%ls' (id %llu, status %d)	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to argv0	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
proc	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const process_t *)...	FLOGF(wht,__VA_ARGS__...)
call to get_id	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
proc	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
internal_proc_	FLOGF(wht,__VA_ARGS__...)
(__shared_ptr<internal_proc_t, _S_atomic>)...	FLOGF(wht,__VA_ARGS__...)
(__shared_ptr_access<internal_proc_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const __shared_ptr_access<internal_proc_t, _S_atomic, false, false>)...	FLOGF(wht,__VA_ARGS__...)
(const internal_proc_t *)...	FLOGF(wht,__VA_ARGS__...)
call to status_value	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
proc	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
status	FLOGF(wht,__VA_ARGS__...)
(const proc_status_t)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
1	WNOHANG
2	WUNTRACED
8	WCONTINUED
pid	assert(expr)
call to operator->	assert(expr)
proc	assert(expr)
(reference dereference)	assert(expr)
pid	assert(expr)
... == ...	assert(expr)
Unexpcted waitpid() return	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"pid == proc->pid && ""Unexpcted waitpid() return"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
501	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void process_mark_finished_children(parser_t &, bool)	assert(expr)
void process_mark_finished_children(parser_t &, bool)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_reap_external	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_reap_external	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Reaped external process '%ls' (pid %d, status %d)	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to argv0	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
proc	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const process_t *)...	FLOGF(wht,__VA_ARGS__...)
pid	FLOGF(wht,__VA_ARGS__...)
call to status_value	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
proc	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
status	FLOGF(wht,__VA_ARGS__...)
(const proc_status_t)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to stopped	assert(expr)
call to operator->	assert(expr)
proc	assert(expr)
(reference dereference)	assert(expr)
status	assert(expr)
(const proc_status_t)...	assert(expr)
call to continued	assert(expr)
call to operator->	assert(expr)
proc	assert(expr)
(reference dereference)	assert(expr)
status	assert(expr)
(const proc_status_t)...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
proc->status.stopped() || proc->status.continued()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
514	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_reap_external	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_reap_external	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
External process '%ls' (pid %d, %s)	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to argv0	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
proc	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(const process_t *)...	FLOGF(wht,__VA_ARGS__...)
pid	FLOGF(wht,__VA_ARGS__...)
call to stopped	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
proc	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
status	FLOGF(wht,__VA_ARGS__...)
(const proc_status_t)...	FLOGF(wht,__VA_ARGS__...)
stopped	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
continued	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
... ? ... : ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	assert(expr)
(bool)...	assert(expr)
Don't know how to reap this process	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"0 && ""Don't know how to reap this process"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
521	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
2	SIGINT
3	SIGQUIT
__sigaction_handler	sa_handler
sa_handler	sa_handler
0	SIG_DFL
(__sighandler_t)...	SIG_DFL
(...)	SIG_DFL
call to c_str	_(wstr)
call to wgettext	_(wstr)
"There are still jobs active:
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stdout	stdout
call to c_str	_(wstr)
call to wgettext	_(wstr)
"
   PID  Command
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stdout	stdout
stdout	stdout
stdout	stdout
call to c_str	_(wstr)
call to wgettext	_(wstr)
"A second attempt to exit will terminate them.
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stdout	stdout
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Use 'disown PID' to remove jobs from the list without terminating them.
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stdout	stdout
jid	assert(expr)
0	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
jid > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
111	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void release_job_id(int)	__ASSERT_FUNCTION
void release_job_id(int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator!=	assert(expr)
where	assert(expr)
(const __normal_iterator<int *, vector<int, allocator<int>>>)...	assert(expr)
(reference to)	assert(expr)
call to end	assert(expr)
call to operator->	assert(expr)
consumed_job_ids	assert(expr)
(const __normal_iterator<int *, vector<int, allocator<int>>>)...	assert(expr)
(reference to)	assert(expr)
JobID was not in use	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"where != consumed_job_ids->end() && ""JobID was not in use"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
117	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
22	SIGTTOU
1	SIG_IGN
(__sighandler_t)...	SIG_IGN
(...)	SIG_IGN
4	R_OK
call to operator bool	assert(expr)
job	assert(expr)
group	assert(expr)
(const __shared_ptr<job_group_t, _S_atomic>)...	assert(expr)
! ...	assert(expr)
Job already has a group	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!job->group && ""Job already has a group"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
261	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
static void job_group_t::populate_group_for_job(job_t *, const std::shared_ptr<job_group_t> &)	__ASSERT_FUNCTION
static void job_group_t::populate_group_for_job(job_t *, const std::shared_ptr<job_group_t> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to needs_pgid_assignment	assert(expr)
We should not be setting a pgid	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"needs_pgid_assignment() && ""We should not be setting a pgid"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
253	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void job_group_t::set_pgid(int)	__ASSERT_FUNCTION
void job_group_t::set_pgid(int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
pgid	assert(expr)
0	assert(expr)
... >= ...	assert(expr)
Invalid pgid	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"pgid >= 0 && ""Invalid pgid"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
254	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	WNOHANG
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_job_run	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_job_run	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
%ls job %d, gid %d (%ls), %ls, %ls	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
send_sigcont	FLOGF(wht,__VA_ARGS__...)
Continue	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
Start	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
... ? ... : ...	FLOGF(wht,__VA_ARGS__...)
call to job_id	FLOGF(wht,__VA_ARGS__...)
pgid	FLOGF(wht,__VA_ARGS__...)
call to command_wcstr	FLOGF(wht,__VA_ARGS__...)
call to is_completed	FLOGF(wht,__VA_ARGS__...)
COMPLETED	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
UNCOMPLETED	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
... ? ... : ...	FLOGF(wht,__VA_ARGS__...)
call to libdata	FLOGF(wht,__VA_ARGS__...)
parser	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
is_interactive	FLOGF(wht,__VA_ARGS__...)
INTERACTIVE	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
NON-INTERACTIVE	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
... ? ... : ...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
18	SIGCONT
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_pgroup	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
proc_pgroup	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Failed to send SIGCONT to any processes in pgroup %d!	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
pgid	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to empty	assert(expr)
processes	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!processes.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
133	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool job_t::is_completed() const	__ASSERT_FUNCTION
bool job_t::is_completed() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to is_constructed	assert(expr)
! ...	assert(expr)
Job was already constructed	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!is_constructed() && ""Job was already constructed"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
394	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void job_t::mark_constructed()	__ASSERT_FUNCTION
void job_t::mark_constructed()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	assert(expr)
The fish developers forgot to include a process_t. Please report a bug	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"false && ""The fish developers forgot to include a process_t. Please report a bug"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
372	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool process_t::is_internal() const	assert(expr)
bool process_t::is_internal() const	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	assert(expr)
process_t::is_internal: Total logic failure, universe is broken. Please replace universe and retry.	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"false && ""process_t::is_internal: Total logic failure, universe is broken. Please replace "" ""universe and retry."""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
377	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to exited	assert(expr)
! ...	assert(expr)
Process is already exited	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!exited() && ""Process is already exited"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/proc.cpp	assert(expr)
array to pointer conversion	assert(expr)
208	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void internal_proc_t::mark_exited(proc_status_t)	__ASSERT_FUNCTION
void internal_proc_t::mark_exited(proc_status_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
proc_internal_proc	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOG(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOG(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOG(wht,__VA_ARGS__...)
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
proc_internal_proc	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Internal proc	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
internal_proc_id_	FLOG(wht,__VA_ARGS__...)
exited with status	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to status_value	FLOG(wht,__VA_ARGS__...)
status	FLOG(wht,__VA_ARGS__...)
(const proc_status_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
6	SIGABRT
7	SIGBUS
8	SIGFPE
4	SIGILL
11	SIGSEGV
31	SIGSYS
vector::reserve	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<int, allocator<int>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_start	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<int, allocator<int>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_finish	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = termios]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = termios]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to begin	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const _Deque_iterator<shared_ptr<job_t>, shared_ptr<job_t> &, shared_ptr<job_t> *>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<int *, vector<int, allocator<int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
cannot create std::deque larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(const __normal_iterator<int *, vector<int, allocator<int>>>)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = topic_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = topic_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = termios]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = termios]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
call to expression	_GLIBCXX_FORWARD(_Tp,__val)
Unknown literal	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
call to expression	_GLIBCXX_FORWARD(_Tp,__val)
Unknown literal	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to expression	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	STDOUT_FILENO
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
parser	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
b	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	STDIN_FILENO
0	STDIN_FILENO
0	STDIN_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
call to __errno_location	errno
* ...	errno
(...)	errno
amt	assert(expr)
1	assert(expr)
- ...	assert(expr)
(long)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
amt == -1	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
3863	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
int read_ni(parser_t &, int, const io_chain_t &)	assert(expr)
int read_ni(parser_t &, int, const io_chain_t &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
4	EINTR
11	EAGAIN
11	EWOULDBLOCK
11	EAGAIN
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Unable to read input file: %s	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to strerror	FLOGF(wht,__VA_ARGS__...)
err	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
65279	UTF8_BOM_WCHAR
stderr	stderr
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
reader_get_history	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
reader_get_buffer	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
1	TOK_ACCEPT_UNFINISHED
2	TOK_SHOW_COMMENTS
0	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
(bool)...	__FD_ZERO(fdsp)
(bool)...	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
definition of __d0	__FD_ZERO(fdsp)
definition of __d0	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
definition of __d1	__FD_ZERO(fdsp)
definition of __d1	FD_ZERO(fdsetp)
declaration	__FD_ZERO(fdsp)
declaration	FD_ZERO(fdsetp)
asm statement	__FD_ZERO(fdsp)
asm statement	FD_ZERO(fdsetp)
__d0	__FD_ZERO(fdsp)
__d0	FD_ZERO(fdsetp)
__d1	__FD_ZERO(fdsp)
__d1	FD_ZERO(fdsetp)
0	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
sizeof(fd_set)	__FD_ZERO(fdsp)
sizeof(fd_set)	FD_ZERO(fdsetp)
sizeof(__fd_mask)	__FD_ZERO(fdsp)
sizeof(__fd_mask)	FD_ZERO(fdsetp)
... / ...	__FD_ZERO(fdsp)
... / ...	FD_ZERO(fdsetp)
fds	FD_ZERO(fdsetp)
& ...	FD_ZERO(fdsetp)
(...)	__FD_ZERO(fdsp)
(...)	FD_ZERO(fdsetp)
(...)	__FDS_BITS(set)
1024	__FD_SETSIZE
8	__NFDBITS
sizeof(__fd_mask)	__NFDBITS
(int)...	__NFDBITS
... * ...	__NFDBITS
(...)	__NFDBITS
fds_bits	__FD_ZERO(fdsp)
fds_bits	FD_ZERO(fdsetp)
fds_bits	__FDS_BITS(set)
array to pointer conversion	__FD_ZERO(fdsp)
array to pointer conversion	FD_ZERO(fdsetp)
array to pointer conversion	__FDS_BITS(set)
(...)	__FD_ZERO(fdsp)
(...)	FD_ZERO(fdsetp)
(...)	__FDS_BITS(set)
0	__FD_ZERO(fdsp)
0	FD_ZERO(fdsetp)
access to array	__FD_ZERO(fdsp)
access to array	FD_ZERO(fdsetp)
& ...	__FD_ZERO(fdsp)
& ...	FD_ZERO(fdsetp)
{ ... }	__FD_ZERO(fdsp)
{ ... }	FD_ZERO(fdsetp)
fds	FD_SET(fd,fdsetp)
& ...	FD_SET(fd,fdsetp)
(...)	__FDS_BITS(set)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
fds_bits	__FDS_BITS(set)
fds_bits	__FD_SET(d,set)
fds_bits	FD_SET(fd,fdsetp)
array to pointer conversion	__FDS_BITS(set)
array to pointer conversion	__FD_SET(d,set)
array to pointer conversion	FD_SET(fd,fdsetp)
(...)	__FDS_BITS(set)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(statement expression)	__FD_SET(d,set)
(statement expression)	FD_SET(fd,fdsetp)
(statement expression)	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
fd	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
definition of __d	__FD_SET(d,set)
definition of __d	FD_SET(fd,fdsetp)
definition of __d	__FD_ELT(d)
declaration	__FD_SET(d,set)
declaration	FD_SET(fd,fdsetp)
declaration	__FD_ELT(d)
ExprStmt	__FD_SET(d,set)
ExprStmt	FD_SET(fd,fdsetp)
ExprStmt	__FD_ELT(d)
call to __builtin_constant_p	__FD_SET(d,set)
call to __builtin_constant_p	FD_SET(fd,fdsetp)
call to __builtin_constant_p	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
(bool)...	__FD_SET(d,set)
(bool)...	FD_SET(fd,fdsetp)
(bool)...	__FD_ELT(d)
0	__FD_SET(d,set)
0	FD_SET(fd,fdsetp)
0	__FD_ELT(d)
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
... <= ...	__FD_SET(d,set)
... <= ...	FD_SET(fd,fdsetp)
... <= ...	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
1024	__FD_SET(d,set)
1024	FD_SET(fd,fdsetp)
1024	__FD_ELT(d)
1024	__FD_SETSIZE
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
(long)...	__FD_SETSIZE
... < ...	__FD_SET(d,set)
... < ...	FD_SET(fd,fdsetp)
... < ...	__FD_ELT(d)
... && ...	__FD_SET(d,set)
... && ...	FD_SET(fd,fdsetp)
... && ...	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
8	__FD_SET(d,set)
8	FD_SET(fd,fdsetp)
8	__FD_ELT(d)
8	__NFDBITS
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_ELT(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	__FD_SET(d,set)
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_ELT(d)
(int)...	__NFDBITS
... * ...	__FD_SET(d,set)
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_ELT(d)
... * ...	__NFDBITS
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
(...)	__NFDBITS
(long)...	__FD_SET(d,set)
(long)...	FD_SET(fd,fdsetp)
(long)...	__FD_ELT(d)
(long)...	__NFDBITS
... / ...	__FD_SET(d,set)
... / ...	FD_SET(fd,fdsetp)
... / ...	__FD_ELT(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
call to __fdelt_warn	__FD_SET(d,set)
call to __fdelt_warn	FD_SET(fd,fdsetp)
call to __fdelt_warn	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_ELT(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
call to __fdelt_chk	__FD_SET(d,set)
call to __fdelt_chk	FD_SET(fd,fdsetp)
call to __fdelt_chk	__FD_ELT(d)
__d	__FD_SET(d,set)
__d	FD_SET(fd,fdsetp)
__d	__FD_ELT(d)
... ? ... : ...	__FD_SET(d,set)
... ? ... : ...	FD_SET(fd,fdsetp)
... ? ... : ...	__FD_ELT(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_ELT(d)
{ ... }	__FD_SET(d,set)
{ ... }	FD_SET(fd,fdsetp)
{ ... }	__FD_ELT(d)
access to array	__FD_SET(d,set)
access to array	FD_SET(fd,fdsetp)
1	__FD_SET(d,set)
1	FD_SET(fd,fdsetp)
1	__FD_MASK(d)
fd	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
8	__FD_SET(d,set)
8	FD_SET(fd,fdsetp)
8	__FD_MASK(d)
8	__NFDBITS
sizeof(__fd_mask)	__FD_SET(d,set)
sizeof(__fd_mask)	FD_SET(fd,fdsetp)
sizeof(__fd_mask)	__FD_MASK(d)
sizeof(__fd_mask)	__NFDBITS
(int)...	__FD_SET(d,set)
(int)...	FD_SET(fd,fdsetp)
(int)...	__FD_MASK(d)
(int)...	__NFDBITS
... * ...	__FD_SET(d,set)
... * ...	FD_SET(fd,fdsetp)
... * ...	__FD_MASK(d)
... * ...	__NFDBITS
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
(...)	__NFDBITS
... % ...	__FD_SET(d,set)
... % ...	FD_SET(fd,fdsetp)
... % ...	__FD_MASK(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
... << ...	__FD_SET(d,set)
... << ...	FD_SET(fd,fdsetp)
... << ...	__FD_MASK(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
(__fd_mask)...	__FD_SET(d,set)
(__fd_mask)...	FD_SET(fd,fdsetp)
(__fd_mask)...	__FD_MASK(d)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(...)	__FD_MASK(d)
... |= ...	__FD_SET(d,set)
... |= ...	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
(void)...	__FD_SET(d,set)
(void)...	FD_SET(fd,fdsetp)
(...)	__FD_SET(d,set)
(...)	FD_SET(fd,fdsetp)
call to basic_string	DEBUG_PROMPT_FUNCTION_NAME
fish_breakpoint_prompt	DEBUG_PROMPT_FUNCTION_NAME
array to pointer conversion	DEBUG_PROMPT_FUNCTION_NAME
(reference to)	DEBUG_PROMPT_FUNCTION_NAME
call to basic_string	DEBUG_PROMPT_FUNCTION_NAME
fish_breakpoint_prompt	DEBUG_PROMPT_FUNCTION_NAME
array to pointer conversion	DEBUG_PROMPT_FUNCTION_NAME
(reference to)	DEBUG_PROMPT_FUNCTION_NAME
call to basic_string	LEFT_PROMPT_FUNCTION_NAME
fish_prompt	LEFT_PROMPT_FUNCTION_NAME
array to pointer conversion	LEFT_PROMPT_FUNCTION_NAME
(reference to)	LEFT_PROMPT_FUNCTION_NAME
call to basic_string	LEFT_PROMPT_FUNCTION_NAME
fish_prompt	LEFT_PROMPT_FUNCTION_NAME
array to pointer conversion	LEFT_PROMPT_FUNCTION_NAME
(reference to)	LEFT_PROMPT_FUNCTION_NAME
call to basic_string	DEFAULT_PROMPT
"echo -n ""$USER@$hostname $PWD ""'> '"	DEFAULT_PROMPT
array to pointer conversion	DEFAULT_PROMPT
(reference to)	DEFAULT_PROMPT
call to basic_string	RIGHT_PROMPT_FUNCTION_NAME
fish_right_prompt	RIGHT_PROMPT_FUNCTION_NAME
array to pointer conversion	RIGHT_PROMPT_FUNCTION_NAME
(reference to)	RIGHT_PROMPT_FUNCTION_NAME
call to basic_string	RIGHT_PROMPT_FUNCTION_NAME
fish_right_prompt	RIGHT_PROMPT_FUNCTION_NAME
array to pointer conversion	RIGHT_PROMPT_FUNCTION_NAME
(reference to)	RIGHT_PROMPT_FUNCTION_NAME
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
1	PAGER_SELECTION_NONE
- ...	PAGER_SELECTION_NONE
static_cast<size_t>...	PAGER_SELECTION_NONE
call to c_str	_(wstr)
call to wgettext	_(wstr)
"There are still jobs active:
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stdout	stdout
call to c_str	_(wstr)
call to wgettext	_(wstr)
"
   PID  Command
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stdout	stdout
stdout	stdout
stdout	stdout
call to c_str	_(wstr)
call to wgettext	_(wstr)
"A second attempt to exit will terminate them.
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stdout	stdout
call to c_str	_(wstr)
call to wgettext	_(wstr)
"Use 'disown PID' to remove jobs from the list without terminating them.
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stdout	stdout
0	O_RDONLY
call to empty	assert(expr)
reader_data_stack	assert(expr)
(const vector<shared_ptr<reader_data_t>, allocator<shared_ptr<reader_data_t>>>)...	assert(expr)
! ...	assert(expr)
empty stack in reader_data_stack	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!reader_data_stack.empty() && ""empty stack in reader_data_stack"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
2369	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void reader_pop()	__ASSERT_FUNCTION
void reader_pop()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
current_data	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to empty	assert(expr)
reader_data_stack	assert(expr)
(const vector<shared_ptr<reader_data_t>, allocator<shared_ptr<reader_data_t>>>)...	assert(expr)
! ...	assert(expr)
no current reader	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!reader_data_stack.empty() && ""no current reader"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
2343	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
reader_data_t *current_data()	__ASSERT_FUNCTION
reader_data_t *current_data()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
current_data_or_null	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
stderr	stderr
call to basic_string	ENV_CMD_DURATION
CMD_DURATION	ENV_CMD_DURATION
array to pointer conversion	ENV_CMD_DURATION
(reference to)	ENV_CMD_DURATION
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
reader_interactive_init	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to __errno_location	errno
* ...	errno
(...)	errno
1	EPERM
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to c_str	FLOG(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOG(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Failed to assign shell to its own process group	FLOG(wht,__VA_ARGS__...)
array to pointer conversion	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	_(wstr)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	STDIN_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
25	ENOTTY
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to c_str	FLOG(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOG(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Failed to take control of the terminal	FLOG(wht,__VA_ARGS__...)
array to pointer conversion	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	_(wstr)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	TCSANOW
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Failed to set startup terminal mode!	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
acquire_tty_or_exit	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
0	STDIN_FILENO
0	STDIN_FILENO
0	STDIN_FILENO
0	STDIN_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
25	ENOTTY
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
No TTY for interactive shell (tcgetpgrp failed)	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
21	SIGTTIN
call to c_str	_(wstr)
call to wgettext	_(wstr)
I appear to be an orphaned process, so I am quitting politely. My pid is %d.	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
fmt	FLOGF(wht,__VA_ARGS__...)
call to getpid	FLOGF(wht,__VA_ARGS__...)
static_cast<int>...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	errno
(...)	errno
3	ESRCH
0	O_RDONLY
2048	O_NONBLOCK
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
$*?({})	REPLACE_UNCLEAN
array to pointer conversion	REPLACE_UNCLEAN
insertion_point	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
insertion_point > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
1424	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> completion_apply_to_command_line(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, int, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long *, bool)	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> completion_apply_to_command_line(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, int, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long *, bool)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	STDIN_FILENO
0	STDIN_FILENO
0	TCSANOW
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
call to basic_string	ENV_CMD_DURATION
CMD_DURATION	ENV_CMD_DURATION
array to pointer conversion	ENV_CMD_DURATION
(reference to)	ENV_CMD_DURATION
0	STDIN_FILENO
1024	IXON
4096	IXOFF
1	OPOST
(unsigned int)...	OPOST
"echo (status current-command) "" "" $PWD"	DEFAULT_TITLE
array to pointer conversion	DEFAULT_TITLE
stdout	stdout
stdout	stdout
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to write	ignore_result(x)
1	ignore_result(x)
1	STDOUT_FILENO
	ignore_result(x)
array to pointer conversion	ignore_result(x)
(const void *)...	ignore_result(x)
1	ignore_result(x)
(size_t)...	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to write	ignore_result(x)
1	ignore_result(x)
1	STDOUT_FILENO
""	ignore_result(x)
array to pointer conversion	ignore_result(x)
(const void *)...	ignore_result(x)
1	ignore_result(x)
(size_t)...	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
cmdsub_begin	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
cmdsub_begin	assert(expr)
buff	assert(expr)
... >= ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsub_begin != nullptr && cmdsub_begin >= buff	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
945	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
maybe_t<edit_t> reader_expand_abbreviation_in_command(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long, const environment_t &)	__ASSERT_FUNCTION
maybe_t<edit_t> reader_expand_abbreviation_in_command(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, unsigned long, const environment_t &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cmdsub_end	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
cmdsub_end	assert(expr)
cmdsub_begin	assert(expr)
... >= ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
cmdsub_end != nullptr && cmdsub_end >= cmdsub_begin	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
946	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
matching_cmd_node	assert(expr)
(const token_base_t *)...	assert(expr)
(const leaf_t<token_base> *)...	assert(expr)
unsourced	assert(expr)
! ...	assert(expr)
Should not be unsourced	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!matching_cmd_node->unsourced && ""Should not be unsourced"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
985	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
2	SIGINT
0	STDIN_FILENO
1	OPOST
(unsigned int)...	OPOST
2	ICANON
(unsigned int)...	ICANON
32768	IEXTEN
(unsigned int)...	IEXTEN
8	ECHO
(unsigned int)...	ECHO
256	ICRNL
(unsigned int)...	ICRNL
64	INLCR
(unsigned int)...	INLCR
0	STDIN_FILENO
0	TCSANOW
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not set terminal mode for shell	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	STDIN_FILENO
0	TCSANOW
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
warning	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Could not set terminal mode for new job	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
256	ICRNL
64	INLCR
2	ICANON
8	ECHO
32768	IEXTEN
1	OPOST
(unsigned int)...	OPOST
1024	IXON
4096	IXOFF
32	NCCS
(unsigned long)...	NCCS
6	VMIN
5	VTIME
0	_POSIX_VDISABLE
(int)...	_POSIX_VDISABLE
0	_POSIX_VDISABLE
(unsigned char)...	_POSIX_VDISABLE
10	VSUSP
9	VSTOP
8	VSTART
call to empty	assert(expr)
el	assert(expr)
(reference dereference)	assert(expr)
undo_history	assert(expr)
edits	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!el.undo_history.edits.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
201	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool want_to_coalesce_insertion_of(const editable_line_t &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
bool want_to_coalesce_insertion_of(const editable_line_t &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to by_line	assert(expr)
history_search	assert(expr)
call to by_prefix	assert(expr)
history_search	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
history_search.by_line() || history_search.by_prefix()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
2088	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void reader_data_t::update_command_line_from_history_search()	assert(expr)
void reader_data_t::update_command_line_from_history_search()	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
el	assert(expr)
command_line	assert(expr)
& ...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
el == &command_line	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
2092	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
use_prefix	assert(expr)
! ...	assert(expr)
call to empty	assert(expr)
common_prefix	assert(expr)
(const basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>)...	assert(expr)
! ...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!use_prefix || !common_prefix.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
1801	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool reader_data_t::handle_completions(const std::vector<completion_t, std::allocator<completion_t>> &, unsigned long, unsigned long)	assert(expr)
bool reader_data_t::handle_completions(const std::vector<completion_t, std::allocator<completion_t>> &, unsigned long, unsigned long)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
9	PREFIX_MAX_LEN
(unsigned long)...	PREFIX_MAX_LEN
9	PREFIX_MAX_LEN
(unsigned long)...	PREFIX_MAX_LEN
9	PREFIX_MAX_LEN
(size_type)...	PREFIX_MAX_LEN
call to basic_string	MODE_PROMPT_FUNCTION_NAME
fish_mode_prompt	MODE_PROMPT_FUNCTION_NAME
array to pointer conversion	MODE_PROMPT_FUNCTION_NAME
(reference to)	MODE_PROMPT_FUNCTION_NAME
call to basic_string	MODE_PROMPT_FUNCTION_NAME
fish_mode_prompt	MODE_PROMPT_FUNCTION_NAME
array to pointer conversion	MODE_PROMPT_FUNCTION_NAME
(reference to)	MODE_PROMPT_FUNCTION_NAME
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
highlight_complete	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to size	assert(expr)
result	assert(expr)
colors	assert(expr)
(const vector<highlight_spec_t, allocator<highlight_spec_t>>)...	assert(expr)
call to size	assert(expr)
command_line	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
result.colors.size() == command_line.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
2263	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void reader_data_t::highlight_complete(<unnamed>::highlight_result_t)	assert(expr)
void reader_data_t::highlight_complete(<unnamed>::highlight_result_t)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
el	assert(expr)
0	assert(expr)
(const editable_line_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
el != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
2299	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void reader_data_t::super_highlight_me_plenty(int, bool)	__ASSERT_FUNCTION
void reader_data_t::super_highlight_me_plenty(int, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
match_highlight_pos	assert(expr)
0	assert(expr)
(long)...	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
match_highlight_pos >= 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
2301	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to write	ignore_result(x)
1	ignore_result(x)
1	STDOUT_FILENO
	ignore_result(x)
array to pointer conversion	ignore_result(x)
(const void *)...	ignore_result(x)
1	ignore_result(x)
(size_t)...	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
0	KILL_APPEND
end	assert(expr)
begin	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
end >= begin	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
2881	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void reader_data_t::handle_readline_command(readline_cmd_t, readline_loop_state_t &)	assert(expr)
void reader_data_t::handle_readline_command(readline_cmd_t, readline_loop_state_t &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	KILL_PREPEND
end	assert(expr)
begin	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
end >= begin	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
2910	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	KILL_APPEND
base_pos_new	assert(expr)
1	assert(expr)
- ...	assert(expr)
static_cast<size_t>...	assert(expr)
... != ...	assert(expr)
base_pos_old	assert(expr)
1	assert(expr)
- ...	assert(expr)
static_cast<size_t>...	assert(expr)
... != ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
base_pos_new != static_cast<size_t>(-1) && base_pos_old != static_cast<size_t>(-1)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
3231	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to fish_iswalnum	iswalnum
call to fish_iswalnum	iswalnum
0	KILL_APPEND
call to __fish_assert	DIE(msg)
should have been handled by inputter_t::readch	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/reader.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
3535	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
0	STDIN_FILENO
0	STDIN_FILENO
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
0	TCSANOW
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
25	ENOTTY
call to is_char	assert(expr)
call to operator->	assert(expr)
event_needing_handling	assert(expr)
(const char_event_t *)...	assert(expr)
call to is_readline	assert(expr)
call to operator->	assert(expr)
event_needing_handling	assert(expr)
(const char_event_t *)...	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
Should have a char or readline	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"(event_needing_handling->is_char() || event_needing_handling->is_readline()) && ""Should have a char or readline"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
3615	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
maybe_t<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>> reader_data_t::readline(int)	assert(expr)
maybe_t<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>> reader_data_t::readline(int)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
reader	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
reader	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Unknown key binding 0x%X	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
c	FLOGF(wht,__VA_ARGS__...)
(int)...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to write	ignore_result(x)
1	ignore_result(x)
1	STDOUT_FILENO
"
"	ignore_result(x)
array to pointer conversion	ignore_result(x)
(const void *)...	ignore_result(x)
1	ignore_result(x)
(size_t)...	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
0	TCSANOW
call to __errno_location	errno
* ...	errno
(...)	errno
5	EIO
0	KILL_APPEND
1	KILL_PREPEND
call to position	assert(expr)
el	assert(expr)
(const editable_line_t *)...	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
el->position() > 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
1323	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool reader_data_t::insert_string(editable_line_t *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
bool reader_data_t::insert_string(editable_line_t *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	KILL_APPEND
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
pager_selection_changed	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD_TRAMPOLINE(x)
call to assert_is_main_thread	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
command_line_changed	ASSERT_IS_MAIN_THREAD()
declaration of __FUNCTION__	ASSERT_IS_MAIN_THREAD()
__FUNCTION__	ASSERT_IS_MAIN_THREAD()
array to pointer conversion	ASSERT_IS_MAIN_THREAD()
mode	assert(expr)
(int)...	assert(expr)
inactive	assert(expr)
(int)...	assert(expr)
... != ...	assert(expr)
mode cannot be inactive in this setter	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"mode != inactive && ""mode cannot be inactive in this setter"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
423	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void <unnamed>::reader_history_search_t::reset_to_mode(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, history_t *, <unnamed>::reader_history_search_t::mode_t)	__ASSERT_FUNCTION
void <unnamed>::reader_history_search_t::reset_to_mode(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, history_t *, <unnamed>::reader_history_search_t::mode_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
match_index_	assert(expr)
call to size	assert(expr)
matches_	assert(expr)
... < ...	assert(expr)
Invalid match index	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"match_index_ < matches_.size() && ""Invalid match index"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
407	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &<unnamed>::reader_history_search_t::current_result() const	__ASSERT_FUNCTION
const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &<unnamed>::reader_history_search_t::current_result() const	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
match_index_	assert(expr)
call to size	assert(expr)
matches_	assert(expr)
... < ...	assert(expr)
Should have found more matches	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"match_index_ < matches_.size() && ""Should have found more matches"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
370	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
bool <unnamed>::reader_history_search_t::move_backwards()	assert(expr)
bool <unnamed>::reader_history_search_t::move_backwards()	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	TOK_ACCEPT_UNFINISHED
(tok_flags_t)...	TOK_ACCEPT_UNFINISHED
undo_history	assert(expr)
edits_applied	assert(expr)
call to size	assert(expr)
undo_history	assert(expr)
edits	assert(expr)
(const vector<edit_t, allocator<edit_t>>)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
undo_history.edits_applied == undo_history.edits.size()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/reader.cpp	assert(expr)
array to pointer conversion	assert(expr)
264	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void editable_line_t::push_edit(edit_t &&)	__ASSERT_FUNCTION
void editable_line_t::push_edit(edit_t &&)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD()
call to assert_is_background_thread	ASSERT_IS_BACKGROUND_THREAD_TRAMPOLINE(x)
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
operator()	ASSERT_IS_BACKGROUND_THREAD()
declaration of __FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
__FUNCTION__	ASSERT_IS_BACKGROUND_THREAD()
array to pointer conversion	ASSERT_IS_BACKGROUND_THREAD()
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
cannot create std::vector larger than max_size()	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<highlight_spec_t *, vector<highlight_spec_t, allocator<highlight_spec_t>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
33	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T maybe_detail::maybe_impl_t<T>::acquire() [with T = <unnamed>::autosuggestion_result_t]	__ASSERT_FUNCTION
T maybe_detail::maybe_impl_t<T>::acquire() [with T = <unnamed>::autosuggestion_result_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
33	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T maybe_detail::maybe_impl_t<T>::acquire() [with T = <unnamed>::highlight_result_t]	__ASSERT_FUNCTION
T maybe_detail::maybe_impl_t<T>::acquire() [with T = <unnamed>::highlight_result_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__x	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = readline_cmd_t]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = readline_cmd_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = edit_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = edit_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = screen_data_t::cursor_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = screen_data_t::cursor_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__v	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = <unnamed>::highlight_result_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = <unnamed>::highlight_result_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = <unnamed>::autosuggestion_result_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = <unnamed>::autosuggestion_result_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
call to forward	_GLIBCXX_FORWARD(_Tp,__val)
__arg	_GLIBCXX_FORWARD(_Tp,__val)
(reference dereference)	_GLIBCXX_FORWARD(_Tp,__val)
(reference to)	_GLIBCXX_FORWARD(_Tp,__val)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	STDOUT_FILENO
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD_TRAMPOLINE(x)
call to assert_is_not_forked_child	ASSERT_IS_NOT_FORKED_CHILD()
__FUNCTION__	ASSERT_IS_NOT_FORKED_CHILD()
resolve_chain	ASSERT_IS_NOT_FORKED_CHILD()
declaration of __FUNCTION__	ASSERT_IS_NOT_FORKED_CHILD()
__FUNCTION__	ASSERT_IS_NOT_FORKED_CHILD()
array to pointer conversion	ASSERT_IS_NOT_FORKED_CHILD()
64	O_CREAT
1024	O_APPEND
1	O_WRONLY
64	O_CREAT
1	O_WRONLY
512	O_TRUNC
64	O_CREAT
128	O_EXCL
1	O_WRONLY
0	O_RDONLY
call to __fish_assert	DIE(msg)
Not a file redirection	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/redirection.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
31	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
1	STDOUT_FILENO
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
The pointer '%ls' is invalid	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
err	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
The pointer '%ls' is null	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
err	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOG(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOG(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOG(wht,__VA_ARGS__...)
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
error	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to c_str	FLOG(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOG(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
Errors detected, shutting down. Break on sanity_lose() to debug.	FLOG(wht,__VA_ARGS__...)
array to pointer conversion	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	_(wstr)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
cur_term	clr_eos
cur_term	CUR
(...)	clr_eos
(...)	CUR
(TERMTYPE *)...	clr_eos
(TERMTYPE *)...	CUR
(...)	clr_eos
(...)	CUR
Strings	clr_eos
7	clr_eos
access to array	clr_eos
(bool)...	clr_eos
call to writembs_check	writembs(outp,mbs)
call to stdoutput	writembs(outp,mbs)
(reference dereference)	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
cur_term	writembs(outp,mbs)
cur_term	clr_eos
cur_term	CUR
(...)	writembs(outp,mbs)
(...)	clr_eos
(...)	CUR
(TERMTYPE *)...	writembs(outp,mbs)
(TERMTYPE *)...	clr_eos
(TERMTYPE *)...	CUR
(...)	writembs(outp,mbs)
(...)	clr_eos
(...)	CUR
Strings	writembs(outp,mbs)
Strings	clr_eos
7	writembs(outp,mbs)
7	clr_eos
access to array	writembs(outp,mbs)
access to array	clr_eos
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
clr_eos	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/screen.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1313	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
s	assert(expr)
(bool)...	assert(expr)
Null screen	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"s && ""Null screen"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/screen.cpp	assert(expr)
array to pointer conversion	assert(expr)
1231	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void s_reset_abandoning_line(screen_t *, int)	__ASSERT_FUNCTION
void s_reset_abandoning_line(screen_t *, int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cur_term	enter_dim_mode
cur_term	CUR
(...)	enter_dim_mode
(...)	CUR
(TERMTYPE *)...	enter_dim_mode
(TERMTYPE *)...	CUR
(...)	enter_dim_mode
(...)	CUR
Strings	enter_dim_mode
30	enter_dim_mode
access to array	enter_dim_mode
(bool)...	enter_dim_mode
cur_term	enter_dim_mode
cur_term	CUR
(...)	enter_dim_mode
(...)	CUR
(TERMTYPE *)...	enter_dim_mode
(TERMTYPE *)...	CUR
(...)	enter_dim_mode
(...)	CUR
Strings	enter_dim_mode
30	enter_dim_mode
access to array	enter_dim_mode
cur_term	set_a_foreground
cur_term	CUR
(...)	set_a_foreground
(...)	CUR
(TERMTYPE *)...	set_a_foreground
(TERMTYPE *)...	CUR
(...)	set_a_foreground
(...)	CUR
Strings	set_a_foreground
359	set_a_foreground
access to array	set_a_foreground
(bool)...	set_a_foreground
cur_term	max_colors
cur_term	CUR
(...)	max_colors
(...)	CUR
(TERMTYPE *)...	max_colors
(TERMTYPE *)...	CUR
(...)	max_colors
(...)	CUR
Numbers	max_colors
13	max_colors
access to array	max_colors
(int)...	max_colors
cur_term	set_a_foreground
cur_term	CUR
(...)	set_a_foreground
(...)	CUR
(TERMTYPE *)...	set_a_foreground
(TERMTYPE *)...	CUR
(...)	set_a_foreground
(...)	CUR
Strings	set_a_foreground
359	set_a_foreground
access to array	set_a_foreground
cur_term	max_colors
cur_term	CUR
(...)	max_colors
(...)	CUR
(TERMTYPE *)...	max_colors
(TERMTYPE *)...	CUR
(...)	max_colors
(...)	CUR
Numbers	max_colors
13	max_colors
access to array	max_colors
(int)...	max_colors
cur_term	set_a_foreground
cur_term	CUR
(...)	set_a_foreground
(...)	CUR
(TERMTYPE *)...	set_a_foreground
(TERMTYPE *)...	CUR
(...)	set_a_foreground
(...)	CUR
Strings	set_a_foreground
359	set_a_foreground
access to array	set_a_foreground
cur_term	max_colors
cur_term	CUR
(...)	max_colors
(...)	CUR
(TERMTYPE *)...	max_colors
(TERMTYPE *)...	CUR
(...)	max_colors
(...)	CUR
Numbers	max_colors
13	max_colors
access to array	max_colors
(int)...	max_colors
cur_term	enter_bold_mode
cur_term	CUR
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	enter_bold_mode
(...)	CUR
Strings	enter_bold_mode
27	enter_bold_mode
access to array	enter_bold_mode
(bool)...	enter_bold_mode
cur_term	enter_bold_mode
cur_term	CUR
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	enter_bold_mode
(...)	CUR
Strings	enter_bold_mode
27	enter_bold_mode
access to array	enter_bold_mode
cur_term	set_a_foreground
cur_term	CUR
(...)	set_a_foreground
(...)	CUR
(TERMTYPE *)...	set_a_foreground
(TERMTYPE *)...	CUR
(...)	set_a_foreground
(...)	CUR
Strings	set_a_foreground
359	set_a_foreground
access to array	set_a_foreground
cur_term	exit_attribute_mode
cur_term	CUR
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	exit_attribute_mode
(...)	CUR
Strings	exit_attribute_mode
39	exit_attribute_mode
access to array	exit_attribute_mode
(bool)...	exit_attribute_mode
cur_term	exit_attribute_mode
cur_term	CUR
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	exit_attribute_mode
(...)	CUR
Strings	exit_attribute_mode
39	exit_attribute_mode
access to array	exit_attribute_mode
cur_term	clr_eol
cur_term	CUR
(...)	clr_eol
(...)	CUR
(TERMTYPE *)...	clr_eol
(TERMTYPE *)...	CUR
(...)	clr_eol
(...)	CUR
Strings	clr_eol
6	clr_eol
access to array	clr_eol
(bool)...	clr_eol
cur_term	clr_eol
cur_term	CUR
(...)	clr_eol
(...)	CUR
(TERMTYPE *)...	clr_eol
(TERMTYPE *)...	CUR
(...)	clr_eol
(...)	CUR
Strings	clr_eol
6	clr_eol
access to array	clr_eol
(const char *)...	clr_eol
1	STDOUT_FILENO
1	STDOUT_FILENO
2	STDERR_FILENO
s	assert(expr)
(bool)...	assert(expr)
Null screen	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"s && ""Null screen"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/screen.cpp	assert(expr)
array to pointer conversion	assert(expr)
1202	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void s_reset_line(screen_t *, bool)	__ASSERT_FUNCTION
void s_reset_line(screen_t *, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
prompt_line_count	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... >= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
prompt_line_count >= 1	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/screen.cpp	assert(expr)
array to pointer conversion	assert(expr)
1215	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
1	STDOUT_FILENO
2	STDERR_FILENO
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
screen	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
screen	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
Repaint %u	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
call to operator++	FLOGF(wht,__VA_ARGS__...)
s_repaints	FLOGF(wht,__VA_ARGS__...)
static_cast<unsigned int>...	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
1	STDOUT_FILENO
1	STDOUT_FILENO
1	STDOUT_FILENO
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
s	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
left_prompt_width	assert(expr)
right_prompt_width	assert(expr)
... + ...	assert(expr)
screen_width	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
left_prompt_width + right_prompt_width <= screen_width	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/screen.cpp	assert(expr)
array to pointer conversion	assert(expr)
966	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
screen_layout_t compute_layout(screen_t *, unsigned long, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
screen_layout_t compute_layout(screen_t *, unsigned long, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
width_by_offset	assert(expr)
(reference dereference)	assert(expr)
! ...	assert(expr)
call to at	assert(expr)
width_by_offset	assert(expr)
(reference dereference)	assert(expr)
0	assert(expr)
(size_type)...	assert(expr)
(reference dereference)	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... == ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!width_by_offset.empty() && width_by_offset.at(0) == 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/screen.cpp	assert(expr)
array to pointer conversion	assert(expr)
930	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned long truncation_offset_for_width(const std::vector<unsigned long, std::allocator<unsigned long>> &, unsigned long)	__ASSERT_FUNCTION
unsigned long truncation_offset_for_width(const std::vector<unsigned long, std::allocator<unsigned long>> &, unsigned long)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
cur_term	cursor_up
cur_term	CUR
(...)	cursor_up
(...)	CUR
(TERMTYPE *)...	cursor_up
(TERMTYPE *)...	CUR
(...)	cursor_up
(...)	CUR
Strings	cursor_up
19	cursor_up
access to array	cursor_up
(bool)...	cursor_up
cur_term	cursor_down
cur_term	CUR
(...)	cursor_down
(...)	CUR
(TERMTYPE *)...	cursor_down
(TERMTYPE *)...	CUR
(...)	cursor_down
(...)	CUR
Strings	cursor_down
11	cursor_down
access to array	cursor_down
(bool)...	cursor_down
cur_term	cursor_left
cur_term	CUR
(...)	cursor_left
(...)	CUR
(TERMTYPE *)...	cursor_left
(TERMTYPE *)...	CUR
(...)	cursor_left
(...)	CUR
Strings	cursor_left
14	cursor_left
access to array	cursor_left
(bool)...	cursor_left
cur_term	cursor_right
cur_term	CUR
(...)	cursor_right
(...)	CUR
(TERMTYPE *)...	cursor_right
(TERMTYPE *)...	CUR
(...)	cursor_right
(...)	CUR
Strings	cursor_right
17	cursor_right
access to array	cursor_right
(bool)...	cursor_right
cur_term	clr_eos
cur_term	CUR
(...)	clr_eos
(...)	CUR
(TERMTYPE *)...	clr_eos
(TERMTYPE *)...	CUR
(...)	clr_eos
(...)	CUR
Strings	clr_eos
7	clr_eos
access to array	clr_eos
cur_term	clr_eol
cur_term	CUR
(...)	clr_eol
(...)	CUR
(TERMTYPE *)...	clr_eol
(TERMTYPE *)...	CUR
(...)	clr_eol
(...)	CUR
Strings	clr_eol
6	clr_eol
access to array	clr_eol
(bool)...	clr_eol
cur_term	clr_eos
cur_term	CUR
(...)	clr_eos
(...)	CUR
(TERMTYPE *)...	clr_eos
(TERMTYPE *)...	CUR
(...)	clr_eos
(...)	CUR
Strings	clr_eos
7	clr_eos
access to array	clr_eos
(bool)...	clr_eos
cur_term	clr_eos
cur_term	CUR
(...)	clr_eos
(...)	CUR
(TERMTYPE *)...	clr_eos
(TERMTYPE *)...	CUR
(...)	clr_eos
(...)	CUR
Strings	clr_eos
7	clr_eos
access to array	clr_eos
cur_term	clr_eol
cur_term	CUR
(...)	clr_eol
(...)	CUR
(TERMTYPE *)...	clr_eol
(TERMTYPE *)...	CUR
(...)	clr_eol
(...)	CUR
Strings	clr_eol
6	clr_eol
access to array	clr_eol
cur_term	clr_eos
cur_term	CUR
(...)	clr_eos
(...)	CUR
(TERMTYPE *)...	clr_eos
(TERMTYPE *)...	CUR
(...)	clr_eos
(...)	CUR
Strings	clr_eos
7	clr_eos
access to array	clr_eos
(const char *)...	clr_eos
cur_term	clr_eol
cur_term	CUR
(...)	clr_eol
(...)	CUR
(TERMTYPE *)...	clr_eol
(TERMTYPE *)...	CUR
(...)	clr_eol
(...)	CUR
Strings	clr_eol
6	clr_eol
access to array	clr_eol
(bool)...	clr_eol
cur_term	clr_eol
cur_term	CUR
(...)	clr_eol
(...)	CUR
(TERMTYPE *)...	clr_eol
(TERMTYPE *)...	CUR
(...)	clr_eol
(...)	CUR
Strings	clr_eol
6	clr_eol
access to array	clr_eol
(const char *)...	clr_eol
cur_term	clr_eol
cur_term	CUR
(...)	clr_eol
(...)	CUR
(TERMTYPE *)...	clr_eol
(TERMTYPE *)...	CUR
(...)	clr_eol
(...)	CUR
Strings	clr_eol
6	clr_eol
access to array	clr_eol
(bool)...	clr_eol
cur_term	clr_eol
cur_term	CUR
(...)	clr_eol
(...)	CUR
(TERMTYPE *)...	clr_eol
(TERMTYPE *)...	CUR
(...)	clr_eol
(...)	CUR
Strings	clr_eol
6	clr_eol
access to array	clr_eol
(const char *)...	clr_eol
call to writembs_check	writembs(outp,mbs)
call to outp	writembs(outp,mbs)
screen	writembs(outp,mbs)
(reference dereference)	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
s	writembs(outp,mbs)
(...)	writembs(outp,mbs)
s	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/screen.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
631	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
s	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
vars	UNUSED(expr)
(reference dereference)	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
cur_term	cursor_up
cur_term	CUR
(...)	cursor_up
(...)	CUR
(TERMTYPE *)...	cursor_up
(TERMTYPE *)...	CUR
(...)	cursor_up
(...)	CUR
Strings	cursor_up
19	cursor_up
access to array	cursor_up
(const char *)...	cursor_up
cur_term	cursor_down
cur_term	CUR
(...)	cursor_down
(...)	CUR
(TERMTYPE *)...	cursor_down
(TERMTYPE *)...	CUR
(...)	cursor_down
(...)	CUR
Strings	cursor_down
11	cursor_down
access to array	cursor_down
(const char *)...	cursor_down
4	ONLCR
(unsigned int)...	ONLCR
call to writembs_check	writembs(outp,mbs)
outp	writembs(outp,mbs)
(reference dereference)	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
str	writembs(outp,mbs)
(...)	writembs(outp,mbs)
str	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/screen.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
571	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
cur_term	cursor_left
cur_term	CUR
(...)	cursor_left
(...)	CUR
(TERMTYPE *)...	cursor_left
(TERMTYPE *)...	CUR
(...)	cursor_left
(...)	CUR
Strings	cursor_left
14	cursor_left
access to array	cursor_left
(const char *)...	cursor_left
cur_term	parm_left_cursor
cur_term	CUR
(...)	parm_left_cursor
(...)	CUR
(TERMTYPE *)...	parm_left_cursor
(TERMTYPE *)...	CUR
(...)	parm_left_cursor
(...)	CUR
Strings	parm_left_cursor
111	parm_left_cursor
access to array	parm_left_cursor
(const char *)...	parm_left_cursor
cur_term	cursor_right
cur_term	CUR
(...)	cursor_right
(...)	CUR
(TERMTYPE *)...	cursor_right
(TERMTYPE *)...	CUR
(...)	cursor_right
(...)	CUR
Strings	cursor_right
17	cursor_right
access to array	cursor_right
(const char *)...	cursor_right
cur_term	parm_right_cursor
cur_term	CUR
(...)	parm_right_cursor
(...)	CUR
(TERMTYPE *)...	parm_right_cursor
(TERMTYPE *)...	CUR
(...)	parm_right_cursor
(...)	CUR
Strings	parm_right_cursor
112	parm_right_cursor
access to array	parm_right_cursor
(const char *)...	parm_right_cursor
call to writembs_check	writembs(outp,mbs)
outp	writembs(outp,mbs)
(reference dereference)	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
multi_param	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(const char *)...	writembs(outp,mbs)
multi_param	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/screen.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
596	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
call to writembs_check	writembs(outp,mbs)
outp	writembs(outp,mbs)
(reference dereference)	writembs(outp,mbs)
(...)	writembs(outp,mbs)
(reference to)	writembs(outp,mbs)
str	writembs(outp,mbs)
(...)	writembs(outp,mbs)
str	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
1	writembs(outp,mbs)
/opt/src/src/screen.cpp	writembs(outp,mbs)
array to pointer conversion	writembs(outp,mbs)
599	writembs(outp,mbs)
(long)...	writembs(outp,mbs)
4	INDENT_STEP
stdout	stdout
stderr	stderr
1	STDOUT_FILENO
2	STDERR_FILENO
st_mtim	st_mtime
tv_sec	st_mtime
st_mtim	st_mtime
tv_sec	st_mtime
st_mtim	st_mtime
tv_sec	st_mtime
st_mtim	st_mtime
tv_sec	st_mtime
1	STDOUT_FILENO
2	STDERR_FILENO
call to is_run_terminator	assert(expr)
c	assert(expr)
! ...	assert(expr)
Should not have run terminator inside run	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!is_run_terminator(c) && ""Should not have run terminator inside run"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/screen.cpp	assert(expr)
array to pointer conversion	assert(expr)
340	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void truncate_run(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, unsigned long, unsigned long *, layout_cache_t &)	assert(expr)
void truncate_run(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> *, unsigned long, unsigned long *, layout_cache_t &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
cur_term	enter_bold_mode
cur_term	CUR
(...)	enter_bold_mode
(...)	CUR
(TERMTYPE *)...	enter_bold_mode
(TERMTYPE *)...	CUR
(...)	enter_bold_mode
(...)	CUR
Strings	enter_bold_mode
27	enter_bold_mode
access to array	enter_bold_mode
(const char *)...	enter_bold_mode
cur_term	exit_attribute_mode
cur_term	CUR
(...)	exit_attribute_mode
(...)	CUR
(TERMTYPE *)...	exit_attribute_mode
(TERMTYPE *)...	CUR
(...)	exit_attribute_mode
(...)	CUR
Strings	exit_attribute_mode
39	exit_attribute_mode
access to array	exit_attribute_mode
(const char *)...	exit_attribute_mode
cur_term	enter_underline_mode
cur_term	CUR
(...)	enter_underline_mode
(...)	CUR
(TERMTYPE *)...	enter_underline_mode
(TERMTYPE *)...	CUR
(...)	enter_underline_mode
(...)	CUR
Strings	enter_underline_mode
36	enter_underline_mode
access to array	enter_underline_mode
(const char *)...	enter_underline_mode
cur_term	exit_underline_mode
cur_term	CUR
(...)	exit_underline_mode
(...)	CUR
(TERMTYPE *)...	exit_underline_mode
(TERMTYPE *)...	CUR
(...)	exit_underline_mode
(...)	CUR
Strings	exit_underline_mode
44	exit_underline_mode
access to array	exit_underline_mode
(const char *)...	exit_underline_mode
cur_term	enter_standout_mode
cur_term	CUR
(...)	enter_standout_mode
(...)	CUR
(TERMTYPE *)...	enter_standout_mode
(TERMTYPE *)...	CUR
(...)	enter_standout_mode
(...)	CUR
Strings	enter_standout_mode
35	enter_standout_mode
access to array	enter_standout_mode
(const char *)...	enter_standout_mode
cur_term	exit_standout_mode
cur_term	CUR
(...)	exit_standout_mode
(...)	CUR
(TERMTYPE *)...	exit_standout_mode
(TERMTYPE *)...	CUR
(...)	exit_standout_mode
(...)	CUR
Strings	exit_standout_mode
43	exit_standout_mode
access to array	exit_standout_mode
(const char *)...	exit_standout_mode
cur_term	enter_blink_mode
cur_term	CUR
(...)	enter_blink_mode
(...)	CUR
(TERMTYPE *)...	enter_blink_mode
(TERMTYPE *)...	CUR
(...)	enter_blink_mode
(...)	CUR
Strings	enter_blink_mode
26	enter_blink_mode
access to array	enter_blink_mode
(const char *)...	enter_blink_mode
cur_term	enter_protected_mode
cur_term	CUR
(...)	enter_protected_mode
(...)	CUR
(TERMTYPE *)...	enter_protected_mode
(TERMTYPE *)...	CUR
(...)	enter_protected_mode
(...)	CUR
Strings	enter_protected_mode
33	enter_protected_mode
access to array	enter_protected_mode
(const char *)...	enter_protected_mode
cur_term	enter_italics_mode
cur_term	CUR
(...)	enter_italics_mode
(...)	CUR
(TERMTYPE *)...	enter_italics_mode
(TERMTYPE *)...	CUR
(...)	enter_italics_mode
(...)	CUR
Strings	enter_italics_mode
311	enter_italics_mode
access to array	enter_italics_mode
(const char *)...	enter_italics_mode
cur_term	exit_italics_mode
cur_term	CUR
(...)	exit_italics_mode
(...)	CUR
(TERMTYPE *)...	exit_italics_mode
(TERMTYPE *)...	CUR
(...)	exit_italics_mode
(...)	CUR
Strings	exit_italics_mode
321	exit_italics_mode
access to array	exit_italics_mode
(const char *)...	exit_italics_mode
cur_term	enter_reverse_mode
cur_term	CUR
(...)	enter_reverse_mode
(...)	CUR
(TERMTYPE *)...	enter_reverse_mode
(TERMTYPE *)...	CUR
(...)	enter_reverse_mode
(...)	CUR
Strings	enter_reverse_mode
34	enter_reverse_mode
access to array	enter_reverse_mode
(const char *)...	enter_reverse_mode
cur_term	enter_shadow_mode
cur_term	CUR
(...)	enter_shadow_mode
(...)	CUR
(TERMTYPE *)...	enter_shadow_mode
(TERMTYPE *)...	CUR
(...)	enter_shadow_mode
(...)	CUR
Strings	enter_shadow_mode
316	enter_shadow_mode
access to array	enter_shadow_mode
(const char *)...	enter_shadow_mode
cur_term	exit_shadow_mode
cur_term	CUR
(...)	exit_shadow_mode
(...)	CUR
(TERMTYPE *)...	exit_shadow_mode
(TERMTYPE *)...	CUR
(...)	exit_shadow_mode
(...)	CUR
Strings	exit_shadow_mode
324	exit_shadow_mode
access to array	exit_shadow_mode
(const char *)...	exit_shadow_mode
cur_term	enter_standout_mode
cur_term	CUR
(...)	enter_standout_mode
(...)	CUR
(TERMTYPE *)...	enter_standout_mode
(TERMTYPE *)...	CUR
(...)	enter_standout_mode
(...)	CUR
Strings	enter_standout_mode
35	enter_standout_mode
access to array	enter_standout_mode
(const char *)...	enter_standout_mode
cur_term	exit_standout_mode
cur_term	CUR
(...)	exit_standout_mode
(...)	CUR
(TERMTYPE *)...	exit_standout_mode
(TERMTYPE *)...	CUR
(...)	exit_standout_mode
(...)	CUR
Strings	exit_standout_mode
43	exit_standout_mode
access to array	exit_standout_mode
(const char *)...	exit_standout_mode
cur_term	enter_secure_mode
cur_term	CUR
(...)	enter_secure_mode
(...)	CUR
(TERMTYPE *)...	enter_secure_mode
(TERMTYPE *)...	CUR
(...)	enter_secure_mode
(...)	CUR
Strings	enter_secure_mode
32	enter_secure_mode
access to array	enter_secure_mode
(const char *)...	enter_secure_mode
cur_term	enter_dim_mode
cur_term	CUR
(...)	enter_dim_mode
(...)	CUR
(TERMTYPE *)...	enter_dim_mode
(TERMTYPE *)...	CUR
(...)	enter_dim_mode
(...)	CUR
Strings	enter_dim_mode
30	enter_dim_mode
access to array	enter_dim_mode
(const char *)...	enter_dim_mode
cur_term	enter_blink_mode
cur_term	CUR
(...)	enter_blink_mode
(...)	CUR
(TERMTYPE *)...	enter_blink_mode
(TERMTYPE *)...	CUR
(...)	enter_blink_mode
(...)	CUR
Strings	enter_blink_mode
26	enter_blink_mode
access to array	enter_blink_mode
(const char *)...	enter_blink_mode
cur_term	enter_alt_charset_mode
cur_term	CUR
(...)	enter_alt_charset_mode
(...)	CUR
(TERMTYPE *)...	enter_alt_charset_mode
(TERMTYPE *)...	CUR
(...)	enter_alt_charset_mode
(...)	CUR
Strings	enter_alt_charset_mode
25	enter_alt_charset_mode
access to array	enter_alt_charset_mode
(const char *)...	enter_alt_charset_mode
cur_term	exit_alt_charset_mode
cur_term	CUR
(...)	exit_alt_charset_mode
(...)	CUR
(TERMTYPE *)...	exit_alt_charset_mode
(TERMTYPE *)...	CUR
(...)	exit_alt_charset_mode
(...)	CUR
Strings	exit_alt_charset_mode
38	exit_alt_charset_mode
access to array	exit_alt_charset_mode
(const char *)...	exit_alt_charset_mode
cur_term	set_a_foreground
cur_term	CUR
(...)	set_a_foreground
(...)	CUR
(TERMTYPE *)...	set_a_foreground
(TERMTYPE *)...	CUR
(...)	set_a_foreground
(...)	CUR
Strings	set_a_foreground
359	set_a_foreground
access to array	set_a_foreground
(const char *)...	set_a_foreground
cur_term	set_a_background
cur_term	CUR
(...)	set_a_background
(...)	CUR
(TERMTYPE *)...	set_a_background
(TERMTYPE *)...	CUR
(...)	set_a_background
(...)	CUR
Strings	set_a_background
360	set_a_background
access to array	set_a_background
(const char *)...	set_a_background
cur_term	set_foreground
cur_term	CUR
(...)	set_foreground
(...)	CUR
(TERMTYPE *)...	set_foreground
(TERMTYPE *)...	CUR
(...)	set_foreground
(...)	CUR
Strings	set_foreground
302	set_foreground
access to array	set_foreground
(const char *)...	set_foreground
cur_term	set_background
cur_term	CUR
(...)	set_background
(...)	CUR
(TERMTYPE *)...	set_background
(TERMTYPE *)...	CUR
(...)	set_background
(...)	CUR
Strings	set_background
303	set_background
access to array	set_background
(const char *)...	set_background
cur_term	max_colors
cur_term	CUR
(...)	max_colors
(...)	CUR
(TERMTYPE *)...	max_colors
(TERMTYPE *)...	CUR
(...)	max_colors
(...)	CUR
Numbers	max_colors
13	max_colors
access to array	max_colors
(int)...	max_colors
cur_term	auto_right_margin
cur_term	CUR
(...)	auto_right_margin
(...)	CUR
(TERMTYPE *)...	auto_right_margin
(TERMTYPE *)...	CUR
(...)	auto_right_margin
(...)	CUR
Booleans	auto_right_margin
1	auto_right_margin
access to array	auto_right_margin
(bool)...	auto_right_margin
cur_term	init_tabs
cur_term	CUR
(...)	init_tabs
(...)	CUR
(TERMTYPE *)...	init_tabs
(TERMTYPE *)...	CUR
(...)	init_tabs
(...)	CUR
Numbers	init_tabs
1	init_tabs
access to array	init_tabs
(int)...	init_tabs
cur_term	init_tabs
cur_term	CUR
(...)	init_tabs
(...)	CUR
(TERMTYPE *)...	init_tabs
(TERMTYPE *)...	CUR
(...)	init_tabs
(...)	CUR
Numbers	init_tabs
1	init_tabs
access to array	init_tabs
call to __fish_assert	DIE(msg)
unexpectedly fell off end of try_sequence()	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/screen.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
73	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
code	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
code != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/screen.cpp	assert(expr)
array to pointer conversion	assert(expr)
251	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
unsigned long layout_cache_t::escape_code_length(const wchar_t *)	__ASSERT_FUNCTION
unsigned long layout_cache_t::escape_code_length(const wchar_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
vector::reserve	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<unsigned long, allocator<unsigned long>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_start	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<unsigned long, allocator<unsigned long>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_finish	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
1	__try
0	__catch(X)
2	SIG_SETMASK
1	SIGHUP
__sigaction_handler	sa_handler
sa_handler	sa_handler
1	SIG_IGN
(__sighandler_t)...	SIG_IGN
(...)	SIG_IGN
__sigaction_handler	sa_handler
sa_handler	sa_handler
0	SIG_DFL
(__sighandler_t)...	SIG_DFL
(...)	SIG_DFL
2	SIGINT
3	SIGQUIT
20	SIGTSTP
21	SIGTTIN
22	SIGTTOU
17	SIGCHLD
4	SA_SIGINFO
__sigaction_handler	sa_sigaction
sa_sigaction	sa_sigaction
__sigaction_handler	sa_sigaction
sa_sigaction	sa_sigaction
__sigaction_handler	sa_handler
sa_handler	sa_handler
1	SIG_IGN
(__sighandler_t)...	SIG_IGN
(...)	SIG_IGN
13	SIGPIPE
__sigaction_handler	sa_handler
sa_handler	sa_handler
1	SIG_IGN
(__sighandler_t)...	SIG_IGN
(...)	SIG_IGN
3	SIGQUIT
__sigaction_handler	sa_sigaction
sa_sigaction	sa_sigaction
4	SA_SIGINFO
2	SIGINT
4	SA_SIGINFO
__sigaction_handler	sa_sigaction
sa_sigaction	sa_sigaction
4	SA_SIGINFO
268435456	SA_RESTART
17	SIGCHLD
0	FATAL_EXIT()
(bool)...	FATAL_EXIT()
exit_read_buff	FATAL_EXIT()
definition of exit_read_buff	FATAL_EXIT()
declaration	FATAL_EXIT()
ExprStmt	FATAL_EXIT()
call to show_stackframe	FATAL_EXIT()
69	FATAL_EXIT()
ExprStmt	FATAL_EXIT()
(statement expression)	FATAL_EXIT()
(statement expression)	ignore_result(x)
__x	FATAL_EXIT()
__x	ignore_result(x)
call to read	FATAL_EXIT()
0	FATAL_EXIT()
exit_read_buff	FATAL_EXIT()
& ...	FATAL_EXIT()
(void *)...	FATAL_EXIT()
1	FATAL_EXIT()
(size_t)...	FATAL_EXIT()
(...)	FATAL_EXIT()
(...)	ignore_result(x)
definition of __x	FATAL_EXIT()
definition of __x	ignore_result(x)
declaration	FATAL_EXIT()
declaration	ignore_result(x)
ExprStmt	FATAL_EXIT()
ExprStmt	ignore_result(x)
__x	FATAL_EXIT()
__x	ignore_result(x)
(void)...	FATAL_EXIT()
(void)...	ignore_result(x)
{ ... }	FATAL_EXIT()
{ ... }	ignore_result(x)
(...)	FATAL_EXIT()
(...)	ignore_result(x)
ExprStmt	FATAL_EXIT()
call to exit_without_destructors	FATAL_EXIT()
1	FATAL_EXIT()
{ ... }	FATAL_EXIT()
__sigaction_handler	sa_handler
sa_handler	sa_handler
1	SIG_IGN
(__sighandler_t)...	SIG_IGN
(...)	SIG_IGN
20	SIGTSTP
22	SIGTTOU
__sigaction_handler	sa_sigaction
sa_sigaction	sa_sigaction
4	SA_SIGINFO
21	SIGTTIN
__sigaction_handler	sa_sigaction
sa_sigaction	sa_sigaction
4	SA_SIGINFO
15	SIGTERM
1	SIGHUP
__sigaction_handler	sa_handler
sa_handler	sa_handler
0	SIG_DFL
(__sighandler_t)...	SIG_DFL
(...)	SIG_DFL
__sigaction_handler	sa_sigaction
sa_sigaction	sa_sigaction
4	SA_SIGINFO
1	SIGHUP
__sigaction_handler	sa_sigaction
sa_sigaction	sa_sigaction
4	SA_SIGINFO
14	SIGALRM
__sigaction_handler	sa_sigaction
sa_sigaction	sa_sigaction
4	SA_SIGINFO
28	SIGWINCH
__sigaction_handler	sa_handler
sa_handler	sa_handler
0	SIG_DFL
(__sighandler_t)...	SIG_DFL
(...)	SIG_DFL
1	SIGHUP
1	SIGHUP
__sigaction_handler	sa_handler
sa_handler	sa_handler
1	SIG_IGN
(__sighandler_t)...	SIG_IGN
(...)	SIG_IGN
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
info	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
0	UNUSED(expr)
(bool)...	UNUSED(expr)
ExprStmt	UNUSED(expr)
context	UNUSED(expr)
(...)	UNUSED(expr)
(void)...	UNUSED(expr)
{ ... }	UNUSED(expr)
28	SIGWINCH
1	SIGHUP
15	SIGTERM
15	SIGTERM
0	SIG_DFL
(__sighandler_t)...	SIG_DFL
(...)	SIG_DFL
15	SIGTERM
2	SIGINT
2	SIGINT
17	SIGCHLD
14	SIGALRM
0	SIG_DFL
(__sighandler_t)...	SIG_DFL
(...)	SIG_DFL
call to c_str	_(wstr)
call to wgettext	_(wstr)
data	_(wstr)
(reference dereference)	_(wstr)
desc	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unknown	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unknown	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
1	SIGHUP
Terminal hung up	N_(wstr)
array to pointer conversion	N_(wstr)
2	SIGINT
Quit request from job control (^C)	N_(wstr)
array to pointer conversion	N_(wstr)
3	SIGQUIT
Quit request from job control with core dump (^\)	N_(wstr)
array to pointer conversion	N_(wstr)
4	SIGILL
Illegal instruction	N_(wstr)
array to pointer conversion	N_(wstr)
5	SIGTRAP
Trace or breakpoint trap	N_(wstr)
array to pointer conversion	N_(wstr)
6	SIGABRT
Abort	N_(wstr)
array to pointer conversion	N_(wstr)
7	SIGBUS
Misaligned address error	N_(wstr)
array to pointer conversion	N_(wstr)
8	SIGFPE
Floating point exception	N_(wstr)
array to pointer conversion	N_(wstr)
9	SIGKILL
Forced quit	N_(wstr)
array to pointer conversion	N_(wstr)
10	SIGUSR1
User defined signal 1	N_(wstr)
array to pointer conversion	N_(wstr)
12	SIGUSR2
User defined signal 2	N_(wstr)
array to pointer conversion	N_(wstr)
11	SIGSEGV
Address boundary error	N_(wstr)
array to pointer conversion	N_(wstr)
13	SIGPIPE
Broken pipe	N_(wstr)
array to pointer conversion	N_(wstr)
14	SIGALRM
Timer expired	N_(wstr)
array to pointer conversion	N_(wstr)
15	SIGTERM
Polite quit request	N_(wstr)
array to pointer conversion	N_(wstr)
17	SIGCHLD
Child process status changed	N_(wstr)
array to pointer conversion	N_(wstr)
18	SIGCONT
Continue previously stopped process	N_(wstr)
array to pointer conversion	N_(wstr)
19	SIGSTOP
Forced stop	N_(wstr)
array to pointer conversion	N_(wstr)
20	SIGTSTP
Stop request from job control (^Z)	N_(wstr)
array to pointer conversion	N_(wstr)
21	SIGTTIN
Stop from terminal input	N_(wstr)
array to pointer conversion	N_(wstr)
22	SIGTTOU
Stop from terminal output	N_(wstr)
array to pointer conversion	N_(wstr)
23	SIGURG
Urgent socket condition	N_(wstr)
array to pointer conversion	N_(wstr)
24	SIGXCPU
CPU time limit exceeded	N_(wstr)
array to pointer conversion	N_(wstr)
25	SIGXFSZ
File size limit exceeded	N_(wstr)
array to pointer conversion	N_(wstr)
26	SIGVTALRM
Virtual timer expired	N_(wstr)
array to pointer conversion	N_(wstr)
27	SIGPROF
Profiling timer expired	N_(wstr)
array to pointer conversion	N_(wstr)
28	SIGWINCH
Window size change	N_(wstr)
array to pointer conversion	N_(wstr)
29	SIGIO
29	SIGPOLL
I/O on asynchronous file descriptor is possible	N_(wstr)
array to pointer conversion	N_(wstr)
30	SIGPWR
Power failure	N_(wstr)
array to pointer conversion	N_(wstr)
31	SIGSYS
Bad system call	N_(wstr)
array to pointer conversion	N_(wstr)
16	SIGSTKFLT
Stack fault	N_(wstr)
array to pointer conversion	N_(wstr)
6	SIGIOT
6	SIGABRT
Abort (Alias for SIGABRT)	N_(wstr)
array to pointer conversion	N_(wstr)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
32767	USHRT_MAX
32767	SHRT_MAX
2	USHRT_MAX
... * ...	USHRT_MAX
1	USHRT_MAX
... + ...	USHRT_MAX
(...)	USHRT_MAX
1	STDOUT_FILENO
21523	TIOCGWINSZ
(unsigned long)...	TIOCGWINSZ
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
21	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = termsize_t]	__ASSERT_FUNCTION
const T &maybe_detail::maybe_impl_t<T>::value() const [with T = termsize_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
16	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T &maybe_detail::maybe_impl_t<T>::value() [with T = termsize_t]	__ASSERT_FUNCTION
T &maybe_detail::maybe_impl_t<T>::value() [with T = termsize_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
stderr	stderr
RUSAGE_SELF	RUSAGE_SELF
(__rusage_who_t)...	RUSAGE_SELF
RUSAGE_CHILDREN	RUSAGE_CHILDREN
(__rusage_who_t)...	RUSAGE_CHILDREN
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	__try
0	__catch(X)
call to __builtin_nanf	NAN
	NAN
array to pointer conversion	NAN
(...)	NAN
(double)...	NAN
call to __builtin_nanf	NAN
	NAN
array to pointer conversion	NAN
(...)	NAN
(double)...	NAN
n	TE_FUN(__VA_ARGS__...)
function	TE_FUN(__VA_ARGS__...)
(..(*)(..))...	TE_FUN(__VA_ARGS__...)
(...)	TE_FUN(__VA_ARGS__...)
n	TE_FUN(__VA_ARGS__...)
function	TE_FUN(__VA_ARGS__...)
(..(*)(..))...	TE_FUN(__VA_ARGS__...)
(...)	TE_FUN(__VA_ARGS__...)
call to te_eval	M(e)
n	M(e)
parameters	M(e)
array to pointer conversion	M(e)
0	M(e)
access to array	M(e)
(const te_expr *)...	M(e)
n	TE_FUN(__VA_ARGS__...)
function	TE_FUN(__VA_ARGS__...)
(..(*)(..))...	TE_FUN(__VA_ARGS__...)
(...)	TE_FUN(__VA_ARGS__...)
call to te_eval	M(e)
n	M(e)
parameters	M(e)
array to pointer conversion	M(e)
0	M(e)
access to array	M(e)
(const te_expr *)...	M(e)
call to te_eval	M(e)
n	M(e)
parameters	M(e)
array to pointer conversion	M(e)
1	M(e)
access to array	M(e)
(const te_expr *)...	M(e)
n	TE_FUN(__VA_ARGS__...)
function	TE_FUN(__VA_ARGS__...)
(..(*)(..))...	TE_FUN(__VA_ARGS__...)
(...)	TE_FUN(__VA_ARGS__...)
call to te_eval	M(e)
n	M(e)
parameters	M(e)
array to pointer conversion	M(e)
0	M(e)
access to array	M(e)
(const te_expr *)...	M(e)
call to te_eval	M(e)
n	M(e)
parameters	M(e)
array to pointer conversion	M(e)
1	M(e)
access to array	M(e)
(const te_expr *)...	M(e)
call to te_eval	M(e)
n	M(e)
parameters	M(e)
array to pointer conversion	M(e)
2	M(e)
access to array	M(e)
(const te_expr *)...	M(e)
call to __builtin_nanf	NAN
	NAN
array to pointer conversion	NAN
(...)	NAN
(double)...	NAN
call to new_expr	NEW_EXPR(type,__VA_ARGS__...)
TE_FUNCTION2	NEW_EXPR(type,__VA_ARGS__...)
(int)...	NEW_EXPR(type,__VA_ARGS__...)
call to move	NEW_EXPR(type,__VA_ARGS__...)
{...}	NEW_EXPR(type,__VA_ARGS__...)
ret	NEW_EXPR(type,__VA_ARGS__...)
(const te_expr *)...	NEW_EXPR(type,__VA_ARGS__...)
call to term	NEW_EXPR(type,__VA_ARGS__...)
s	NEW_EXPR(type,__VA_ARGS__...)
(const te_expr *)...	NEW_EXPR(type,__VA_ARGS__...)
(reference to)	NEW_EXPR(type,__VA_ARGS__...)
(reference dereference)	NEW_EXPR(type,__VA_ARGS__...)
array to pointer conversion	NEW_EXPR(type,__VA_ARGS__...)
call to new_expr	NEW_EXPR(type,__VA_ARGS__...)
TE_FUNCTION2	NEW_EXPR(type,__VA_ARGS__...)
(int)...	NEW_EXPR(type,__VA_ARGS__...)
call to move	NEW_EXPR(type,__VA_ARGS__...)
{...}	NEW_EXPR(type,__VA_ARGS__...)
ret	NEW_EXPR(type,__VA_ARGS__...)
(const te_expr *)...	NEW_EXPR(type,__VA_ARGS__...)
call to factor	NEW_EXPR(type,__VA_ARGS__...)
s	NEW_EXPR(type,__VA_ARGS__...)
(const te_expr *)...	NEW_EXPR(type,__VA_ARGS__...)
(reference to)	NEW_EXPR(type,__VA_ARGS__...)
(reference dereference)	NEW_EXPR(type,__VA_ARGS__...)
array to pointer conversion	NEW_EXPR(type,__VA_ARGS__...)
call to new_expr	NEW_EXPR(type,__VA_ARGS__...)
TE_FUNCTION2	NEW_EXPR(type,__VA_ARGS__...)
(int)...	NEW_EXPR(type,__VA_ARGS__...)
call to move	NEW_EXPR(type,__VA_ARGS__...)
{...}	NEW_EXPR(type,__VA_ARGS__...)
insertion	NEW_EXPR(type,__VA_ARGS__...)
parameters	NEW_EXPR(type,__VA_ARGS__...)
array to pointer conversion	NEW_EXPR(type,__VA_ARGS__...)
1	NEW_EXPR(type,__VA_ARGS__...)
access to array	NEW_EXPR(type,__VA_ARGS__...)
(const te_expr *)...	NEW_EXPR(type,__VA_ARGS__...)
call to power	NEW_EXPR(type,__VA_ARGS__...)
s	NEW_EXPR(type,__VA_ARGS__...)
(const te_expr *)...	NEW_EXPR(type,__VA_ARGS__...)
(reference to)	NEW_EXPR(type,__VA_ARGS__...)
(reference dereference)	NEW_EXPR(type,__VA_ARGS__...)
array to pointer conversion	NEW_EXPR(type,__VA_ARGS__...)
call to new_expr	NEW_EXPR(type,__VA_ARGS__...)
TE_FUNCTION2	NEW_EXPR(type,__VA_ARGS__...)
(int)...	NEW_EXPR(type,__VA_ARGS__...)
call to move	NEW_EXPR(type,__VA_ARGS__...)
{...}	NEW_EXPR(type,__VA_ARGS__...)
ret	NEW_EXPR(type,__VA_ARGS__...)
(const te_expr *)...	NEW_EXPR(type,__VA_ARGS__...)
call to power	NEW_EXPR(type,__VA_ARGS__...)
s	NEW_EXPR(type,__VA_ARGS__...)
(const te_expr *)...	NEW_EXPR(type,__VA_ARGS__...)
(reference to)	NEW_EXPR(type,__VA_ARGS__...)
(reference dereference)	NEW_EXPR(type,__VA_ARGS__...)
array to pointer conversion	NEW_EXPR(type,__VA_ARGS__...)
call to new_expr	NEW_EXPR(type,__VA_ARGS__...)
TE_FUNCTION1	NEW_EXPR(type,__VA_ARGS__...)
(int)...	NEW_EXPR(type,__VA_ARGS__...)
call to move	NEW_EXPR(type,__VA_ARGS__...)
{...}	NEW_EXPR(type,__VA_ARGS__...)
call to base	NEW_EXPR(type,__VA_ARGS__...)
s	NEW_EXPR(type,__VA_ARGS__...)
(const te_expr *)...	NEW_EXPR(type,__VA_ARGS__...)
(reference to)	NEW_EXPR(type,__VA_ARGS__...)
(reference dereference)	NEW_EXPR(type,__VA_ARGS__...)
array to pointer conversion	NEW_EXPR(type,__VA_ARGS__...)
call to __builtin_nanf	NAN
	NAN
array to pointer conversion	NAN
(...)	NAN
(double)...	NAN
call to __builtin_nanf	NAN
	NAN
array to pointer conversion	NAN
(...)	NAN
(double)...	NAN
call to __builtin_inff	INFINITY
(...)	INFINITY
(double)...	INFINITY
call to __builtin_nanf	NAN
	NAN
array to pointer conversion	NAN
(...)	NAN
(double)...	NAN
call to __builtin_nanf	NAN
	NAN
array to pointer conversion	NAN
(...)	NAN
(double)...	NAN
2147483647	UINT_MAX
2147483647	INT_MAX
(unsigned int)...	UINT_MAX
(unsigned int)...	INT_MAX
2	UINT_MAX
... * ...	UINT_MAX
1	UINT_MAX
... + ...	UINT_MAX
(...)	UINT_MAX
(double)...	UINT_MAX
2147483647	UINT_MAX
2147483647	INT_MAX
(unsigned int)...	UINT_MAX
(unsigned int)...	INT_MAX
2	UINT_MAX
... * ...	UINT_MAX
1	UINT_MAX
... + ...	UINT_MAX
(...)	UINT_MAX
(double)...	UINT_MAX
call to __builtin_inff	INFINITY
(...)	INFINITY
(double)...	INFINITY
9223372036854775807	ULONG_MAX
9223372036854775807	LONG_MAX
(unsigned long)...	ULONG_MAX
(unsigned long)...	LONG_MAX
2	ULONG_MAX
... * ...	ULONG_MAX
1	ULONG_MAX
... + ...	ULONG_MAX
(...)	ULONG_MAX
call to __builtin_inff	INFINITY
(...)	INFINITY
(double)...	INFINITY
call to __builtin_nanf	NAN
	NAN
array to pointer conversion	NAN
(...)	NAN
(double)...	NAN
2147483647	UINT_MAX
2147483647	INT_MAX
(unsigned int)...	UINT_MAX
(unsigned int)...	INT_MAX
2	UINT_MAX
... * ...	UINT_MAX
1	UINT_MAX
... + ...	UINT_MAX
(...)	UINT_MAX
(double)...	UINT_MAX
call to __builtin_inff	INFINITY
(...)	INFINITY
(double)...	INFINITY
9223372036854775807	ULONG_MAX
9223372036854775807	LONG_MAX
(unsigned long)...	ULONG_MAX
(unsigned long)...	LONG_MAX
2	ULONG_MAX
... * ...	ULONG_MAX
1	ULONG_MAX
... + ...	ULONG_MAX
(...)	ULONG_MAX
call to __builtin_inff	INFINITY
(...)	INFINITY
(double)...	INFINITY
2.718281828459045091	M_E
3.141592653589793116	M_PI
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
(reference dereference)	assert(expr)
* ...	assert(expr)
(int)...	assert(expr)
c	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
Failed to consume char	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"*cursor == c && ""Failed to consume char"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
346	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
lambda [](wchar_t)->auto::operator()(wchar_t)->auto	__ASSERT_FUNCTION
lambda [](wchar_t)->auto::operator()(wchar_t)->auto	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
start	assert(expr)
end	assert(expr)
... < ...	assert(expr)
String cannot be empty	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"start < end && ""String cannot be empty"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
290	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
int parse_fd(const wchar_t *, const wchar_t *)	__ASSERT_FUNCTION
int parse_fd(const wchar_t *, const wchar_t *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
48	assert(expr)
(int)...	assert(expr)
cursor	assert(expr)
* ...	assert(expr)
(int)...	assert(expr)
... <= ...	assert(expr)
cursor	assert(expr)
* ...	assert(expr)
(int)...	assert(expr)
57	assert(expr)
(int)...	assert(expr)
... <= ...	assert(expr)
... && ...	assert(expr)
Not a digit	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"L'0' <= *cursor && *cursor <= L'9' && ""Not a digit"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
293	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
2147483647	INT_MAX
(long long)...	INT_MAX
big_fd	assert(expr)
2147483647	assert(expr)
(long long)...	assert(expr)
... <= ...	assert(expr)
big_fd should be in range	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"big_fd <= INT_MAX && ""big_fd should be in range"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
297	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected end of string, quotes are not balanced	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected end of string, expecting ')'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected end of string, square brackets do not match	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected end of string, incomplete escape sequence	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Invalid input/output redirection	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Cannot use stdin (fd 0) as pipe output	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
|& is not valid. In fish, use &| to pipe both stdout and stderr.	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected ')' for unopened parenthesis	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected '[' at this location	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected '}' for unopened brace expansion	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected end of string, incomplete parameter expansion	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected '}' found, expecting ')'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
call to c_str	_(wstr)
call to wgettext	_(wstr)
Unexpected ')' found, expecting '}'	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
0	assert(expr)
(bool)...	assert(expr)
Unexpected tokenizer error	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"0 && ""Unexpected tokenizer error"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
54	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
const wchar_t *tokenizer_get_error_message(tokenizer_error_t)	__ASSERT_FUNCTION
const wchar_t *tokenizer_get_error_message(tokenizer_error_t)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
should not reach this statement	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/tokenizer.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
858	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to fish_iswgraph	iswgraph
call to fish_iswalnum	iswalnum
call to fish_iswalnum	iswalnum
call to has_value	assert(expr)
redir	assert(expr)
(const maybe_t<pipe_or_redir_t>)...	assert(expr)
Should always succeed to parse a &> or &| redirection	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"redir.has_value() && ""Should always succeed to parse a &> or &| redirection"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
571	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
maybe_t<tok_t> tokenizer_t::next()	assert(expr)
maybe_t<tok_t> tokenizer_t::next()	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to has_value	assert(expr)
pipe	assert(expr)
(const maybe_t<pipe_or_redir_t>)...	assert(expr)
call to operator->	assert(expr)
pipe	assert(expr)
is_pipe	assert(expr)
... && ...	assert(expr)
Should always succeed to parse a | pipe	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"pipe.has_value() && pipe->is_pipe && ""Should always succeed to parse a | pipe"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
598	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to has_value	assert(expr)
result	assert(expr)
(const maybe_t<tok_t>)...	assert(expr)
Should have a token	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"result.has_value() && ""Should have a token"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
650	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
start	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
Invalid start	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"start != nullptr && ""Invalid start"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
88	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
tokenizer_t::tokenizer_t(const wchar_t *, unsigned int)	__ASSERT_FUNCTION
tokenizer_t::tokenizer_t(const wchar_t *, unsigned int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	TOK_ACCEPT_UNFINISHED
(unsigned int)...	TOK_ACCEPT_UNFINISHED
2	TOK_SHOW_COMMENTS
(unsigned int)...	TOK_SHOW_COMMENTS
4	TOK_SHOW_BLANK_LINES
(unsigned int)...	TOK_SHOW_BLANK_LINES
8	TOK_CONTINUE_AFTER_ERROR
(unsigned int)...	TOK_CONTINUE_AFTER_ERROR
call to empty	assert(expr)
paran_offsets	assert(expr)
(const vector<int, allocator<int>>)...	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!paran_offsets.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
265	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
tok_t tokenizer_t::read_string()	assert(expr)
tok_t tokenizer_t::read_string()	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
brace_offsets	assert(expr)
(const vector<int, allocator<int>>)...	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!brace_offsets.empty()	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
271	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
Unknown non-regular-text mode	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/tokenizer.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
277	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
error_type	assert(expr)
none	assert(expr)
... != ...	assert(expr)
tokenizer_error_t::none passed to call_error	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"error_type != tokenizer_error_t::none && ""tokenizer_error_t::none passed to call_error"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
64	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
tok_t tokenizer_t::call_error(tokenizer_error_t, const wchar_t *, const wchar_t *, maybe_t<unsigned long>)	__ASSERT_FUNCTION
tok_t tokenizer_t::call_error(tokenizer_error_t, const wchar_t *, const wchar_t *, maybe_t<unsigned long>)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
error_loc	assert(expr)
token_start	assert(expr)
... >= ...	assert(expr)
Invalid error location	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"error_loc >= token_start && ""Invalid error location"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
65	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
token_cursor	assert(expr)
token_start	assert(expr)
... >= ...	assert(expr)
Invalid buff location	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->token_cursor >= token_start && ""Invalid buff location"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
66	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
this	assert(expr)
token_cursor	assert(expr)
error_loc	assert(expr)
call to operator*	assert(expr)
token_length	assert(expr)
(reference dereference)	assert(expr)
... + ...	assert(expr)
... < ...	assert(expr)
Unable to continue past error	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"this->token_cursor < error_loc + *token_length && ""Unable to continue past error"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
71	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
64	O_CREAT
1024	O_APPEND
1	O_WRONLY
64	O_CREAT
1	O_WRONLY
512	O_TRUNC
64	O_CREAT
128	O_EXCL
1	O_WRONLY
0	O_RDONLY
cursor	assert(expr)
* ...	assert(expr)
(int)...	assert(expr)
124	assert(expr)
(int)...	assert(expr)
... != ...	assert(expr)
|| passed as redirection, this should have been handled as 'or' by the caller	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"*cursor != L'|' && ""|| passed as redirection, this should have been handled as 'or' by the caller"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
358	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
static maybe_t<pipe_or_redir_t> pipe_or_redir_t::from_string(const wchar_t *)	assert(expr)
static maybe_t<pipe_or_redir_t> pipe_or_redir_t::from_string(const wchar_t *)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	STDOUT_FILENO
1	STDOUT_FILENO
1	STDOUT_FILENO
1	STDOUT_FILENO
0	STDIN_FILENO
2	STDERR_FILENO
1	STDOUT_FILENO
1	STDOUT_FILENO
result	assert(expr)
consumed	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... > ...	assert(expr)
Should have consumed at least one character on success	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"result.consumed > 0 && ""Should have consumed at least one character on success"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/tokenizer.cpp	assert(expr)
array to pointer conversion	assert(expr)
454	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
1	__try
0	__catch(X)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
__s	__N(msgid)
(...)	__N(msgid)
1	STDOUT_FILENO
8	CHAR_BIT
(unsigned long)...	CHAR_BIT
call to at	assert(expr)
gens	assert(expr)
topic	assert(expr)
(reference dereference)	assert(expr)
call to at	assert(expr)
current	assert(expr)
topic	assert(expr)
(reference dereference)	assert(expr)
... <= ...	assert(expr)
Incoming gen count exceeded published count	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"gens->at(topic) <= current.at(topic) && ""Incoming gen count exceeded published count"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/topic_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
186	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
enum_set_t<topic_t> topic_monitor_t::check(enum_array_t<unsigned long, topic_t> *, enum_set_t<topic_t>, bool)	assert(expr)
enum_set_t<topic_t> topic_monitor_t::check(enum_array_t<unsigned long, topic_t> *, enum_set_t<topic_t>, bool)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
4	EINTR
call to has_value	assert(expr)
pipes	assert(expr)
(const maybe_t<autoclose_pipes_t>)...	assert(expr)
Failed to make pubsub pipes	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"pipes.has_value() && ""Failed to make pubsub pipes"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/topic_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
45	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
topic_monitor_t::topic_monitor_t()	__ASSERT_FUNCTION
topic_monitor_t::topic_monitor_t()	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	DIE_ON_FAILURE(e)
(bool)...	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
call to make_fd_nonblocking	DIE_ON_FAILURE(e)
call to fd	DIE_ON_FAILURE(e)
pipes_	DIE_ON_FAILURE(e)
write	DIE_ON_FAILURE(e)
(const autoclose_fd_t)...	DIE_ON_FAILURE(e)
definition of status	DIE_ON_FAILURE(e)
declaration	DIE_ON_FAILURE(e)
if (...) ... 	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
0	DIE_ON_FAILURE(e)
... != ...	DIE_ON_FAILURE(e)
ExprStmt	DIE_ON_FAILURE(e)
call to __fish_assert	DIE_ON_FAILURE(e)
make_fd_nonblocking(pipes_.write.fd())	DIE_ON_FAILURE(e)
array to pointer conversion	DIE_ON_FAILURE(e)
/opt/src/src/topic_monitor.cpp	DIE_ON_FAILURE(e)
array to pointer conversion	DIE_ON_FAILURE(e)
50	DIE_ON_FAILURE(e)
(size_t)...	DIE_ON_FAILURE(e)
status	DIE_ON_FAILURE(e)
{ ... }	DIE_ON_FAILURE(e)
{ ... }	DIE_ON_FAILURE(e)
4096	PIPE_BUF
4096	PIPE_BUF
call to operator==	assert(expr)
gens	assert(expr)
(const array<unsigned long, 3UL>)...	assert(expr)
(reference to)	assert(expr)
input_gens	assert(expr)
(reference dereference)	assert(expr)
(const array<unsigned long, 3UL>)...	assert(expr)
(reference to)	assert(expr)
Generations should not have changed if we are the reader.	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"gens == input_gens && ""Generations should not have changed if we are the reader."""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/topic_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
146	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
enum_array_t<unsigned long, topic_t> topic_monitor_t::await_gens(const enum_array_t<unsigned long, topic_t> &)	assert(expr)
enum_array_t<unsigned long, topic_t> topic_monitor_t::await_gens(const enum_array_t<unsigned long, topic_t> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
topic_monitor	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
topic_monitor	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
TID	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to thread_id	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
local mgen	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to metagen_for	FLOG(wht,__VA_ARGS__...)
input_gens	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
read() complete, current mgen is	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to metagen_for	FLOG(wht,__VA_ARGS__...)
gens	FLOG(wht,__VA_ARGS__...)
(const generation_list_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
call to operator->	assert(expr)
data	assert(expr)
has_reader	assert(expr)
We should be the reader	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"data->has_reader && ""We should be the reader"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/topic_monitor.cpp	assert(expr)
array to pointer conversion	assert(expr)
168	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
topic_monitor	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
topic_monitor	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
TID	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to thread_id	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
local mgen	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to metagen_for	FLOG(wht,__VA_ARGS__...)
gens	FLOG(wht,__VA_ARGS__...)
* ...	FLOG(wht,__VA_ARGS__...)
(const generation_list_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
: current	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to metagen_for	FLOG(wht,__VA_ARGS__...)
current	FLOG(wht,__VA_ARGS__...)
(const generation_list_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
0	FLOG(wht,__VA_ARGS__...)
(bool)...	FLOG(wht,__VA_ARGS__...)
if (...) ... 	FLOG(wht,__VA_ARGS__...)
call to operator bool	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
topic_monitor	FLOG(wht,__VA_ARGS__...)
enabled	FLOG(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOG(wht,__VA_ARGS__...)
old_errno	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
definition of old_errno	FLOG(wht,__VA_ARGS__...)
declaration	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to log_args	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
call to acquire	FLOG(wht,__VA_ARGS__...)
g_logger	FLOG(wht,__VA_ARGS__...)
g_instance	FLOG(wht,__VA_ARGS__...)
topic_monitor	FLOG(wht,__VA_ARGS__...)
(const category_t)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
Updating topic	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
topic	FLOG(wht,__VA_ARGS__...)
static_cast<int>...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
to	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
call to at	FLOG(wht,__VA_ARGS__...)
call to operator->	FLOG(wht,__VA_ARGS__...)
data	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
current_gens	FLOG(wht,__VA_ARGS__...)
topic	FLOG(wht,__VA_ARGS__...)
(reference dereference)	FLOG(wht,__VA_ARGS__...)
(const unsigned long)...	FLOG(wht,__VA_ARGS__...)
(reference to)	FLOG(wht,__VA_ARGS__...)
ExprStmt	FLOG(wht,__VA_ARGS__...)
call to __errno_location	FLOG(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOG(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOG(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOG(wht,__VA_ARGS__...)
... = ...	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
{ ... }	FLOG(wht,__VA_ARGS__...)
__init	_GLIBCXX_MOVE_IF_20(_E)
filled	assert(expr)
maybe_t does not have a value	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"filled && ""maybe_t does not have a value"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/maybe.h	assert(expr)
array to pointer conversion	assert(expr)
33	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
T maybe_detail::maybe_impl_t<T>::acquire() [with T = autoclose_pipes_t]	__ASSERT_FUNCTION
T maybe_detail::maybe_impl_t<T>::acquire() [with T = autoclose_pipes_t]	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
variable access	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
127	(no string representation)
127	(no string representation)
127	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
... & ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
0	(no string representation)
0	(no string representation)
... == ...	(no string representation)
... == ...	(no string representation)
(...)	(no string representation)
(...)	(no string representation)
1	UTF8_IGNORE_ERROR
65279	_BOM
2	UTF8_SKIP_BOM
1	UTF8_IGNORE_ERROR
call to __fish_assert	DIE(msg)
invalid wide char	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/utf8.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
304	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
128	_NXT
192	_SEQ2
128	_NXT
128	_NXT
224	_SEQ3
128	_NXT
128	_NXT
128	_NXT
240	_SEQ4
call to __fish_assert	DIE(msg)
unexpected utff8 len	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/utf8.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
347	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
1	UTF8_IGNORE_ERROR
192	_SEQ2
224	_SEQ3
240	_SEQ4
1	UTF8_IGNORE_ERROR
1	UTF8_IGNORE_ERROR
128	_NXT
1	UTF8_IGNORE_ERROR
1	UTF8_IGNORE_ERROR
65279	_BOM
(unsigned int)...	_BOM
2	UTF8_SKIP_BOM
call to max	UTF8_WCHAR_MAX
static_cast<wchar_t>...	UTF8_WCHAR_MAX
call to max	UTF8_WCHAR_MAX
static_cast<wchar_t>...	UTF8_WCHAR_MAX
(int)...	UTF8_WCHAR_MAX
a	assert(e)
(bool)...	assert(e)
b	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
Null parameter	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"a && b && ""Null parameter"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/util.cpp	assert(e)
array to pointer conversion	assert(e)
105	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
b	assert(e)
* ...	assert(e)
(int)...	assert(e)
0	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
*b == 0	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/util.cpp	assert(e)
array to pointer conversion	assert(e)
148	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
a	assert(e)
(bool)...	assert(e)
b	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
Null parameter	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"a && b && ""Null parameter"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/util.cpp	assert(e)
array to pointer conversion	assert(e)
52	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
b	assert(e)
* ...	assert(e)
(int)...	assert(e)
0	assert(e)
... == ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
*b == 0	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/util.cpp	assert(e)
array to pointer conversion	assert(e)
99	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
_M_comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
Unknown literal	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
call to expression	_GLIBCXX_MOVE(__val)
prefix	assert(e)
npos	assert(e)
... != ...	assert(e)
Should have one non-trimmed character	assert(e)
array to pointer conversion	assert(e)
(bool)...	assert(e)
... && ...	assert(e)
(...)	assert(e)
0	assert(e)
(void)...	assert(e)
(...)	assert(e)
call to __fish_assert	assert(e)
"prefix != wcstring::npos && ""Should have one non-trimmed character"""	assert(e)
array to pointer conversion	assert(e)
/opt/src/src/wcstringutil.cpp	assert(e)
array to pointer conversion	assert(e)
65	assert(e)
(size_t)...	assert(e)
0	assert(e)
... ? ... : ...	assert(e)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
_M_comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
_M_comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
_M_comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
_M_comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Option '--%ls' doesn't allow an argument
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Option '%lc%ls' doesn't allow an argument
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Option '%ls' requires an argument
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Option '%ls' is ambiguous
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Unrecognized option '--%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Unrecognized option '%lc%ls'
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Invalid option -- %lc
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
stderr	stderr
call to c_str	_(wstr)
call to wgettext	_(wstr)
"%ls: Option requires an argument -- %lc
"	_(wstr)
array to pointer conversion	_(wstr)
(reference dereference)	_(wstr)
1	EOF
- ...	EOF
(...)	EOF
1	EOF
- ...	EOF
(...)	EOF
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
output	assert(expr)
0	assert(expr)
(completion_list_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
output != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
986	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
wildcard_expand_result_t wildcard_expand_string(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, enum_set_t<expand_flag>, const std::function<bool ()> &, std::vector<completion_t, std::allocator<completion_t>> *)	__ASSERT_FUNCTION
wildcard_expand_result_t wildcard_expand_string(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, enum_set_t<expand_flag>, const std::function<bool ()> &, std::vector<completion_t, std::allocator<completion_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to get	assert(expr)
flags	assert(expr)
(const enum_set_t<expand_flag>)...	assert(expr)
for_completions	assert(expr)
call to get	assert(expr)
flags	assert(expr)
(const enum_set_t<expand_flag>)...	assert(expr)
fuzzy_match	assert(expr)
! ...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
flags.get(expand_flag::for_completions) || !flags.get(expand_flag::fuzzy_match)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
988	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to get	assert(expr)
flags	assert(expr)
(const enum_set_t<expand_flag>)...	assert(expr)
special_for_cd	assert(expr)
(...)	assert(expr)
! ...	assert(expr)
call to get	assert(expr)
flags	assert(expr)
(const enum_set_t<expand_flag>)...	assert(expr)
directories_only	assert(expr)
(...)	assert(expr)
call to get	assert(expr)
flags	assert(expr)
(const enum_set_t<expand_flag>)...	assert(expr)
for_completions	assert(expr)
(...)	assert(expr)
... && ...	assert(expr)
call to get	assert(expr)
flags	assert(expr)
(const enum_set_t<expand_flag>)...	assert(expr)
no_descriptions	assert(expr)
(...)	assert(expr)
... && ...	assert(expr)
(...)	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!(flags.get(expand_flag::special_for_cd)) || ((flags.get(expand_flag::directories_only)) && (flags.get(expand_flag::for_completions)) && (flags.get(expand_flag::no_descriptions)))	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
995	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
lstat_buf	S_ISLNK(mode)
st_mode	S_ISLNK(mode)
(...)	S_ISLNK(mode)
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISLNK(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISLNK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISLNK(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
40960	S_ISLNK(mode)
40960	__S_IFLNK
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISLNK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISLNK(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
call to __errno_location	errno
* ...	errno
(...)	errno
stat_buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
stat_buf	S_ISREG(mode)
st_mode	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISREG(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISREG(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
32768	S_ISREG(mode)
32768	__S_IFREG
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISREG(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISREG(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISREG(mode)
(...)	__S_ISTYPE(mode,mask)
1	X_OK
(uint8_t)...	X_OK
call to c_str	COMPLETE_FILE_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_FILE_DESC
call to wgettext	_(wstr)
File	COMPLETE_FILE_DESC
array to pointer conversion	COMPLETE_FILE_DESC
(reference dereference)	COMPLETE_FILE_DESC
(reference dereference)	_(wstr)
lbuf	S_ISLNK(mode)
(reference dereference)	S_ISLNK(mode)
st_mode	S_ISLNK(mode)
(...)	S_ISLNK(mode)
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISLNK(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISLNK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISLNK(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
40960	S_ISLNK(mode)
40960	__S_IFLNK
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISLNK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISLNK(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISLNK(mode)
(...)	__S_ISTYPE(mode,mask)
buf	S_ISDIR(mode)
(reference dereference)	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
call to c_str	COMPLETE_DIRECTORY_SYMLINK_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_DIRECTORY_SYMLINK_DESC
call to wgettext	_(wstr)
Symbolic link to directory	COMPLETE_DIRECTORY_SYMLINK_DESC
array to pointer conversion	COMPLETE_DIRECTORY_SYMLINK_DESC
(reference dereference)	COMPLETE_DIRECTORY_SYMLINK_DESC
(reference dereference)	_(wstr)
64	S_IXUSR
64	__S_IEXEC
64	S_IXGRP
64	S_IXUSR
64	__S_IEXEC
3	S_IXGRP
... >> ...	S_IXGRP
(...)	S_IXGRP
64	S_IXOTH
64	S_IXGRP
64	S_IXUSR
64	__S_IEXEC
3	S_IXOTH
3	S_IXGRP
... >> ...	S_IXOTH
... >> ...	S_IXGRP
(...)	S_IXOTH
(...)	S_IXGRP
3	S_IXOTH
... >> ...	S_IXOTH
(...)	S_IXOTH
1	X_OK
(uint8_t)...	X_OK
call to c_str	COMPLETE_EXEC_LINK_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_EXEC_LINK_DESC
call to wgettext	_(wstr)
Executable link	COMPLETE_EXEC_LINK_DESC
array to pointer conversion	COMPLETE_EXEC_LINK_DESC
(reference dereference)	COMPLETE_EXEC_LINK_DESC
(reference dereference)	_(wstr)
call to c_str	COMPLETE_SYMLINK_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_SYMLINK_DESC
call to wgettext	_(wstr)
Symbolic link	COMPLETE_SYMLINK_DESC
array to pointer conversion	COMPLETE_SYMLINK_DESC
(reference dereference)	COMPLETE_SYMLINK_DESC
(reference dereference)	_(wstr)
2	ENOENT
call to c_str	COMPLETE_ROTTEN_SYMLINK_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_ROTTEN_SYMLINK_DESC
call to wgettext	_(wstr)
Rotten symbolic link	COMPLETE_ROTTEN_SYMLINK_DESC
array to pointer conversion	COMPLETE_ROTTEN_SYMLINK_DESC
(reference dereference)	COMPLETE_ROTTEN_SYMLINK_DESC
(reference dereference)	_(wstr)
40	ELOOP
call to c_str	COMPLETE_LOOP_SYMLINK_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_LOOP_SYMLINK_DESC
call to wgettext	_(wstr)
Symbolic link loop	COMPLETE_LOOP_SYMLINK_DESC
array to pointer conversion	COMPLETE_LOOP_SYMLINK_DESC
(reference dereference)	COMPLETE_LOOP_SYMLINK_DESC
(reference dereference)	_(wstr)
buf	S_ISCHR(mode)
(reference dereference)	S_ISCHR(mode)
st_mode	S_ISCHR(mode)
(...)	S_ISCHR(mode)
(...)	S_ISCHR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISCHR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISCHR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISCHR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISCHR(mode)
(...)	__S_ISTYPE(mode,mask)
8192	S_ISCHR(mode)
8192	__S_IFCHR
(...)	S_ISCHR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISCHR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISCHR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISCHR(mode)
(...)	__S_ISTYPE(mode,mask)
call to c_str	COMPLETE_CHAR_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_CHAR_DESC
call to wgettext	_(wstr)
Character device	COMPLETE_CHAR_DESC
array to pointer conversion	COMPLETE_CHAR_DESC
(reference dereference)	COMPLETE_CHAR_DESC
(reference dereference)	_(wstr)
buf	S_ISBLK(mode)
(reference dereference)	S_ISBLK(mode)
st_mode	S_ISBLK(mode)
(...)	S_ISBLK(mode)
(...)	S_ISBLK(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISBLK(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISBLK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISBLK(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISBLK(mode)
(...)	__S_ISTYPE(mode,mask)
24576	S_ISBLK(mode)
24576	__S_IFBLK
(...)	S_ISBLK(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISBLK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISBLK(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISBLK(mode)
(...)	__S_ISTYPE(mode,mask)
call to c_str	COMPLETE_BLOCK_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_BLOCK_DESC
call to wgettext	_(wstr)
Block device	COMPLETE_BLOCK_DESC
array to pointer conversion	COMPLETE_BLOCK_DESC
(reference dereference)	COMPLETE_BLOCK_DESC
(reference dereference)	_(wstr)
buf	S_ISFIFO(mode)
(reference dereference)	S_ISFIFO(mode)
st_mode	S_ISFIFO(mode)
(...)	S_ISFIFO(mode)
(...)	S_ISFIFO(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISFIFO(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISFIFO(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISFIFO(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISFIFO(mode)
(...)	__S_ISTYPE(mode,mask)
4096	S_ISFIFO(mode)
4096	__S_IFIFO
(...)	S_ISFIFO(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISFIFO(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISFIFO(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISFIFO(mode)
(...)	__S_ISTYPE(mode,mask)
call to c_str	COMPLETE_FIFO_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_FIFO_DESC
call to wgettext	_(wstr)
Fifo	COMPLETE_FIFO_DESC
array to pointer conversion	COMPLETE_FIFO_DESC
(reference dereference)	COMPLETE_FIFO_DESC
(reference dereference)	_(wstr)
buf	S_ISSOCK(mode)
(reference dereference)	S_ISSOCK(mode)
st_mode	S_ISSOCK(mode)
(...)	S_ISSOCK(mode)
(...)	S_ISSOCK(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISSOCK(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISSOCK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISSOCK(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISSOCK(mode)
(...)	__S_ISTYPE(mode,mask)
49152	S_ISSOCK(mode)
49152	__S_IFSOCK
(...)	S_ISSOCK(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISSOCK(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISSOCK(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISSOCK(mode)
(...)	__S_ISTYPE(mode,mask)
call to c_str	COMPLETE_SOCKET_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_SOCKET_DESC
call to wgettext	_(wstr)
Socket	COMPLETE_SOCKET_DESC
array to pointer conversion	COMPLETE_SOCKET_DESC
(reference dereference)	COMPLETE_SOCKET_DESC
(reference dereference)	_(wstr)
buf	S_ISDIR(mode)
(reference dereference)	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
call to c_str	COMPLETE_DIRECTORY_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_DIRECTORY_DESC
call to wgettext	_(wstr)
Directory	COMPLETE_DIRECTORY_DESC
array to pointer conversion	COMPLETE_DIRECTORY_DESC
(reference dereference)	COMPLETE_DIRECTORY_DESC
(reference dereference)	_(wstr)
64	S_IXUSR
64	__S_IEXEC
64	S_IXGRP
64	S_IXUSR
64	__S_IEXEC
3	S_IXGRP
... >> ...	S_IXGRP
(...)	S_IXGRP
64	S_IXOTH
64	S_IXGRP
64	S_IXUSR
64	__S_IEXEC
3	S_IXOTH
3	S_IXGRP
... >> ...	S_IXOTH
... >> ...	S_IXGRP
(...)	S_IXOTH
(...)	S_IXGRP
3	S_IXOTH
... >> ...	S_IXOTH
(...)	S_IXOTH
1	X_OK
(uint8_t)...	X_OK
call to c_str	COMPLETE_EXEC_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_EXEC_DESC
call to wgettext	_(wstr)
Executable	COMPLETE_EXEC_DESC
array to pointer conversion	COMPLETE_EXEC_DESC
(reference dereference)	COMPLETE_EXEC_DESC
(reference dereference)	_(wstr)
call to c_str	COMPLETE_FILE_DESC
call to c_str	_(wstr)
call to wgettext	COMPLETE_FILE_DESC
call to wgettext	_(wstr)
File	COMPLETE_FILE_DESC
array to pointer conversion	COMPLETE_FILE_DESC
(reference dereference)	COMPLETE_FILE_DESC
(reference dereference)	_(wstr)
2048	S_ISUID
2048	__S_ISUID
(unsigned int)...	S_ISUID
(unsigned int)...	__S_ISUID
256	S_IRWXU
256	__S_IREAD
128	S_IRWXU
128	__S_IWRITE
... | ...	S_IRWXU
64	S_IRWXU
64	__S_IEXEC
... | ...	S_IRWXU
(...)	S_IRWXU
(unsigned int)...	S_IRWXU
1024	S_ISGID
1024	__S_ISGID
(unsigned int)...	S_ISGID
(unsigned int)...	__S_ISGID
256	S_IRWXG
256	S_IRWXU
256	__S_IREAD
128	S_IRWXG
128	S_IRWXU
128	__S_IWRITE
... | ...	S_IRWXG
... | ...	S_IRWXU
64	S_IRWXG
64	S_IRWXU
64	__S_IEXEC
... | ...	S_IRWXG
... | ...	S_IRWXU
(...)	S_IRWXG
(...)	S_IRWXU
3	S_IRWXG
... >> ...	S_IRWXG
(...)	S_IRWXG
(unsigned int)...	S_IRWXG
256	S_IRWXO
256	S_IRWXG
256	S_IRWXU
256	__S_IREAD
128	S_IRWXO
128	S_IRWXG
128	S_IRWXU
128	__S_IWRITE
... | ...	S_IRWXO
... | ...	S_IRWXG
... | ...	S_IRWXU
64	S_IRWXO
64	S_IRWXG
64	S_IRWXU
64	__S_IEXEC
... | ...	S_IRWXO
... | ...	S_IRWXG
... | ...	S_IRWXU
(...)	S_IRWXO
(...)	S_IRWXG
(...)	S_IRWXU
3	S_IRWXO
3	S_IRWXG
... >> ...	S_IRWXO
... >> ...	S_IRWXG
(...)	S_IRWXO
(...)	S_IRWXG
3	S_IRWXO
... >> ...	S_IRWXO
(...)	S_IRWXO
(unsigned int)...	S_IRWXO
wc	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
wc != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
350	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool wildcard_complete(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const wchar_t *, const std::function<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> (const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)> &, std::vector<completion_t, std::allocator<completion_t>> *, enum_set_t<expand_flag>, int)	__ASSERT_FUNCTION
bool wildcard_complete(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const wchar_t *, const std::function<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> (const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)> &, std::vector<completion_t, std::allocator<completion_t>> *, enum_set_t<expand_flag>, int)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
str	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
str != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
221	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool wildcard_complete_internal(const wchar_t *, unsigned long, const wchar_t *, unsigned long, const wc_complete_pack_t &, int, std::vector<completion_t, std::allocator<completion_t>> *, bool)	__ASSERT_FUNCTION
bool wildcard_complete_internal(const wchar_t *, unsigned long, const wchar_t *, unsigned long, const wc_complete_pack_t &, int, std::vector<completion_t, std::allocator<completion_t>> *, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
wc	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
wc != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
222	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
full_replacement	assert(expr)
! ...	assert(expr)
wc_len	assert(expr)
str_len	assert(expr)
... <= ...	assert(expr)
... || ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!full_replacement || wc_len <= str_len	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
261	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
next_wc_char_pos	assert(expr)
0	assert(expr)
(unsigned long)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
next_wc_char_pos == 0	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
296	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __fish_assert	DIE(msg)
unreachable code reached	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/wildcard.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
338	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
call to __fish_assert	DIE(msg)
unreachable code reached	DIE(msg)
array to pointer conversion	DIE(msg)
/opt/src/src/wildcard.cpp	DIE(msg)
array to pointer conversion	DIE(msg)
342	DIE(msg)
(size_t)...	DIE(msg)
0	DIE(msg)
9	PROG_COMPLETE_SEP
str	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
str != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
87	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool wildcard_has(const wchar_t *, bool)	__ASSERT_FUNCTION
bool wildcard_has(const wchar_t *, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
str	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
str != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
67	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
bool wildcard_has_impl(const wchar_t *, unsigned long, bool)	__ASSERT_FUNCTION
bool wildcard_has_impl(const wchar_t *, unsigned long, bool)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
wc	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
wc != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
895	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void wildcard_expander_t::expand(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const wchar_t *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
void wildcard_expander_t::expand(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const wchar_t *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
segment_has_wildcards	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!segment_has_wildcards	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
913	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
next_slash	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
next_slash != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
923	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
0	F_OK
call to operator&	assert(expr)
this	assert(expr)
flags	assert(expr)
for_completions	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
this->flags & expand_flag::for_completions	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
939	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
wc_segment	assert(expr)
! ...	assert(expr)
segment_has_wildcards	assert(expr)
is_last_segment	assert(expr)
... || ...	assert(expr)
(...)	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!wc_segment.empty() && (segment_has_wildcards || is_last_segment)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
948	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
next_slash	assert(expr)
0	assert(expr)
(const wchar_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
next_slash != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
956	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to at	assert(expr)
head_any	assert(expr)
call to size	assert(expr)
head_any	assert(expr)
1	assert(expr)
(unsigned long)...	assert(expr)
... - ...	assert(expr)
(reference dereference)	assert(expr)
(int)...	assert(expr)
ANY_STRING_RECURSIVE	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
head_any.at(head_any.size() - 1) == ANY_STRING_RECURSIVE	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
969	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
any_tail	assert(expr)
0	assert(expr)
access to array	assert(expr)
(int)...	assert(expr)
ANY_STRING_RECURSIVE	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
any_tail[0] == ANY_STRING_RECURSIVE	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
970	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
resolved_completions	assert(expr)
0	assert(expr)
(completion_list_t *)...	assert(expr)
... != ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
resolved_completions != nullptr	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
717	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
wildcard_expander_t::wildcard_expander_t(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, enum_set_t<expand_flag>, std::function<bool ()>, std::vector<completion_t, std::allocator<completion_t>> *)	__ASSERT_FUNCTION
wildcard_expander_t::wildcard_expander_t(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>>, enum_set_t<expand_flag>, std::function<bool ()>, std::vector<completion_t, std::allocator<completion_t>> *)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator&	assert(expr)
this	assert(expr)
flags	assert(expr)
for_completions	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
this->flags & expand_flag::for_completions	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
651	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void wildcard_expander_t::try_add_completion_result(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
void wildcard_expander_t::try_add_completion_result(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to empty	assert(expr)
start_point	assert(expr)
(reference dereference)	assert(expr)
! ...	assert(expr)
call to at	assert(expr)
start_point	assert(expr)
(reference dereference)	assert(expr)
0	assert(expr)
(size_type)...	assert(expr)
(reference dereference)	assert(expr)
(int)...	assert(expr)
47	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!start_point.empty() && start_point.at(0) == L'/'	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
603	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> wildcard_expander_t::descend_unique_hierarchy(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> wildcard_expander_t::descend_unique_hierarchy(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to operator&	assert(expr)
this	assert(expr)
flags	assert(expr)
for_completions	assert(expr)
(...)	assert(expr)
! ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
!(this->flags & expand_flag::for_completions)	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
590	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
void wildcard_expander_t::add_expansion_result(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
void wildcard_expander_t::add_expansion_result(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
before	assert(expr)
after	assert(expr)
... <= ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
before <= after	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wildcard.cpp	assert(expr)
array to pointer conversion	assert(expr)
843	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
void wildcard_expander_t::expand_literal_intermediate_segment_with_fuzz(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, __dirstream *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const wchar_t *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
void wildcard_expander_t::expand_literal_intermediate_segment_with_fuzz(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, __dirstream *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const wchar_t *, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
0	F_OK
vector::reserve	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<unsigned int, allocator<unsigned int>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_start	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
call to __make_move_if_noexcept_iterator	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
this	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_base<unsigned int, allocator<unsigned int>> *)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_impl	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
(_Vector_impl_data)...	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
_M_finish	_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)
1	__try
0	__catch(X)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to base	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__position	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(reference dereference)	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__n	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
... - ...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__old_finish	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__first	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
call to make_move_iterator	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
__last	_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__i	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move_backward	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to operator+	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
__i	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
1	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
(difference_type)...	_GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__last	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__next	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__val	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__result	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__a	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__b	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__tmp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
__secondChild	_GLIBCXX_MOVE(__val)
1	_GLIBCXX_MOVE(__val)
(long)...	_GLIBCXX_MOVE(__val)
... - ...	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__comp	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
call to operator+	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
__parent	_GLIBCXX_MOVE(__val)
(...)	_GLIBCXX_MOVE(__val)
(const __normal_iterator<unsigned int *, vector<unsigned int, allocator<unsigned int>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__value	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
narrow_endptr	assert(expr)
(bool)...	assert(expr)
narrow_endptr should not be null	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"narrow_endptr && ""narrow_endptr should not be null"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wutil.cpp	assert(expr)
array to pointer conversion	assert(expr)
740	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
double fish_wcstod(const wchar_t *, wchar_t **)	assert(expr)
double fish_wcstod(const wchar_t *, wchar_t **)	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
... ? ... : ...	assert(expr)
(...)	assert(expr)
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
call to __errno_location	errno
* ...	errno
(...)	errno
2147483647	INT_MAX
(long)...	INT_MAX
2147483647	INT_MAX
(long)...	INT_MAX
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
2147483647	INT_MIN
2147483647	INT_MAX
- ...	INT_MIN
1	INT_MIN
... - ...	INT_MIN
(...)	INT_MIN
(long)...	INT_MIN
2147483647	INT_MIN
2147483647	INT_MAX
- ...	INT_MIN
1	INT_MIN
... - ...	INT_MIN
(...)	INT_MIN
(long)...	INT_MIN
call to __errno_location	errno
* ...	errno
(...)	errno
34	ERANGE
call to __errno_location	errno
* ...	errno
(...)	errno
(bool)...	errno
call to __errno_location	errno
* ...	errno
(...)	errno
22	EINVAL
call to __errno_location	errno
* ...	errno
(...)	errno
1	LC_ALL_MASK
1	LC_CTYPE_MASK
0	LC_ALL_MASK
0	LC_CTYPE_MASK
0	__LC_CTYPE
... << ...	LC_ALL_MASK
... << ...	LC_CTYPE_MASK
(...)	LC_ALL_MASK
(...)	LC_CTYPE_MASK
1	LC_ALL_MASK
1	LC_NUMERIC_MASK
1	LC_ALL_MASK
1	LC_NUMERIC_MASK
1	__LC_NUMERIC
... << ...	LC_ALL_MASK
... << ...	LC_NUMERIC_MASK
(...)	LC_ALL_MASK
(...)	LC_NUMERIC_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_TIME_MASK
2	LC_ALL_MASK
2	LC_TIME_MASK
2	__LC_TIME
... << ...	LC_ALL_MASK
... << ...	LC_TIME_MASK
(...)	LC_ALL_MASK
(...)	LC_TIME_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_COLLATE_MASK
3	LC_ALL_MASK
3	LC_COLLATE_MASK
3	__LC_COLLATE
... << ...	LC_ALL_MASK
... << ...	LC_COLLATE_MASK
(...)	LC_ALL_MASK
(...)	LC_COLLATE_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_MONETARY_MASK
4	LC_ALL_MASK
4	LC_MONETARY_MASK
4	__LC_MONETARY
... << ...	LC_ALL_MASK
... << ...	LC_MONETARY_MASK
(...)	LC_ALL_MASK
(...)	LC_MONETARY_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_MESSAGES_MASK
5	LC_ALL_MASK
5	LC_MESSAGES_MASK
5	__LC_MESSAGES
... << ...	LC_ALL_MASK
... << ...	LC_MESSAGES_MASK
(...)	LC_ALL_MASK
(...)	LC_MESSAGES_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_PAPER_MASK
7	LC_ALL_MASK
7	LC_PAPER_MASK
7	__LC_PAPER
... << ...	LC_ALL_MASK
... << ...	LC_PAPER_MASK
(...)	LC_ALL_MASK
(...)	LC_PAPER_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_NAME_MASK
8	LC_ALL_MASK
8	LC_NAME_MASK
8	__LC_NAME
... << ...	LC_ALL_MASK
... << ...	LC_NAME_MASK
(...)	LC_ALL_MASK
(...)	LC_NAME_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_ADDRESS_MASK
9	LC_ALL_MASK
9	LC_ADDRESS_MASK
9	__LC_ADDRESS
... << ...	LC_ALL_MASK
... << ...	LC_ADDRESS_MASK
(...)	LC_ALL_MASK
(...)	LC_ADDRESS_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_TELEPHONE_MASK
10	LC_ALL_MASK
10	LC_TELEPHONE_MASK
10	__LC_TELEPHONE
... << ...	LC_ALL_MASK
... << ...	LC_TELEPHONE_MASK
(...)	LC_ALL_MASK
(...)	LC_TELEPHONE_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_MEASUREMENT_MASK
11	LC_ALL_MASK
11	LC_MEASUREMENT_MASK
11	__LC_MEASUREMENT
... << ...	LC_ALL_MASK
... << ...	LC_MEASUREMENT_MASK
(...)	LC_ALL_MASK
(...)	LC_MEASUREMENT_MASK
... | ...	LC_ALL_MASK
1	LC_ALL_MASK
1	LC_IDENTIFICATION_MASK
12	LC_ALL_MASK
12	LC_IDENTIFICATION_MASK
12	__LC_IDENTIFICATION
... << ...	LC_ALL_MASK
... << ...	LC_IDENTIFICATION_MASK
(...)	LC_ALL_MASK
(...)	LC_IDENTIFICATION_MASK
... | ...	LC_ALL_MASK
(...)	LC_ALL_MASK
57344	PUA1_START
(unsigned int)...	PUA1_START
63744	PUA1_END
(unsigned int)...	PUA1_END
983040	PUA2_START
(unsigned int)...	PUA2_START
1048574	PUA2_END
(unsigned int)...	PUA2_END
1048576	PUA3_START
(unsigned int)...	PUA3_START
1114110	PUA3_END
(unsigned int)...	PUA3_END
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
fish	PACKAGE_NAME
array to pointer conversion	PACKAGE_NAME
fish	PACKAGE_NAME
array to pointer conversion	PACKAGE_NAME
call to __xpg_basename	basename
call to empty	assert(expr)
wd	assert(expr)
(reference dereference)	assert(expr)
! ...	assert(expr)
call to front	assert(expr)
wd	assert(expr)
(reference dereference)	assert(expr)
(reference dereference)	assert(expr)
(int)...	assert(expr)
sep	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
... && ...	assert(expr)
call to back	assert(expr)
wd	assert(expr)
(reference dereference)	assert(expr)
(reference dereference)	assert(expr)
(int)...	assert(expr)
sep	assert(expr)
(int)...	assert(expr)
... == ...	assert(expr)
... && ...	assert(expr)
Invalid working directory, it must start and end with /	assert(expr)
array to pointer conversion	assert(expr)
(bool)...	assert(expr)
... && ...	assert(expr)
static_cast<bool>...	assert(expr)
0	assert(expr)
(void)...	assert(expr)
call to __assert_fail	assert(expr)
"!wd.empty() && wd.front() == sep && wd.back() == sep && ""Invalid working directory, it must start and end with /"""	assert(expr)
array to pointer conversion	assert(expr)
/opt/src/src/wutil.cpp	assert(expr)
array to pointer conversion	assert(expr)
442	assert(expr)
(unsigned int)...	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> path_normalize_for_cd(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	__ASSERT_FUNCTION
std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> path_normalize_for_cd(const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &, const std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> &)	assert(expr)
declaration of __PRETTY_FUNCTION__	__ASSERT_FUNCTION
declaration of __PRETTY_FUNCTION__	assert(expr)
__PRETTY_FUNCTION__	__ASSERT_FUNCTION
__PRETTY_FUNCTION__	assert(expr)
array to pointer conversion	__ASSERT_FUNCTION
array to pointer conversion	assert(expr)
... ? ... : ...	assert(expr)
(...)	assert(expr)
4096	PATH_MAX
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
(statement expression)	ignore_result(x)
__x	ignore_result(x)
call to write	ignore_result(x)
2	ignore_result(x)
2	STDERR_FILENO
buff	ignore_result(x)
array to pointer conversion	ignore_result(x)
(const void *)...	ignore_result(x)
call to strlen	ignore_result(x)
buff	ignore_result(x)
array to pointer conversion	ignore_result(x)
(const char *)...	ignore_result(x)
(...)	ignore_result(x)
definition of __x	ignore_result(x)
declaration	ignore_result(x)
ExprStmt	ignore_result(x)
__x	ignore_result(x)
(void)...	ignore_result(x)
{ ... }	ignore_result(x)
(...)	ignore_result(x)
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
3	F_GETFL
2048	O_NONBLOCK
4	F_SETFL
2048	O_NONBLOCK
call to __errno_location	errno
* ...	errno
(...)	errno
3	F_GETFL
2048	O_NONBLOCK
4	F_SETFL
2048	O_NONBLOCK
call to __errno_location	errno
* ...	errno
(...)	errno
call to __errno_location	errno
* ...	errno
(...)	errno
stderr	stderr
stderr	stderr
524288	O_CLOEXEC
524288	__O_CLOEXEC
1	F_GETFD
1	FD_CLOEXEC
1	FD_CLOEXEC
2	F_SETFD
4096	PATH_MAX
0	FLOGF(wht,__VA_ARGS__...)
(bool)...	FLOGF(wht,__VA_ARGS__...)
if (...) ... 	FLOGF(wht,__VA_ARGS__...)
call to operator bool	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
enabled	FLOGF(wht,__VA_ARGS__...)
(const relaxed_atomic_t<bool>)...	FLOGF(wht,__VA_ARGS__...)
old_errno	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
* ...	errno
* ...	FLOGF(wht,__VA_ARGS__...)
(...)	errno
(...)	FLOGF(wht,__VA_ARGS__...)
definition of old_errno	FLOGF(wht,__VA_ARGS__...)
declaration	FLOGF(wht,__VA_ARGS__...)
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to log_fmt	FLOGF(wht,__VA_ARGS__...)
call to operator->	FLOGF(wht,__VA_ARGS__...)
call to acquire	FLOGF(wht,__VA_ARGS__...)
g_logger	FLOGF(wht,__VA_ARGS__...)
g_instance	FLOGF(wht,__VA_ARGS__...)
error	FLOGF(wht,__VA_ARGS__...)
(const category_t)...	FLOGF(wht,__VA_ARGS__...)
(reference to)	FLOGF(wht,__VA_ARGS__...)
call to c_str	FLOGF(wht,__VA_ARGS__...)
call to c_str	_(wstr)
call to wgettext	FLOGF(wht,__VA_ARGS__...)
call to wgettext	_(wstr)
getcwd() failed with errno %d/%s	FLOGF(wht,__VA_ARGS__...)
array to pointer conversion	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	FLOGF(wht,__VA_ARGS__...)
(reference dereference)	_(wstr)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
call to strerror	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
ExprStmt	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	FLOGF(wht,__VA_ARGS__...)
call to __errno_location	errno
* ...	FLOGF(wht,__VA_ARGS__...)
* ...	errno
(...)	FLOGF(wht,__VA_ARGS__...)
(...)	errno
old_errno	FLOGF(wht,__VA_ARGS__...)
... = ...	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
{ ... }	FLOGF(wht,__VA_ARGS__...)
DT_DIR	DT_DIR
(int)...	DT_DIR
DT_LNK	DT_LNK
(int)...	DT_LNK
DT_UNKNOWN	DT_UNKNOWN
(int)...	DT_UNKNOWN
DT_DIR	DT_DIR
(int)...	DT_DIR
DT_LNK	DT_LNK
(int)...	DT_LNK
DT_UNKNOWN	DT_UNKNOWN
(int)...	DT_UNKNOWN
buf	S_ISDIR(mode)
st_mode	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
61440	S_ISDIR(mode)
61440	__S_ISTYPE(mode,mask)
61440	__S_IFMT
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
(unsigned int)...	__S_IFMT
... & ...	S_ISDIR(mode)
... & ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
16384	S_ISDIR(mode)
16384	__S_IFDIR
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
(unsigned int)...	S_ISDIR(mode)
(unsigned int)...	__S_ISTYPE(mode,mask)
... == ...	S_ISDIR(mode)
... == ...	__S_ISTYPE(mode,mask)
(...)	S_ISDIR(mode)
(...)	__S_ISTYPE(mode,mask)
st_ctim	st_ctime
tv_sec	st_ctime
st_mtim	st_mtime
tv_sec	st_mtime
basic_string::at: __n (which is %zu) >= this->size() (which is %zu)	__N(msgid)
(...)	__N(msgid)
array to pointer conversion	__N(msgid)
call to move	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__last	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to end	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
__first	_GLIBCXX_MOVE3(_Tp,_Up,_Vp)
call to move	_GLIBCXX_MOVE(__val)
call to operator*	_GLIBCXX_MOVE(__val)
__first	_GLIBCXX_MOVE(__val)
(const __normal_iterator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>> *, vector<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>, allocator<basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>>>>)...	_GLIBCXX_MOVE(__val)
(reference dereference)	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
1	__try
0	__catch(X)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
_M_pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
call to move	_GLIBCXX_MOVE(__val)
__pred	_GLIBCXX_MOVE(__val)
(reference to)	_GLIBCXX_MOVE(__val)
