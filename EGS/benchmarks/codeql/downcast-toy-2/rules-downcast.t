*affectedbymacroexpansion(EXPR, EXPR)
*aggregate_array_init(EXPR, EXPR, INT)
*aggregate_field_init(EXPR, EXPR, EXPR)
*arraysizes(EXPR, NUM, NUM, NUM)
*attribute_arg_name(EXPR, STR)
*attribute_args(EXPR, NUM, STR, NUM, LOC)
*attribute_arg_type(EXPR, TYPE)
*attribute_arg_value(EXPR, STR)
*attributes(EXPR, NUM, STR, STR, LOC)
*autoderivation(EXPR, TYPE)
*bitfield(EXPR, NUM, NUM)
*blockscope(EXPR, LOC, EXPR)
*builtintypes(EXPR, STR, NUM, NUM, NUM, NUM)
*class_instantiation(EXPR, EXPR)
*class_template_argument(TYPE, NUM, TYPE)
*class_template_argument_value(TYPE, NUM, EXPR)
*code_block(EXPR, EXPR)
*commentbinding(COMMENT, EXPR)
*comments(COMMENT, STR, LOC)
*compgenerated(TYPE)
*condition_decl_bind(EXPR, EXPR)
*constexpr_if_else(EXPR, EXPR)
*constexpr_if_then(EXPR, EXPR)
*containerparent(EXPR, EXPR)
*decltypes(EXPR, STR, TYPE, NUM)
*derivations(EXPR, TYPE, NUM, TYPE, LOC)
*derivedtypes(EXPR, STR, NUM, TYPE)
*derspecifiers(EXPR, EXPR)
*direct_base_offsets(EXPR, NUM)
*do_body(EXPR, EXPR)
*empty_blocks(EXPR, LOC)
*enclosingfunction(EXPR, EXPR)
*enumconstants(EXPR, EXPR, NUM, TYPE, STR, LOC)
*expr_allocator(EXPR, LOC, EXPR, FORM)
*expr_ancestor(EXPR, LOC, EXPR)
*expr_cond_false(EXPR, EXPR)
*expr_cond_guard(EXPR, EXPR)
*expr_cond_true(EXPR, EXPR)
*expr_cond_two_operand(EXPR)
*expr_deallocator(EXPR, EXPR, NUM)
*expr_isload(EXPR, LOC)
*exprparents(EXPR, LOC, NUM, EXPR)
*exprs(EXPR, NUM, LOC)
*falsecond(EXPR, LOC, EXPR, LOC)
*fieldoffsets(EXPR, NUM, NUM)
*fileannotations(PATH, NUM, STR, STR)
*files(PATH, STR, STR, STR, NUM)
*fold(EXPR, STR, NUM)
*folders(PATH, STR, STR)
*for_body(EXPR, LOC, EXPR, LOC)
*for_condition(EXPR, LOC, EXPR, LOC)
*for_initialization(EXPR, LOC, EXPR, LOC)
*for_update(EXPR, LOC, EXPR, LOC)
*frienddecls(EXPR, TYPE, EXPR, LOC)
*funbind(EXPR, LOC, EXPR)
*funcattributes(EXPR, STR)
*function_defaulted(EXPR)
*function_deleted(EXPR)
*function_entry_point(EXPR, EXPR, LOC)
*function_instantiation(EXPR, EXPR)
*function_return_type(EXPR, LOC, TYPE)
*functions(EXPR, LOC, STR, NUM)
*function_template_argument(EXPR, NUM, TYPE)
*function_template_argument_value(EXPR, NUM, EXPR)
*fun_decl_empty_noexcept(EXPR)
*fun_decl_empty_throws(EXPR)
*fun_decl_noexcept(EXPR, EXPR)
*fun_decls(EXPR, LOC, EXPR, TYPE, STR, LOC)
*fun_decl_specifiers(EXPR, LOC, STR)
*fun_decl_throws(EXPR, NUM, TYPE)
*fun_decl_typedef_type(EXPR, TYPE)
*fun_def(EXPR)
*fun_implicit(EXPR)
*fun_specialized(EXPR)
*funspecifiers(EXPR, EXPR)
*globalvariables(EXPR, TYPE, STR)
*if_else(EXPR, LOC, EXPR, LOC)
*if_then(EXPR, LOC, EXPR, LOC)
*includes(EXPR, PATH)
*initialisers(EXPR, EXPR, EXPR, LOC)
*inmacroexpansion(EXPR, EXPR)
*iscall(EXPR, LOC, NUM)
*is_class_template(EXPR)
*is_complete(EXPR)
*is_function_template(EXPR)
*ishandler(EXPR)
*is_pod_class(EXPR)
*is_proxy_class_for(EXPR, EXPR)
*is_standard_layout_class(EXPR)
*is_variable_template(EXPR)
*jumpinfo(EXPR, STR, EXPR)
*lambdas(EXPR, STR, NUM)
*link_parent(EXPR, STR)
*link_targets(STR, STR)
*localvariables(EXPR, LOC, TYPE, STR)
*locations_default(LOC, PATH, NUM, NUM, NUM, NUM)
*locations_expr(LOC, PATH, NUM, NUM, NUM, NUM)
*locations_stmt(LOC, PATH, NUM, NUM, NUM, NUM)
*macro_argument_expanded(EXPR, NUM, STR)
*macro_argument_unexpanded(EXPR, NUM, STR)
*macroinvocations(EXPR, EXPR, LOC, NUM)
*macrolocationbind(EXPR, LOC)
*macroparent(EXPR, EXPR)
*mangled_name(TYPE)
*member(TYPE, LOC, NUM, TYPE, LOC)
*membervariables(EXPR, TYPE, STR)
*namequalifiers(EXPR, EXPR, EXPR, LOC)
*namespace_decls(EXPR, EXPR, LOC, LOC)
*namespace_inline(EXPR)
*namespacembrs(EXPR, EXPR)
*namespaces(EXPR, EXPR)
*new_allocated_type(EXPR, TYPE)
*new_array_allocated_type(EXPR, TYPE)
*numlines(EXPR, NUM, NUM, NUM)
*numtemplatearguments(EXPR, NUM)
*overrides(EXPR, EXPR)
*param_decl_bind(EXPR, LOC, NUM, EXPR, LOC)
*params(EXPR, LOC, EXPR, NUM, TYPE)
*pointerishsize(EXPR, NUM, NUM)
*preprocdirects(EXPR, NUM, LOC)
*preprocfalse(EXPR)
*preprocpair(EXPR, EXPR)
*preproctext(EXPR, EXPR, EXPR)
*preproctrue(EXPR)
*ptrtomembers(EXPR, TYPE, TYPE)
*purefunctions(EXPR)
*routinetypeargs(EXPR, LOC, NUM, TYPE)
*routinetypes(EXPR, LOC, TYPE)
*sizeof_bind(EXPR, TYPE)
*specialnamequalifyingelements(EXPR, STR)
*specifiers(EXPR,STR)
*static_asserts(EXPR, EXPR, STR, LOC)
*stmtattributes(EXPR, EXPR)
*stmt_decl_bind(EXPR, LOC, NUM, EXPR)
*stmt_decl_entry_bind(EXPR, LOC, NUM, EXPR)
*stmtparents(EXPR, LOC, NUM, EXPR, LOC)
*stmts(EXPR, NUM, LOC)
*successors(EXPR, LOC, EXPR, LOC)
*switch_body(EXPR, LOC, EXPR, LOC)
*switch_case(EXPR, LOC, NUM, EXPR, LOC)
*synthetic_destructor_call(EXPR, NUM, EXPR)
*truecond(EXPR, LOC, EXPR, LOC)
*typeattributes(TYPE, EXPR)
*type_decls(EXPR, TYPE, LOC)
*type_decl_top(EXPR)
*typedefbase(TYPE, TYPE)
*type_def(EXPR, STR, LOC)
*typeid_bind(EXPR, TYPE)
*type_mentions(EXPR, TYPE, LOC, KIND)
*typespecifiers(TYPE, STR)
*type_vla(TYPE, EXPR)
*unspecifiedtype(TYPE, TYPE)
*usertype_final(TYPE)
*usertypes(TYPE, STR, NUM)
*usertypesize(TYPE, NUM, NUM)
*usertype_uuid(TYPE, STR)
*using_container(EXPR, EXPR)
*usings(EXPR, EXPR, LOC)
*valuebind(EXPR)
*values(EXPR, LOC, STR, STR)
*valuetext(EXPR)
*varattributes(EXPR, EXPR)
*varbind(EXPR, EXPR)
*var_decls(EXPR, EXPR, TYPE, STR, LOC)
*var_decl_specifiers(EXPR, LOC,STR)
*var_def(EXPR)
*variable_instantiation(EXPR, EXPR)
*variable_template_argument(EXPR, NUM, TYPE)
*variable_template_argument_value(EXPR, NUM, EXPR)
*variable_vla(EXPR, EXPR)
*varspecifiers(EXPR, STR)
*virtual_base_offsets(TYPE, TYPE, NUM)
*while_body(EXPR, LOC, EXPR, LOC)
*exprconv(EXPR, LOC, EXPR, LOC)
*expr_types(EXPR, LOC, TYPE, NUM)
*exprs(EXPR, NUM, LOC)
*conversionkinds(EXPR, LOC, NUM)
*float_types(TYPE)
*integral_types(TYPE)
dangerous_downcasts(LOC, TYPE, TYPE)